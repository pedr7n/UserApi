{"version":3,"file":"AddDatabaseShardOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Sharding/AddDatabaseShardOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DatabaseTopology } from \"../Operations/index.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\n\r\ninterface AddDatabaseShardParameters {\r\n    databaseName: string;\r\n    shardNumber?: number;\r\n    dynamicNodeDistribution?: boolean;\r\n    replicationFactor?: number;\r\n    nodes?: string[];\r\n}\r\n\r\nexport class AddDatabaseShardOperation implements IServerOperation<AddDatabaseShardResult> {\r\n    private readonly _databaseName: string;\r\n    private readonly _shardNumber: number;\r\n    private readonly _nodes: string[];\r\n    private readonly _replicationFactor: number;\r\n    private readonly _dynamicNodeDistribution: boolean;\r\n\r\n    public constructor(parameters: AddDatabaseShardParameters) {\r\n        this._databaseName = parameters.databaseName;\r\n        this._shardNumber = parameters.shardNumber;\r\n        this._nodes = parameters.nodes;\r\n        this._replicationFactor = parameters.replicationFactor;\r\n        this._dynamicNodeDistribution = parameters.dynamicNodeDistribution;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<AddDatabaseShardResult> {\r\n        return new AddDatabaseShardCommand(this._databaseName, this._shardNumber, this._nodes, this._replicationFactor, this._dynamicNodeDistribution);\r\n    }\r\n}\r\n\r\nclass AddDatabaseShardCommand extends RavenCommand<AddDatabaseShardResult> implements IRaftCommand {\r\n    private readonly _databaseName: string;\r\n    private readonly _shardNumber: number;\r\n    private readonly _nodes: string[];\r\n    private readonly _replicationFactor: number;\r\n    private readonly _dynamicNodeDistribution: boolean;\r\n\r\n\r\n    constructor(databaseName: string, shardNumber: number, nodes: string[], replicationFactor: number, dynamicNodeDistribution: boolean) {\r\n        super();\r\n        this._databaseName = databaseName;\r\n        this._shardNumber = shardNumber;\r\n        this._nodes = nodes;\r\n        this._replicationFactor = replicationFactor;\r\n        this._dynamicNodeDistribution = dynamicNodeDistribution;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/admin/databases/shard?name=\" + this._urlEncode(this._databaseName);\r\n\r\n        if (!TypeUtil.isNullOrUndefined(this._shardNumber)) {\r\n           uri += \"&shardNumber=\" + this._shardNumber;\r\n        }\r\n\r\n        if (!TypeUtil.isNullOrUndefined(this._replicationFactor)) {\r\n            uri += \"&replicationFactor=\" + this._replicationFactor;\r\n        }\r\n\r\n        if (!TypeUtil.isNullOrUndefined(this._dynamicNodeDistribution)) {\r\n            uri += \"&dynamicNodeDistribution=\" + this._dynamicNodeDistribution;\r\n        }\r\n\r\n        if (this._nodes && this._nodes.length > 0) {\r\n            for (const nodeStr of this._nodes) {\r\n                uri += \"&node=\" + this._urlEncode(nodeStr);\r\n            }\r\n        }\r\n\r\n        return {\r\n            uri,\r\n            method: \"PUT\"\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport interface AddDatabaseShardResult {\r\n    name: string;\r\n    shardNumber: number;\r\n    shardTopology: DatabaseTopology;\r\n    raftCommandIndex: number;\r\n}"]}