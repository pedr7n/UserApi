{"version":3,"file":"UpdateUnusedDatabasesOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/UpdateUnusedDatabasesOperation.ts"],"names":[],"mappings":";;;AACA,+DAAyD;AACzD,wDAAuD;AACvD,gEAA0D;AAK1D,yEAAmE;AAEnE,MAAa,8BAA8B;IACtB,SAAS,CAAS;IAClB,WAAW,CAAkC;IAE9D,YAAmB,QAAgB,EAAE,iBAA2B,EAAE,WAAoB,KAAK;QACvF,IAAI,0BAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC;YACrC,IAAA,qBAAU,EAAC,0BAA0B,EAAE,yBAAyB,CAAC,CAAC;QACtE,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG;YACf,WAAW,EAAE,iBAAiB;YAC9B,QAAQ;SACX,CAAC;IACN,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,4BAA4B,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9E,CAAC;CACJ;AAvBD,wEAuBC;AAED,MAAM,4BAA6B,SAAQ,8BAAkB;IACxC,SAAS,CAAS;IAClB,WAAW,CAAkC;IAE9D,YAAmB,QAAgB,EAAE,UAA2C;QAC5E,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,mCAAmC,GAAG,IAAI,CAAC,SAAS,CAAC;QAE1E,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC5B,GAAG,IAAI,gBAAgB,CAAC;QAC5B,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE1D,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class UpdateUnusedDatabasesOperation implements IServerOperation<void> {\r\n    private readonly _database: string;\r\n    private readonly _parameters: UpdateUnusedDatabasesParameters;\r\n\r\n    public constructor(database: string, unusedDatabaseIds: string[], validate: boolean = false) {\r\n        if (StringUtil.isNullOrEmpty(database)) {\r\n            throwError(\"InvalidArgumentException\", \"Database cannot be null\");\r\n        }\r\n\r\n        this._database = database;\r\n        this._parameters = {\r\n            databaseIds: unusedDatabaseIds,\r\n            validate\r\n        };\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new UpdateUnusedDatabasesCommand(this._database, this._parameters);\r\n    }\r\n}\r\n\r\nclass UpdateUnusedDatabasesCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _database: string;\r\n    private readonly _parameters: UpdateUnusedDatabasesParameters;\r\n\r\n    public constructor(database: string, parameters: UpdateUnusedDatabasesParameters) {\r\n        super();\r\n\r\n        this._database = database;\r\n        this._parameters = parameters;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/admin/databases/unused-ids?name=\" + this._database;\r\n\r\n        if (this._parameters.validate) {\r\n            uri += \"&validate=true\";\r\n        }\r\n\r\n        const body = this._serializer.serialize(this._parameters);\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport interface UpdateUnusedDatabasesParameters {\r\n    databaseIds: string[];\r\n    validate: boolean;\r\n}\r\n"]}