{"version":3,"file":"SetDatabaseDynamicDistributionOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/SetDatabaseDynamicDistributionOperation.ts"],"names":[],"mappings":";;;AACA,+DAAyD;AACzD,wDAAuD;AAEvD,gEAA0D;AAE1D,yEAAmE;AAInE,MAAa,uCAAuC;IAC/B,yBAAyB,CAAU;IACnC,aAAa,CAAS;IAEvC,YAAmB,YAAoB,EAAE,wBAAiC;QACtE,IAAI,0BAAU,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC;YACzC,IAAA,qBAAU,EAAC,0BAA0B,EAAE,0CAA0C,CAAC,CAAC;QACvF,CAAC;QAED,IAAI,CAAC,yBAAyB,GAAG,wBAAwB,CAAC;QAC1D,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,qCAAqC,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACzG,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AApBD,0FAoBC;AAED,MAAM,qCAAsC,SAAQ,8BAAkB;IACjD,aAAa,CAAS;IACtB,yBAAyB,CAAU;IAEpD,YAAmB,YAAoB,EAAE,wBAAiC;QACtE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,yBAAyB,GAAG,wBAAwB,CAAC;IAC9D,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,kDAAkD,GAAG,IAAI,CAAC,aAAa,GAAG,WAAW,GAAG,IAAI,CAAC,yBAAyB,CAAC;QAE9I,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;SACjB,CAAA;IACL,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\n\r\nexport class SetDatabaseDynamicDistributionOperation implements IServerOperation<void> {\r\n    private readonly _allowDynamicDistribution: boolean;\r\n    private readonly _databaseName: string;\r\n\r\n    public constructor(databaseName: string, allowDynamicDistribution: boolean) {\r\n        if (StringUtil.isNullOrEmpty(databaseName)) {\r\n            throwError(\"InvalidArgumentException\", \"DatabaseName should not be null or empty\");\r\n        }\r\n\r\n        this._allowDynamicDistribution = allowDynamicDistribution;\r\n        this._databaseName = databaseName;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new SetDatabaseDynamicDistributionCommand(this._databaseName, this._allowDynamicDistribution);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nclass SetDatabaseDynamicDistributionCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _databaseName: string;\r\n    private readonly _allowDynamicDistribution: boolean;\r\n\r\n    public constructor(databaseName: string, allowDynamicDistribution: boolean) {\r\n        super();\r\n\r\n        this._databaseName = databaseName;\r\n        this._allowDynamicDistribution = allowDynamicDistribution;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/databases/dynamic-node-distribution?name=\" + this._databaseName + \"&enabled=\" + this._allowDynamicDistribution;\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\"\r\n        }\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}