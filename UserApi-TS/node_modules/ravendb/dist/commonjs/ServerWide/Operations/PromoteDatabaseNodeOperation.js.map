{"version":3,"file":"PromoteDatabaseNodeOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/PromoteDatabaseNodeOperation.ts"],"names":[],"mappings":";;;AAAA,wDAAuD;AAKvD,gEAA0D;AAI1D,yEAAmE;AACnE,6EAAuE;AACvE,2DAAqD;AAErD,MAAa,4BAA4B;IACpB,aAAa,CAAS;IACtB,KAAK,CAAS;IAI/B,YAAmB,YAAoB,EAAE,IAAY,EAAE,WAAoB;QACvE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,aAAa,GAAG,sBAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,wCAAiB,CAAC,WAAW,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;IAC3I,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,0BAA0B,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1E,CAAC;CACJ;AAlBD,oEAkBC;AAED,MAAM,0BAA2B,SAAQ,8BAA+B;IACnD,aAAa,CAAS;IACtB,KAAK,CAAS;IAE/B,YAAmB,YAAoB,EAAE,IAAY;QACjD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,IAAA,qBAAU,EAAC,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,gCAAgC,GAAG,IAAI,CAAC,aAAa,GAAG,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;QAErG,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;SACjB,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { throwError } from \"../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DatabasePutResult } from \"./index.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\nimport { ClientShardHelper } from \"../../Utility/ClientShardHelper.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\n\r\nexport class PromoteDatabaseNodeOperation implements IServerOperation<DatabasePutResult> {\r\n    private readonly _databaseName: string;\r\n    private readonly _node: string;\r\n\r\n    public constructor(databaseName: string, node: string)\r\n    public constructor(databaseName: string, node: string, shardNumber: number)\r\n    public constructor(databaseName: string, node: string, shardNumber?: number) {\r\n        this._node = node;\r\n        this._databaseName = TypeUtil.isNullOrUndefined(shardNumber) ? databaseName : ClientShardHelper.toShardName(databaseName, shardNumber);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<DatabasePutResult> {\r\n        return new PromoteDatabaseNodeCommand(this._databaseName, this._node);\r\n    }\r\n}\r\n\r\nclass PromoteDatabaseNodeCommand extends RavenCommand<DatabasePutResult> implements IRaftCommand {\r\n    private readonly _databaseName: string;\r\n    private readonly _node: string;\r\n\r\n    public constructor(databaseName: string, node: string) {\r\n        super();\r\n\r\n        if (!databaseName) {\r\n            throwError(\"InvalidArgumentException\", \"DatabaseName cannot be null\");\r\n        }\r\n\r\n        if (!node) {\r\n            throwError(\"InvalidArgumentException\", \"Node cannot be null\");\r\n        }\r\n\r\n        this._databaseName = databaseName;\r\n        this._node = node;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/databases/promote?name=\" + this._databaseName + \"&node=\" + this._node;\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\"\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}