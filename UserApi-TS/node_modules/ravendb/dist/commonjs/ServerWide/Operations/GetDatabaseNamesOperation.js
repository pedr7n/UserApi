"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetDatabaseNamesCommand = exports.GetDatabaseNamesOperation = void 0;
const RavenCommand_js_1 = require("../../Http/RavenCommand.js");
class GetDatabaseNamesOperation {
    _start;
    _pageSize;
    constructor(start, pageSize) {
        this._start = start;
        this._pageSize = pageSize;
    }
    getCommand(conventions) {
        return new GetDatabaseNamesCommand(this._start, this._pageSize);
    }
    get resultType() {
        return "CommandResult";
    }
}
exports.GetDatabaseNamesOperation = GetDatabaseNamesOperation;
class GetDatabaseNamesCommand extends RavenCommand_js_1.RavenCommand {
    _start;
    _pageSize;
    constructor(start, pageSize) {
        super();
        this._start = start;
        this._pageSize = pageSize;
    }
    get isReadRequest() {
        return true;
    }
    createRequest(node) {
        const uri = `${node.url}/databases?start=${this._start}&pageSize=${this._pageSize}&namesOnly=true`;
        return { uri };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
            return;
        }
        let body = null;
        const results = await this._defaultPipeline(_ => body = _)
            .process(bodyStream);
        const { databases } = results;
        if (!databases || !Array.isArray(databases)) {
            this._throwInvalidResponse();
        }
        this.result = databases;
        return body;
    }
}
exports.GetDatabaseNamesCommand = GetDatabaseNamesCommand;
//# sourceMappingURL=GetDatabaseNamesOperation.js.map