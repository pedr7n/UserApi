{"version":3,"file":"DeleteDatabasesOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/DeleteDatabasesOperation.ts"],"names":[],"mappings":";;;AAEA,wDAAuD;AACvD,gEAA0D;AAG1D,2DAA2D;AAG3D,yEAAmE;AACnE,2DAAqD;AACrD,6EAAuE;AAevE,MAAa,wBAAwB;IAEjC,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEgB,WAAW,CAA4B;IAExD,YAAmB,UAAqC;QACpD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAA,qBAAU,EAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,aAAa,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;YAChE,IAAA,qBAAU,EAAC,0BAA0B,EAAE,kCAAkC,CAAC,CAAC;QAC/E,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAE9B,IAAI,CAAC,sBAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;YACtD,IAAI,CAAC,WAAW,GAAG;gBACf,GAAG,UAAU;gBACb,aAAa,EAAE,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,wCAAiB,CAAC,WAAW,CAAC,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC;aAC7G,CAAC;QACN,CAAC;IACL,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,qBAAqB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACpE,CAAC;CACJ;AA9BD,4DA8BC;AAED,MAAa,qBAAsB,SAAQ,8BAAkC;IACxD,WAAW,CAAS;IAErC,YAAmB,WAAgC,EAAE,UAAqC;QACtF,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,IAAA,qBAAU,EAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAA,qBAAU,EAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC9D,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,kBAAkB,CAAC;QAC1C,OAAO;YACH,GAAG;YACH,MAAM,EAAE,QAAQ;YAChB,OAAO,EAAE,4BAAc,CAAC,MAAM,EAAE;iBAC3B,WAAW,EAAE;iBACb,KAAK,EAAE;YACZ,IAAI,EAAE,IAAI,CAAC,WAAW;SACzB,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC7E,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ;AA9CD,sDA8CC","sourcesContent":["import { Stream } from \"node:stream\";\r\nimport { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { HeadersBuilder } from \"../../Utility/HttpUtil.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { ClientShardHelper } from \"../../Utility/ClientShardHelper.js\";\r\n\r\nexport interface DeleteDatabaseResult {\r\n    raftCommandIndex: number;\r\n    pendingDeletes: string[];\r\n}\r\n\r\nexport interface DeleteDatabasesParameters {\r\n    databaseNames: string[];\r\n    hardDelete: boolean;\r\n    shardNumber?: number;\r\n    fromNodes?: string | string[];\r\n    timeToWaitForConfirmation?: number;\r\n}\r\n\r\nexport class DeleteDatabasesOperation implements IServerOperation<DeleteDatabaseResult> {\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    private readonly _parameters: DeleteDatabasesParameters;\r\n\r\n    public constructor(parameters: DeleteDatabasesParameters) {\r\n        if (!parameters) {\r\n            throwError(\"InvalidArgumentException\", \"Parameters must be provided.\");\r\n        }\r\n\r\n        if (!parameters.databaseNames || !parameters.databaseNames.length) {\r\n            throwError(\"InvalidArgumentException\", \"Database names must be provided.\");\r\n        }\r\n\r\n        this._parameters = parameters;\r\n\r\n        if (!TypeUtil.isNullOrUndefined(parameters.shardNumber)) {\r\n            this._parameters = {\r\n                ...parameters,\r\n                databaseNames: parameters.databaseNames.map(x => ClientShardHelper.toShardName(x, parameters.shardNumber))\r\n            };\r\n        }\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<DeleteDatabaseResult> {\r\n        return new DeleteDatabaseCommand(conventions, this._parameters);\r\n    }\r\n}\r\n\r\nexport class DeleteDatabaseCommand extends RavenCommand<DeleteDatabaseResult> implements IRaftCommand {\r\n    private readonly _parameters: string;\r\n\r\n    public constructor(conventions: DocumentConventions, parameters: DeleteDatabasesParameters) {\r\n        super();\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n\r\n        if (!parameters) {\r\n            throwError(\"InvalidArgumentException\", \"Parameters cannot be null.\");\r\n        }\r\n\r\n        this._parameters = this._serializer.serialize(parameters);\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/databases\";\r\n        return {\r\n            uri,\r\n            method: \"DELETE\",\r\n            headers: HeadersBuilder.create()\r\n                .typeAppJson()\r\n                .build(),\r\n            body: this._parameters,\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        this.result = await this._defaultPipeline(x => body = x).process(bodyStream);\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}