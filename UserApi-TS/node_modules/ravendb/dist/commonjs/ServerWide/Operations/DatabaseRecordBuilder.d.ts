import { IDatabaseRecordBuilderInitializer } from "./Builder/IDatabaseRecordBuilderInitializer.js";
import { IDatabaseRecordBuilder } from "./Builder/IDatabaseRecordBuilder.js";
import { IEtlConfigurationBuilder } from "./Builder/IEtlConfigurationBuilder.js";
import { IConnectionStringConfigurationBuilder } from "./Builder/IConnectionStringConfigurationBuilder.js";
import { IBackupConfigurationBuilder } from "./Builder/IBackupConfigurationBuilder.js";
import { IIntegrationConfigurationBuilder } from "./Builder/IIntegrationConfigurationBuilder.js";
import { IReplicationConfigurationBuilder } from "./Builder/IReplicationConfigurationBuilder.js";
import { IShardedDatabaseRecordBuilder } from "./Builder/IShardedDatabaseRecordBuilder.js";
import { IShardedTopologyConfigurationBuilder } from "./Builder/IShardedTopologyConfigurationBuilder.js";
import { DatabaseTopology } from "./index.js";
import { DatabaseLockMode, DatabaseRecord } from "../index.js";
import { PeriodicBackupConfiguration } from "../../Documents/Operations/Backups/PeriodicBackupConfiguration.js";
import { ElasticSearchConnectionString, OlapConnectionString, QueueConnectionString, RavenConnectionString, SqlConnectionString } from "../../Documents/Operations/Etl/ConnectionString.js";
import { RavenEtlConfiguration } from "../../Documents/Operations/Etl/RavenEtlConfiguration.js";
import { SqlEtlConfiguration } from "../../Documents/Operations/Etl/Sql/SqlEtlConfiguration.js";
import { ElasticSearchEtlConfiguration } from "../../Documents/Operations/Etl/ElasticSearch/ElasticSearchEtlConfiguration.js";
import { OlapEtlConfiguration } from "../../Documents/Operations/Etl/Olap/OlapEtlConfiguration.js";
import { QueueEtlConfiguration } from "../../Documents/Operations/Etl/Queue/QueueEtlConfiguration.js";
import { PostgreSqlConfiguration } from "./Integrations/PostgreSql/PostgreSqlConfiguration.js";
import { ExternalReplication } from "../../Documents/Replication/ExternalReplication.js";
import { PullReplicationAsSink } from "../../Documents/Operations/Replication/PullReplicationAsSink.js";
import { PullReplicationDefinition } from "../../Documents/Operations/Replication/PullReplicationDefinition.js";
import { DocumentsCompressionConfiguration } from "../DocumentsCompressionConfiguration.js";
import { SorterDefinition } from "../../Documents/Queries/Sorting/SorterDefinition.js";
import { AnalyzerDefinition } from "../../Documents/Indexes/Analysis/AnalyzerDefinition.js";
import { IndexDefinition } from "../../Documents/Indexes/IndexDefinition.js";
import { RevisionsConfiguration } from "../../Documents/Operations/RevisionsConfiguration.js";
import { ClientConfiguration } from "../../Documents/Operations/Configuration/ClientConfiguration.js";
import { StudioConfiguration } from "../../Documents/Operations/Configuration/StudioConfiguration.js";
import { RefreshConfiguration } from "../../Documents/Operations/Refresh/RefreshConfiguration.js";
import { ExpirationConfiguration } from "../../Documents/Operations/Expiration/ExpirationConfiguration.js";
import { TimeSeriesConfiguration } from "../../Documents/Operations/TimeSeries/TimeSeriesConfiguration.js";
import { OrchestratorTopology } from "../OrchestratorTopology.js";
import { IOrchestratorTopologyConfigurationBuilder } from "./Builder/IOrchestratorTopologyConfigurationBuilder.js";
import { IShardTopologyConfigurationBuilder } from "./Builder/IShardTopologyConfigurationBuilder.js";
import { ITopologyConfigurationBuilder } from "./Builder/ITopologyConfigurationBuilder.js";
export declare class DatabaseRecordBuilder implements IDatabaseRecordBuilderInitializer, IDatabaseRecordBuilder, IEtlConfigurationBuilder, IConnectionStringConfigurationBuilder, IBackupConfigurationBuilder, IIntegrationConfigurationBuilder, IReplicationConfigurationBuilder, IShardedDatabaseRecordBuilder, IShardedTopologyConfigurationBuilder {
    static create(): IDatabaseRecordBuilderInitializer;
    private _shardTopology;
    private readonly _databaseRecord;
    constructor();
    addPeriodicBackup(configuration: PeriodicBackupConfiguration): this;
    addRavenConnectionString(connectionString: RavenConnectionString): this;
    addSqlConnectionString(connectionString: SqlConnectionString): this;
    addOlapConnectionString(connectionString: OlapConnectionString): this;
    addElasticSearchConnectionString(connectionString: ElasticSearchConnectionString): this;
    addQueueConnectionString(connectionString: QueueConnectionString): this;
    regular(databaseName: string): IDatabaseRecordBuilder;
    sharded(databaseName: string, builder: (builder: IShardedTopologyConfigurationBuilder) => void): this;
    addRavenEtl(configuration: RavenEtlConfiguration): this;
    addSqlEtl(configuration: SqlEtlConfiguration): this;
    addElasticSearchEtl(configuration: ElasticSearchEtlConfiguration): this;
    addOlapEtl(configuration: OlapEtlConfiguration): this;
    addQueueEtl(configuration: QueueEtlConfiguration): this;
    configurePostgreSql(configuration: PostgreSqlConfiguration): this;
    addExternalReplication(configuration: ExternalReplication): this;
    addPullReplicationSink(configuration: PullReplicationAsSink): this;
    addPullReplicationHub(configuration: PullReplicationDefinition): this;
    encrypted(): this;
    withLockMode(lockMode: DatabaseLockMode): this;
    configureDocumentsCompression(configuration: DocumentsCompressionConfiguration): this;
    withSorters(...sorterDefinitions: SorterDefinition[]): this;
    withAnalyzers(...analyzerDefinitions: AnalyzerDefinition[]): this;
    withIndexes(...indexDefinitions: IndexDefinition[]): this;
    withSettings(settings: Record<string, string>): this;
    configureRevisions(configuration: RevisionsConfiguration): this;
    withEtls(builder: (builder: IEtlConfigurationBuilder) => void): this;
    withBackups(builder: (builder: IBackupConfigurationBuilder) => void): this;
    withReplication(builder: (builder: IReplicationConfigurationBuilder) => void): this;
    withConnectionStrings(builder: (builder: IConnectionStringConfigurationBuilder) => void): this;
    configureClient(configuration: ClientConfiguration): this;
    configureStudio(configuration: StudioConfiguration): this;
    configureRefresh(configuration: RefreshConfiguration): this;
    configureExpiration(configuration: ExpirationConfiguration): this;
    configureTimeSeries(configuration: TimeSeriesConfiguration): this;
    withIntegrations(builder: (builder: IIntegrationConfigurationBuilder) => void): this;
    toDatabaseRecord(): DatabaseRecord;
    disabled(): this;
    orchestrator(builder: (builder: IOrchestratorTopologyConfigurationBuilder) => void): this;
    orchestrator(topology: OrchestratorTopology): this;
    private _orchestratorUsingTopology;
    private _orchestratorUsingBuilder;
    private orchestratorTopologyConfigurationBuilder;
    addShard(shardNumber: number, builder: (builder: IShardTopologyConfigurationBuilder) => void): this;
    addShard(shardNumber: number, topology: DatabaseTopology): this;
    private _addShardUsingTopology;
    private _addShardUsingBuilder;
    private _shardTopologyConfigurationBuilder;
    withTopology(topology: DatabaseTopology): this;
    withTopology(builder: (builder: ITopologyConfigurationBuilder) => void): this;
    private _withTopologyUsingTopology;
    private _withTopologyUsingBuilder;
    private _topologyConfigurationBuilder;
    withReplicationFactor(replicationFactor: number): this;
    private _withName;
}
//# sourceMappingURL=DatabaseRecordBuilder.d.ts.map