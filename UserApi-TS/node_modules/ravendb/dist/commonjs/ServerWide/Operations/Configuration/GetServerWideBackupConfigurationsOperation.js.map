{"version":3,"file":"GetServerWideBackupConfigurationsOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Configuration/GetServerWideBackupConfigurationsOperation.ts"],"names":[],"mappings":";;;AACA,mEAA6D;AAO7D,MAAa,0CAA0C;IACnD,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,wCAAwC,EAAE,CAAC;IAC1D,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AARD,gGAQC;AAED,MAAM,wCAAyC,SAAQ,8BAA6C;IAChG,IAAI,aAAa;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,oDAAoD,CAAC;QAE5E,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;SACN,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAE9E,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,CAAoC,CAAC;QAEnE,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { ServerWideBackupConfiguration } from \"./ServerWideBackupConfiguration.js\";\r\n\r\nexport class GetServerWideBackupConfigurationsOperation implements IServerOperation<ServerWideBackupConfiguration[]> {\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ServerWideBackupConfiguration[]> {\r\n        return new GetServerWideBackupConfigurationsCommand();\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nclass GetServerWideBackupConfigurationsCommand extends RavenCommand<ServerWideBackupConfiguration[]> {\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/configuration/server-wide/tasks?type=Backup\";\r\n\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        let body: string = null;\r\n        const result = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n\r\n        this.result = result[\"results\"] as ServerWideBackupConfiguration[];\r\n\r\n        return body;\r\n    }\r\n}\r\n"]}