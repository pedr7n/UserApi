{"version":3,"file":"PutDatabaseSettingsOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Configuration/PutDatabaseSettingsOperation.ts"],"names":[],"mappings":";;;AACA,2DAA0D;AAC1D,mEAA6D;AAG7D,4EAAsE;AAItE,MAAa,4BAA4B;IACpB,aAAa,CAAS;IACtB,sBAAsB,CAAyB;IAEhE,YAAmB,YAAoB,EAAE,qBAA6C;QAClF,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAElC,IAAI,CAAC,qBAAqB,EAAE,CAAC;YACzB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,sCAAsC,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;IACxD,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,uCAAuC,CAAC,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACxG,CAAC;CACJ;AAzBD,oEAyBC;AAED,MAAM,uCAAwC,SAAQ,8BAAkB;IACnD,sBAAsB,CAAyB;IAC/C,aAAa,CAAS;IAEvC,YAAmB,qBAA6C,EAAE,YAAoB;QAClF,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAElC,IAAI,CAAC,qBAAqB,EAAE,CAAC;YACzB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,sCAAsC,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;IACxD,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,+BAA+B,CAAC;QAE5F,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAErE,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\n\r\nexport class PutDatabaseSettingsOperation implements IMaintenanceOperation<void> {\r\n    private readonly _databaseName: string;\r\n    private readonly _configurationSettings: Record<string, string>;\r\n\r\n    public constructor(databaseName: string, configurationSettings: Record<string, string>) {\r\n        if (!databaseName) {\r\n            throwError(\"InvalidArgumentException\", \"DatabaseName cannot be null\");\r\n        }\r\n\r\n        this._databaseName = databaseName;\r\n\r\n        if (!configurationSettings) {\r\n            throwError(\"InvalidArgumentException\", \"ConfigurationSettings cannot be null\");\r\n        }\r\n\r\n        this._configurationSettings = configurationSettings;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new PutDatabaseConfigurationSettingsCommand(this._configurationSettings, this._databaseName);\r\n    }\r\n}\r\n\r\nclass PutDatabaseConfigurationSettingsCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _configurationSettings: Record<string, string>;\r\n    private readonly _databaseName: string;\r\n\r\n    public constructor(configurationSettings: Record<string, string>, databaseName: string) {\r\n        super();\r\n\r\n        if (!databaseName) {\r\n            throwError(\"InvalidArgumentException\", \"DatabaseName cannot be null\");\r\n        }\r\n\r\n        this._databaseName = databaseName;\r\n\r\n        if (!configurationSettings) {\r\n            throwError(\"InvalidArgumentException\", \"ConfigurationSettings cannot be null\");\r\n        }\r\n\r\n        this._configurationSettings = configurationSettings;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + this._databaseName + \"/admin/configuration/settings\";\r\n\r\n        const body = this._serializer.serialize(this._configurationSettings);\r\n\r\n        return {\r\n            uri,\r\n            method: \"PUT\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n}\r\n"]}