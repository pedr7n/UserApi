{"version":3,"file":"GetServerWideBackupConfigurationOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Configuration/GetServerWideBackupConfigurationOperation.ts"],"names":[],"mappings":";;;AACA,2DAA0D;AAE1D,mEAA6D;AAO7D,MAAa,yCAAyC;IACjC,KAAK,CAAS;IAE/B,YAAmB,IAAY;QAC3B,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,IAAA,qBAAU,EAAC,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,uCAAuC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnE,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAlBD,8FAkBC;AAED,MAAM,uCAAwC,SAAQ,8BAA2C;IAC5E,KAAK,CAAS;IAE/B,YAAmB,IAAY;QAC3B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,IAAA,qBAAU,EAAC,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,0DAA0D,GAAG,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEnH,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;SACN,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO;QACX,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAA4C,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzH,MAAM,OAAO,GAAG,MAAM,CAAC,OAA0C,CAAC;QAElE,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvB,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACrB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAEzB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { ServerWideBackupConfiguration } from \"./ServerWideBackupConfiguration.js\";\r\nimport { GetServerWideBackupConfigurationsResponse } from \"../../../Documents/Operations/GetServerWideBackupConfigurationsResponse.js\";\r\n\r\nexport class GetServerWideBackupConfigurationOperation implements IServerOperation<ServerWideBackupConfiguration> {\r\n    private readonly _name: string;\r\n\r\n    public constructor(name: string) {\r\n        if (!name) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null\");\r\n        }\r\n\r\n        this._name = name;\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ServerWideBackupConfiguration> {\r\n        return new GetServerWideBackupConfigurationCommand(this._name);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nclass GetServerWideBackupConfigurationCommand extends RavenCommand<ServerWideBackupConfiguration> {\r\n    private readonly _name: string;\r\n\r\n    public constructor(name: string) {\r\n        super();\r\n        if (!name) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null\");\r\n        }\r\n\r\n        this._name = name;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/configuration/server-wide/tasks?type=Backup&name=\" + encodeURIComponent(this._name);\r\n\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n        const result = await this._defaultPipeline<GetServerWideBackupConfigurationsResponse>(_ => body = _).process(bodyStream);\r\n\r\n        const results = result.results as ServerWideBackupConfiguration[];\r\n\r\n        if (results.length === 0) {\r\n            return body;\r\n        }\r\n\r\n        if (results.length > 1) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        this.result = results[0];\r\n\r\n        return body;\r\n    }\r\n}\r\n"]}