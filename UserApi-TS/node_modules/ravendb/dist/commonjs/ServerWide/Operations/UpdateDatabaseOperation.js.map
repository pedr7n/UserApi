{"version":3,"file":"UpdateDatabaseOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/UpdateDatabaseOperation.ts"],"names":[],"mappings":";;;AACA,6EAAqE;AAMrE,wDAAuD;AAEvD,MAAa,uBAAuB;IACf,eAAe,CAAiB;IAChC,KAAK,CAAS;IACd,kBAAkB,CAAS;IAE5C,YAAmB,cAA8B,EAAE,IAAY,EAAE,iBAA0B;QACvF,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,MAAM,QAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC;QAEzC,IAAI,iBAAiB,EAAE,CAAC;YACpB,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAChD,CAAC;aAAM,CAAC;YACJ,IAAI,QAAQ,IAAI,QAAQ,CAAC,iBAAiB,GAAG,CAAC,EAAE,CAAC;gBAC7C,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC,iBAAiB,CAAC;YACzD,CAAC;iBAAM,CAAC;gBACJ,IAAA,qBAAU,EAAC,0BAA0B,EAAE,sDAAsD,CAAC,CAAC;YACnG,CAAC;QACL,CAAC;IACL,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,kDAAqB,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7G,CAAC;CACJ;AA5BD,0DA4BC","sourcesContent":["\r\nimport { CreateDatabaseCommand } from \"./CreateDatabaseOperation.js\";\r\nimport { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DatabasePutResult } from \"./index.js\";\r\nimport { DatabaseRecord } from \"../index.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\n\r\nexport class UpdateDatabaseOperation implements IServerOperation<DatabasePutResult> {\r\n    private readonly _databaseRecord: DatabaseRecord;\r\n    private readonly _etag: number;\r\n    private readonly _replicationFactor: number;\r\n\r\n    public constructor(databaseRecord: DatabaseRecord, etag: number, replicationFactor?: number) {\r\n        this._databaseRecord = databaseRecord;\r\n        this._etag = etag;\r\n        const topology = databaseRecord.topology;\r\n\r\n        if (replicationFactor) {\r\n            this._replicationFactor = replicationFactor;\r\n        } else {\r\n            if (topology && topology.replicationFactor > 0) {\r\n                this._replicationFactor = topology.replicationFactor;\r\n            } else {\r\n                throwError(\"InvalidArgumentException\", \"DatabaseRecord.Topology.ReplicationFactor is missing\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<DatabasePutResult> {\r\n        return new CreateDatabaseCommand(conventions, this._databaseRecord, this._replicationFactor, this._etag);\r\n    }\r\n}\r\n"]}