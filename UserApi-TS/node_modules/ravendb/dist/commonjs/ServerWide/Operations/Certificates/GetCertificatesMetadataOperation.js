"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetCertificatesMetadataOperation = void 0;
const StringUtil_js_1 = require("../../../Utility/StringUtil.js");
const RavenCommand_js_1 = require("../../../Http/RavenCommand.js");
class GetCertificatesMetadataOperation {
    _name;
    constructor(name) {
        this._name = name;
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(conventions) {
        return new GetCertificatesMetadataCommand(conventions, this._name);
    }
}
exports.GetCertificatesMetadataOperation = GetCertificatesMetadataOperation;
class GetCertificatesMetadataCommand extends RavenCommand_js_1.RavenCommand {
    _conventions;
    _name;
    constructor(conventions, name) {
        super();
        this._conventions = conventions;
        this._name = name;
    }
    get isReadRequest() {
        return true;
    }
    createRequest(node) {
        let uri = node.url + "/admin/certificates?metadataOnly=true";
        if (!StringUtil_js_1.StringUtil.isNullOrEmpty(this._name)) {
            uri += "&name=" + encodeURIComponent(this._name);
        }
        return {
            uri,
            method: "GET"
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            return;
        }
        let body = null;
        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);
        this.result = this._conventions.objectMapper.fromObjectLiteral(results, {
            nestedTypes: {
                "results[].notAfter": "date",
                "results[].notBefore": "date",
            }
        }).results;
        return body;
    }
}
//# sourceMappingURL=GetCertificatesMetadataOperation.js.map