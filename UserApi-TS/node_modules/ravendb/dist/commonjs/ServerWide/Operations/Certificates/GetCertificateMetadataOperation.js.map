{"version":3,"file":"GetCertificateMetadataOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Certificates/GetCertificateMetadataOperation.ts"],"names":[],"mappings":";;;AACA,2DAA0D;AAK1D,mEAA6D;AAG7D,8DAAwD;AAExD,MAAa,+BAA+B;IACvB,WAAW,CAAS;IAErC,YAAmB,UAAkB;QACjC,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAA,qBAAU,EAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,6BAA6B,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAC5E,CAAC;CACJ;AAlBD,0EAkBC;AAED,MAAM,6BAA8B,SAAQ,8BAAiC;IACxD,YAAY,CAAsB;IAClC,WAAW,CAAS;IAErC,YAAmB,WAAgC,EAAE,UAAkB;QACnE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG;cACd,iCAAiC;cACjC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC;cACpC,oBAAoB,CAAC;QAE3B,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;SACN,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO;QACX,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAqD,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEpI,MAAM,aAAa,GAA0B,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACrE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;YAErC,OAAO;gBACH,GAAG,IAAI;gBACP,QAAQ,EAAE,sBAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC;gBACtC,SAAS,EAAE,sBAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;aAC3C,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7B,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { CertificateMetadata } from \"./CertificateMetadata.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { ServerResponse } from \"../../../Types/index.js\";\r\nimport { DateUtil } from \"../../../Utility/DateUtil.js\";\r\n\r\nexport class GetCertificateMetadataOperation implements IServerOperation<CertificateMetadata> {\r\n    private readonly _thumbprint: string;\r\n\r\n    public constructor(thumbprint: string) {\r\n        if (!thumbprint) {\r\n            throwError(\"InvalidArgumentException\", \"Thumbprint cannot be null\");\r\n        }\r\n\r\n        this._thumbprint = thumbprint;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<CertificateMetadata> {\r\n        return new GetCertificateMetadataCommand(conventions, this._thumbprint);\r\n    }\r\n}\r\n\r\nclass GetCertificateMetadataCommand extends RavenCommand<CertificateMetadata> {\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _thumbprint: string;\r\n\r\n    public constructor(conventions: DocumentConventions, thumbprint: string) {\r\n        super();\r\n        this._conventions = conventions;\r\n        this._thumbprint = thumbprint;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url\r\n            + \"/admin/certificates?thumbprint=\"\r\n            + encodeURIComponent(this._thumbprint)\r\n            + \"&metadataOnly=true\";\r\n\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n        const response = await this._defaultPipeline<ServerResponse<{ results: CertificateMetadata[] }>>(_ => body = _).process(bodyStream);\r\n\r\n        const resultsMapped: CertificateMetadata[] = response.results.map(cert => {\r\n            const { notAfter, notBefore } = cert;\r\n\r\n            return {\r\n                ...cert,\r\n                notAfter: DateUtil.utc.parse(notAfter),\r\n                notBefore: DateUtil.utc.parse(notBefore)\r\n            }\r\n        })\r\n\r\n        if (resultsMapped.length !== 1) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        this.result = resultsMapped[0];\r\n        return body;\r\n    }\r\n}\r\n"]}