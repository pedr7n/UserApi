{"version":3,"file":"GetCertificatesOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Certificates/GetCertificatesOperation.ts"],"names":[],"mappings":";;;AAIA,mEAA6D;AAI7D,MAAa,wBAAwB;IAEhB,MAAM,CAAS;IACf,SAAS,CAAS;IAEnC,YAAmB,KAAa,EAAE,QAAgB;QAC9C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,sBAAsB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAChF,CAAC;CAEJ;AAlBD,4DAkBC;AAED,MAAM,sBAAuB,SAAQ,8BAAqC;IACrD,MAAM,CAAS;IACf,SAAS,CAAS;IAClB,YAAY,CAAsB;IAEnD,YAAmB,KAAa,EAAE,QAAgB,EAAE,WAAgC;QAChF,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,4BAA4B,GAAG,IAAI,CAAC,MAAM,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;QAElG,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;SAChB,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/E,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,iBAAiB,CAAuC,OAAO,EAAE;YAC1G,WAAW,EAAE;gBACT,oBAAoB,EAAE,MAAM;gBAC5B,qBAAqB,EAAE,MAAM;aAChC;SACJ,CAAC,CAAC,OAAO,CAAC;QACX,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { CertificateDefinition } from \"./CertificateDefinition.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class GetCertificatesOperation implements IServerOperation<CertificateDefinition[]> {\r\n\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n\r\n    public constructor(start: number, pageSize: number) {\r\n        this._start = start;\r\n        this._pageSize = pageSize;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<CertificateDefinition[]> {\r\n        return new GetCertificatesCommand(this._start, this._pageSize, conventions);\r\n    }\r\n\r\n}\r\n\r\nclass GetCertificatesCommand extends RavenCommand<CertificateDefinition[]> {\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(start: number, pageSize: number, conventions: DocumentConventions) {\r\n        super();\r\n        this._start = start;\r\n        this._pageSize = pageSize;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/certificates?start=\" + this._start + \"&pageSize=\" + this._pageSize;\r\n\r\n        return {\r\n            uri,\r\n            method: \"GET\"\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return null;\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n        this.result = this._conventions.objectMapper.fromObjectLiteral<{ results: CertificateDefinition[] }>(results, {\r\n            nestedTypes: {\r\n                \"results[].notAfter\": \"date\",\r\n                \"results[].notBefore\": \"date\"\r\n            }\r\n        }).results;\r\n        return body;\r\n    }\r\n}\r\n"]}