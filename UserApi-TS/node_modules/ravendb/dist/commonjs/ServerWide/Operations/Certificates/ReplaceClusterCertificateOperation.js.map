{"version":3,"file":"ReplaceClusterCertificateOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Certificates/ReplaceClusterCertificateOperation.ts"],"names":[],"mappings":";;;AAAA,2DAA0D;AAI1D,mEAA6D;AAG7D,4EAAsE;AAEtE,MAAa,kCAAkC;IAC1B,UAAU,CAAS;IACnB,mBAAmB,CAAU;IAE9C,YAAmB,SAAiB,EAAE,kBAA2B;QAC7D,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,IAAA,qBAAU,EAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;IAClD,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,gCAAgC,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAC3F,CAAC;CACJ;AApBD,gFAoBC;AAED,MAAM,gCAAiC,SAAQ,8BAAkB;IAC5C,UAAU,CAAS;IACnB,mBAAmB,CAAU;IAE9C,YAAmB,SAAiB,EAAE,kBAA2B;QAC7D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,IAAA,qBAAU,EAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;IAClD,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,8DAA8D,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAEtI,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;YACpC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;SAClD,CAAC,CAAC;QAEH,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { throwError } from \"../../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class ReplaceClusterCertificateOperation implements IServerOperation<void> {\r\n    private readonly _certBytes: Buffer;\r\n    private readonly _replaceImmediately: boolean;\r\n\r\n    public constructor(certBytes: Buffer, replaceImmediately: boolean) {\r\n        if (!certBytes) {\r\n            throwError(\"InvalidArgumentException\", \"CertBytes cannot be null\");\r\n        }\r\n\r\n        this._certBytes = certBytes;\r\n        this._replaceImmediately = replaceImmediately;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new ReplaceClusterCertificateCommand(this._certBytes, this._replaceImmediately);\r\n    }\r\n}\r\n\r\nclass ReplaceClusterCertificateCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _certBytes: Buffer;\r\n    private readonly _replaceImmediately: boolean;\r\n\r\n    public constructor(certBytes: Buffer, replaceImmediately: boolean) {\r\n        super();\r\n        if (!certBytes) {\r\n            throwError(\"InvalidArgumentException\", \"CertBytes cannot be null\");\r\n        }\r\n\r\n        this._certBytes = certBytes;\r\n        this._replaceImmediately = replaceImmediately;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/certificates/replace-cluster-cert?replaceImmediately=\" + (this._replaceImmediately ? \"true\" : \"false\");\r\n\r\n        const body = this._serializer.serialize({\r\n            Certificate: this._certBytes.toString(\"base64\")\r\n        });\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}