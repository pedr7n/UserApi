{"version":3,"file":"ReorderDatabaseMembersOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/ReorderDatabaseMembersOperation.ts"],"names":[],"mappings":";;;AAAA,wDAAuD;AAIvD,gEAA0D;AAG1D,yEAAmE;AAEnE,MAAa,+BAA+B;IACvB,SAAS,CAAS;IAClB,WAAW,CAAmC;IAE/D,YAAmB,QAAgB,EAAE,KAAe,EAAE,QAAiB,KAAK;QACxE,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/B,IAAA,qBAAU,EAAC,0BAA0B,EAAE,gCAAgC,CAAC,CAAC;QAC7E,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG;YACf,YAAY,EAAE,KAAK;YACnB,KAAK;SACR,CAAA;IACL,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,6BAA6B,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/E,CAAC;CACJ;AAvBD,0EAuBC;AAED,MAAM,6BAA8B,SAAQ,8BAAkB;IACzC,aAAa,CAAS;IACtB,WAAW,CAAmC;IAE/D,YAAmB,YAAoB,EAAE,UAA4C;QACjF,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,gCAAgC,GAAG,IAAI,CAAC,aAAa,CAAC;QAE7E,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE1D,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { throwError } from \"../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class ReorderDatabaseMembersOperation implements IServerOperation<void> {\r\n    private readonly _database: string;\r\n    private readonly _parameters: ReorderDatabaseMembersParameters;\r\n\r\n    public constructor(database: string, order: string[], fixed: boolean = false) {\r\n        if (!order || order.length === 0) {\r\n            throwError(\"InvalidArgumentException\", \"Order list must contain values\");\r\n        }\r\n\r\n        this._database = database;\r\n        this._parameters = {\r\n            membersOrder: order,\r\n            fixed\r\n        }\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new ReorderDatabaseMembersCommand(this._database, this._parameters);\r\n    }\r\n}\r\n\r\nclass ReorderDatabaseMembersCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _databaseName: string;\r\n    private readonly _parameters: ReorderDatabaseMembersParameters;\r\n\r\n    public constructor(databaseName: string, parameters: ReorderDatabaseMembersParameters) {\r\n        super();\r\n\r\n        if (!databaseName) {\r\n            throwError(\"InvalidArgumentException\", \"Database cannot be empty\");\r\n        }\r\n\r\n        this._databaseName = databaseName;\r\n        this._parameters = parameters;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/databases/reorder?name=\" + this._databaseName;\r\n\r\n        const body = this._serializer.serialize(this._parameters);\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport interface ReorderDatabaseMembersParameters {\r\n    membersOrder: string[];\r\n    fixed: boolean;\r\n}\r\n"]}