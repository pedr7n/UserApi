{"version":3,"file":"PutServerWideSortersOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Sorters/PutServerWideSortersOperation.ts"],"names":[],"mappings":";;;AAEA,2DAA0D;AAE1D,mEAA6D;AAE7D,4EAAsE;AAItE,MAAa,6BAA6B;IACrB,aAAa,CAAqB;IAEnD,YAAmB,GAAG,YAAgC;QAClD,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7C,IAAA,qBAAU,EAAC,0BAA0B,EAAE,sCAAsC,CAAC,CAAA;QAClF,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,2BAA2B,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5E,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAlBD,sEAkBC;AAED,MAAM,2BAA4B,SAAQ,8BAAkB;IAChD,aAAa,CAAQ;IAG7B,YAAY,WAAgC,EAAE,YAAgC;QAC1E,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,IAAA,qBAAU,EAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YACtC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBACV,IAAA,qBAAU,EAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;YACzE,CAAC;YACD,OAAO,WAAW,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,gBAAgB,CAAC;QAExC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE;aAC1B,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QAE3B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;YACpC,OAAO,EAAE,IAAI,CAAC,aAAa;SAC9B,CAAC,CAAC;QAEH,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;YACb,OAAO;YACP,IAAI;SACP,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { SorterDefinition } from \"../../../Documents/Queries/Sorting/SorterDefinition.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\n\r\nexport class PutServerWideSortersOperation implements IServerOperation<void> {\r\n    private readonly _sortersToAdd: SorterDefinition[];\r\n\r\n    public constructor(...sortersToAdd: SorterDefinition[]) {\r\n        if (!sortersToAdd || sortersToAdd.length === 0) {\r\n            throwError(\"InvalidArgumentException\", \"SortersToAdd cannot be null or empty\")\r\n        }\r\n\r\n        this._sortersToAdd = sortersToAdd;\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new PutServerWideSortersCommand(conventions, this._sortersToAdd);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nclass PutServerWideSortersCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private _sortersToAdd: any[];\r\n\r\n\r\n    constructor(conventions: DocumentConventions, sortersToAdd: SorterDefinition[]) {\r\n        super();\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n\r\n        if (!sortersToAdd) {\r\n            throwError(\"InvalidArgumentException\", \"SortersToAdd cannot be null\");\r\n        }\r\n\r\n        this._sortersToAdd = sortersToAdd.map(x => {\r\n            if (!x.name) {\r\n                throwError(\"InvalidArgumentException\", \"Sorter name cannot be null\");\r\n            }\r\n            return conventions.objectMapper.toObjectLiteral(x);\r\n        });\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/sorters\";\r\n\r\n        const headers = this._headers()\r\n            .typeAppJson().build();\r\n\r\n        const body = this._serializer.serialize({\r\n            Sorters: this._sortersToAdd\r\n        });\r\n\r\n        return {\r\n            uri,\r\n            method: \"PUT\",\r\n            headers,\r\n            body\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}"]}