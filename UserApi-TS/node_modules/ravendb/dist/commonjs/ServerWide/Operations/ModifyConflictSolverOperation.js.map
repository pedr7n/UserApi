{"version":3,"file":"ModifyConflictSolverOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/ModifyConflictSolverOperation.ts"],"names":[],"mappings":";;;AAGA,wDAAuD;AAIvD,gEAA0D;AAG1D,yEAAmE;AAGnE,MAAa,6BAA6B;IACrB,SAAS,CAAS;IAClB,mBAAmB,CAAiC;IACpD,gBAAgB,CAAU;IAK3C,YAAmB,QAAgB,EAAE,kBAAmD,EAAE,eAAyB;QAC/G,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;QAC9C,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;IAC5C,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,2BAA2B,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACzH,CAAC;CACJ;AArBD,sEAqBC;AAED,MAAM,2BAA4B,SAAQ,8BAAgC;IACrD,SAAS,CAAS;IAClB,YAAY,CAAsB;IAClC,mBAAmB,CAAiC;IACpD,gBAAgB,CAAU;IAE3C,YAAmB,WAAgC,EAAE,QAAgB,EAAE,kBAAkD,EAAE,eAAwB;QAC/I,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,IAAA,qBAAU,EAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,IAAA,qBAAU,EAAC,0BAA0B,EAAE,yBAAyB,CAAC,CAAC;QACtE,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;QAC9C,IAAI,CAAC,gBAAgB,GAAG,eAAe,IAAI,KAAK,CAAC;IACrD,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,2CAA2C,GAAG,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAExG,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;YACpC,eAAe,EAAE,IAAI,CAAC,gBAAgB;YACtC,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;SAChD,CAAC,CAAC;QAEH,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\n\r\nimport { ConflictSolver, ScriptResolver } from \"../index.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\n\r\n\r\nexport class ModifyConflictSolverOperation implements IServerOperation<ModifySolverResult> {\r\n    private readonly _database: string;\r\n    private readonly _collectionByScript: Record<string, ScriptResolver>;\r\n    private readonly _resolveToLatest: boolean;\r\n\r\n    public constructor(database: string)\r\n    public constructor(database: string, collectionByScript: Record<string, ScriptResolver>)\r\n    public constructor(database: string, collectionByScript: Record<string, ScriptResolver>, resolveToLatest: boolean)\r\n    public constructor(database: string, collectionByScript?: Record<string, ScriptResolver>, resolveToLatest?: boolean) {\r\n        this._database = database;\r\n        this._collectionByScript = collectionByScript;\r\n        this._resolveToLatest = resolveToLatest;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ModifySolverResult> {\r\n        return new ModifyConflictSolverCommand(conventions, this._database, this._collectionByScript, this._resolveToLatest);\r\n    }\r\n}\r\n\r\nclass ModifyConflictSolverCommand extends RavenCommand<ModifySolverResult> implements IRaftCommand {\r\n    private readonly _database: string;\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _collectionByScript: Record<string, ScriptResolver>;\r\n    private readonly _resolveToLatest: boolean;\r\n\r\n    public constructor(conventions: DocumentConventions, database: string, collectionByScript: Record<string, ScriptResolver>, resolveToLatest: boolean) {\r\n        super();\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n\r\n        if (!database) {\r\n            throwError(\"InvalidArgumentException\", \"Database cannot be null\");\r\n        }\r\n\r\n        this._database = database;\r\n        this._conventions = conventions;\r\n        this._collectionByScript = collectionByScript;\r\n        this._resolveToLatest = resolveToLatest || false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/replication/conflicts/solver?name=\" + encodeURIComponent(this._database);\r\n\r\n        const body = this._serializer.serialize({\r\n            ResolveToLatest: this._resolveToLatest,\r\n            ResolveByCollection: this._collectionByScript\r\n        });\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport interface ModifySolverResult {\r\n    key: string;\r\n    raftCommandIndex: number;\r\n    solver: ConflictSolver;\r\n}"]}