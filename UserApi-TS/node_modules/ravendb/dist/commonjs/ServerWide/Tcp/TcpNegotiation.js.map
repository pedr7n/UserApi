{"version":3,"file":"TcpNegotiation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Tcp/TcpNegotiation.ts"],"names":[],"mappings":"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","sourcesContent":["import { getLogger } from \"../../Utility/LogUtil.js\";\r\nimport { Socket } from \"node:net\";\r\nimport { TcpNegotiateParameters } from \"./TcpNegotiateParameters.js\";\r\nimport {\r\n    DROP_BASE_LINE,\r\n    getSupportedFeaturesFor, operationVersionSupported,\r\n    SupportedFeatures\r\n} from \"./TcpConnectionHeaderMessage.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\n\r\nconst log = getLogger({ module: \"ClusterRequestExecutor\" });\r\n\r\nexport const OUT_OF_RANGE_STATUS = -1;\r\nconst DROP_STATUS = -2;\r\n\r\nexport class TcpNegotiation {\r\n    public static async negotiateProtocolVersion(\r\n        socket: Socket, parameters: TcpNegotiateParameters): Promise<SupportedFeatures> {\r\n        log.info(\"Start negotiation for \" + parameters.operation\r\n            + \" operation with \" + parameters.destinationNodeTag || parameters.destinationUrl);\r\n\r\n        let currentRef: number = parameters.version;\r\n        let dataCompression: boolean = false;\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n            await this._sendTcpVersionInfo(socket, parameters, currentRef);\r\n            const response = await parameters.readResponseAndGetVersionCallback(parameters.destinationUrl, socket);\r\n            const version = response.version;\r\n\r\n            dataCompression = response.licensedFeatures ? response.licensedFeatures.dataCompression : false;\r\n\r\n            log.info(\"Read response from \" + (parameters.sourceNodeTag || parameters.destinationUrl)\r\n                + \" for \" + parameters.operation + \", received version is '\" + version + \"'\");\r\n\r\n            if (version === currentRef) {\r\n                break;\r\n            }\r\n\r\n            //In this case we usually throw internally but for completeness we better handle it\r\n            if (version === DROP_STATUS) {\r\n                return getSupportedFeaturesFor(\"Drop\", DROP_BASE_LINE);\r\n            }\r\n\r\n            const status = operationVersionSupported(parameters.operation, version, x => currentRef = x);\r\n            if (status === \"OutOfRange\") {\r\n                await this._sendTcpVersionInfo(socket, parameters, OUT_OF_RANGE_STATUS);\r\n                throwError(\"InvalidArgumentException\",\r\n                    \"The \" + parameters.operation + \" version \" + parameters.version\r\n                    + \" is out of range, our lowest version is \" + currentRef);\r\n            }\r\n\r\n            log.info(\"The version \" + version + \" is \" + status + \", will try to agree on '\"\r\n             + currentRef + \"' for \" + parameters.operation + \" with \"\r\n                + (parameters.destinationNodeTag || parameters.destinationUrl));\r\n        }\r\n\r\n        log.info((parameters.destinationNodeTag || parameters.destinationUrl)\r\n            + \" agreed on version \" + currentRef + \" for \" + parameters.operation);\r\n        const supportedFeatures = getSupportedFeaturesFor(parameters.operation, currentRef);\r\n\r\n        const supportedFeaturesCopy = new SupportedFeatures(supportedFeatures);\r\n        supportedFeaturesCopy.dataCompression = dataCompression;\r\n\r\n        return supportedFeaturesCopy;\r\n    }\r\n\r\n    private static async _sendTcpVersionInfo(socket: Socket,\r\n                                             parameters: TcpNegotiateParameters,\r\n                                             currentVersion: number): Promise<void> {\r\n        log.info(\"Send negotiation for \" + parameters.operation + \" in version \" + currentVersion);\r\n\r\n        const payload = JSON.stringify({\r\n            DatabaseName: parameters.database,\r\n            Operation: parameters.operation,\r\n            SourceNodeTag: parameters.sourceNodeTag,\r\n            OperationVersion: currentVersion,\r\n            AuthorizeInfo: parameters.authorizeInfo || null,\r\n            LicensedFeatures: parameters.licensedFeatures || null\r\n        }, null, 0);\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            socket.write(payload, (err) => {\r\n                err ? reject(err) : resolve();\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}