{"version":3,"file":"GetClusterTopologyCommand.js","sourceRoot":"","sources":["../../../../src/ServerWide/Commands/GetClusterTopologyCommand.ts"],"names":[],"mappings":";;;AAAA,gEAA0D;AAC1D,sEAAgE;AAKhE,+DAAyD;AAEzD,MAAa,uBAAuB;IACzB,MAAM,CAAS;IACf,OAAO,CAAS;IAChB,UAAU,CAAiB;IAC3B,QAAQ,CAAkB;IAC1B,IAAI,CAAS;IACb,MAAM,CAA0B;CAC1C;AAPD,0DAOC;AAED,MAAa,yBAA0B,SAAQ,8BAAqC;IAE/D,SAAS,CAAS;IAEnC,YAAmB,QAAiB;QAChC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,mBAAmB,CAAC;QAEzC,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,GAAG,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,CAAC;QAED,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAA2B;aACzD,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAC1B,aAAa,EAAE;aACf,mBAAmB,CAAC;YACjB,gBAAgB,EAAE,0BAAU,CAAC,KAAK;YAClC,WAAW,EAAE,CAAC,sDAAsD,CAAC;SACxE,CAAC;aACD,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzB,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,oCAAe,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QACzE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAiC,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA5CD,8DA4CC","sourcesContent":["import { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ClusterTopology } from \"../../Http/ClusterTopology.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { ServerNode, ServerNodeRole } from \"../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { NodeStatus } from \"../../Http/RequestExecutor.js\";\r\nimport { ObjectUtil } from \"../../Utility/ObjectUtil.js\";\r\n\r\nexport class ClusterTopologyResponse {\r\n    public leader: string;\r\n    public nodeTag: string;\r\n    public serverRole: ServerNodeRole;\r\n    public topology: ClusterTopology;\r\n    public etag: number;\r\n    public status: Map<string, NodeStatus>;\r\n}\r\n\r\nexport class GetClusterTopologyCommand extends RavenCommand<ClusterTopologyResponse> {\r\n\r\n    private readonly _debugTag: string;\r\n\r\n    public constructor(debugTag?: string) {\r\n        super();\r\n\r\n        this._debugTag = debugTag;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/cluster/topology\";\r\n\r\n        if (this._debugTag) {\r\n            uri += \"?\" + this._debugTag;\r\n        }\r\n\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const result = await this._pipeline<ClusterTopologyResponse>()\r\n            .collectBody(b => body = b)\r\n            .parseJsonSync()\r\n            .objectKeysTransform({\r\n                defaultTransform: ObjectUtil.camel,\r\n                ignorePaths: [/topology\\.(members|promotables|watchers|allNodes)\\./i]\r\n            })\r\n            .process(bodyStream);\r\n\r\n        const clusterTpl = Object.assign(new ClusterTopology(), result.topology);\r\n        this.result = Object.assign(result as ClusterTopologyResponse, { topology: clusterTpl });\r\n        this.result.status = new Map(Object.entries(this.result.status));\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return true;\r\n    }\r\n}\r\n"]}