{"version":3,"file":"MultiDatabaseHiLoIdGenerator.js","sourceRoot":"","sources":["../../../../src/Documents/Identity/MultiDatabaseHiLoIdGenerator.ts"],"names":[],"mappings":";;;AAAA,+EAAyE;AAGzE,kEAA4D;AAE5D,2DAAqD;AAGrD,MAAa,4BAA4B;IAElB,MAAM,CAAgB;IAEjC,WAAW,GAA2C,EAAE,CAAC;IAEjE,YAAY,KAAoB;QAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAEM,kBAAkB,CAAC,QAAgB,EAAE,MAAc;QACtD,OAAO,IAAI,CAAC,wBAAwB,CAAC,wCAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;aAC9F,kBAAkB,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAES,wBAAwB,CAAC,QAAgB;QAC/C,IAAI,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YAClC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,IAAI,sDAAwB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACrF,CAAC;QAED,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAEM,KAAK,CAAC,iBAAiB;QAC1B,KAAK,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YAC9D,MAAM,SAAS,CAAC,iBAAiB,EAAE,CAAC;QACxC,CAAC;IACL,CAAC;IAKM,iBAAiB,CAAC,QAAgB,EAAE,MAA8C;QACrF,IAAI,sBAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,sBAAQ,CAAC,sBAAsB,CAAC,MAAM,CAAC,EAAE,CAAC;YAC1C,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;YAChF,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QAC7D,CAAC;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;QAClF,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IAC7D,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,QAAgB,EAAE,cAAsB;QACrE,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAEtD,IAAI,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YAClC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,IAAI,sDAAwB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACrF,CAAC;QAED,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;IACxE,CAAC;CACJ;AAvDD,oEAuDC","sourcesContent":["import { MultiTypeHiLoIdGenerator } from \"./MultiTypeHiLoIdGenerator.js\";\r\nimport { DocumentStore } from \"../DocumentStore.js\";\r\nimport { IRavenObject } from \"../../Types/IRavenObject.js\";\r\nimport { DocumentStoreBase } from \"../DocumentStoreBase.js\";\r\nimport { IHiLoIdGenerator } from \"./IHiLoIdGenerator.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { ObjectTypeDescriptor } from \"../../Types/index.js\";\r\n\r\nexport class MultiDatabaseHiLoIdGenerator implements IHiLoIdGenerator {\r\n\r\n    protected readonly _store: DocumentStore;\r\n\r\n    private _generators: IRavenObject<MultiTypeHiLoIdGenerator> = {};\r\n\r\n    constructor(store: DocumentStore) {\r\n        this._store = store;\r\n    }\r\n\r\n    public generateDocumentId(database: string, entity: object): Promise<string> {\r\n        return this._getGeneratorForDatabase(DocumentStoreBase.getEffectiveDatabase(this._store, database))\r\n            .generateDocumentId(entity);\r\n    }\r\n\r\n    protected _getGeneratorForDatabase(database: string): MultiTypeHiLoIdGenerator {\r\n        if (!(database in this._generators)) {\r\n            this._generators[database] = new MultiTypeHiLoIdGenerator(this._store, database);\r\n        }\r\n\r\n        return this._generators[database];\r\n    }\r\n\r\n    public async returnUnusedRange() {\r\n        for (const [key, generator] of Object.entries(this._generators)) {\r\n            await generator.returnUnusedRange();\r\n        }\r\n    }\r\n\r\n    public generateNextIdFor(database: string, collectionName: string): Promise<number>;\r\n    public generateNextIdFor(database: string, documentType: ObjectTypeDescriptor<any>): Promise<number>;\r\n    public generateNextIdFor(database: string, entity: object): Promise<number>;\r\n    public generateNextIdFor(database: string, target: string | ObjectTypeDescriptor | object): Promise<number> {\r\n        if (TypeUtil.isString(target)) {\r\n            return this._generateNextIdFor(database, target);\r\n        }\r\n\r\n        if (TypeUtil.isObjectTypeDescriptor(target)) {\r\n            const collectionName = this._store.conventions.getCollectionNameForType(target);\r\n            return this._generateNextIdFor(database, collectionName);\r\n        }\r\n\r\n        const collectionName = this._store.conventions.getCollectionNameForEntity(target);\r\n        return this._generateNextIdFor(database, collectionName);\r\n    }\r\n\r\n    private async _generateNextIdFor(database: string, collectionName: string): Promise<number> {\r\n        database = this._store.getEffectiveDatabase(database);\r\n\r\n        if (!(database in this._generators)) {\r\n            this._generators[database] = new MultiTypeHiLoIdGenerator(this._store, database);\r\n        }\r\n\r\n        return this._generators[database].generateNextIdFor(collectionName);\r\n    }\r\n}\r\n"]}