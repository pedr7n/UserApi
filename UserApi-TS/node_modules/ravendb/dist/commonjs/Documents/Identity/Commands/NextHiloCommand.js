"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NextHiloCommand = void 0;
const DateUtil_js_1 = require("../../../Utility/DateUtil.js");
const RavenCommand_js_1 = require("../../../Http/RavenCommand.js");
const index_js_1 = require("../../../Exceptions/index.js");
class NextHiloCommand extends RavenCommand_js_1.RavenCommand {
    _tag;
    _lastBatchSize;
    _lastRangeAt;
    _identityPartsSeparator;
    _lastRangeMax;
    _conventions;
    constructor(tag, lastBatchSize, lastRangeAt, identityPartsSeparator, lastRangeMax, conventions) {
        super();
        if (!tag) {
            (0, index_js_1.throwError)("InvalidArgumentException", "tag cannot be null.");
        }
        if (!identityPartsSeparator) {
            (0, index_js_1.throwError)("InvalidArgumentException", "identityPartsSeparator cannot be null.");
        }
        this._tag = tag;
        this._lastBatchSize = lastBatchSize;
        this._lastRangeAt = lastRangeAt;
        this._identityPartsSeparator = identityPartsSeparator;
        this._lastRangeMax = lastRangeMax;
        this._conventions = conventions;
    }
    createRequest(node) {
        const lastRangeAt = this._lastRangeAt
            ? DateUtil_js_1.DateUtil.utc.stringify(this._lastRangeAt)
            : "";
        let uri = `${node.url}/databases/${node.database}/hilo/next?`;
        uri += "lastBatchSize=" + this._lastBatchSize;
        if (this._tag) {
            uri += "&tag=" + this._urlEncode(this._tag);
        }
        uri += "&lastRangeAt=" + this._urlEncode(lastRangeAt);
        if (this._identityPartsSeparator) {
            uri += "&identityPartsSeparator=" + this._identityPartsSeparator;
        }
        if (this._lastRangeMax) {
            uri += "&lastMax=" + this._lastRangeMax;
        }
        return { uri };
    }
    async setResponseAsync(bodyStream, fromCache) {
        let body = null;
        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);
        this.result = this._reviveResultTypes(results, this._conventions, {
            nestedTypes: {
                lastRangeAt: "date"
            }
        });
        return body;
    }
    get isReadRequest() {
        return true;
    }
}
exports.NextHiloCommand = NextHiloCommand;
//# sourceMappingURL=NextHiloCommand.js.map