{"version":3,"file":"MultiTypeHiLoIdGenerator.js","sourceRoot":"","sources":["../../../../src/Documents/Identity/MultiTypeHiLoIdGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import { HiloIdGenerator } from \"./HiloIdGenerator.js\";\r\nimport { acquireSemaphore } from \"../../Utility/SemaphoreUtil.js\";\r\nimport { IRavenObject } from \"../../Types/IRavenObject.js\";\r\nimport { DocumentStore } from \"../DocumentStore.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { Semaphore } from \"../../Utility/Semaphore.js\";\r\n\r\nexport class MultiTypeHiLoIdGenerator {\r\n    private readonly _sem: Semaphore;\r\n    protected _idGeneratorsByTag: IRavenObject<HiloIdGenerator> = {};\r\n    protected readonly _store: DocumentStore;\r\n    protected readonly _dbName: string;\r\n    protected readonly _conventions: DocumentConventions;\r\n    private _identityPartsSeparator: string;\r\n\r\n    constructor(store: DocumentStore, dbName?: string) {\r\n        this._store = store;\r\n        this._dbName = dbName;\r\n        this._sem = new Semaphore();\r\n        this._conventions = store.getRequestExecutor(dbName).conventions;\r\n        this._identityPartsSeparator = this._conventions.identityPartsSeparator;\r\n    }\r\n\r\n    public async generateDocumentId(entity: object, documentType?: string): Promise<string> {\r\n        const identityPartsSeparator = this._conventions.identityPartsSeparator;\r\n        if (this._identityPartsSeparator !== identityPartsSeparator) {\r\n            await this._maybeRefresh(identityPartsSeparator);\r\n        }\r\n        const entityType = this._conventions.getJsTypeByDocumentType(documentType);\r\n        const typeTagName: string = entityType\r\n            ? this._conventions.getCollectionNameForType(entityType)\r\n            : this._conventions.getCollectionNameForEntity(entity);\r\n\r\n        if (!typeTagName) {\r\n            return null;\r\n        }\r\n\r\n        const tag = this._conventions.transformClassCollectionNameToDocumentIdPrefix(typeTagName);\r\n\r\n        let value = this._idGeneratorsByTag[tag];\r\n        if (value) {\r\n            return await value.generateDocumentId(entity);\r\n        }\r\n\r\n        const acquiredSem = acquireSemaphore(this._sem);\r\n\r\n        await acquiredSem.promise;\r\n        try {\r\n            value = this._idGeneratorsByTag[tag];\r\n\r\n            if (value) {\r\n                return value.generateDocumentId(entity);\r\n            }\r\n\r\n            value = this._createGeneratorFor(tag);\r\n            this._idGeneratorsByTag[tag] = value;\r\n        } finally {\r\n            acquiredSem.dispose();\r\n        }\r\n\r\n        return value.generateDocumentId(entity);\r\n    }\r\n\r\n    private async _maybeRefresh(identityPartsSeparator: string) {\r\n        let idGenerators: HiloIdGenerator[];\r\n\r\n        const acquiredSem = acquireSemaphore(this._sem);\r\n        try {\r\n            await acquiredSem.promise;\r\n\r\n            if (this._identityPartsSeparator === identityPartsSeparator) {\r\n                return;\r\n            }\r\n\r\n            idGenerators = Object.entries(this._idGeneratorsByTag).map(x => x[1] as HiloIdGenerator);\r\n\r\n            this._idGeneratorsByTag = {};\r\n            this._identityPartsSeparator = identityPartsSeparator;\r\n\r\n        } finally {\r\n            acquiredSem.dispose();\r\n        }\r\n\r\n        if (idGenerators) {\r\n            try {\r\n                await MultiTypeHiLoIdGenerator._returnUnusedRange(idGenerators);\r\n            } catch {\r\n                // ignore\r\n            }\r\n        }\r\n    }\r\n\r\n    public async generateNextIdFor(collectionName: string): Promise<number> {\r\n        let value = this._idGeneratorsByTag[collectionName];\r\n        if (value) {\r\n            const nextId = await value.getNextId();\r\n            return nextId.id;\r\n        }\r\n\r\n        const acquiredSem = acquireSemaphore(this._sem);\r\n        try {\r\n            await acquiredSem.promise;\r\n\r\n            value = this._idGeneratorsByTag[collectionName];\r\n            if (value) {\r\n                const nextId = await value.getNextId();\r\n                return nextId.id;\r\n            }\r\n\r\n            value = this._createGeneratorFor(collectionName);\r\n            this._idGeneratorsByTag[collectionName] = value;\r\n\r\n        } finally {\r\n            acquiredSem.dispose();\r\n        }\r\n\r\n        const nextId = await value.getNextId();\r\n        return nextId.id;\r\n\r\n    }\r\n\r\n    protected _createGeneratorFor(tag: string): HiloIdGenerator {\r\n        return new HiloIdGenerator(tag, this._store, this._dbName, this._identityPartsSeparator);\r\n    }\r\n\r\n    public async returnUnusedRange() {\r\n        await MultiTypeHiLoIdGenerator._returnUnusedRange(Object.values<HiloIdGenerator>(this._idGeneratorsByTag));\r\n    }\r\n\r\n    private static async _returnUnusedRange(generators: HiloIdGenerator[]) {\r\n        for (const generator of generators) {\r\n            await generator.returnUnusedRange();\r\n        }\r\n    }\r\n}\r\n"]}