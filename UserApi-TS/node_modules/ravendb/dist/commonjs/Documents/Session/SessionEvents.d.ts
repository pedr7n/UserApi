import { InMemoryDocumentSessionOperations } from "./InMemoryDocumentSessionOperations.js";
import { IMetadataDictionary } from "./IMetadataDictionary.js";
import { IDocumentQueryCustomization } from "./IDocumentQueryCustomization.js";
import { DocumentType } from "../DocumentAbstractions.js";
import { Reference } from "../../Utility/Reference.js";
import { Topology } from "../../Http/Topology.js";
import { HttpRequestParameters, HttpResponse } from "../../Primitives/Http.js";
import { SessionDisposingEventArgs } from "../IDocumentStore.js";
import { BulkInsertProgress } from "../Operations/BulkInsertProgress.js";
export interface SessionEventsEmitter {
    on(eventName: "beforeStore", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): this;
    on(eventName: "afterSaveChanges", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): this;
    on(eventName: "beforeQuery", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): this;
    on(eventName: "beforeDelete", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): this;
    on(eventName: "sessionDisposing", eventHandler: (eventArgs: SessionDisposingEventArgs) => void): this;
    on(eventName: "beforeConversionToDocument", eventHandler: (eventArgs: BeforeConversionToDocumentEventArgs) => void): this;
    on(eventName: "afterConversionToDocument", eventHandler: (eventArgs: AfterConversionToDocumentEventArgs) => void): this;
    on(eventName: "beforeConversionToEntity", eventHandler: (eventArgs: BeforeConversionToEntityEventArgs) => void): this;
    on(eventName: "afterConversionToEntity", eventHandler: (eventArgs: AfterConversionToEntityEventArgs) => void): this;
    removeListener(eventName: "beforeStore", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): this;
    removeListener(eventName: "afterSaveChanges", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): this;
    removeListener(eventName: "beforeQuery", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): this;
    removeListener(eventName: "beforeDelete", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): this;
    removeListener(eventName: "sessionDisposing", eventHandler: (eventArgs: SessionDisposingEventArgs) => void): this;
    removeListener(eventName: "beforeConversionToDocument", eventHandler: (eventArgs: BeforeConversionToDocumentEventArgs) => void): this;
    removeListener(eventName: "afterConversionToDocument", eventHandler: (eventArgs: AfterConversionToDocumentEventArgs) => void): this;
    removeListener(eventName: "beforeConversionToEntity", eventHandler: (eventArgs: BeforeConversionToEntityEventArgs) => void): this;
    removeListener(eventName: "afterConversionToEntity", eventHandler: (eventArgs: AfterConversionToEntityEventArgs) => void): this;
    emit(eventName: "beforeStore", eventArgs: SessionBeforeStoreEventArgs): void;
    emit(eventName: "afterSaveChanges", eventArgs: SessionAfterSaveChangesEventArgs): void;
    emit(eventName: "beforeQuery", eventArgs: SessionBeforeQueryEventArgs): void;
    emit(eventName: "beforeDelete", eventArgs: SessionBeforeDeleteEventArgs): void;
    emit(eventName: "sessionDisposing", eventArgs: SessionDisposingEventArgs): void;
    emit(eventName: "beforeConversionToDocument", eventArgs: BeforeConversionToDocumentEventArgs): void;
    emit(eventName: "afterConversionToDocument", eventArgs: AfterConversionToDocumentEventArgs): void;
    emit(eventName: "beforeConversionToEntity", eventArgs: BeforeConversionToEntityEventArgs): void;
    emit(eventName: "afterConversionToEntity", eventArgs: AfterConversionToEntityEventArgs): void;
}
export declare class SessionBeforeStoreEventArgs {
    private _documentMetadata;
    private readonly _session;
    private readonly _documentId;
    private readonly _entity;
    constructor(session: InMemoryDocumentSessionOperations, documentId: string, entity: object);
    get session(): InMemoryDocumentSessionOperations;
    get documentId(): string;
    getEntity(): object;
    isMetadataAccessed(): boolean;
    getDocumentMetadata(): IMetadataDictionary;
}
export declare class SessionBeforeQueryEventArgs {
    session: InMemoryDocumentSessionOperations;
    queryCustomization: IDocumentQueryCustomization;
    constructor(session: InMemoryDocumentSessionOperations, queryCustomization: IDocumentQueryCustomization);
}
export declare class SessionBeforeDeleteEventArgs {
    private _documentMetadata;
    private readonly _session;
    private readonly _documentId;
    private readonly _entity;
    constructor(session: InMemoryDocumentSessionOperations, documentId: string, entity: object);
    get session(): InMemoryDocumentSessionOperations;
    get documentId(): string;
    get entity(): object;
    get documentMetadata(): IMetadataDictionary;
}
export declare class SessionAfterSaveChangesEventArgs {
    private _documentMetadata;
    session: InMemoryDocumentSessionOperations;
    documentId: string;
    entity: object;
    constructor(session: InMemoryDocumentSessionOperations, documentId: string, entity: object);
    get documentMetadata(): IMetadataDictionary;
}
export declare class BulkInsertOnProgressEventArgs {
    readonly progress: BulkInsertProgress;
    constructor(progress: BulkInsertProgress);
}
export declare class AfterConversionToDocumentEventArgs {
    readonly id: string;
    readonly entity: object;
    readonly document: Reference<object>;
    readonly session: InMemoryDocumentSessionOperations;
    constructor(session: InMemoryDocumentSessionOperations, id: string, entity: object, document: Reference<object>);
}
export declare class AfterConversionToEntityEventArgs {
    readonly id: string;
    readonly document: object;
    readonly entity: object;
    readonly session: InMemoryDocumentSessionOperations;
    constructor(session: InMemoryDocumentSessionOperations, id: string, document: object, entity: object);
}
export declare class BeforeConversionToDocumentEventArgs {
    readonly id: string;
    readonly entity: object;
    readonly session: InMemoryDocumentSessionOperations;
    constructor(session: InMemoryDocumentSessionOperations, id: string, entity: object);
}
export declare class BeforeConversionToEntityEventArgs {
    readonly id: string;
    readonly type: DocumentType;
    document: object;
    readonly session: InMemoryDocumentSessionOperations;
    constructor(session: InMemoryDocumentSessionOperations, id: string, type: DocumentType, document: object);
}
export declare class FailedRequestEventArgs {
    readonly database: string;
    readonly url: string;
    readonly error: Error;
    readonly request: HttpRequestParameters;
    readonly response: HttpResponse;
    constructor(database: string, url: string, error: Error, request: HttpRequestParameters, response: HttpResponse);
}
export declare class TopologyUpdatedEventArgs {
    topology: Topology;
    reason: string;
    constructor(topology: Topology, reason: string);
}
export declare class BeforeRequestEventArgs {
    readonly database: string;
    readonly url: string;
    readonly request: HttpRequestParameters;
    readonly attemptNumber: number;
    constructor(database: string, url: string, request: HttpRequestParameters, attemptNumber: number);
}
export declare class SucceedRequestEventArgs {
    database: string;
    url: string;
    response: HttpResponse;
    request: HttpRequestParameters;
    attemptNumber: number;
    constructor(database: string, url: string, response: HttpResponse, request: HttpRequestParameters, attemptNumber: number);
}
//# sourceMappingURL=SessionEvents.d.ts.map