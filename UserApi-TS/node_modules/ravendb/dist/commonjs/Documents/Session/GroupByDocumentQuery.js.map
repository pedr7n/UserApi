{"version":3,"file":"GroupByDocumentQuery.js","sourceRoot":"","sources":["../../../../src/Documents/Session/GroupByDocumentQuery.ts"],"names":[],"mappings":";;;AAGA,wDAAuD;AAGvD,kEAA4D;AAE5D,MAAa,oBAAoB;IAEZ,MAAM,CAAmB;IAE1C,YAAmB,KAAuB;QACtC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAKM,SAAS,CAAC,YAAoB,IAAI,EAAE,gBAAwB,IAAI;QACnE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,SAAS,CAAC,KAAmB,EAAE,GAAG,MAAsB;QAC3D,IAAI,CAAC,KAAK,EAAE,CAAC;YACT,IAAA,qBAAU,EAAC,0BAA0B,EAAE,sBAAsB,CAAC,CAAC;QACnE,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;QAE9D,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;QAED,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC;QAC1D,CAAC;QAED,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAIM,WAAW,CAAC,gBAAwB,OAAO;QAC9C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,MAAM,CAAC,OAA6C,EAAE,KAAc;QACvE,KAAK,KAAK,MAAM,CAAC,gBAAgB,CAAC;QAClC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC;YACD,MAAM,CAAC,GAAG,IAAI,gCAAa,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAChD,OAAO,CAAC,CAAC,CAAC,CAAC;QACf,CAAC;gBAAS,CAAC;YACP,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AArDD,oDAqDC","sourcesContent":["import { IGroupByDocumentQuery } from \"./IGroupByDocumentQuery.js\";\r\nimport { DocumentQuery } from \"./DocumentQuery.js\";\r\nimport { GroupByField } from \"./GroupByField.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { IDocumentQuery } from \"./IDocumentQuery.js\";\r\nimport { IFilterFactory } from \"../Queries/IFilterFactory.js\";\r\nimport { FilterFactory } from \"../Queries/FilterFactory.js\";\r\n\r\nexport class GroupByDocumentQuery<T extends object> implements IGroupByDocumentQuery<T> {\r\n\r\n    private readonly _query: DocumentQuery<T>;\r\n\r\n    public constructor(query: DocumentQuery<T>) {\r\n        this._query = query;\r\n    }\r\n\r\n    public selectKey(): IGroupByDocumentQuery<T>;\r\n    public selectKey(fieldName: string): IGroupByDocumentQuery<T>;\r\n    public selectKey(fieldName: string, projectedName: string): IGroupByDocumentQuery<T>;\r\n    public selectKey(fieldName: string = null, projectedName: string = null): IGroupByDocumentQuery<T> {\r\n        this._query._groupByKey(fieldName, projectedName);\r\n        return this;\r\n    }\r\n\r\n    public selectSum(field: GroupByField, ...fields: GroupByField[]): IDocumentQuery<T> {\r\n        if (!field) {\r\n            throwError(\"InvalidArgumentException\", \"Field cannot be null\");\r\n        }\r\n\r\n        this._query._groupBySum(field.fieldName, field.projectedName);\r\n\r\n        if (!fields || !fields.length) {\r\n            return this._query;\r\n        }\r\n\r\n        for (const f of fields) {\r\n            this._query._groupBySum(f.fieldName, f.projectedName);\r\n        }\r\n\r\n        return this._query;\r\n    }\r\n\r\n    public selectCount(): IDocumentQuery<T>;\r\n    public selectCount(projectedName: string): IDocumentQuery<T>;\r\n    public selectCount(projectedName: string = \"count\"): IDocumentQuery<T> {\r\n        this._query._groupByCount(projectedName);\r\n        return this._query;\r\n    }\r\n\r\n    public filter(builder: (factory: IFilterFactory<T>) => void, limit?: number): IGroupByDocumentQuery<T> {\r\n        limit ??= Number.MAX_SAFE_INTEGER;\r\n        const mode = this._query.setFilterMode(true);\r\n        try {\r\n            const f = new FilterFactory(this._query, limit);\r\n            builder(f);\r\n        } finally {\r\n            mode.dispose();\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n"]}