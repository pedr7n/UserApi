{"version":3,"file":"IDocumentQueryBase.js","sourceRoot":"","sources":["../../../../src/Documents/Session/IDocumentQueryBase.ts"],"names":[],"mappings":"","sourcesContent":["import { IQueryBase } from \"./IQueryBase.js\";\r\nimport { IFilterDocumentQueryBase } from \"./IFilterDocumentQueryBase.js\";\r\nimport { OrderingType } from \"./OrderingType.js\";\r\nimport { DynamicSpatialField } from \"../Queries/Spatial/DynamicSpatialField.js\";\r\nimport { ValueCallback } from \"../../Types/Callbacks.js\";\r\nimport { Explanations } from \"../Queries/Explanation/Explanations.js\";\r\nimport { ExplanationOptions } from \"../Queries/Explanation/ExplanationOptions.js\";\r\nimport { Highlightings } from \"../Queries/Highlighting/Hightlightings.js\";\r\nimport { HighlightingParameters } from \"../Queries/Highlighting/HighlightingParameters.js\";\r\nimport { IQueryIncludeBuilder } from \"./Loaders/IQueryIncludeBuilder.js\";\r\nimport { Field } from \"../../Types/index.js\";\r\nimport { IPagingDocumentQueryBase } from \"./IPagingDocumentQueryBase.js\";\r\n\r\nexport interface IDocumentQueryBase<T extends object, TSelf extends IDocumentQueryBase<T, TSelf>>\r\n    extends IQueryBase<T, TSelf>, IFilterDocumentQueryBase<T, TSelf>, IPagingDocumentQueryBase<T, TSelf> {\r\n\r\n    /**\r\n     * Adds an ordering for a specific field to the query\r\n     */\r\n    addOrder(fieldName: Field<T>, descending: boolean): TSelf;\r\n\r\n    /**\r\n     * Adds an ordering for a specific field to the query\r\n     */\r\n    addOrder(fieldName: Field<T>, descending: boolean, ordering: OrderingType): TSelf;\r\n\r\n    //TBD TSelf AddOrder<TValue>(Expression<Func<T, TValue>> propertySelector,\r\n    //      bool descending = false, OrderingType ordering = OrderingType.String);\r\n\r\n    /**\r\n     * Specifies a boost weight to the previous where clause.\r\n     * The higher the boost factor, the more relevant the term will be.\r\n     *\r\n     * boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight\r\n     *\r\n     * http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term\r\n     */\r\n    boost(boost: number): TSelf;\r\n\r\n    /**\r\n     * Apply distinct operation to this query\r\n     */\r\n    distinct(): TSelf;\r\n\r\n    /**\r\n     * Explanations gives context how document was matched by query and provide information about how the score was calculated.\r\n     */\r\n    includeExplanations(explanations: ValueCallback<Explanations>): TSelf;\r\n\r\n    /**\r\n     * Explanations gives context how document was matched by query and provide information about how the score was calculated.\r\n     */\r\n    includeExplanations(options: ExplanationOptions, explanations: ValueCallback<Explanations>): TSelf;\r\n\r\n    /**\r\n     * Specifies a fuzziness factor to the single word term in the last where clause\r\n     * 0.0 to 1.0 where 1.0 means closer match\r\n     *\r\n     * https://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Fuzzy%20Searches\r\n     */\r\n    fuzzy(fuzzy: number): TSelf;\r\n\r\n    highlight(parameters: HighlightingParameters, hightlightingsCallback: ValueCallback<Highlightings>): TSelf;\r\n\r\n    // TBD expr TSelf Highlight(Expression<Func<T, object>> path, int fragmentLength, int fragmentCount, out Highlightings highlightings);\r\n    // TBD expr TSelf Highlight(Expression<Func<T, object>> path, int fragmentLength, int fragmentCount, HighlightingOptions options, out Highlightings highlightings);\r\n\r\n    /**\r\n     * Includes the specified path in the query, loading the document specified in that path\r\n     */\r\n    include(path: string): TSelf;\r\n\r\n    include(includes: (includeBuilder: IQueryIncludeBuilder) => void): TSelf;\r\n\r\n    //TBD TSelf Include(Expression<Func<T, object>> path);\r\n\r\n    /**\r\n     * Partition the query so we can intersect different parts of the query\r\n     *  across different index entries.\r\n     */\r\n    intersect(): TSelf;\r\n\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The field is the name of the field to sort, defaulting to sorting by ascending.\r\n     */\r\n    orderBy(field: string): TSelf;\r\n\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The field is the name of the field to sort, defaulting to sorting by ascending.\r\n     */\r\n    orderBy(field: string, ordering: OrderingType): TSelf;\r\n\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The field is the name of the field to sort using sorterName\r\n     */\r\n    orderBy(field: string, options: { sorterName: string }): TSelf;\r\n\r\n    //TBD TSelf OrderBy<TValue>(params Expression<Func<T, TValue>>[] propertySelectors);\r\n\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The field is the name of the field to sort, defaulting to sorting by descending.\r\n     */\r\n    orderByDescending(field: string): TSelf;\r\n\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The field is the name of the field to sort, defaulting to sorting by descending.\r\n     */\r\n    orderByDescending(field: string, ordering: OrderingType): TSelf;\r\n\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The field is the name of the field to sort using sorterName\r\n     */\r\n    orderByDescending(field: string, options: { sorterName: string }): TSelf;\r\n\r\n    //TBD TSelf OrderByDescending<TValue>(params Expression<Func<T, TValue>>[] propertySelectors);\r\n\r\n    /**\r\n     * Adds an ordering by score for a specific field to the query\r\n     */\r\n    orderByScore(): TSelf;\r\n\r\n    /**\r\n     * Adds an ordering by score for a specific field to the query\r\n     */\r\n    orderByScoreDescending(): TSelf;\r\n\r\n    /**\r\n     * Specifies a proximity distance for the phrase in the last search clause\r\n     * https://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Proximity%20Searches\r\n     */\r\n    proximity(proximity: number): TSelf;\r\n\r\n    /**\r\n     * Order the search results randomly\r\n     */\r\n    randomOrdering(): TSelf;\r\n\r\n    /**\r\n     * Order the search results randomly using the specified seed\r\n     * this is useful if you want to have repeatable random queries\r\n     */\r\n    randomOrdering(seed: string): TSelf;\r\n\r\n    // TBD 4.1 TSelf customSortUsing(String typeName, boolean descending);\r\n\r\n    /**\r\n     * Sorts the query results by distance.\r\n     */\r\n    orderByDistance(field: DynamicSpatialField, latitude: number, longitude: number): TSelf;\r\n\r\n    //TBD TSelf OrderByDistance(Func<DynamicSpatialFieldFactory<T>, DynamicSpatialField> field,\r\n    //     double latitude, double longitude);\r\n\r\n    orderByDistance(field: DynamicSpatialField, shapeWkt: string): TSelf;\r\n\r\n    //TBD TSelf OrderByDistance(Func<DynamicSpatialFieldFactory<T>, DynamicSpatialField> field, string shapeWkt);\r\n\r\n    //TBD TSelf OrderByDistance<TValue>(Expression<Func<T, TValue>> propertySelector,\r\n    //     double latitude, double longitude);\r\n\r\n    /**\r\n     * Sorts the query results by distance.\r\n     */\r\n    orderByDistance(fieldName: Field<T>, latitude: number, longitude: number): TSelf;\r\n\r\n    /**\r\n     * Sorts the query results by distance.\r\n     */\r\n    orderByDistance(fieldName: Field<T>, latitude: number, longitude: number, roundFactor: number): TSelf;\r\n\r\n    //TBD TSelf OrderByDistance<TValue>(Expression<Func<T, TValue>> propertySelector, string shapeWkt);\r\n\r\n    /**\r\n     * Sorts the query results by distance.\r\n     */\r\n    orderByDistance(fieldName: Field<T>, shapeWkt: string): TSelf;\r\n\r\n    /**\r\n     * Sorts the query results by distance.\r\n     */\r\n    orderByDistanceDescending(field: DynamicSpatialField, latitude: number, longitude: number): TSelf;\r\n\r\n    //TBD TSelf OrderByDistanceDescending(Func<DynamicSpatialFieldFactory<T>,\r\n    //     DynamicSpatialField> field, double latitude, double longitude);\r\n\r\n    orderByDistanceDescending(field: DynamicSpatialField, shapeWkt: string): TSelf;\r\n\r\n    //TBD TSelf OrderByDistanceDescending(Func<DynamicSpatialFieldFactory<T>,\r\n    //     DynamicSpatialField> field, string shapeWkt);\r\n\r\n    //TBD TSelf OrderByDistanceDescending<TValue>(Expression<Func<T, TValue>> propertySelector,\r\n    //     double latitude, double longitude);\r\n\r\n    /**\r\n     * Sorts the query results by distance.\r\n     */\r\n    orderByDistanceDescending(fieldName: Field<T>, latitude: number, longitude: number): TSelf;\r\n\r\n    /**\r\n     * Sorts the query results by distance.\r\n     */\r\n    orderByDistanceDescending(fieldName: Field<T>, latitude: number, longitude: number, roundFactor: number): TSelf;\r\n\r\n    //TBD TSelf OrderByDistanceDescending<TValue>(Expression<Func<T, TValue>> propertySelector, string shapeWkt);\r\n\r\n    /**\r\n     * Sorts the query results by distance.\r\n     */\r\n    orderByDistanceDescending(fieldName: Field<T>, shapeWkt: string): TSelf;\r\n}\r\n"]}