"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SucceedRequestEventArgs = exports.BeforeRequestEventArgs = exports.TopologyUpdatedEventArgs = exports.FailedRequestEventArgs = exports.BeforeConversionToEntityEventArgs = exports.BeforeConversionToDocumentEventArgs = exports.AfterConversionToEntityEventArgs = exports.AfterConversionToDocumentEventArgs = exports.BulkInsertOnProgressEventArgs = exports.SessionAfterSaveChangesEventArgs = exports.SessionBeforeDeleteEventArgs = exports.SessionBeforeQueryEventArgs = exports.SessionBeforeStoreEventArgs = void 0;
class SessionBeforeStoreEventArgs {
    _documentMetadata;
    _session;
    _documentId;
    _entity;
    constructor(session, documentId, entity) {
        this._session = session;
        this._documentId = documentId;
        this._entity = entity;
    }
    get session() {
        return this._session;
    }
    get documentId() {
        return this._documentId;
    }
    getEntity() {
        return this._entity;
    }
    isMetadataAccessed() {
        return !!this._documentMetadata;
    }
    getDocumentMetadata() {
        if (!this._documentMetadata) {
            this._documentMetadata = this._session.getMetadataFor(this._entity);
        }
        return this._documentMetadata;
    }
}
exports.SessionBeforeStoreEventArgs = SessionBeforeStoreEventArgs;
class SessionBeforeQueryEventArgs {
    session;
    queryCustomization;
    constructor(session, queryCustomization) {
        this.session = session;
        this.queryCustomization = queryCustomization;
        // empty
    }
}
exports.SessionBeforeQueryEventArgs = SessionBeforeQueryEventArgs;
class SessionBeforeDeleteEventArgs {
    _documentMetadata;
    _session;
    _documentId;
    _entity;
    constructor(session, documentId, entity) {
        this._session = session;
        this._documentId = documentId;
        this._entity = entity;
    }
    get session() {
        return this._session;
    }
    get documentId() {
        return this._documentId;
    }
    get entity() {
        return this._entity;
    }
    get documentMetadata() {
        if (!this._documentMetadata) {
            this._documentMetadata = this._session.getMetadataFor(this._entity);
        }
        return this._documentMetadata;
    }
}
exports.SessionBeforeDeleteEventArgs = SessionBeforeDeleteEventArgs;
class SessionAfterSaveChangesEventArgs {
    _documentMetadata;
    session;
    documentId;
    entity;
    constructor(session, documentId, entity) {
        this.session = session;
        this.documentId = documentId;
        this.entity = entity;
    }
    get documentMetadata() {
        if (!this._documentMetadata) {
            this._documentMetadata = this.session.getMetadataFor(this.entity);
        }
        return this._documentMetadata;
    }
}
exports.SessionAfterSaveChangesEventArgs = SessionAfterSaveChangesEventArgs;
class BulkInsertOnProgressEventArgs {
    progress;
    constructor(progress) {
        this.progress = progress;
    }
}
exports.BulkInsertOnProgressEventArgs = BulkInsertOnProgressEventArgs;
class AfterConversionToDocumentEventArgs {
    id;
    entity;
    document;
    session;
    constructor(session, id, entity, document) {
        this.session = session;
        this.id = id;
        this.entity = entity;
        this.document = document;
    }
}
exports.AfterConversionToDocumentEventArgs = AfterConversionToDocumentEventArgs;
class AfterConversionToEntityEventArgs {
    id;
    document;
    entity;
    session;
    constructor(session, id, document, entity) {
        this.session = session;
        this.id = id;
        this.document = document;
        this.entity = entity;
    }
}
exports.AfterConversionToEntityEventArgs = AfterConversionToEntityEventArgs;
class BeforeConversionToDocumentEventArgs {
    id;
    entity;
    session;
    constructor(session, id, entity) {
        this.session = session;
        this.id = id;
        this.entity = entity;
    }
}
exports.BeforeConversionToDocumentEventArgs = BeforeConversionToDocumentEventArgs;
class BeforeConversionToEntityEventArgs {
    id;
    type;
    document;
    session;
    constructor(session, id, type, document) {
        this.session = session;
        this.id = id;
        this.type = type;
        this.document = document;
    }
}
exports.BeforeConversionToEntityEventArgs = BeforeConversionToEntityEventArgs;
class FailedRequestEventArgs {
    database;
    url;
    error;
    request;
    response;
    constructor(database, url, error, request, response) {
        this.database = database;
        this.url = url;
        this.error = error;
        this.request = request;
        this.response = response;
    }
}
exports.FailedRequestEventArgs = FailedRequestEventArgs;
class TopologyUpdatedEventArgs {
    topology;
    reason;
    constructor(topology, reason) {
        this.topology = topology;
        this.reason = reason;
    }
}
exports.TopologyUpdatedEventArgs = TopologyUpdatedEventArgs;
class BeforeRequestEventArgs {
    database;
    url;
    request;
    attemptNumber;
    constructor(database, url, request, attemptNumber) {
        this.database = database;
        this.url = url;
        this.request = request;
        this.attemptNumber = attemptNumber;
    }
}
exports.BeforeRequestEventArgs = BeforeRequestEventArgs;
class SucceedRequestEventArgs {
    database;
    url;
    response;
    request;
    attemptNumber;
    constructor(database, url, response, request, attemptNumber) {
        this.database = database;
        this.url = url;
        this.response = response;
        this.request = request;
        this.attemptNumber = attemptNumber;
    }
}
exports.SucceedRequestEventArgs = SucceedRequestEventArgs;
//# sourceMappingURL=SessionEvents.js.map