{"version":3,"file":"LazyGetCompareExchangeValueOperation.js","sourceRoot":"","sources":["../../../../../../src/Documents/Session/Operations/Lazy/LazyGetCompareExchangeValueOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { ILazyOperation } from \"./ILazyOperation.js\";\r\nimport { ClusterTransactionOperationsBase } from \"../../ClusterTransactionOperationsBase.js\";\r\nimport { throwError } from \"../../../../Exceptions/index.js\";\r\nimport { GetRequest } from \"../../../Commands/MultiGet/GetRequest.js\";\r\nimport { GetResponse } from \"../../../Commands/MultiGet/GetResponse.js\";\r\nimport { TypeUtil } from \"../../../../Utility/TypeUtil.js\";\r\nimport {\r\n    CompareExchangeValueResultParser,\r\n    GetCompareExchangeValuesResponse\r\n} from \"../../../Operations/CompareExchange/CompareExchangeValueResultParser.js\";\r\nimport { CompareExchangeResultClass, ServerCasing, ServerResponse } from \"../../../../Types/index.js\";\r\nimport { DocumentConventions } from \"../../../Conventions/DocumentConventions.js\";\r\nimport { QueryResult } from \"../../../Queries/QueryResult.js\";\r\nimport { GetCompareExchangeValuesCommand } from \"../../../Operations/CompareExchange/GetCompareExchangeValuesOperation.js\";\r\n\r\nexport class LazyGetCompareExchangeValueOperation<T> implements ILazyOperation {\r\n    private readonly _clusterSession: ClusterTransactionOperationsBase;\r\n    private readonly _clazz: CompareExchangeResultClass<T>;\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _key: string;\r\n\r\n    private _result: object;\r\n    private _requiresRetry: boolean;\r\n\r\n    public constructor(clusterSession: ClusterTransactionOperationsBase, clazz: CompareExchangeResultClass<T>,\r\n                       conventions: DocumentConventions, key: string) {\r\n        if (!clusterSession) {\r\n            throwError(\"InvalidArgumentException\", \"Cluster Session cannot be null\");\r\n        }\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n        if (!key) {\r\n            throwError(\"InvalidArgumentException\", \"Key cannot be null\");\r\n        }\r\n\r\n        this._clusterSession = clusterSession;\r\n        this._clazz = clazz;\r\n        this._conventions = conventions;\r\n        this._key = key;\r\n    }\r\n\r\n    public get result() {\r\n        return this._result;\r\n    }\r\n\r\n    public get queryResult(): QueryResult {\r\n        throwError(\"NotImplementedException\", \"Not implemented\");\r\n        return null;\r\n    }\r\n\r\n    public get requiresRetry() {\r\n        return this._requiresRetry;\r\n    }\r\n\r\n    createRequest(): GetRequest {\r\n        if (this._clusterSession.isTracked(this._key)) {\r\n            this._result = this._clusterSession.getCompareExchangeValueFromSessionInternal<T>(this._key, TypeUtil.NOOP, this._clazz);\r\n            return null;\r\n        }\r\n\r\n        const request = new GetRequest();\r\n        request.url = \"/cmpxchg\";\r\n        request.method = \"GET\";\r\n        request.query = \"?key=\" + encodeURIComponent(this._key);\r\n\r\n        return request;\r\n    }\r\n\r\n    async handleResponseAsync(response: GetResponse): Promise<void> {\r\n        if (response.forceRetry) {\r\n            this._result = null;\r\n            this._requiresRetry = true;\r\n            return;\r\n        }\r\n\r\n        if (response.result) {\r\n            const results = JSON.parse(response.result) as ServerCasing<ServerResponse<GetCompareExchangeValuesResponse>>;\r\n\r\n            const localObject = GetCompareExchangeValuesCommand.mapToLocalObject(results);\r\n\r\n            const value = CompareExchangeValueResultParser.getValue(localObject, false, this._conventions, null);\r\n\r\n            if (this._clusterSession.session.noTracking) {\r\n                if (!value) {\r\n                    this._result = this._clusterSession.registerMissingCompareExchangeValue(this._key).getValue(this._clazz, this._conventions);\r\n                    return;\r\n                }\r\n\r\n                this._result = this._clusterSession.registerCompareExchangeValue(value).getValue(this._clazz, this._conventions);\r\n                return;\r\n            }\r\n\r\n            if (value) {\r\n                this._clusterSession.registerCompareExchangeValue(value);\r\n            }\r\n        }\r\n\r\n        if (!this._clusterSession.isTracked(this._key)) {\r\n            this._clusterSession.registerMissingCompareExchangeValue(this._key);\r\n        }\r\n\r\n        this._result = this._clusterSession.getCompareExchangeValueFromSessionInternal(this._key, TypeUtil.NOOP, this._clazz);\r\n    }\r\n}\r\n"]}