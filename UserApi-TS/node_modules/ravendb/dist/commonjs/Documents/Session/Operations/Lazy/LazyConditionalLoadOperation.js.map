{"version":3,"file":"LazyConditionalLoadOperation.js","sourceRoot":"","sources":["../../../../../../src/Documents/Session/Operations/Lazy/LazyConditionalLoadOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { ILazyOperation } from \"./ILazyOperation.js\";\r\nimport { ObjectTypeDescriptor } from \"../../../../Types/index.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"../../InMemoryDocumentSessionOperations.js\";\r\nimport { GetRequest } from \"../../../Commands/MultiGet/GetRequest.js\";\r\nimport { throwError } from \"../../../../Exceptions/index.js\";\r\nimport { QueryResult } from \"../../../Queries/QueryResult.js\";\r\nimport { GetResponse } from \"../../../Commands/MultiGet/GetResponse.js\";\r\nimport { StatusCodes } from \"../../../../Http/StatusCode.js\";\r\nimport { ConditionalLoadResult } from \"../../ConditionalLoadResult.js\";\r\nimport { HEADERS } from \"../../../../Constants.js\";\r\nimport { QueryCommand } from \"../../../Commands/QueryCommand.js\";\r\nimport { stringToReadable } from \"../../../../Utility/StreamUtil.js\";\r\nimport { DocumentInfo } from \"../../DocumentInfo.js\";\r\n\r\n\r\nexport class LazyConditionalLoadOperation<T extends object> implements ILazyOperation {\r\n    private readonly _clazz: ObjectTypeDescriptor<T>;\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n    private readonly _id: string;\r\n    private readonly _changeVector: string;\r\n\r\n    public constructor(session: InMemoryDocumentSessionOperations, id: string, changeVector: string, clazz: ObjectTypeDescriptor<T>) {\r\n        this._clazz = clazz;\r\n        this._session = session;\r\n        this._id = id;\r\n        this._changeVector = changeVector;\r\n    }\r\n\r\n    public createRequest(): GetRequest {\r\n        const request = new GetRequest();\r\n        request.url = \"/docs\";\r\n        request.method = \"GET\";\r\n        request.query = \"?id=\" + encodeURIComponent(this._id);\r\n        request.headers[HEADERS.IF_NONE_MATCH] = `\"${this._changeVector}\"`;\r\n        return request;\r\n    }\r\n\r\n    private _result: any;\r\n    private _requiresRetry: boolean;\r\n\r\n    public get queryResult(): QueryResult {\r\n        throwError(\"NotImplementedException\");\r\n        return null;\r\n    }\r\n\r\n    public get result(): any {\r\n        return this._result;\r\n    }\r\n\r\n    public get requiresRetry() {\r\n        return this._requiresRetry;\r\n    }\r\n\r\n    public async handleResponseAsync(response: GetResponse): Promise<void> {\r\n        if (response.forceRetry) {\r\n            this._result = null;\r\n            this._requiresRetry = true;\r\n            return;\r\n        }\r\n\r\n        switch (response.statusCode) {\r\n            case StatusCodes.NotModified: {\r\n                this._result = {\r\n                    entity: null,\r\n                    changeVector: this._changeVector\r\n                } as ConditionalLoadResult<any>;\r\n                return;\r\n            }\r\n            case StatusCodes.NotFound: {\r\n                this._session.registerMissing(this._id);\r\n                this._result = {\r\n                    entity: null,\r\n                    changeVector: null\r\n                } as ConditionalLoadResult<any>;\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (response.result) {\r\n            const etag = response.headers[HEADERS.ETAG];\r\n\r\n            const res = await QueryCommand.parseQueryResultResponseAsync(\r\n                stringToReadable(response.result), this._session.conventions, false);\r\n            const documentInfo = DocumentInfo.getNewDocumentInfo(res.results[0]);\r\n            const r = this._session.trackEntity(this._clazz, documentInfo);\r\n\r\n            this._result = {\r\n                entity: r,\r\n                changeVector: etag\r\n            } as ConditionalLoadResult<any>;\r\n            return;\r\n        }\r\n\r\n        this._result = null;\r\n        this._session.registerMissing(this._id);\r\n    }\r\n}\r\n"]}