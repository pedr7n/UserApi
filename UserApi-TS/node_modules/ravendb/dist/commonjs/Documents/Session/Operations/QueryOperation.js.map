{"version":3,"file":"QueryOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Operations/QueryOperation.ts"],"names":[],"mappings":";;;AAIA,gEAA0D;AAC1D,4DAAwD;AACxD,oEAA8D;AAC9D,2DAA0D;AAI1D,wDAA+D;AAC/D,8DAAwD;AAExD,0DAA2E;AAC3E,4GAAsG;AACtG,4FAAsF;AACtF,0GAAoG;AACpG,kEAAqF;AACrF,yEAAmE;AACnE,wEAAkE;AAClE,8DAAwD;AAExD,MAAM,GAAG,GAAG,IAAA,sBAAS,EAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,CAAC,CAAC;AAEpD,MAAM,iBAAiB,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,qBAAqB,EAAE,gBAAgB,CAAC,CAAC;AAEvG,wCAAwC;AACxC,MAAa,cAAc;IACN,QAAQ,CAAoC;IAC5C,UAAU,CAAS;IACnB,WAAW,CAAa;IACxB,aAAa,CAAU;IACvB,iBAAiB,CAAU;IAC3B,cAAc,CAAU;IACjC,oBAAoB,CAAc;IACzB,cAAc,CAAqB;IAC5C,GAAG,CAAY;IACf,WAAW,CAAU;IAE7B,YACI,OAA0C,EAC1C,SAAiB,EACjB,UAAsB,EACtB,aAAiC,EACjC,uBAAgC,EAChC,YAAqB,EACrB,gBAAyB,EACzB,aAAsB;QACtB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,uBAAuB,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC1C,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAEM,aAAa;QAChB,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC;QAEtC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEhB,OAAO,IAAI,8BAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE;YACrD,YAAY,EAAE,IAAI,CAAC,aAAa;YAChC,gBAAgB,EAAE,IAAI,CAAC,iBAAiB;SAC3C,CAAC,CAAC;IACP,CAAC;IAEM,sBAAsB;QACzB,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAEM,SAAS,CAAC,WAAwB;QACrC,IAAI,CAAC,+BAA+B,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IAEO,YAAY;QAChB,IAAI,CAAC,GAAG,GAAG,wBAAS,CAAC,aAAa,EAAE,CAAC;IACzC,CAAC;IAEM,QAAQ;QACX,GAAG,CAAC,IAAI,CACJ,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,GAAG;cAChD,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;cAC/D,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;IAClD,CAAC;IAED;;;;;;;;;;MAUE;IAEK,QAAQ,CAAmB,YAA8B;QAC5D,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,CAAC;QAE/D,MAAM,MAAM,GAAG,EAAS,CAAC;QAEzB,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAEvE,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,iBAAiB,CAAmB,YAA6B,EAAE,WAAwB,EAAE,WAA8B;QAC/H,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACzD,CAAC;QAED,IAAI,CAAC;YACD,KAAK,MAAM,QAAQ,IAAI,WAAW,CAAC,OAAO,EAAE,CAAC;gBACzC,IAAI,QAAQ,CAAC,GAAG,wBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,wBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,EAAE,CAAC;oBACtG,QAAQ,CAAC,wBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,wBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,mBAAmB,CAAC;0BACtF,QAAQ,CAAC,GAAG,wBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,wBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,CAAC;gBAC9G,CAAC;gBACD,MAAM,QAAQ,GAAG,QAAQ,CAAC,wBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAC5D,IAAI,CAAC;oBACD,MAAM,MAAM,GAAG,QAAQ,CAAC,wBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBAEzD,IAAI,EAAE,GAAG,IAAI,CAAC;oBACd,IAAI,MAAM,IAAI,sBAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;wBACtC,EAAE,GAAG,MAAM,CAAC;oBAChB,CAAC;oBAED,WAAW,CACP,cAAc,CAAC,WAAW,CACtB,EAAE,EACF,QAAQ,EACR,QAAQ,EACR,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAQ,EACb,YAAY,EACZ,IAAI,CAAC,cAAc,EACvB,WAAW,CAAC,gBAAgB,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC7C,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACT,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,KAAK,iBAAiB,CAAC,MAAM,EAAE,CAAC;wBAC5D,MAAM,CAAC,CAAC;oBACZ,CAAC;oBAED,KAAK,MAAM,IAAI,IAAI,iBAAiB,EAAE,CAAC;wBACnC,IAAI,CAAC,CAAC,IAAI,IAAI,QAAQ,CAAC,EAAE,CAAC;4BACtB,MAAM,CAAC,CAAC;wBACZ,CAAC;oBACL,CAAC;oBAED,IAAA,qBAAU,EAAC,0BAA0B,EAAE,oFAAoF,CAAC,CAAC;gBACjI,CAAC;YACL,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,mCAAmC,CAAC,CAAC;YACnD,IAAA,qBAAU,EAAC,gBAAgB,EAAE,sBAAsB,EAAE,GAAG,CAAC,CAAC;QAC9D,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CACjC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;YAE1E,IAAI,WAAW,CAAC,eAAe,EAAE,CAAC;gBAC9B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,CAAC,eAAe,EAAE,WAAW,CAAC,oBAAoB,CAAC,CAAC;YAClG,CAAC;YAED,IAAI,WAAW,CAAC,kBAAkB,EAAE,CAAC;gBACjC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;YACrE,CAAC;YAED,IAAI,WAAW,CAAC,4BAA4B,EAAE,CAAC;gBAC3C,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC;gBACpD,cAAc,CAAC,+BAA+B,CAAC,WAAW,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YACpG,CAAC;YAED,IAAI,WAAW,CAAC,gBAAgB,EAAE,CAAC;gBAC/B,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;YACzE,CAAC;QACL,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,WAAW,CACrB,EAAU,EACV,QAAgB,EAChB,QAAgB,EAChB,aAAiC,EACjC,uBAAgC,EAChC,OAA0C,EAC1C,KAAuB,EACvB,aAAuB,EACvB,gBAA2B;QAE3B,MAAM,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;QAChC,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;QAC3C,IAAI,sBAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC,IAAI,UAAU,KAAK,KAAK,EAAE,CAAC;YACjE,MAAM,UAAU,GAAG,WAAW,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;YAC9D,OAAO,OAAO,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,uBAAuB,CAAC,CAAC;QAC5F,CAAC;QAED,MAAM,WAAW,GAAG,aAAa;eAC1B,aAAa,CAAC,WAAW;eACzB,CAAC,CAAC,KAAK,IAAI,KAAK,KAAK,4DAA2B,IAAI,KAAK,KAAK,4CAAmB,CAAC;eAClF,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,uDAAoC,CAAC,IAAI,aAAa,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QAExK,6EAA6E;QAC7E,6DAA6D;QAC7D,IAAI,WAAW,EAAE,CAAC;YACd,gCAAgC;YAChC,IAAI,eAAe,GAAG,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,uDAAoC,CAAC,CAAC;YAEtG,IAAI,aAAa,CAAC,WAAW,EAAE,CAAC;gBAC5B,IAAI,eAAe,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,CAAC;oBACxD,2CAA2C;oBAC3C,eAAe,GAAG,eAAe,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACtF,CAAC;gBAED,IAAI,eAAe,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;oBAClC,eAAe,GAAG,eAAe,CAAC,SAAS,CAAC,CAAC,EAAE,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC/E,CAAC;YACL,CAAC;YACD,IAAI,WAAW,CAAC,+BAA+B,EAAE,CAAC;gBAC9C,eAAe,GAAG,WAAW,CAAC,+BAA+B,CAAC,eAAe,CAAC,CAAC;YACnF,CAAC;YAED,MAAM,QAAQ,GAAG,QAAQ,CAAC,eAAe,CAAC,CAAC;YAC3C,IAAI,sBAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACvC,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,IAAI,sBAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACjC,OAAO,QAAQ,IAAI,IAAI,CAAC;YAC5B,CAAC;YAED,MAAM,iBAAiB,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,0BAAW,CAAC,cAAc,CAAC,CAAC;YAE9F,IAAI,CAAC,aAAa,IAAI,iBAAiB,EAAE,CAAC;gBACtC,IAAI,iBAAiB,IAAI,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;oBACvF,IAAI,sBAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,gCAAgC;wBAC/D,QAAQ,GAAG,QAAQ,CAAC;oBACxB,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;QAED,MAAM,QAAQ,GAAG,WAAW,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QAE5D,MAAM,WAAW,GAAsB;YACnC,KAAK,EAAE,QAAQ;SAClB,CAAC;QACF,OAAO,CAAC,gCAAgC,CAAC,EAAE,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;QACjE,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC;QAE7B,MAAM,GAAG,GAAM,WAAW,CAAC,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAEpE,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAE7E,MAAM,MAAM,GAAG,WAAW,CAAC,YAAY,CAAC;QAExC,IAAI,MAAM,YAAY,4DAA2B,EAAE,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClF,CAAC;aAAM,IAAI,MAAM,YAAY,4CAAmB,EAAE,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1E,CAAC;aAAM,CAAC;YACJ,IAAI,aAAa,IAAI,aAAa,CAAC,WAAW,IAAI,aAAa,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;gBACjF,MAAM,IAAI,GAAG,WAAW,CAAC,+BAA+B;oBACpD,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC;oBACpF,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC;gBAEhC,MAAM,WAAW,GAAG,GAAG,CAAC,uDAAoC,CAAC,CAAC;gBAC9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACnC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBAEpB,MAAM,MAAM,GAAG,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;wBACzC,QAAQ,EAAE,QAAQ;wBAClB,WAAW;qBACd,CAAC,CAAA;oBAEF,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC9B,CAAC;YACL,CAAC;iBAAM,CAAC;gBACJ,IAAI,WAAW,CAAC,+BAA+B,EAAE,CAAC;oBAC9C,MAAM,OAAO,GAA4B;wBACrC,SAAS,EAAE,IAAI;wBACf,cAAc,EAAE,IAAI;wBACpB,WAAW,EAAE;4BACT,wBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,2BAA2B;4BACxD,aAAa;yBAChB;wBACD,gBAAgB,EAAE,WAAW,CAAC,+BAA+B;qBAChE,CAAC;oBAEF,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,0BAAU,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;gBACxE,CAAC;qBAAM,CAAC;oBACJ,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC/B,CAAC;YACL,CAAC;QACL,CAAC;QAED,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,EAAE,CAAC;YAC9C,KAAK,MAAM,eAAe,IAAI,gBAAgB,EAAE,CAAC;gBAC7C,MAAM,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC,CAAC;gBACxC,IAAI,KAAK,EAAE,CAAC;oBACR,MAAM,QAAQ,GAAG,cAAc,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;oBACnE,IAAI,QAAQ,YAAY,4DAA2B,EAAE,CAAC;wBAClD,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,cAAc,CAAC,kCAAkC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACtF,CAAC;yBAAM,IAAI,QAAQ,YAAY,4CAAmB,EAAE,CAAC;wBACjD,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,cAAc,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC9E,CAAC;oBAED,MAAM,CAAC,eAAe,CAAC,GAAG,QAAQ,CAAC;gBACvC,CAAC;YACL,CAAC;QACL,CAAC;QAED,OAAO,CAAC,+BAA+B,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QAE9D,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,MAAM,CAAC,2BAA2B,CAAC,GAAQ;QAC/C,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC;QAClC,cAAc;QACd,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YACrD,OAAO,IAAI,4DAA2B,EAAE,CAAC;QAC7C,CAAC;QACD,OAAO,IAAI,4CAAmB,EAAE,CAAC;IACrC,CAAC;IAEO,MAAM,CAAC,kCAAkC,CAAC,GAAW;QACzD,MAAM,QAAQ,GAAG,0BAAU,CAAC,mBAAmB,CAAC,GAAG,EAAE,EAAE,gBAAgB,EAAE,0BAAU,CAAC,KAAK,EAAE,CAAQ,CAAC;QAEpG,MAAM,EAAE,OAAO,EAAE,GAAG,UAAU,EAAE,GAAG,QAAQ,CAAC;QAE5C,MAAM,aAAa,GAAiC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YAChE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,eAAe,EAAE,GAAG,CAAC,CAAC;YAE3C,MAAM,SAAS,GAAwC;gBACnD,IAAI,EAAE,sBAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC;gBAC9B,EAAE,EAAE,sBAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;aAC7B,CAAC;YAEF,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,0DAA0B,EAAE,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,OAAO;YACH,GAAG,UAAU;YACb,OAAO,EAAE,aAAa;SACzB,CAAA;IACL,CAAC;IAEO,MAAM,CAAC,0BAA0B,CAAC,GAAW;QACjD,MAAM,QAAQ,GAAG,0BAAU,CAAC,mBAAmB,CAAC,GAAG,EAAE,EAAE,gBAAgB,EAAE,0BAAU,CAAC,KAAK,EAAE,CAAQ,CAAC;QAEpG,MAAM,EAAE,OAAO,EAAE,GAAG,UAAU,EAAE,GAAG,QAAQ,CAAC;QAE5C,MAAM,aAAa,GAAiC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YAChE,MAAM,EAAE,SAAS,EAAE,GAAG,eAAe,EAAE,GAAG,CAAC,CAAC;YAE5C,MAAM,SAAS,GAA6B;gBACxC,SAAS,EAAE,sBAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;aAC3C,CAAC;YAEF,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,oCAAe,EAAE,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,OAAO;YACH,GAAG,UAAU;YACb,OAAO,EAAE,aAAa;SACzB,CAAA;IACL,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,IAAW,UAAU,CAAC,KAAK;QACvB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7B,CAAC;IAEM,+BAA+B,CAAC,MAAmB,EAAE,QAAgB;QACxE,IAAI,sBAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC;YACvC,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;gBACX,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;YAChC,CAAC;iBAAM,CAAC;gBACJ,QAAQ,GAAG,IAAI,CAAC;YACpB,CAAC;QACL,CAAC;QAED,IAAI,CAAC,MAAM,EAAE,CAAC;YACV,IAAA,qBAAU,EAAC,4BAA4B,EAAE,wBAAwB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACzF,CAAC;QAED,cAAc,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE5G,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAEO,gBAAgB,CAAC,MAAmB;QACxC,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC;QAEnC,UAAU;QACV,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;QAEjD,MAAM,UAAU,GAAG,IAAI,gCAAa,EAAE,CAAC;QACvC,IAAI,IAAI,CAAC,WAAW,CAAC,eAAe;eAC7B,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;YAC7C,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YAEnC,IAAI,KAAK,GAAG,IAAI,CAAC;YAEjB,MAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;YACzD,KAAK,MAAM,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC;gBACtD,MAAM,cAAc,GAAG,eAAe,CAAC,YAAY,CAAC,CAAC;gBACrD,IAAI,CAAC,KAAK,EAAE,CAAC;oBACT,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC5B,CAAC;gBAED,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC;qBAC1B,MAAM,CAAC,KAAK,CAAC;qBACb,MAAM,CAAC,cAAqB,CAAC,CAAC;gBAEnC,KAAK,GAAG,KAAK,CAAC;YAClB,CAAC;YAED,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;QAED,GAAG,CAAC,IAAI,CAAC,SAAS;cACZ,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,IAAI;cAC7B,UAAU,CAAC,QAAQ,EAAE;cACrB,WAAW;cACX,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,OAAO,GAAG,gCAAgC,GAAG,MAAM,CAAC,YAAY,GAAG,GAAG,CAAC,CAAC;QACtG,cAAc;IAClB,CAAC;IAEM,MAAM,CAAC,kBAAkB,CAC5B,MAAmB,EACnB,sBAA+B,EAC/B,QAA4B,EAC5B,OAA0C;QAC1C,IAAI,QAAQ,YAAY,wBAAS,EAAE,CAAC;YAChC,QAAQ,CAAC,IAAI,EAAE,CAAC;YAChB,OAAO,cAAc,CAAC,kBAAkB,CAAC,MAAM,EAAE,sBAAsB,EAAE,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACxG,CAAC;QAED,IAAI,sBAAsB,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YAC3C,MAAM,GAAG,GAAG,aAAa,GAAG,QAAQ,CAAC,QAAQ,EAAE,GAAG,4CAA4C,CAAC;YAC/F,IAAA,qBAAU,EAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;QACxC,CAAC;IACL,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;CACJ;AA7aD,wCA6aC","sourcesContent":["import { InMemoryDocumentSessionOperations } from \"../InMemoryDocumentSessionOperations.js\";\r\nimport { IndexQuery } from \"../../Queries/IndexQuery.js\";\r\nimport { QueryResult } from \"../../Queries/QueryResult.js\";\r\nimport { FieldsToFetchToken } from \"../Tokens/FieldsToFetchToken.js\";\r\nimport { Stopwatch } from \"../../../Utility/Stopwatch.js\";\r\nimport { getLogger } from \"../../../Utility/LogUtil.js\";\r\nimport { QueryCommand } from \"../../Commands/QueryCommand.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport {\r\n    DocumentType,\r\n} from \"../../DocumentAbstractions.js\";\r\nimport { CONSTANTS, TIME_SERIES } from \"../../../Constants.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { Reference } from \"../../../Utility/Reference.js\";\r\nimport { NESTED_OBJECT_TYPES_PROJECTION_FIELD } from \"../DocumentQuery.js\";\r\nimport { TimeSeriesAggregationResult } from \"../../Queries/TimeSeries/TimeSeriesAggregationResult.js\";\r\nimport { TimeSeriesRawResult } from \"../../Queries/TimeSeries/TimeSeriesRawResult.js\";\r\nimport { TimeSeriesRangeAggregation } from \"../../Queries/TimeSeries/TimeSeriesRangeAggregation.js\";\r\nimport { ObjectChangeCaseOptions, ObjectUtil } from \"../../../Utility/ObjectUtil.js\";\r\nimport { TimeSeriesEntry } from \"../TimeSeries/TimeSeriesEntry.js\";\r\nimport { StringBuilder } from \"../../../Utility/StringBuilder.js\";\r\nimport { DateUtil } from \"../../../Utility/DateUtil.js\";\r\n\r\nconst log = getLogger({ module: \"QueryOperation\" });\r\n\r\nconst facetResultFields = [\"Name\", \"Values\", \"RemainingHits\", \"RemainingTermsCount\", \"RemainingTerms\"];\r\n\r\n// noinspection ExceptionCaughtLocallyJS\r\nexport class QueryOperation {\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n    private readonly _indexName: string;\r\n    private readonly _indexQuery: IndexQuery;\r\n    private readonly _metadataOnly: boolean;\r\n    private readonly _indexEntriesOnly: boolean;\r\n    private readonly _isProjectInto: boolean;\r\n    private _currentQueryResults: QueryResult;\r\n    private readonly _fieldsToFetch: FieldsToFetchToken;\r\n    private _sp: Stopwatch;\r\n    private _noTracking: boolean;\r\n\r\n    public constructor(\r\n        session: InMemoryDocumentSessionOperations,\r\n        indexName: string,\r\n        indexQuery: IndexQuery,\r\n        fieldsToFetch: FieldsToFetchToken,\r\n        disableEntitiesTracking: boolean,\r\n        metadataOnly: boolean,\r\n        indexEntriesOnly: boolean,\r\n        isProjectInto: boolean) {\r\n        this._session = session;\r\n        this._indexName = indexName;\r\n        this._indexQuery = indexQuery;\r\n        this._fieldsToFetch = fieldsToFetch;\r\n        this._noTracking = disableEntitiesTracking;\r\n        this._metadataOnly = metadataOnly;\r\n        this._indexEntriesOnly = indexEntriesOnly;\r\n        this._isProjectInto = isProjectInto;\r\n    }\r\n\r\n    public createRequest(): QueryCommand {\r\n        this._session.incrementRequestCount();\r\n\r\n        this.logQuery();\r\n\r\n        return new QueryCommand(this._session, this._indexQuery, {\r\n            metadataOnly: this._metadataOnly,\r\n            indexEntriesOnly: this._indexEntriesOnly\r\n        });\r\n    }\r\n\r\n    public getCurrentQueryResults(): QueryResult {\r\n        return this._currentQueryResults;\r\n    }\r\n\r\n    public setResult(queryResult: QueryResult): void {\r\n        this.ensureIsAcceptableAndSaveResult(queryResult, null);\r\n    }\r\n\r\n    private _startTiming(): void {\r\n        this._sp = Stopwatch.createStarted();\r\n    }\r\n\r\n    public logQuery(): void {\r\n        log.info(\r\n            \"Executing query '\" + this._indexQuery.query + \"'\"\r\n            + (this._indexName ? \"' on index '\" + this._indexName + \"'\" : \"\")\r\n            + \" in \" + this._session.storeIdentifier);\r\n    }\r\n\r\n    /* TDB 4.1\r\n    public enterQueryContext(): IDisposable {\r\n        this._startTiming();\r\n\r\n        if (!this._indexQuery.waitForNonStaleResults) {\r\n            return null;\r\n        }\r\n\r\n        return this._session.documentStore.disableAggressiveCaching(this._session.databaseName);\r\n    }\r\n    */\r\n\r\n    public complete<T extends object>(documentType?: DocumentType<T>): T[] {\r\n        const queryResult = this._currentQueryResults.createSnapshot();\r\n\r\n        const result = [] as T[];\r\n\r\n        this._completeInternal(documentType, queryResult, x => result.push(x));\r\n\r\n        return result;\r\n    }\r\n\r\n    private _completeInternal<T extends object>(documentType: DocumentType<T>, queryResult: QueryResult, addToResult: (item: T) => void): void {\r\n        if (!this._noTracking) {\r\n            this._session.registerIncludes(queryResult.includes);\r\n        }\r\n\r\n        try {\r\n            for (const document of queryResult.results) {\r\n                if (document[`${CONSTANTS.Documents.Metadata.KEY}.${CONSTANTS.Documents.Metadata.NESTED_OBJECT_TYPES}`]) {\r\n                    document[CONSTANTS.Documents.Metadata.KEY][CONSTANTS.Documents.Metadata.NESTED_OBJECT_TYPES]\r\n                        = document[`${CONSTANTS.Documents.Metadata.KEY}.${CONSTANTS.Documents.Metadata.NESTED_OBJECT_TYPES}`];\r\n                }\r\n                const metadata = document[CONSTANTS.Documents.Metadata.KEY];\r\n                try {\r\n                    const idNode = metadata[CONSTANTS.Documents.Metadata.ID];\r\n\r\n                    let id = null;\r\n                    if (idNode && TypeUtil.isString(idNode)) {\r\n                        id = idNode;\r\n                    }\r\n\r\n                    addToResult(\r\n                        QueryOperation.deserialize(\r\n                            id,\r\n                            document,\r\n                            metadata,\r\n                            this._fieldsToFetch,\r\n                            this._noTracking,\r\n                            this._session,\r\n                            documentType,\r\n                            this._isProjectInto,\r\n                        queryResult.timeSeriesFields || []));\r\n                } catch (e) {\r\n                    if (Object.keys(document).length !== facetResultFields.length) {\r\n                        throw e;\r\n                    }\r\n\r\n                    for (const prop of facetResultFields) {\r\n                        if (!(prop in document)) {\r\n                            throw e;\r\n                        }\r\n                    }\r\n\r\n                    throwError(\"InvalidArgumentException\", \"Raw query with aggregation by facet should be called by executeAggregation method.\");\r\n                }\r\n            }\r\n        } catch (err) {\r\n            log.warn(err, \"Unable to read query result JSON.\");\r\n            throwError(\"RavenException\", \"Unable to read json.\", err);\r\n        }\r\n\r\n        if (!this._noTracking) {\r\n            this._session.registerMissingIncludes(\r\n                queryResult.results, queryResult.includes, queryResult.includedPaths);\r\n\r\n            if (queryResult.counterIncludes) {\r\n                this._session.registerCounters(queryResult.counterIncludes, queryResult.includedCounterNames);\r\n            }\r\n\r\n            if (queryResult.timeSeriesIncludes) {\r\n                this._session.registerTimeSeries(queryResult.timeSeriesIncludes);\r\n            }\r\n\r\n            if (queryResult.compareExchangeValueIncludes) {\r\n                const clusterSession = this._session.clusterSession;\r\n                clusterSession.registerCompareExchangeIncludes(queryResult.compareExchangeValueIncludes, false);\r\n            }\r\n\r\n            if (queryResult.revisionIncludes) {\r\n                this._session.registerRevisionIncludes(queryResult.revisionIncludes);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static deserialize<T extends object>(\r\n        id: string,\r\n        document: object,\r\n        metadata: object,\r\n        fieldsToFetch: FieldsToFetchToken,\r\n        disableEntitiesTracking: boolean,\r\n        session: InMemoryDocumentSessionOperations,\r\n        clazz?: DocumentType<T>,\r\n        isProjectInto?: boolean,\r\n        timeSeriesFields?: string[]\r\n    ) {\r\n        const { conventions } = session;\r\n        const projection = metadata[\"@projection\"];\r\n        if (TypeUtil.isNullOrUndefined(projection) || projection === false) {\r\n            const entityType = conventions.getJsTypeByDocumentType(clazz);\r\n            return session.trackEntity(entityType, id, document, metadata, disableEntitiesTracking);\r\n        }\r\n\r\n        const singleField = fieldsToFetch\r\n            && fieldsToFetch.projections\r\n            && (!clazz || clazz === TimeSeriesAggregationResult || clazz === TimeSeriesRawResult)\r\n            && (fieldsToFetch.projections.length === 1 || (fieldsToFetch.projections.includes(NESTED_OBJECT_TYPES_PROJECTION_FIELD) && fieldsToFetch.projections.length === 2));\r\n\r\n        // return primitives only if type was not passed at all AND fields count is 1\r\n        // if type was passed then use that even if it's only 1 field\r\n        if (singleField) {\r\n            // we only select a single field\r\n            let projectionField = fieldsToFetch.projections.find(x => x !== NESTED_OBJECT_TYPES_PROJECTION_FIELD);\r\n\r\n            if (fieldsToFetch.sourceAlias) {\r\n                if (projectionField.startsWith(fieldsToFetch.sourceAlias)) {\r\n                    // remove source-alias from projection name\r\n                    projectionField = projectionField.substring(fieldsToFetch.sourceAlias.length + 1);\r\n                }\r\n\r\n                if (projectionField.startsWith(\"'\")) {\r\n                    projectionField = projectionField.substring(1, projectionField.length - 1);\r\n                }\r\n            }\r\n            if (conventions.serverToLocalFieldNameConverter) {\r\n                projectionField = conventions.serverToLocalFieldNameConverter(projectionField);\r\n            }\r\n\r\n            const jsonNode = document[projectionField];\r\n            if (TypeUtil.isNullOrUndefined(jsonNode)) {\r\n                return null;\r\n            }\r\n\r\n            if (TypeUtil.isPrimitive(jsonNode)) {\r\n                return jsonNode || null;\r\n            }\r\n\r\n            const isTimeSeriesField = fieldsToFetch.projections[0].startsWith(TIME_SERIES.QUERY_FUNCTION);\r\n\r\n            if (!isProjectInto || isTimeSeriesField) {\r\n                if (isTimeSeriesField || fieldsToFetch.fieldsToFetch[0] === fieldsToFetch.projections[0]) {\r\n                    if (TypeUtil.isObject(jsonNode)) { // extraction from original type\r\n                        document = jsonNode;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const projType = conventions.getJsTypeByDocumentType(clazz);\r\n\r\n        const documentRef: Reference<object> = {\r\n            value: document\r\n        };\r\n        session.onBeforeConversionToEntityInvoke(id, clazz, documentRef);\r\n        document = documentRef.value;\r\n\r\n        const raw: T = conventions.objectMapper.fromObjectLiteral(document);\r\n\r\n        const result = projType ? new (Function.prototype.bind.apply(projType)) : {};\r\n\r\n        const mapper = conventions.objectMapper;\r\n\r\n        if (result instanceof TimeSeriesAggregationResult) {\r\n            Object.assign(result, QueryOperation._reviveTimeSeriesAggregationResult(raw));\r\n        } else if (result instanceof TimeSeriesRawResult) {\r\n            Object.assign(result, QueryOperation._reviveTimeSeriesRawResult(raw));\r\n        } else {\r\n            if (fieldsToFetch && fieldsToFetch.projections && fieldsToFetch.projections.length) {\r\n                const keys = conventions.serverToLocalFieldNameConverter\r\n                    ? fieldsToFetch.projections.map(x => conventions.serverToLocalFieldNameConverter(x))\r\n                    : fieldsToFetch.projections;\r\n\r\n                const nestedTypes = raw[NESTED_OBJECT_TYPES_PROJECTION_FIELD];\r\n                for (let i = 0; i < keys.length; i++) {\r\n                    const key = keys[i];\r\n\r\n                    const mapped = mapper.fromObjectLiteral(raw, {\r\n                        typeName: \"object\",\r\n                        nestedTypes\r\n                    })\r\n\r\n                    result[key] = mapped[key];\r\n                }\r\n            } else {\r\n                if (conventions.serverToLocalFieldNameConverter) {\r\n                    const options: ObjectChangeCaseOptions = {\r\n                        recursive: true,\r\n                        arrayRecursive: true,\r\n                        ignorePaths: [\r\n                            CONSTANTS.Documents.Metadata.IGNORE_CASE_TRANSFORM_REGEX,\r\n                            /@projection/\r\n                        ],\r\n                        defaultTransform: conventions.serverToLocalFieldNameConverter\r\n                    };\r\n\r\n                    Object.assign(result, ObjectUtil.transformObjectKeys(raw, options));\r\n                } else {\r\n                    Object.assign(result, raw);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (timeSeriesFields && timeSeriesFields.length) {\r\n            for (const timeSeriesField of timeSeriesFields) {\r\n                const value = document[timeSeriesField];\r\n                if (value) {\r\n                    const newValue = QueryOperation._detectTimeSeriesResultType(value);\r\n                    if (newValue instanceof TimeSeriesAggregationResult) {\r\n                        Object.assign(newValue, QueryOperation._reviveTimeSeriesAggregationResult(value));\r\n                    } else if (newValue instanceof TimeSeriesRawResult) {\r\n                        Object.assign(newValue, QueryOperation._reviveTimeSeriesRawResult(value));\r\n                    }\r\n\r\n                    result[timeSeriesField] = newValue;\r\n                }\r\n            }\r\n        }\r\n\r\n        session.onAfterConversionToEntityInvoke(id, document, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    private static _detectTimeSeriesResultType(raw: any): TimeSeriesAggregationResult | TimeSeriesRawResult  {\r\n        const results = raw.Results || [];\r\n        // duck typing\r\n        if (results.length && results[0].From && results[0].To) {\r\n            return new TimeSeriesAggregationResult();\r\n        }\r\n        return new TimeSeriesRawResult();\r\n    }\r\n\r\n    private static _reviveTimeSeriesAggregationResult(raw: object) {\r\n        const rawLower = ObjectUtil.transformObjectKeys(raw, { defaultTransform: ObjectUtil.camel }) as any;\r\n\r\n        const { results, ...otherProps } = rawLower;\r\n\r\n        const mappedResults: TimeSeriesRangeAggregation[] = results.map(r => {\r\n            const { from, to, ...otherRangeProps } = r;\r\n\r\n            const overrides: Partial<TimeSeriesRangeAggregation> = {\r\n                from: DateUtil.utc.parse(from),\r\n                to: DateUtil.utc.parse(to)\r\n            };\r\n\r\n            return Object.assign(new TimeSeriesRangeAggregation(), otherRangeProps, overrides);\r\n        });\r\n\r\n        return {\r\n            ...otherProps,\r\n            results: mappedResults\r\n        }\r\n    }\r\n\r\n    private static _reviveTimeSeriesRawResult(raw: object) {\r\n        const rawLower = ObjectUtil.transformObjectKeys(raw, { defaultTransform: ObjectUtil.camel }) as any;\r\n\r\n        const { results, ...otherProps } = rawLower;\r\n\r\n        const mappedResults: TimeSeriesRangeAggregation[] = results.map(r => {\r\n            const { timestamp, ...otherRangeProps } = r;\r\n\r\n            const overrides: Partial<TimeSeriesEntry> = {\r\n                timestamp: DateUtil.utc.parse(timestamp),\r\n            };\r\n\r\n            return Object.assign(new TimeSeriesEntry(), otherRangeProps, overrides);\r\n        });\r\n\r\n        return {\r\n            ...otherProps,\r\n            results: mappedResults\r\n        }\r\n    }\r\n\r\n    public get noTracking() {\r\n        return this._noTracking;\r\n    }\r\n\r\n    public set noTracking(value) {\r\n        this._noTracking = value;\r\n    }\r\n\r\n    public ensureIsAcceptableAndSaveResult(result: QueryResult, duration: number): void {\r\n        if (TypeUtil.isNullOrUndefined(duration)) {\r\n            if (this._sp) {\r\n                duration = this._sp.elapsed;\r\n            } else {\r\n                duration = null;\r\n            }\r\n        }\r\n\r\n        if (!result) {\r\n            throwError(\"IndexDoesNotExistException\", `Could not find index ${this._indexName}.`);\r\n        }\r\n\r\n        QueryOperation.ensureIsAcceptable(result, this._indexQuery.waitForNonStaleResults, duration, this._session);\r\n\r\n        this._saveQueryResult(result);\r\n    }\r\n\r\n    private _saveQueryResult(result: QueryResult) {\r\n        this._currentQueryResults = result;\r\n\r\n        // logging\r\n        const isStale = result.isStale ? \" stale \" : \" \";\r\n\r\n        const parameters = new StringBuilder();\r\n        if (this._indexQuery.queryParameters\r\n            && this._indexQuery.queryParameters.length) {\r\n            parameters.append(\"(parameters: \");\r\n\r\n            let first = true;\r\n\r\n            const queryParameters = this._indexQuery.queryParameters;\r\n            for (const parameterKey of Object.keys(queryParameters)) {\r\n                const parameterValue = queryParameters[parameterKey];\r\n                if (!first) {\r\n                    parameters.append(\", \");\r\n                }\r\n\r\n                parameters.append(parameterKey)\r\n                    .append(\" = \")\r\n                    .append(parameterValue as any);\r\n\r\n                first = false;\r\n            }\r\n\r\n            parameters.append(\") \");\r\n        }\r\n\r\n        log.info(\"Query '\"\r\n            + this._indexQuery.query + \"' \"\r\n            + parameters.toString()\r\n            + \"returned \"\r\n            + result.results.length + isStale + \"results (total index results: \" + result.totalResults + \")\");\r\n        // end logging\r\n    }\r\n\r\n    public static ensureIsAcceptable(\r\n        result: QueryResult,\r\n        waitForNonStaleResults: boolean,\r\n        duration: Stopwatch | number,\r\n        session: InMemoryDocumentSessionOperations): void {\r\n        if (duration instanceof Stopwatch) {\r\n            duration.stop();\r\n            return QueryOperation.ensureIsAcceptable(result, waitForNonStaleResults, duration.elapsed, session);\r\n        }\r\n\r\n        if (waitForNonStaleResults && result.isStale) {\r\n            const msg = \"Waited for \" + duration.toString() + \" for the query to return non stale result.\";\r\n            throwError(\"TimeoutException\", msg);\r\n        }\r\n    }\r\n\r\n    public get indexQuery(): IndexQuery {\r\n        return this._indexQuery;\r\n    }\r\n}\r\n"]}