{"version":3,"file":"StreamOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Operations/StreamOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { Readable } from \"node:stream\";\r\nimport { InMemoryDocumentSessionOperations } from \"../InMemoryDocumentSessionOperations.js\";\r\nimport { QueryStreamCommand } from \"../../Commands/QueryStreamCommand.js\";\r\nimport { IndexQuery } from \"../../Queries/IndexQuery.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { StartingWithOptions } from \"../IDocumentSession.js\";\r\nimport { StreamCommand } from \"../../Commands/StreamCommand.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { StreamResultResponse } from \"../../Commands/StreamResultResponse.js\";\r\nimport { getDocumentResultsAsObjects } from \"../../../Mapping/Json/Streams/Pipelines.js\";\r\nimport { StringBuilder } from \"../../../Utility/StringBuilder.js\";\r\nimport { ObjectUtil } from \"../../../Utility/ObjectUtil.js\";\r\nimport { RavenCommandResponsePipeline } from \"../../../Http/RavenCommandResponsePipeline.js\";\r\n\r\nexport class StreamOperation {\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n    private _isQueryStream: boolean;\r\n\r\n    constructor(session: InMemoryDocumentSessionOperations) {\r\n        this._session = session;\r\n    }\r\n\r\n    public createRequest(query: IndexQuery): QueryStreamCommand;\r\n    public createRequest(idPrefix: string, opts: StartingWithOptions): StreamCommand;\r\n    public createRequest(\r\n        idPrefixOrQuery: string | IndexQuery, opts?: StartingWithOptions): QueryStreamCommand | StreamCommand {\r\n        if (TypeUtil.isString(idPrefixOrQuery)) {\r\n            return this._createRequestForIdPrefix(idPrefixOrQuery, opts);\r\n        }\r\n\r\n        return this._createRequestForQuery(idPrefixOrQuery);\r\n    }\r\n\r\n    private _createRequestForQuery(query: IndexQuery): QueryStreamCommand {\r\n        if (!query) {\r\n            throwError(\"InvalidArgumentException\", \"Query cannot be null.\");\r\n        }\r\n\r\n        this._isQueryStream = true;\r\n        if (query.waitForNonStaleResults) {\r\n            throwError(\"NotSupportedException\",\r\n                \"Since stream() does not wait for indexing (by design), \"\r\n                + \" streaming query with waitForNonStaleResults is not supported\");\r\n        }\r\n        this._session.incrementRequestCount();\r\n        return new QueryStreamCommand(this._session.conventions, query);\r\n    }\r\n\r\n    private _createRequestForIdPrefix(idPrefix: string, opts: StartingWithOptions): StreamCommand {\r\n        const sb = new StringBuilder(`streams/docs?format=jsonl&`);\r\n        if (idPrefix) {\r\n            sb.append(\"startsWith=\")\r\n                .append(encodeURIComponent(idPrefix)).append(\"&\");\r\n        }\r\n\r\n        if (opts) {\r\n            if (\"matches\" in opts) {\r\n                sb.append(\"matches=\")\r\n                    .append(encodeURIComponent(opts.matches)).append(\"&\");\r\n            }\r\n\r\n            if (\"exclude\" in opts) {\r\n                sb.append(\"exclude=\")\r\n                    .append(encodeURIComponent(opts.exclude)).append(\"&\");\r\n            }\r\n\r\n            if (\"startAfter\" in opts) {\r\n                sb.append(\"startAfter=\")\r\n                    .append(encodeURIComponent(opts.startAfter)).append(\"&\");\r\n            }\r\n\r\n            if (\"start\" in opts) {\r\n                sb.append(\"start=\").append(opts.start).append(\"&\");\r\n            }\r\n\r\n            if (\"pageSize\" in opts && opts.pageSize !== Number.MAX_VALUE) {\r\n                sb.append(\"pageSize=\").append(opts.pageSize).append(\"&\");\r\n            }\r\n        }\r\n\r\n        return new StreamCommand(sb.toString());\r\n    }\r\n\r\n    public setResult(response: StreamResultResponse): Readable {\r\n        if (!response) {\r\n            throwError(\"IndexDoesNotExistException\", \"The index does not exists, failed to stream results.\");\r\n        }\r\n\r\n        const result = getDocumentResultsAsObjects(this._session.conventions, !!this._isQueryStream)\r\n            .stream(response.stream);\r\n\r\n        if (this._isQueryStream) {\r\n            const pipeline = RavenCommandResponsePipeline.create<object[]>();\r\n\r\n            pipeline.parseJsonlAsync(x => x[\"Stats\"])\r\n\r\n            pipeline.stream(response.stream)\r\n                .on(\"error\", err => result.emit(\"error\", err))\r\n                .on(\"data\", data => {\r\n                    const rawWithCamel = ObjectUtil.transformObjectKeys(data[\"value\"], {\r\n                        defaultTransform: ObjectUtil.camel\r\n                    });\r\n\r\n                    const statsResult =\r\n                        this._session.conventions.objectMapper\r\n                            .fromObjectLiteral(rawWithCamel, {\r\n                                nestedTypes: {\r\n                                    indexTimestamp: \"date\"\r\n                                }\r\n                            });\r\n\r\n                    result.emit(\"stats\", statsResult);\r\n                });\r\n        }\r\n\r\n        result.on(\"newListener\", (event, listener) => {\r\n            if (event === \"data\") {\r\n                response.stream.resume();\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n"]}