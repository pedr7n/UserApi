{"version":3,"file":"BatchOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Operations/BatchOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { InMemoryDocumentSessionOperations } from \"../InMemoryDocumentSessionOperations.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { CONSTANTS } from \"../../../Constants.js\";\r\nimport { SessionAfterSaveChangesEventArgs } from \"../SessionEvents.js\";\r\nimport { DocumentInfo } from \"../DocumentInfo.js\";\r\nimport { ActionsToRunOnSuccess, CommandType } from \"../../Commands/CommandData.js\";\r\nimport { CaseInsensitiveKeysMap } from \"../../../Primitives/CaseInsensitiveKeysMap.js\";\r\nimport { PatchStatus } from \"../../Operations/PatchStatus.js\";\r\nimport { CounterTracking } from \"../CounterInternalTypes.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { BatchCommandResult } from \"./BatchCommandResult.js\";\r\nimport { ObjectUtil } from \"../../../Utility/ObjectUtil.js\";\r\nimport { ClusterWideBatchCommand } from \"../../Commands/Batches/ClusterWideBatchCommand.js\";\r\nimport { SingleNodeBatchCommand } from \"../../Commands/Batches/SingleNodeBatchCommand.js\";\r\n\r\nexport class BatchOperation {\r\n\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n\r\n    public constructor(session: InMemoryDocumentSessionOperations) {\r\n        this._session = session;\r\n    }\r\n\r\n    private _entities: object[];\r\n    private _sessionCommandsCount: number;\r\n    private _allCommandsCount: number;\r\n    private _onSuccessfulRequest: ActionsToRunOnSuccess;\r\n\r\n    private _modifications: Map<string, DocumentInfo>;\r\n\r\n    public createRequest(): SingleNodeBatchCommand {\r\n        const result = this._session.prepareForSaveChanges();\r\n\r\n        this._onSuccessfulRequest = result.onSuccess;\r\n        this._sessionCommandsCount = result.sessionCommands.length;\r\n        result.sessionCommands.push(...result.deferredCommands);\r\n\r\n        this._session.validateClusterTransaction(result);\r\n\r\n        this._allCommandsCount = result.sessionCommands.length;\r\n        if (this._allCommandsCount === 0) {\r\n            return null;\r\n        }\r\n\r\n        this._session.incrementRequestCount();\r\n\r\n        this._entities = result.entities;\r\n\r\n        if (this._session.transactionMode === \"ClusterWide\") {\r\n            return new ClusterWideBatchCommand(\r\n                this._session.conventions,\r\n                result.sessionCommands,\r\n                result.options,\r\n                this._session.disableAtomicDocumentWritesInClusterWideTransaction\r\n            );\r\n        }\r\n        return new SingleNodeBatchCommand(this._session.conventions, result.sessionCommands, result.options);\r\n    }\r\n\r\n    private static _throwOnNullResults() {\r\n        throwError(\"InvalidOperationException\",\r\n            \"Received empty response from the server. This is not supposed to happen and is likely a bug.\");\r\n    }\r\n\r\n    public setResult(result: BatchCommandResult): void {\r\n\r\n        if (!result.results) {\r\n            BatchOperation._throwOnNullResults();\r\n            return;\r\n        }\r\n\r\n        this._onSuccessfulRequest.clearSessionStateAfterSuccessfulSaveChanges();\r\n\r\n        if (this._session.transactionMode === \"ClusterWide\") {\r\n            if (result.transactionIndex <= 0) {\r\n                throwError(\r\n                    \"ClientVersionMismatchException\",\r\n                    \"Cluster transaction was send to a node that is not supporting it. \"\r\n                    + \"So it was executed ONLY on the requested node on \"\r\n                    + this._session.requestExecutor.getUrl());\r\n            }\r\n        }\r\n\r\n        const results = result.results;\r\n        for (let i = 0; i < this._sessionCommandsCount; i++) {\r\n            const batchResult = results[i];\r\n            if (!batchResult) {\r\n                continue;\r\n            }\r\n\r\n            const type = getCommandType(batchResult);\r\n\r\n            switch (type) {\r\n                case \"PUT\": {\r\n                    this._handlePut(i, batchResult, false);\r\n                    break;\r\n                }\r\n                case \"ForceRevisionCreation\": {\r\n                    this._handleForceRevisionCreation(batchResult);\r\n                    break;\r\n                }\r\n                case \"DELETE\": {\r\n                    this._handleDelete(batchResult);\r\n                    break;\r\n                }\r\n                case \"CompareExchangePUT\": {\r\n                    this._handleCompareExchangePut(batchResult);\r\n                    break;\r\n                }\r\n                case \"CompareExchangeDELETE\": {\r\n                    this._handleCompareExchangeDelete(batchResult);\r\n                    break;\r\n                }\r\n                default: {\r\n                    throwError(\"InvalidOperationException\", `Command '${type}' is not supported.`);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = this._sessionCommandsCount; i < this._allCommandsCount; i++) {\r\n            const batchResult = result.results[i];\r\n            if (!batchResult) {\r\n                continue;\r\n            }\r\n\r\n            const type = getCommandType(batchResult);\r\n            switch (type) {\r\n                case \"PUT\": {\r\n                    this._handlePut(i, batchResult, true);\r\n                    break;\r\n                }\r\n                case \"DELETE\": {\r\n                    this._handleDelete(batchResult);\r\n                    break;\r\n                }\r\n                case \"PATCH\": {\r\n                    this._handlePatch(batchResult);\r\n                    break;\r\n                }\r\n                case \"AttachmentPUT\": {\r\n                    this._handleAttachmentPut(batchResult);\r\n                    break;\r\n                }\r\n                case \"AttachmentDELETE\": {\r\n                    this._handleAttachmentDelete(batchResult);\r\n                    break;\r\n                }\r\n                case \"AttachmentMOVE\": {\r\n                    this._handleAttachmentMove(batchResult);\r\n                    break;\r\n                }\r\n                case \"AttachmentCOPY\": {\r\n                    this._handleAttachmentCopy(batchResult);\r\n                    break;\r\n                }\r\n                case \"CompareExchangePUT\":\r\n                case \"CompareExchangeDELETE\":\r\n                case \"ForceRevisionCreation\": {\r\n                    break;\r\n                }\r\n                case \"Counters\": {\r\n                    this._handleCounters(batchResult);\r\n                    break;\r\n                }\r\n                case \"TimeSeries\":\r\n                case \"TimeSeriesWithIncrements\": {\r\n                    //TODO: RavenDB-13474 add to time series cache\r\n                    break;\r\n                }\r\n                case \"TimeSeriesCopy\": {\r\n                    break;\r\n                }\r\n                case \"BatchPATCH\": {\r\n                    break;\r\n                }\r\n                default: {\r\n                    throwError(\"InvalidOperationException\", `Command '${type}' is not supported.`);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._finalizeResults();\r\n    }\r\n\r\n    private _finalizeResults(): void {\r\n        if (!this._modifications) {\r\n            return;\r\n        }\r\n\r\n        for (const [ id, docInfo ] of this._modifications.entries()) {\r\n            this._applyMetadataModifications(id, docInfo);\r\n        }\r\n    }\r\n\r\n    private _applyMetadataModifications(id: string, documentInfo: DocumentInfo): void {\r\n        documentInfo.metadataInstance = null;\r\n        documentInfo.metadata = ObjectUtil.deepLiteralClone(documentInfo.metadata);\r\n\r\n        documentInfo.metadata[\"@change-vector\"] = documentInfo.changeVector;\r\n\r\n        const documentCopy = ObjectUtil.deepLiteralClone(documentInfo.document);\r\n        documentCopy[CONSTANTS.Documents.Metadata.KEY] = documentInfo.metadata;\r\n\r\n        documentInfo.document = documentCopy;\r\n    }\r\n\r\n    private _getOrAddModifications(\r\n        id: string, documentInfo: DocumentInfo, applyModifications: boolean): DocumentInfo {\r\n        if (!this._modifications) {\r\n            this._modifications = CaseInsensitiveKeysMap.create<DocumentInfo>();\r\n        }\r\n\r\n        let modifiedDocumentInfo = this._modifications.get(id);\r\n        if (modifiedDocumentInfo) {\r\n            if (applyModifications) {\r\n                this._applyMetadataModifications(id, modifiedDocumentInfo);\r\n            }\r\n        } else {\r\n            modifiedDocumentInfo = documentInfo;\r\n            this._modifications.set(id, documentInfo);\r\n        }\r\n\r\n        return modifiedDocumentInfo;\r\n    }\r\n\r\n    private _handleCompareExchangePut(batchResult: object) {\r\n        this._handleCompareExchangeInternal(\"CompareExchangePUT\", batchResult);\r\n    }\r\n\r\n    private _handleCompareExchangeDelete(batchResult: object) {\r\n        this._handleCompareExchangeInternal(\"CompareExchangeDELETE\", batchResult);\r\n    }\r\n\r\n    private _handleCompareExchangeInternal(commandType: CommandType, batchResult: any) {\r\n        const key = batchResult.key;\r\n        if (!key) {\r\n            BatchOperation._throwMissingField(commandType, \"Key\");\r\n        }\r\n\r\n        const index = batchResult.index;\r\n        if (TypeUtil.isNullOrUndefined(index)) {\r\n            BatchOperation._throwMissingField(commandType, \"Index\");\r\n        }\r\n        const clusterSession = this._session.clusterSession;\r\n        clusterSession.updateState(key, index);\r\n    }\r\n\r\n    private _handleAttachmentCopy(batchResult: object): void {\r\n        this._handleAttachmentPutInternal(batchResult, \"AttachmentCOPY\", \"id\", \"name\", \"documentChangeVector\");\r\n    }\r\n\r\n    private _handleAttachmentMove(batchResult: object): void {\r\n        this._handleAttachmentDeleteInternal(batchResult, \"AttachmentMOVE\", \"id\", \"name\", \"documentChangeVector\");\r\n        this._handleAttachmentPutInternal(batchResult, \"AttachmentMOVE\", \"destinationId\", \"destinationName\", \"documentChangeVector\");\r\n    }\r\n\r\n    private _handleAttachmentDelete(batchResult: object): void {\r\n        this._handleAttachmentDeleteInternal(\r\n            batchResult, \"AttachmentDELETE\", CONSTANTS.Documents.Metadata.ID, \"name\", \"documentChangeVector\");\r\n    }\r\n\r\n    private _handleAttachmentDeleteInternal(\r\n        batchResult: object, type: CommandType, idFieldName: string, attachmentNameFieldName: string, documentChangeVectorFieldName: string) {\r\n        const id = BatchOperation._getStringField(batchResult, type, idFieldName);\r\n        const sessionDocumentInfo = this._session.documentsById.getValue(id);\r\n        if (!sessionDocumentInfo) {\r\n            return;\r\n        }\r\n\r\n        const documentInfo = this._getOrAddModifications(id, sessionDocumentInfo, true);\r\n\r\n        const documentChangeVector = BatchOperation._getStringField(batchResult, type, documentChangeVectorFieldName, false);\r\n        if (documentChangeVector) {\r\n            documentInfo.changeVector = documentChangeVector;\r\n        }\r\n\r\n        const attachmentsJson = documentInfo.metadata[\"@attachments\"];\r\n        if (!attachmentsJson || !Object.keys(attachmentsJson).length) {\r\n            return;\r\n        }\r\n\r\n        const name = BatchOperation._getStringField(batchResult, type, attachmentNameFieldName);\r\n        const attachments = [];\r\n        documentInfo.metadata[\"@attachments\"] = attachments;\r\n        for (const attachment of attachmentsJson) {\r\n            const attachmentName = BatchOperation._getStringField(attachment, type, \"name\");\r\n            if (attachmentName === name) {\r\n                continue;\r\n            }\r\n\r\n            attachments.push(attachment);\r\n        }\r\n    }\r\n\r\n    private _handleAttachmentPut(batchResult: object): void {\r\n        this._handleAttachmentPutInternal(\r\n            batchResult, \"AttachmentPUT\", \"id\", \"name\", \"documentChangeVector\");\r\n    }\r\n\r\n    private _handleAttachmentPutInternal(\r\n        batchResult: object, type: CommandType, idFieldName: string, attachmentNameFieldName: string, documentChangeVectorFieldName: string): void {\r\n        const id = BatchOperation._getStringField(batchResult, type, idFieldName);\r\n        const sessionDocumentInfo = this._session.documentsById.getValue(id);\r\n        if (!sessionDocumentInfo) {\r\n            return;\r\n        }\r\n\r\n        const documentInfo = this._getOrAddModifications(id, sessionDocumentInfo, false);\r\n        const documentChangeVector = BatchOperation._getStringField(batchResult, type, documentChangeVectorFieldName, false);\r\n        if (documentChangeVector) {\r\n            documentInfo.changeVector = documentChangeVector;\r\n        }\r\n\r\n        let attachments = documentInfo.metadata[\"@attachments\"];\r\n        if (!attachments) {\r\n            attachments = [];\r\n            documentInfo.metadata[\"@attachments\"] = attachments;\r\n        }\r\n\r\n        attachments.push({\r\n            changeVector: BatchOperation._getStringField(batchResult, type, \"changeVector\"),\r\n            contentType: BatchOperation._getStringField(batchResult, type, \"contentType\"),\r\n            hash: BatchOperation._getStringField(batchResult, type, \"hash\"),\r\n            name: BatchOperation._getStringField(batchResult, type, \"name\"),\r\n            size: BatchOperation._getNumberField(batchResult, type, \"size\")\r\n        });\r\n    }\r\n\r\n    private _handlePatch(batchResult: object): void {\r\n        const status = batchResult[\"patchStatus\"] as PatchStatus;\r\n        if (!status) {\r\n            BatchOperation._throwMissingField(\"PATCH\", \"PatchStatus\");\r\n        }\r\n\r\n        switch (status) {\r\n            case \"Created\":\r\n            case \"Patched\": {\r\n                const document = batchResult[\"modifiedDocument\"];\r\n                if (!document) {\r\n                    return;\r\n                }\r\n\r\n                const id = BatchOperation._getStringField(batchResult, \"PUT\", \"id\");\r\n                const sessionDocumentInfo = this._session.documentsById.getValue(id);\r\n                if (!sessionDocumentInfo) {\r\n                    return;\r\n                }\r\n\r\n                const documentInfo = this._getOrAddModifications(id, sessionDocumentInfo, true);\r\n                const changeVector = BatchOperation._getStringField(batchResult, \"PATCH\", \"changeVector\");\r\n                const lastModified = BatchOperation._getStringField(batchResult, \"PATCH\", \"lastModified\");\r\n                documentInfo.changeVector = changeVector;\r\n                documentInfo.metadata[CONSTANTS.Documents.Metadata.ID] = id;\r\n                documentInfo.metadata[CONSTANTS.Documents.Metadata.CHANGE_VECTOR] = changeVector;\r\n                documentInfo.metadata[CONSTANTS.Documents.Metadata.LAST_MODIFIED] = lastModified;\r\n                documentInfo.document = document;\r\n                this._applyMetadataModifications(id, documentInfo);\r\n                if (documentInfo.entity) {\r\n                    this._session.entityToJson.populateEntity(\r\n                        documentInfo.entity, id, documentInfo.document);\r\n\r\n                    const afterSaveChangesEventArgs =\r\n                        new SessionAfterSaveChangesEventArgs(\r\n                            this._session, documentInfo.id, documentInfo.entity);\r\n\r\n                    this._session.emit(\"afterSaveChanges\", afterSaveChangesEventArgs);\r\n                }\r\n\r\n                break;\r\n            }\r\n       }\r\n    }\r\n\r\n    private _handleDelete(batchResult: object) {\r\n        this._handleDeleteInternal(batchResult, \"DELETE\");\r\n    }\r\n\r\n    private _handleDeleteInternal(batchResult: object, type: CommandType): void {\r\n        const id = BatchOperation._getStringField(batchResult, type, \"id\");\r\n        const documentInfo = this._session.documentsById.getValue(id);\r\n        if (!documentInfo) {\r\n            return;\r\n        }\r\n        this._session.documentsById.remove(id);\r\n        if (documentInfo.entity) {\r\n            this._session.documentsByEntity.remove(documentInfo.entity);\r\n            this._session.deletedEntities.remove(documentInfo.entity);\r\n        }\r\n    }\r\n\r\n    private _handleForceRevisionCreation(batchResult: object) {\r\n        // When forcing a revision for a document that does Not have any revisions yet then the HasRevisions flag is added to the document.\r\n        // In this case we need to update the tracked entities in the session with the document new change-vector.\r\n\r\n        if (!BatchOperation._getBooleanField(batchResult, \"ForceRevisionCreation\", \"revisionCreated\")) {\r\n            // no forced revision was created...nothing to update.\r\n            return;\r\n        }\r\n\r\n        const id = BatchOperation._getStringField(batchResult, \"ForceRevisionCreation\", CONSTANTS.Documents.Metadata.ID);\r\n        const changeVector = BatchOperation._getStringField(batchResult, \"ForceRevisionCreation\", CONSTANTS.Documents.Metadata.CHANGE_VECTOR);\r\n\r\n        const documentInfo = this._session.documentsById.getValue(id);\r\n        if (!documentInfo) {\r\n            return;\r\n        }\r\n\r\n        documentInfo.changeVector = changeVector;\r\n        this._handleMetadataModifications(documentInfo, batchResult, id, changeVector);\r\n\r\n        const afterSaveChangesEventArgs = new SessionAfterSaveChangesEventArgs(this._session, documentInfo.id, documentInfo.entity);\r\n        this._session.emit(\"afterSaveChanges\", afterSaveChangesEventArgs);\r\n    }\r\n\r\n    private _handlePut(index: number, batchResult: object, isDeferred: boolean): void {\r\n        let entity = null;\r\n        let documentInfo = null;\r\n        if (!isDeferred) {\r\n            entity = this._entities[index];\r\n            documentInfo = this._session.documentsByEntity.get(entity);\r\n            if (!documentInfo) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const id = BatchOperation._getStringField(batchResult, \"PUT\", CONSTANTS.Documents.Metadata.ID);\r\n        const changeVector = BatchOperation._getStringField(\r\n            batchResult, \"PUT\", CONSTANTS.Documents.Metadata.CHANGE_VECTOR);\r\n\r\n        if (isDeferred) {\r\n            const sessionDocumentInfo = this._session.documentsById.getValue(id);\r\n            if (!sessionDocumentInfo) {\r\n                return;\r\n            }\r\n\r\n            documentInfo = this._getOrAddModifications(id, sessionDocumentInfo, true);\r\n            entity = documentInfo.entity;\r\n        }\r\n\r\n        this._handleMetadataModifications(documentInfo, batchResult, id, changeVector);\r\n\r\n        this._session.documentsById.add(documentInfo);\r\n\r\n        if (entity) {\r\n            this._session.generateEntityIdOnTheClient.trySetIdentity(entity, id);\r\n        }\r\n\r\n        const afterSaveChangesEventArgs = new SessionAfterSaveChangesEventArgs(\r\n            this._session, documentInfo.id, documentInfo.entity);\r\n        this._session.emit(\"afterSaveChanges\", afterSaveChangesEventArgs);\r\n    }\r\n\r\n    private _handleMetadataModifications(documentInfo: DocumentInfo, batchResult: object, id: string, changeVector: string) {\r\n        for (const propertyName of Object.keys(batchResult)) {\r\n            if (propertyName === \"type\") {\r\n                continue;\r\n            }\r\n\r\n            documentInfo.metadata[propertyName] = batchResult[propertyName];\r\n        }\r\n\r\n        documentInfo.id = id;\r\n        documentInfo.changeVector = changeVector;\r\n        this._applyMetadataModifications(id, documentInfo);\r\n    }\r\n\r\n    private _handleCounters(batchResult: object): void {\r\n        const docId = BatchOperation._getStringField(batchResult, \"Counters\", \"id\");\r\n        const countersDetail = batchResult[\"countersDetail\"];\r\n        if (!countersDetail) {\r\n            BatchOperation._throwMissingField(\"Counters\", \"CountersDetail\");\r\n        }\r\n\r\n        const counters = countersDetail[\"counters\"] as object[];\r\n        if (!counters) {\r\n            BatchOperation._throwMissingField(\"Counters\", \"Counters\");\r\n        }\r\n\r\n        let cache = this._session.countersByDocId.get(docId);\r\n        if (!cache) {\r\n            cache = {\r\n                gotAll: false,\r\n                data: CaseInsensitiveKeysMap.create<number>()\r\n            } as CounterTracking;\r\n            this._session.countersByDocId.set(docId, cache);\r\n        }\r\n\r\n        const changeVector = BatchOperation._getStringField(batchResult, \"Counters\", \"documentChangeVector\", false);\r\n        if (changeVector) {\r\n            const documentInfo = this._session.documentsById.getValue(docId);\r\n            if (documentInfo) {\r\n                documentInfo.changeVector = changeVector;\r\n            }\r\n        }\r\n\r\n        for (const counter of counters) {\r\n            const name = counter[\"counterName\"];\r\n            const value = counter[\"totalValue\"];\r\n            if (name && value) {\r\n                cache.data.set(name, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _getStringField(json: object, type: CommandType, fieldName: string, throwOnMissing: boolean  = true): string {\r\n        if ((!(fieldName in json) || TypeUtil.isNullOrUndefined(json[fieldName])) && throwOnMissing) {\r\n            BatchOperation._throwMissingField(type, fieldName);\r\n        }\r\n\r\n        const jsonNode = json[fieldName];\r\n        if (jsonNode && !TypeUtil.isString(jsonNode)) {\r\n            throwError(\"InvalidOperationException\", `Expected response field ${fieldName} to be a string.`);\r\n        }\r\n\r\n        return jsonNode;\r\n    }\r\n\r\n    private static _getNumberField(json: object, type: CommandType, fieldName: string): number {\r\n        if (!(fieldName in json)) {\r\n            BatchOperation._throwMissingField(type, fieldName);\r\n        }\r\n\r\n        const jsonNode = json[fieldName];\r\n        return jsonNode;\r\n    }\r\n\r\n    private static _getBooleanField(json: object, type: CommandType, fieldName: string): boolean {\r\n        if (!(fieldName in json)) {\r\n            BatchOperation._throwMissingField(type, fieldName);\r\n        }\r\n\r\n        const jsonNode = json[fieldName];\r\n        return jsonNode;\r\n    }\r\n\r\n    private static _throwInvalidValue(arg: string, fieldName: string) {\r\n        throwError(\"InvalidOperationException\", \"'\" + arg + \"' is not a valid value for field \" + fieldName);\r\n    }\r\n\r\n    private static _throwMissingField(type: CommandType, fieldName: string): void {\r\n        throwError(\"InvalidOperationException\", type + \" response is invalid. Field '\" + fieldName + \"' is missing.\");\r\n    }\r\n\r\n}\r\n\r\nfunction getCommandType(batchResult: object): CommandType {\r\n    return batchResult[\"type\"] || \"None\";\r\n}\r\n"]}