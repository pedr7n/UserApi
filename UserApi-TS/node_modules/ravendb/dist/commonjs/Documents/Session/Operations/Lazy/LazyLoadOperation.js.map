{"version":3,"file":"LazyLoadOperation.js","sourceRoot":"","sources":["../../../../../../src/Documents/Session/Operations/Lazy/LazyLoadOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { ILazyOperation } from \"./ILazyOperation.js\";\r\nimport { ObjectTypeDescriptor } from \"../../../../Types/index.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"../../InMemoryDocumentSessionOperations.js\";\r\nimport { LoadOperation } from \"../LoadOperation.js\";\r\nimport { GetRequest } from \"../../../Commands/MultiGet/GetRequest.js\";\r\nimport { QueryResult } from \"../../../Queries/QueryResult.js\";\r\nimport { GetResponse } from \"../../../Commands/MultiGet/GetResponse.js\";\r\nimport { GetDocumentsResult, GetDocumentsCommand } from \"../../../Commands/GetDocumentsCommand.js\";\r\nimport { stringToReadable } from \"../../../../Utility/StreamUtil.js\";\r\nimport { StringUtil } from \"../../../../Utility/StringUtil.js\";\r\nimport { StringBuilder } from \"../../../../Utility/StringBuilder.js\";\r\n\r\nexport class LazyLoadOperation<T extends object> implements ILazyOperation {\r\n    private readonly _clazz: ObjectTypeDescriptor<T>;\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n    private readonly _loadOperation: LoadOperation;\r\n    private _ids: string[];\r\n    private _includes: string[];\r\n    private _alreadyInSession: string[] = [];\r\n    private _result: any;\r\n    private _queryResult: QueryResult;\r\n    private _requiresRetry: boolean;\r\n\r\n    public constructor(\r\n        session: InMemoryDocumentSessionOperations, loadOperation: LoadOperation, clazz: ObjectTypeDescriptor<T>) {\r\n        this._clazz = clazz;\r\n        this._session = session;\r\n        this._loadOperation = loadOperation;\r\n    }\r\n\r\n    public createRequest(): GetRequest {\r\n        const queryBuilder = new StringBuilder(\"?\");\r\n\r\n        if (this._includes) {\r\n            for (const include of this._includes) {\r\n                queryBuilder.append(\"&include=\").append(include);\r\n            }\r\n        }\r\n\r\n        let hasItems = false;\r\n\r\n        for (const id of this._ids) {\r\n            if (this._session.isLoadedOrDeleted(id)) {\r\n                this._alreadyInSession.push(id);\r\n            } else {\r\n                hasItems = true;\r\n                queryBuilder.append(\"&id=\")\r\n                    .append(encodeURIComponent(id));\r\n            }\r\n        }\r\n\r\n        if (!hasItems) {\r\n            // no need to hit the server\r\n            this._result = this._loadOperation.getDocuments(this._clazz);\r\n            return null;\r\n        }\r\n\r\n        const getRequest = new GetRequest();\r\n        getRequest.url = \"/docs\";\r\n        getRequest.query = queryBuilder.toString();\r\n        return getRequest;\r\n    }\r\n\r\n    public byId(id: string): LazyLoadOperation<T> {\r\n        if (StringUtil.isNullOrEmpty(id)) {\r\n            return this;\r\n        }\r\n\r\n        if (!this._ids) {\r\n            this._ids = [id];\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public byIds(ids: string[]): LazyLoadOperation<T> {\r\n        this._ids = Array.from(new Set(ids.filter(x => !StringUtil.isNullOrEmpty(x))));\r\n        return this;\r\n    }\r\n\r\n    public withIncludes(includes: string[]): LazyLoadOperation<T> {\r\n        this._includes = includes;\r\n        return this;\r\n    }\r\n\r\n    public get result(): any {\r\n        return this._result;\r\n    }\r\n\r\n    public set result(result) {\r\n        this._result = result;\r\n    }\r\n\r\n    public get queryResult(): QueryResult {\r\n        return this._queryResult;\r\n    }\r\n\r\n    public set queryResult(queryResult) {\r\n        this._queryResult = queryResult;\r\n    }\r\n\r\n    public get requiresRetry() {\r\n        return this._requiresRetry;\r\n    }\r\n\r\n    public set requiresRetry(result) {\r\n        this._requiresRetry = result;\r\n    }\r\n\r\n    public async handleResponseAsync(response: GetResponse): Promise<void> {\r\n        if (response.forceRetry) {\r\n            this.result = null;\r\n            this.requiresRetry = true;\r\n            return;\r\n        }\r\n\r\n        const multiLoadResult: GetDocumentsResult =\r\n            await GetDocumentsCommand.parseDocumentsResultResponseAsync(\r\n                stringToReadable(response.result), this._session.conventions);\r\n\r\n        this._handleResponse(multiLoadResult);\r\n    }\r\n\r\n    private _handleResponse(loadResult: GetDocumentsResult): void {\r\n        if (this._alreadyInSession.length) {\r\n            // push this to the session\r\n            new LoadOperation(this._session)\r\n                .byIds(this._alreadyInSession)\r\n                .getDocuments(this._clazz);\r\n        }\r\n\r\n        this._loadOperation.setResult(loadResult);\r\n\r\n        if (!this._requiresRetry) {\r\n            this._result = this._loadOperation.getDocuments(this._clazz);\r\n        }\r\n    }\r\n\r\n    public getResult() {\r\n        return null;\r\n    }\r\n}\r\n"]}