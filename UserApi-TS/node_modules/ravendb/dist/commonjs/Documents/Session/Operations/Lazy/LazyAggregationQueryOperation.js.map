{"version":3,"file":"LazyAggregationQueryOperation.js","sourceRoot":"","sources":["../../../../../../src/Documents/Session/Operations/Lazy/LazyAggregationQueryOperation.ts"],"names":[],"mappings":";;;AAEA,kEAA6E;AAE7E,4EAAsE;AAEtE,iFAA2E;AAC3E,qEAAqE;AAGrE,MAAa,6BAA6B;IAErB,QAAQ,CAAoC;IAC5C,WAAW,CAAa;IACxB,OAAO,CAAuB;IAC9B,eAAe,CACoB;IAEpD,YACI,OAA0C,EAC1C,UAAsB,EACtB,MAA4B,EAC5B,cAA+D;QAC/D,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAEM,aAAa;QAChB,MAAM,OAAO,GAAG,IAAI,0BAAU,EAAE,CAAC;QACjC,OAAO,CAAC,GAAG,GAAG,UAAU,CAAC;QACzB,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;QACxB,OAAO,CAAC,KAAK,GAAG,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QACtG,OAAO,CAAC,IAAI,GAAG,IAAA,+BAAe,EAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5E,OAAO,OAAO,CAAC;IACnB,CAAC;IAEO,OAAO,CAAM;IACb,YAAY,CAAc;IAC1B,cAAc,CAAU;IAEhC,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,IAAW,MAAM,CAAC,MAAM;QACpB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,IAAW,WAAW,CAAC,WAAW;QAC9B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED,IAAW,aAAa,CAAC,MAAM;QAC3B,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,mBAAmB,CAAC,QAAqB;QAClD,IAAI,QAAQ,CAAC,UAAU,EAAE,CAAC;YACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,OAAO;QACX,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,wCAAiB,CAAC,6BAA6B,CAChE,IAAA,gCAAgB,EAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACzE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAEO,eAAe,CAAC,WAAwB;QAC5C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAChD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;CACJ;AAxED,sEAwEC","sourcesContent":["import { ILazyOperation } from \"./ILazyOperation.js\";\r\nimport { QueryResult } from \"../../../Queries/QueryResult.js\";\r\nimport { IndexQuery, writeIndexQuery } from \"../../../Queries/IndexQuery.js\";\r\nimport { FacetResultObject, AggregationQueryBase } from \"../../../Queries/Facets/AggregationQueryBase.js\";\r\nimport { GetRequest } from \"../../../Commands/MultiGet/GetRequest.js\";\r\nimport { GetResponse } from \"../../../Commands/MultiGet/GetResponse.js\";\r\nimport { FacetQueryCommand } from \"../../../Commands/FacetQueryCommand.js\";\r\nimport { stringToReadable } from \"../../../../Utility/StreamUtil.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"../../InMemoryDocumentSessionOperations.js\";\r\n\r\nexport class LazyAggregationQueryOperation implements ILazyOperation {\r\n\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n    private readonly _indexQuery: IndexQuery;\r\n    private readonly _parent: AggregationQueryBase;\r\n    private readonly _processResults:\r\n        (queryResult: QueryResult) => FacetResultObject;\r\n\r\n    public constructor(\r\n        session: InMemoryDocumentSessionOperations,\r\n        indexQuery: IndexQuery,\r\n        parent: AggregationQueryBase,\r\n        processResults: (queryResult: QueryResult) => FacetResultObject) {\r\n        this._session = session;\r\n        this._indexQuery = indexQuery;\r\n        this._processResults = processResults;\r\n        this._parent = parent;\r\n    }\r\n\r\n    public createRequest(): GetRequest {\r\n        const request = new GetRequest();\r\n        request.url = \"/queries\";\r\n        request.method = \"POST\";\r\n        request.query = \"?queryHash=\" + this._indexQuery.getQueryHash(this._session.conventions.objectMapper);\r\n        request.body = writeIndexQuery(this._session.conventions, this._indexQuery);\r\n        return request;\r\n    }\r\n\r\n    private _result: any;\r\n    private _queryResult: QueryResult;\r\n    private _requiresRetry: boolean;\r\n\r\n    public get result(): any {\r\n        return this._result;\r\n    }\r\n\r\n    public set result(result) {\r\n        this._result = result;\r\n    }\r\n\r\n    public get queryResult(): QueryResult {\r\n        return this._queryResult;\r\n    }\r\n\r\n    public set queryResult(queryResult) {\r\n        this._queryResult = queryResult;\r\n    }\r\n\r\n    public get requiresRetry() {\r\n        return this._requiresRetry;\r\n    }\r\n\r\n    public set requiresRetry(result) {\r\n        this._requiresRetry = result;\r\n    }\r\n\r\n    public async handleResponseAsync(response: GetResponse): Promise<void> {\r\n        if (response.forceRetry) {\r\n            this._result = null;\r\n            this._requiresRetry = true;\r\n            return;\r\n        }\r\n\r\n        const result = await FacetQueryCommand.parseQueryResultResponseAsync(\r\n            stringToReadable(response.result), this._session.conventions, false);\r\n        this._handleResponse(result);\r\n    }\r\n\r\n    private _handleResponse(queryResult: QueryResult): void {\r\n        this.result = this._processResults(queryResult);\r\n        this.queryResult = queryResult;\r\n    }\r\n}\r\n"]}