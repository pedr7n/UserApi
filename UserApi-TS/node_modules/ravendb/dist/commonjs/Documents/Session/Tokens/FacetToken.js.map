{"version":3,"file":"FacetToken.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Tokens/FacetToken.ts"],"names":[],"mappings":"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","sourcesContent":["import { QueryToken } from \"./QueryToken.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { Facet } from \"../../Queries/Facets/Facet.js\";\r\nimport { FacetAggregation, FacetOptions } from \"../../Queries/Facets/index.js\";\r\nimport { FacetBase } from \"../../Queries/Facets/FacetBase.js\";\r\nimport { GenericRangeFacet } from \"../../Queries/Facets/GenericRangeFacet.js\";\r\nimport { RangeFacet } from \"../../Queries/Facets/RangeFacet.js\";\r\nimport { QueryFieldUtil } from \"../../Queries/QueryFieldUtil.js\";\r\nimport { StringBuilder } from \"../../../Utility/StringBuilder.js\";\r\n\r\nexport interface FacetTokenSetupDocumentIdOptions {\r\n    facetSetupDocumentId: string;\r\n}\r\n\r\nexport interface FacetTokenAggregateByFieldNameOptions {\r\n    aggregateByFieldName?: string;\r\n    alias: string;\r\n    ranges?: string[];\r\n    optionsParameterName: string;\r\n}\r\n\r\nexport class FacetToken extends QueryToken {\r\n    private readonly _facetSetupDocumentId: string;\r\n    private readonly _aggregateByFieldName: string;\r\n    private readonly _alias: string;\r\n    private readonly _ranges: string[];\r\n    private readonly _optionsParameterName: string;\r\n    private readonly _aggregations: FacetAggregationToken[];\r\n\r\n    public getName(): string {\r\n        return this._alias || this._aggregateByFieldName;\r\n    }\r\n\r\n    private constructor(opts: FacetTokenSetupDocumentIdOptions);\r\n    private constructor(opts: FacetTokenAggregateByFieldNameOptions);\r\n    private constructor(opts: FacetTokenSetupDocumentIdOptions | FacetTokenAggregateByFieldNameOptions) {\r\n        super();\r\n\r\n        if (!opts) {\r\n            throwError(\"InvalidArgumentException\", \"FacetToken options cannot be null.\");\r\n        }\r\n\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        if (opts.hasOwnProperty(\"facetSetupDocumentId\" as keyof FacetTokenSetupDocumentIdOptions)) {\r\n            this._facetSetupDocumentId = (opts as FacetTokenSetupDocumentIdOptions).facetSetupDocumentId;\r\n            // eslint-disable-next-line no-prototype-builtins\r\n        } else if (opts.hasOwnProperty(\"aggregateByFieldName\" as keyof FacetTokenAggregateByFieldNameOptions)\r\n            // eslint-disable-next-line no-prototype-builtins\r\n            || opts.hasOwnProperty(\"alias\" as keyof FacetTokenAggregateByFieldNameOptions)) {\r\n            this._aggregateByFieldName =\r\n                (opts as FacetTokenAggregateByFieldNameOptions).aggregateByFieldName;\r\n            this._alias =\r\n                (opts as FacetTokenAggregateByFieldNameOptions).alias;\r\n            this._ranges =\r\n                (opts as FacetTokenAggregateByFieldNameOptions).ranges;\r\n            this._optionsParameterName =\r\n                (opts as FacetTokenAggregateByFieldNameOptions).optionsParameterName;\r\n            this._aggregations = [];\r\n        } else {\r\n            throwError(\"InvalidArgumentException\", \"Invalid facet token arguments.\");\r\n        }\r\n    }\r\n\r\n    public static create(facetSetupDocumentId: string): FacetToken;\r\n    public static create(facet: GenericRangeFacet, addQueryParameter: (o: any) => string): FacetToken;\r\n    public static create(facet: RangeFacet, addQueryParameter: (o: any) => string): FacetToken;\r\n    public static create(facet: Facet, addQueryParameter: (o: any) => string): FacetToken;\r\n    public static create(facet: FacetBase, addQueryParameter: (o: any) => string): FacetToken;\r\n    public static create(\r\n        facetSetupDocumentIdOrFacet: string | FacetBase,\r\n        addQueryParameter?: (o: any) => string): FacetToken {\r\n        if (!facetSetupDocumentIdOrFacet) {\r\n            throwError(\"InvalidArgumentException\", \"Need to supply either facetSetupDocumentId or a Facet instance.\");\r\n        }\r\n\r\n        if (typeof facetSetupDocumentIdOrFacet === \"string\") {\r\n            if (StringUtil.isNullOrWhitespace(facetSetupDocumentIdOrFacet)) {\r\n                throwError(\"InvalidArgumentException\", \"facetSetupDocumentId cannot be null\");\r\n            }\r\n\r\n            return new FacetToken({ facetSetupDocumentId: facetSetupDocumentIdOrFacet });\r\n        }\r\n\r\n        const facet: FacetBase = facetSetupDocumentIdOrFacet;\r\n        if (facetSetupDocumentIdOrFacet instanceof Facet) {\r\n            const optionsParameterName = FacetToken._getOptionsParameterName(facet, addQueryParameter);\r\n            const token = new FacetToken({\r\n                aggregateByFieldName: QueryFieldUtil.escapeIfNecessary((facet as Facet).fieldName),\r\n                alias: QueryFieldUtil.escapeIfNecessary(facet.displayFieldName),\r\n                optionsParameterName\r\n            });\r\n            FacetToken._applyAggregations(facet, token);\r\n            return token;\r\n        }\r\n\r\n        if (facet instanceof RangeFacet) {\r\n            const optionsParameterName = FacetToken._getOptionsParameterName(facet, addQueryParameter);\r\n            const token = new FacetToken({\r\n                alias: QueryFieldUtil.escapeIfNecessary(facet.displayFieldName),\r\n                ranges: (facet as RangeFacet).ranges,\r\n                optionsParameterName\r\n            });\r\n            FacetToken._applyAggregations(facet, token);\r\n            return token;\r\n        }\r\n\r\n        if (facet instanceof GenericRangeFacet) {\r\n            const optionsParameterName = FacetToken._getOptionsParameterName(facet, addQueryParameter);\r\n            const ranges = [];\r\n            for (const rangeBuilder of (facet as GenericRangeFacet).ranges) {\r\n                ranges.push(GenericRangeFacet.parse(rangeBuilder, addQueryParameter));\r\n            }\r\n            const token: FacetToken = new FacetToken({\r\n                alias: QueryFieldUtil.escapeIfNecessary(facet.displayFieldName),\r\n                ranges,\r\n                optionsParameterName\r\n            });\r\n            FacetToken._applyAggregations(facet, token);\r\n            return token;\r\n        }\r\n\r\n        // this is just a dispatcher\r\n        return facet.toFacetToken(addQueryParameter);\r\n    }\r\n\r\n    public writeTo(writer: StringBuilder): void {\r\n        writer.append(\"facet(\");\r\n        if (this._facetSetupDocumentId) {\r\n            writer.append(`id('${this._facetSetupDocumentId}'))`);\r\n            return;\r\n        }\r\n\r\n        let firstArgument = false;\r\n        if (this._aggregateByFieldName) {\r\n            writer.append(this._aggregateByFieldName);\r\n        } else if (this._ranges) {\r\n            let firstInRange = true;\r\n            for (const range of this._ranges) {\r\n                if (!firstInRange) {\r\n                    writer.append(\", \");\r\n                }\r\n\r\n                firstInRange = false;\r\n                writer.append(range);\r\n            }\r\n        } else {\r\n            firstArgument = true;\r\n        }\r\n\r\n        for (const aggregation of this._aggregations) {\r\n            if (!firstArgument) {\r\n                writer.append(\", \");\r\n            }\r\n            firstArgument = false;\r\n            aggregation.writeTo(writer);\r\n        }\r\n\r\n        if (this._optionsParameterName) {\r\n            writer.append(`, $${this._optionsParameterName}`);\r\n        }\r\n\r\n        writer.append(\")\");\r\n        if (!this._alias || this._alias === this._aggregateByFieldName) {\r\n            return;\r\n        }\r\n\r\n        writer.append(` as ${this._alias}`);\r\n    }\r\n\r\n    private static _applyAggregations(facet: FacetBase, token: FacetToken): void {\r\n        for (const [aggregationKey, aggregationValue] of facet.aggregations.entries()) {\r\n            for (const value of aggregationValue) {\r\n                let aggregationToken: FacetAggregationToken;\r\n                switch (aggregationKey) {\r\n                    case \"Max\": {\r\n                        aggregationToken = FacetAggregationToken.max(value.name, value.displayName);\r\n                        break;\r\n                    }\r\n                    case \"Min\": {\r\n                        aggregationToken = FacetAggregationToken.min(value.name, value.displayName);\r\n                        break;\r\n                    }\r\n                    case \"Average\": {\r\n                        aggregationToken = FacetAggregationToken.average(value.name, value.displayName);\r\n                        break;\r\n                    }\r\n                    case \"Sum\": {\r\n                        aggregationToken = FacetAggregationToken.sum(value.name, value.displayName);\r\n                        break;\r\n                    }\r\n                    default : {\r\n                        throwError(\"NotImplementedException\", \"Unsupported aggregation method: \" + aggregationKey);\r\n                    }\r\n                }\r\n\r\n                token._aggregations.push(aggregationToken);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _getOptionsParameterName(\r\n        facet: FacetBase,\r\n        addQueryParameter: (o: any) => string): string {\r\n        if (facet instanceof Facet) {\r\n            return facet.options && facet.options !== FacetOptions.getDefaultOptions()\r\n                ? addQueryParameter(facet.options)\r\n                : null;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport class FacetAggregationToken extends QueryToken {\r\n\r\n    private _fieldName: string;\r\n    private _fieldDisplayName: string;\r\n    private readonly _aggregation: FacetAggregation;\r\n\r\n    private constructor(fieldName: string, fieldDisplayName: string, aggregation: FacetAggregation) {\r\n        super();\r\n        this._fieldName = fieldName;\r\n        this._fieldDisplayName = fieldDisplayName;\r\n        this._aggregation = aggregation;\r\n    }\r\n\r\n    public writeTo(writer: StringBuilder): void {\r\n        switch (this._aggregation) {\r\n            case \"Max\": {\r\n                writer\r\n                    .append(\"max(\")\r\n                    .append(this._fieldName)\r\n                    .append(\")\");\r\n                break;\r\n            }\r\n            case \"Min\": {\r\n                writer\r\n                    .append(\"min(\")\r\n                    .append(this._fieldName)\r\n                    .append(\")\");\r\n                break;\r\n            }\r\n            case \"Average\": {\r\n                writer\r\n                    .append(\"avg(\")\r\n                    .append(this._fieldName)\r\n                    .append(\")\");\r\n                break;\r\n            }\r\n            case \"Sum\": {\r\n                writer\r\n                    .append(\"sum(\")\r\n                    .append(this._fieldName)\r\n                    .append(\")\");\r\n                break;\r\n            }\r\n            default: {\r\n                throwError(\"InvalidArgumentException\", \"Invalid aggregation mode: \" + this._aggregation);\r\n            }\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(this._fieldDisplayName)) {\r\n            return;\r\n        }\r\n\r\n        writer.append(\" as \");\r\n        QueryToken.writeField(writer, this._fieldDisplayName);\r\n    }\r\n\r\n    public static max(fieldName: string): FacetAggregationToken\r\n    public static max(fieldName: string, fieldDisplayName: string): FacetAggregationToken\r\n    public static max(fieldName: string, fieldDisplayName?: string): FacetAggregationToken {\r\n        if (StringUtil.isNullOrWhitespace(fieldName)) {\r\n            throwError(\"InvalidArgumentException\", \"FieldName can not be null\");\r\n        }\r\n\r\n        return new FacetAggregationToken(fieldName, fieldDisplayName, \"Max\");\r\n    }\r\n\r\n    public static min(fieldName: string): FacetAggregationToken\r\n    public static min(fieldName: string, fieldDisplayName: string): FacetAggregationToken\r\n    public static min(fieldName: string, fieldDisplayName?: string): FacetAggregationToken {\r\n        if (StringUtil.isNullOrWhitespace(fieldName)) {\r\n            throwError(\"InvalidArgumentException\", \"FieldName can not be null\");\r\n        }\r\n\r\n        return new FacetAggregationToken(fieldName, fieldDisplayName, \"Min\");\r\n    }\r\n\r\n    public static average(fieldName: string): FacetAggregationToken\r\n    public static average(fieldName: string, fieldDisplayName: string): FacetAggregationToken\r\n    public static average(fieldName: string, fieldDisplayName?: string): FacetAggregationToken {\r\n        if (StringUtil.isNullOrWhitespace(fieldName)) {\r\n            throwError(\"InvalidArgumentException\", \"FieldName can not be null\");\r\n        }\r\n\r\n        return new FacetAggregationToken(fieldName, fieldDisplayName, \"Average\");\r\n    }\r\n\r\n    public static sum(fieldName: string): FacetAggregationToken\r\n    public static sum(fieldName: string, fieldDisplayName: string): FacetAggregationToken\r\n    public static sum(fieldName: string, fieldDisplayName?: string): FacetAggregationToken {\r\n        if (StringUtil.isNullOrWhitespace(fieldName)) {\r\n            throwError(\"InvalidArgumentException\", \"FieldName can not be null\");\r\n        }\r\n        return new FacetAggregationToken(fieldName, fieldDisplayName, \"Sum\");\r\n    }\r\n}\r\n"]}