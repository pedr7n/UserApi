{"version":3,"file":"FieldsToFetchToken.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Tokens/FieldsToFetchToken.ts"],"names":[],"mappings":";;;AAAA,mDAA6C;AAC7C,2DAA0D;AAE1D,MAAa,kBAAmB,SAAQ,0BAAU;IAEvC,aAAa,CAAW;IACxB,WAAW,CAAW;IACtB,cAAc,CAAU;IACxB,WAAW,CAAS;IAE3B,YAAoB,aAAuB,EAAE,WAAqB,EAAE,cAAuB,EAAE,WAAmB;QAC5G,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAMM,MAAM,CAAC,MAAM,CAAC,aAAuB,EACvB,WAAqB,EAAE,cAAuB,EAAE,WAAoB;QACrF,IAAI,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;YAC1C,IAAA,qBAAU,EAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,cAAc,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE,CAAC;YAChF,IAAA,qBAAU,EAAC,0BAA0B,EACjC,oEAAoE,CAAC,CAAC;QAC9E,CAAC;QAED,OAAO,IAAI,kBAAkB,CAAC,aAAa,EAAE,WAAW,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;IAC3F,CAAC;IAEM,OAAO,CAAC,MAAM;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACjD,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAE3C,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;gBACR,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;YAED,IAAI,CAAC,YAAY,EAAE,CAAC;gBAChB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACJ,0BAAU,CAAC,UAAU,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAChD,CAAC;YAED,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,SAAS;YACb,CAAC;YAED,MAAM,UAAU,GAAW,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAEzE,IAAI,CAAC,UAAU,IAAI,UAAU,KAAK,YAAY,EAAE,CAAC;gBAC7C,SAAS;YACb,CAAC;YAED,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACtB,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC9B,CAAC;IACL,CAAC;CACJ;AA7DD,gDA6DC","sourcesContent":["import { QueryToken } from \"./QueryToken.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\n\r\nexport class FieldsToFetchToken extends QueryToken {\r\n\r\n    public fieldsToFetch: string[];\r\n    public projections: string[];\r\n    public customFunction: boolean;\r\n    public sourceAlias: string;\r\n\r\n    private constructor(fieldsToFetch: string[], projections: string[], customFunction: boolean, sourceAlias: string) {\r\n        super();\r\n        this.fieldsToFetch = fieldsToFetch;\r\n        this.projections = projections;\r\n        this.customFunction = customFunction;\r\n        this.sourceAlias = sourceAlias;\r\n    }\r\n\r\n    public static create(fieldsToFetch: string[],\r\n                         projections: string[], customFunction: boolean): FieldsToFetchToken;\r\n    public static create(fieldsToFetch: string[],\r\n                         projections: string[], customFunction: boolean, sourceAlias: string): FieldsToFetchToken;\r\n    public static create(fieldsToFetch: string[],\r\n                         projections: string[], customFunction: boolean, sourceAlias?: string): FieldsToFetchToken {\r\n        if (!fieldsToFetch || !fieldsToFetch.length) {\r\n            throwError(\"InvalidArgumentException\", \"fieldToFetch cannot be null\");\r\n        }\r\n\r\n        if (!customFunction && projections && projections.length !== fieldsToFetch.length) {\r\n            throwError(\"InvalidArgumentException\",\r\n                \"Length of projections must be the same as length of field to fetch\");\r\n        }\r\n\r\n        return new FieldsToFetchToken(fieldsToFetch, projections, customFunction, sourceAlias);\r\n    }\r\n\r\n    public writeTo(writer): void {\r\n        for (let i = 0; i < this.fieldsToFetch.length; i++) {\r\n            const fieldToFetch = this.fieldsToFetch[i];\r\n\r\n            if (i > 0) {\r\n                writer.append(\", \");\r\n            }\r\n\r\n            if (!fieldToFetch) {\r\n                writer.append(\"null\");\r\n            } else {\r\n                QueryToken.writeField(writer, fieldToFetch);\r\n            }\r\n\r\n            if (this.customFunction) {\r\n                continue;\r\n            }\r\n\r\n            const projection: string = this.projections ? this.projections[i] : null;\r\n\r\n            if (!projection || projection === fieldToFetch) {\r\n                continue;\r\n            }\r\n\r\n            writer.append(\" as \");\r\n            writer.append(projection);\r\n        }\r\n    }\r\n}\r\n"]}