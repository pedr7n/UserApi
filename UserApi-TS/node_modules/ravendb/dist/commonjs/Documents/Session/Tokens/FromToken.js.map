{"version":3,"file":"FromToken.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Tokens/FromToken.ts"],"names":[],"mappings":";;;AAAA,mDAA6C;AAC7C,2DAA0D;AAC1D,kEAA4D;AAE5D,MAAa,SAAU,SAAQ,0BAAU;IAEpB,eAAe,CAAS;IACxB,UAAU,CAAS;IACnB,QAAQ,CAAU;IAClB,MAAM,CAAS;IAEhC,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAEM,KAAK;QACR,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAID,YAAoB,SAAiB,EAAE,cAAsB,EAAE,QAAgB,IAAI;QAC/E,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,cAAc,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAEM,MAAM,CAAC,MAAM,CAAC,SAAiB,EAAE,cAAsB,EAAE,KAAa;QACzE,OAAO,IAAI,SAAS,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;IAC3D,CAAC;IAEO,MAAM,CAAC,iBAAiB,GAAa,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAE9D,OAAO,CAAC,MAAM;QACjB,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;YAC5C,IAAA,qBAAU,EAAC,2BAA2B,EAAE,sDAAsD,CAAC,CAAC;QACpG,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACxB,0BAAU,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YACtD,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC;aAAM,CAAC;YACJ,MAAM;iBACD,MAAM,CAAC,cAAc,CAAC;iBACtB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;iBACvB,MAAM,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;IACL,CAAC;;AA3DL,8BA4DC","sourcesContent":["import { QueryToken } from \"./QueryToken.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\n\r\nexport class FromToken extends QueryToken {\r\n\r\n    private readonly _collectionName: string;\r\n    private readonly _indexName: string;\r\n    private readonly _dynamic: boolean;\r\n    private readonly _alias: string;\r\n\r\n    public get collection(): string {\r\n        return this._collectionName;\r\n    }\r\n\r\n    public get indexName(): string {\r\n        return this._indexName;\r\n    }\r\n\r\n    public get isDynamic() {\r\n        return this._dynamic;\r\n    }\r\n\r\n    public alias(): string {\r\n        return this._alias;\r\n    }\r\n\r\n    private constructor(indexName: string, collectionName: string);\r\n    private constructor(indexName: string, collectionName: string, alias: string);\r\n    private constructor(indexName: string, collectionName: string, alias: string = null) {\r\n        super();\r\n\r\n        this._collectionName = collectionName;\r\n        this._indexName = indexName;\r\n        this._dynamic = !!collectionName;\r\n        this._alias = alias;\r\n    }\r\n\r\n    public static create(indexName: string, collectionName: string, alias: string): FromToken {\r\n        return new FromToken(indexName, collectionName, alias);\r\n    }\r\n\r\n    private static WHITE_SPACE_CHARS: string[] = [\" \", \"\\t\", \"\\r\", \"\\n\"];\r\n\r\n    public writeTo(writer): void {\r\n        if (!this._indexName && !this._collectionName) {\r\n            throwError(\"InvalidOperationException\", \"Either indexName or collectionName must be specified\");\r\n        }\r\n\r\n        if (this._dynamic) {\r\n            writer.append(\"from '\");\r\n            StringUtil.escapeString(writer, this._collectionName);\r\n            writer.append(\"'\");\r\n        } else {\r\n            writer\r\n                .append(\"from index '\")\r\n                .append(this._indexName)\r\n                .append(\"'\");\r\n        }\r\n\r\n        if (this._alias) {\r\n            writer.append(\" as \").append(this._alias);\r\n        }\r\n    }\r\n}\r\n"]}