{"version":3,"file":"VectorSearchToken.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Tokens/VectorSearchToken.ts"],"names":[],"mappings":"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","sourcesContent":["import { WhereToken } from \"./WhereToken.js\";\r\nimport { VectorEmbeddingType } from \"../../Queries/VectorSearch/VectorEmbeddingType.js\";\r\nimport { StringBuilder } from \"../../../Utility/StringBuilder.js\";\r\nimport { vectorSearchConfigurationToMethodName } from \"../../../Utility/VectorSearchUtil.js\";\r\nimport { IVectorEmbeddingFieldFactoryAccessor } from \"../VectorFieldFactory.js\";\r\n\r\nexport class VectorSearchToken extends WhereToken {\r\n    static readonly EMBEDDING_PREFIX = \"embedding.\";\r\n    static readonly EMBEDDING_FOR_DOCUMENT = VectorSearchToken.EMBEDDING_PREFIX + \"forDoc\";\r\n    static readonly EMBEDDING_FOR_RAW = VectorSearchToken.EMBEDDING_PREFIX + \"Raw\";\r\n    static readonly EMBEDDING_TEXT = VectorSearchToken.EMBEDDING_PREFIX + \"text\";\r\n    static readonly EMBEDDING_TEXT_INT8 = VectorSearchToken.EMBEDDING_PREFIX + \"text_i8\";\r\n    static readonly EMBEDDING_TEXT_INT1 = VectorSearchToken.EMBEDDING_PREFIX + \"text_i1\";\r\n    static readonly EMBEDDING_SINGLE = VectorSearchToken.EMBEDDING_PREFIX + \"f32\";\r\n    static readonly EMBEDDING_SINGLE_INT8 = VectorSearchToken.EMBEDDING_PREFIX + \"f32_i8\";\r\n    static readonly EMBEDDING_SINGLE_INT1 = VectorSearchToken.EMBEDDING_PREFIX + \"f32_i1\";\r\n    static readonly EMBEDDING_INT8 = VectorSearchToken.EMBEDDING_PREFIX + \"i8\";\r\n    static readonly EMBEDDING_INT1 = VectorSearchToken.EMBEDDING_PREFIX + \"i1\";\r\n    public static readonly DEFAULT_EMBEDDING_TYPE: VectorEmbeddingType = \"Single\";\r\n    public static readonly DEFAULT_IS_EXACT = false;\r\n    private static readonly AI_TASK_METHOD_NAME = \"ai.task\";\r\n    private readonly _similarityThreshold: number | null;\r\n    private readonly _sourceQuantizationType: VectorEmbeddingType;\r\n    private readonly _targetQuantizationType: VectorEmbeddingType;\r\n    private readonly _numberOfCandidatesForQuerying: number | null;\r\n    private readonly _isDocumentId: boolean;\r\n    private readonly _embeddingsGenerationTaskIdentifier: string | null;\r\n\r\n    public constructor(\r\n        fieldName: string,\r\n        parameterName: string,\r\n        sourceQuantizationType: VectorEmbeddingType,\r\n        targetQuantizationType: VectorEmbeddingType,\r\n        similarityThreshold: number | null,\r\n        numberOfCandidatesForQuerying: number | null,\r\n        isExact: boolean,\r\n        isDocumentId: boolean,\r\n        embeddingsGenerationTaskIdentifier: string | null\r\n    ) {\r\n        super();\r\n        this.fieldName = fieldName;\r\n        this.parameterName = parameterName;\r\n\r\n        this._sourceQuantizationType = sourceQuantizationType;\r\n        this._targetQuantizationType = targetQuantizationType;\r\n        this._similarityThreshold = similarityThreshold;\r\n        this._numberOfCandidatesForQuerying = numberOfCandidatesForQuerying;\r\n        this._isDocumentId = isDocumentId;\r\n        this._embeddingsGenerationTaskIdentifier = embeddingsGenerationTaskIdentifier;\r\n\r\n        this.options = {\r\n            exact: isExact,\r\n            boost: null,\r\n            fuzzy: null,\r\n            proximity: null,\r\n            searchOperator: null,\r\n            fromParameterName: null,\r\n            toParameterName: null,\r\n            method: null,\r\n            whereShape: null,\r\n            distanceErrorPct: null,\r\n            vectorSearch: null\r\n        };\r\n    }\r\n\r\n    public static getTaskIdentifier<T>(fieldAccessor: IVectorEmbeddingFieldFactoryAccessor<T>): string | null {\r\n        if (fieldAccessor.embeddingsGenerationTaskIdentifier) {\r\n            return fieldAccessor.embeddingsGenerationTaskIdentifier;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static getSourceQuantizationType<T>(fieldAccessor: IVectorEmbeddingFieldFactoryAccessor<T>): VectorEmbeddingType {\r\n        if (fieldAccessor.sourceQuantizationType) {\r\n            return fieldAccessor.sourceQuantizationType;\r\n        }\r\n        return VectorSearchToken.DEFAULT_EMBEDDING_TYPE;\r\n    }\r\n\r\n    public static getTargetQuantizationType<T>(fieldAccessor: IVectorEmbeddingFieldFactoryAccessor<T>): VectorEmbeddingType {\r\n        if (fieldAccessor.destinationQuantizationType) {\r\n            return fieldAccessor.destinationQuantizationType;\r\n        }\r\n        return VectorSearchToken.DEFAULT_EMBEDDING_TYPE;\r\n    }\r\n\r\n    public writeTo(writer: StringBuilder): void {\r\n        if (this.options.boost != null) {\r\n            writer.append(\"boost(\");\r\n        }\r\n\r\n        if (this.options.exact) {\r\n            writer.append(\"exact(\");\r\n        }\r\n\r\n        writer.append(\"vector.search(\");\r\n\r\n        if (this._sourceQuantizationType === \"Single\" && this._targetQuantizationType === \"Single\") {\r\n            writer.append(this.fieldName);\r\n        } else {\r\n            const methodName = vectorSearchConfigurationToMethodName(this._sourceQuantizationType, this._targetQuantizationType);\r\n\r\n            if (this._sourceQuantizationType === \"Text\" && this._embeddingsGenerationTaskIdentifier != null) {\r\n                writer.append(`${methodName}(${this.fieldName}, ${VectorSearchToken.AI_TASK_METHOD_NAME}('${this._embeddingsGenerationTaskIdentifier}'))`);\r\n            } else {\r\n                writer.append(`${methodName}(${this.fieldName})`);\r\n            }\r\n        }\r\n\r\n        writer.append(\", \");\r\n\r\n        if (this._isDocumentId) {\r\n            writer.append(`${VectorSearchToken.EMBEDDING_FOR_DOCUMENT}($${this.parameterName})`);\r\n        } else {\r\n            writer.append(`$${this.parameterName}`);\r\n        }\r\n\r\n        const parametersAreDefault = this._similarityThreshold == null &&\r\n            this._numberOfCandidatesForQuerying == null;\r\n\r\n        if (!parametersAreDefault) {\r\n            writer.append(\", \").append(this._similarityThreshold?.toString() ?? \"null\");\r\n            writer.append(\", \").append(this._numberOfCandidatesForQuerying?.toString() ?? \"null\");\r\n        }\r\n\r\n        writer.append(')');\r\n\r\n        if (this.options.exact) {\r\n            writer.append(')');\r\n        }\r\n\r\n        if (this.options.boost != null) {\r\n            writer.append(`, ${this.options.boost.toString()})`);\r\n        }\r\n    }\r\n}"]}