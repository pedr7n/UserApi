{"version":3,"file":"ClusterTransactionOperationsBase.js","sourceRoot":"","sources":["../../../../src/Documents/Session/ClusterTransactionOperationsBase.ts"],"names":[],"mappings":"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","sourcesContent":["import { TransactionMode } from \"./TransactionMode.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { CompareExchangeValue } from \"../Operations/CompareExchange/CompareExchangeValue.js\";\r\nimport { CompareExchangeResultClass } from \"../../Types/index.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { DocumentSession } from \"./DocumentSession.js\";\r\nimport { CaseInsensitiveKeysMap } from \"../../Primitives/CaseInsensitiveKeysMap.js\";\r\nimport { CompareExchangeSessionValue } from \"../Operations/CompareExchange/CompareExchangeSessionValue.js\";\r\nimport {\r\n    CompareExchangeResultItem,\r\n    CompareExchangeValueResultParser, ObjectNodeMarker\r\n} from \"../Operations/CompareExchange/CompareExchangeValueResultParser.js\";\r\nimport { GetCompareExchangeValueOperation } from \"../Operations/CompareExchange/GetCompareExchangeValueOperation.js\";\r\nimport { GetCompareExchangeValuesOperation } from \"../Operations/CompareExchange/GetCompareExchangeValuesOperation.js\";\r\nimport { SaveChangesData } from \"../Commands/CommandData.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { COMPARE_EXCHANGE } from \"../../Constants.js\";\r\n\r\nexport class StoredCompareExchange {\r\n    public readonly entity: any;\r\n\r\n    public readonly index: number;\r\n\r\n    public constructor(index: number, entity: any) {\r\n        this.entity = entity;\r\n        this.index = index;\r\n    }\r\n}\r\n\r\nexport abstract class ClusterTransactionOperationsBase {\r\n\r\n    protected readonly _session: DocumentSession;\r\n    private readonly _state = CaseInsensitiveKeysMap.create<CompareExchangeSessionValue>();\r\n    private readonly _compareExchangeIncludes = CaseInsensitiveKeysMap.create<CompareExchangeValue<object>>();\r\n\r\n    private _missingDocumentsTooAtomicGuardIndex: Map<string, string>;\r\n\r\n    public tryGetMissingAtomicGuardFor(docId: string, changeVectorCallback: (changeVector: string) => void): boolean {\r\n        if (!this._missingDocumentsTooAtomicGuardIndex) {\r\n            changeVectorCallback(null);\r\n            return false;\r\n        }\r\n\r\n        const cv = this._missingDocumentsTooAtomicGuardIndex.get(docId);\r\n        changeVectorCallback(cv);\r\n        return cv != null;\r\n    }\r\n\r\n    public get numberOfTrackedCompareExchangeValues() {\r\n        return this._state.size;\r\n    }\r\n\r\n    protected constructor(session: DocumentSession) {\r\n        if (session.transactionMode !== \"ClusterWide\" as TransactionMode) {\r\n            throwError(\r\n                \"InvalidOperationException\",\r\n                \"This function is part of cluster transaction session, \"\r\n                + \"in order to use it you have to open the Session with ClusterWide option.\");\r\n        }\r\n\r\n        this._session = session;\r\n    }\r\n\r\n    public get session() {\r\n        return this._session;\r\n    }\r\n\r\n    public isTracked(key: string): boolean {\r\n        return this._tryGetCompareExchangeValueFromSession(key, TypeUtil.NOOP);\r\n    }\r\n\r\n    public createCompareExchangeValue<T>(key: string, item: T): CompareExchangeValue<T> {\r\n        if (!key) {\r\n            throwError(\"InvalidArgumentException\", \"Key cannot be null\");\r\n        }\r\n\r\n        let sessionValue: CompareExchangeSessionValue;\r\n\r\n        if (!this._tryGetCompareExchangeValueFromSession(key, x => sessionValue = x)) {\r\n            sessionValue = new CompareExchangeSessionValue(key, 0, \"None\");\r\n            this._state.set(key, sessionValue);\r\n        }\r\n\r\n        return sessionValue.create(item);\r\n    }\r\n\r\n    public deleteCompareExchangeValue(key: string, index: number): void;\r\n    public deleteCompareExchangeValue<T>(item: CompareExchangeValue<T>): void;\r\n    public deleteCompareExchangeValue<T>(keyOrItem: string | CompareExchangeValue<T>, index?: number): void {\r\n        if (!TypeUtil.isString(keyOrItem)) {\r\n            return this.deleteCompareExchangeValue(keyOrItem.key, keyOrItem.index);\r\n        }\r\n\r\n        const key = keyOrItem as string;\r\n        let sessionValue: CompareExchangeSessionValue;\r\n        if (!this._tryGetCompareExchangeValueFromSession(key, s => sessionValue = s)) {\r\n            sessionValue = new CompareExchangeSessionValue(key, 0, \"None\");\r\n            this._state.set(key, sessionValue);\r\n        }\r\n\r\n        sessionValue.delete(index);\r\n    }\r\n\r\n    public clear(): void {\r\n        this._state.clear();\r\n\r\n        this._compareExchangeIncludes.clear();\r\n        this._missingDocumentsTooAtomicGuardIndex?.clear();\r\n    }\r\n\r\n    protected async _getCompareExchangeValueInternal<T>(key: string): Promise<CompareExchangeValue<T>>\r\n    protected async _getCompareExchangeValueInternal<T>(key: string, clazz: CompareExchangeResultClass<T>): Promise<CompareExchangeValue<T>>\r\n    protected async _getCompareExchangeValueInternal<T>(key: string, clazz?: CompareExchangeResultClass<T>): Promise<CompareExchangeValue<T>> {\r\n        let notTracked: boolean;\r\n        const v = this.getCompareExchangeValueFromSessionInternal<T>(key, t => notTracked = t, clazz);\r\n        if (!notTracked) {\r\n            return v;\r\n        }\r\n\r\n        this.session.incrementRequestCount();\r\n\r\n        const value = await this.session.operations.send<any>(new GetCompareExchangeValueOperation(key, ObjectNodeMarker, false));\r\n        if (TypeUtil.isNullOrUndefined(value)) {\r\n            this.registerMissingCompareExchangeValue(key);\r\n            return null;\r\n        }\r\n\r\n        const sessionValue = this.registerCompareExchangeValue(value);\r\n        if (sessionValue) {\r\n            return sessionValue.getValue(clazz, this.session.conventions);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    protected async _getCompareExchangeValuesInternal<T>(startsWith: string, clazz: CompareExchangeResultClass<T>, start: number, pageSize: number): Promise<{ [key: string]: CompareExchangeValue<T> }>;\r\n    protected async _getCompareExchangeValuesInternal<T>(keys: string[]): Promise<{ [key: string]: CompareExchangeValue<T> }>;\r\n    protected async _getCompareExchangeValuesInternal<T>(keys: string[], clazz: CompareExchangeResultClass<T>): Promise<{ [key: string]: CompareExchangeValue<T> }>;\r\n    protected async _getCompareExchangeValuesInternal<T>(startsWithOrKeys: string | string[], clazz?: CompareExchangeResultClass<T>, start?: number, pageSize?: number): Promise<{ [key: string]: CompareExchangeValue<T> }>{\r\n        if (TypeUtil.isString(startsWithOrKeys)) {\r\n            this.session.incrementRequestCount();\r\n\r\n            const values = await this.session.operations.send(new GetCompareExchangeValuesOperation({\r\n                startWith: startsWithOrKeys,\r\n                start,\r\n                pageSize,\r\n                clazz\r\n            }), this.session.sessionInfo);\r\n\r\n            const results: Record<string, CompareExchangeValue<T>> = {};\r\n\r\n            for (const [key, value] of Object.entries(values)) {\r\n                if (TypeUtil.isNullOrUndefined(value)) {\r\n                    this.registerMissingCompareExchangeValue(key);\r\n                    results[key] = null;\r\n                    continue;\r\n                }\r\n\r\n                const sessionValue = this.registerCompareExchangeValue(value);\r\n                results[key] = sessionValue.getValue(clazz, this.session.conventions);\r\n            }\r\n\r\n            return results;\r\n        } else {\r\n            let notTrackedKeys: Set<string>;\r\n            const results = this.getCompareExchangeValuesFromSessionInternal(startsWithOrKeys, x => notTrackedKeys = x, clazz);\r\n\r\n            if (!notTrackedKeys || !notTrackedKeys.size) {\r\n                return results;\r\n            }\r\n\r\n            this._session.incrementRequestCount();\r\n\r\n            const keysArray = Array.from(notTrackedKeys);\r\n            const values = await this.session.operations.send(new GetCompareExchangeValuesOperation({\r\n                keys: keysArray,\r\n                clazz\r\n            }), this.session.sessionInfo);\r\n\r\n            for (const key of keysArray) {\r\n                const value = values[key];\r\n                if (!value) {\r\n                    this.registerMissingCompareExchangeValue(key);\r\n                    results[key] = null;\r\n                    continue;\r\n                }\r\n\r\n                const sessionValue = this.registerCompareExchangeValue(value);\r\n                results[value.key] = sessionValue.getValue(clazz, this.session.conventions);\r\n            }\r\n\r\n            return results;\r\n        }\r\n    }\r\n\r\n    public getCompareExchangeValueFromSessionInternal<T>(key: string, notTracked: (value: boolean) => void, clazz: CompareExchangeResultClass<T>): CompareExchangeValue<T> {\r\n        let sessionValue: CompareExchangeSessionValue;\r\n\r\n        if (this._tryGetCompareExchangeValueFromSession(key, s => sessionValue = s)) {\r\n            notTracked(false);\r\n            return sessionValue.getValue(clazz, this.session.conventions);\r\n        }\r\n\r\n        notTracked(true);\r\n        return null;\r\n    }\r\n\r\n    public getCompareExchangeValuesFromSessionInternal<T>(keys: string[], notTrackedKeysSetter: (values: Set<string>) => void, clazz: CompareExchangeResultClass<T>): { [key: string]: CompareExchangeValue<T> } {\r\n        let noTrackedKeys: Set<string>;\r\n\r\n        const results: { [key: string]: CompareExchangeValue<T> } = {};\r\n\r\n        if (!keys || !keys.length) {\r\n            notTrackedKeysSetter(null);\r\n            return {};\r\n        }\r\n\r\n        for (const key of keys) {\r\n            let sessionValue: CompareExchangeSessionValue;\r\n\r\n            if (this._tryGetCompareExchangeValueFromSession(key, s => sessionValue = s)) {\r\n                results[key] = sessionValue.getValue(clazz, this.session.conventions);\r\n                continue;\r\n            }\r\n\r\n            if (!noTrackedKeys) {\r\n                noTrackedKeys = new Set<string>();\r\n            }\r\n\r\n            noTrackedKeys.add(key);\r\n        }\r\n        notTrackedKeysSetter(noTrackedKeys);\r\n\r\n        return results;\r\n    }\r\n\r\n    public registerMissingCompareExchangeValue(key: string): CompareExchangeSessionValue {\r\n        const value = new CompareExchangeSessionValue(key, -1, \"Missing\");\r\n        if (this.session.noTracking) {\r\n            return value;\r\n        }\r\n\r\n        this._state.set(key, value);\r\n        return value;\r\n    }\r\n\r\n    public registerCompareExchangeIncludes(values: Record<string, CompareExchangeResultItem>, includingMissingAtomicGuards: boolean) {\r\n        if (this.session.noTracking) {\r\n            return;\r\n        }\r\n\r\n        if (values) {\r\n            for (const [key, value] of Object.entries(values)) {\r\n                const val = CompareExchangeValueResultParser.getSingleValue(value, false, this.session.conventions, null);\r\n\r\n                if (includingMissingAtomicGuards\r\n                    && StringUtil.startsWithIgnoreCase(val.key, COMPARE_EXCHANGE.RVN_ATOMIC_PREFIX)\r\n                    && val.changeVector) {\r\n                    if (!this._missingDocumentsTooAtomicGuardIndex) {\r\n                        this._missingDocumentsTooAtomicGuardIndex = new Map<string, string>();\r\n                    }\r\n\r\n                    this._missingDocumentsTooAtomicGuardIndex.set(val.key.substring(COMPARE_EXCHANGE.RVN_ATOMIC_PREFIX.length), val.changeVector);\r\n                } else {\r\n                    this._registerCompareExchangeInclude(val);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerCompareExchangeValue(value: CompareExchangeValue<any>): CompareExchangeSessionValue {\r\n        ClusterTransactionOperationsBase._assertNotAtomicGuard(value);\r\n\r\n        if (this.session.noTracking) {\r\n            return new CompareExchangeSessionValue(value);\r\n        }\r\n\r\n        this._compareExchangeIncludes.delete(value.key);\r\n\r\n        let sessionValue = this._state.get(value.key);\r\n\r\n        if (!sessionValue) {\r\n            sessionValue = new CompareExchangeSessionValue(value);\r\n            this._state.set(value.key, sessionValue);\r\n            return sessionValue;\r\n        }\r\n\r\n        sessionValue.updateValue(value, this.session.conventions.objectMapper);\r\n\r\n        return sessionValue;\r\n    }\r\n\r\n    protected _registerCompareExchangeInclude(value: CompareExchangeValue<object>) {\r\n        ClusterTransactionOperationsBase._assertNotAtomicGuard(value);\r\n\r\n        if (this.session.noTracking) {\r\n            return;\r\n        }\r\n\r\n        this._compareExchangeIncludes.set(value.key, value);\r\n    }\r\n\r\n    private static _assertNotAtomicGuard(value: CompareExchangeValue<object> ) {\r\n        if (StringUtil.startsWithIgnoreCase(value.key, COMPARE_EXCHANGE.RVN_ATOMIC_PREFIX)) {\r\n            throwError(\"InvalidOperationException\", \"'\" + value.key + \"' is an atomic guard and you cannot load it via the session\");\r\n        }\r\n    }\r\n\r\n    private _tryGetCompareExchangeValueFromSession(key: string, valueSetter: (value: CompareExchangeSessionValue) => void) {\r\n        const value = this._state.get(key);\r\n        valueSetter(value);\r\n        if (!TypeUtil.isNullOrUndefined(value)) {\r\n            return true;\r\n        }\r\n\r\n        const includeValue = this._compareExchangeIncludes.get(key);\r\n        if (includeValue) {\r\n            valueSetter(this.registerCompareExchangeValue(includeValue));\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public prepareCompareExchangeEntities(result: SaveChangesData) {\r\n        if (!this._state.size) {\r\n            return;\r\n        }\r\n\r\n        for (const [key, value] of this._state.entries()) {\r\n            const command = value.getCommand(this.session.conventions);\r\n            if (!command) {\r\n                continue;\r\n            }\r\n\r\n            result.sessionCommands.push(command);\r\n        }\r\n    }\r\n\r\n    public updateState(key: string, index: number) {\r\n        let sessionValue: CompareExchangeSessionValue;\r\n        if (!this._tryGetCompareExchangeValueFromSession(key, x => sessionValue = x)) {\r\n            return;\r\n        }\r\n\r\n        sessionValue.updateState(index);\r\n    }\r\n}\r\n"]}