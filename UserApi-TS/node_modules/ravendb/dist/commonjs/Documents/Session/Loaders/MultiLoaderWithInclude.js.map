{"version":3,"file":"MultiLoaderWithInclude.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Loaders/MultiLoaderWithInclude.ts"],"names":[],"mappings":";;;AAGA,8DAAwD;AAGxD;;;GAGG;AACH,MAAa,sBAAsB;IAEvB,QAAQ,CAAuB;IAC/B,SAAS,GAAa,EAAE,CAAC;IAEjC;;OAEG;IACI,OAAO,CAAC,IAAY;QACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC;IAChB,CAAC;IAmBD;;OAEG;IACI,KAAK,CAAC,IAAI,CACb,GAAsB,EACtB,YAAoC;QAGpC,IAAI,YAAY,GAAG,KAAK,CAAC;QACzB,IAAI,sBAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YACzB,GAAG,GAAG,CAAC,GAAG,CAAa,CAAC;YACxB,YAAY,GAAG,IAAI,CAAC;QACxB,CAAC;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC;QAEnF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAe,EAAE;YAC9D,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,YAAY,EAAE,UAAU;SAC3B,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC,CAAC;YACjB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAY,CAAC,CAAC;YACnE,OAAO,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,YAAmB,OAA6B;QAC5C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;CAEJ;AA/DD,wDA+DC","sourcesContent":["import { ILoaderWithInclude } from \"./ILoaderWithInclude.js\";\r\nimport { IDocumentSessionImpl } from \"../IDocumentSession.js\";\r\nimport { DocumentType } from \"../../DocumentAbstractions.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { EntitiesCollectionObject } from \"../../../Types/index.js\";\r\n\r\n/**\r\n * Fluent implementation for specifying include paths\r\n * for loading documents\r\n */\r\nexport class MultiLoaderWithInclude implements ILoaderWithInclude {\r\n\r\n    private _session: IDocumentSessionImpl;\r\n    private _includes: string[] = [];\r\n\r\n    /**\r\n     * Includes the specified path.\r\n     */\r\n    public include(path: string): ILoaderWithInclude {\r\n        this._includes.push(path);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Loads the specified id.\r\n     */\r\n    public async load<TResult extends object>(id: string, documentType?: DocumentType<TResult>): Promise<TResult | null>;\r\n    /**\r\n     * Loads the specified id.\r\n     */\r\n    public async load<TResult extends object>(\r\n        id: string,\r\n        documentType?: DocumentType<TResult>): Promise<TResult | null>;\r\n\r\n    /**\r\n     * Loads the specified ids.\r\n     */\r\n    public async load<TResult extends object>(\r\n        ids: string[],\r\n        documentType?: DocumentType<TResult>): Promise<EntitiesCollectionObject<TResult>>;\r\n    /**\r\n     * Loads the specified ids.\r\n     */\r\n    public async load<TResult extends object>(\r\n        ids: string | string[],\r\n        documentType?: DocumentType<TResult>)\r\n        : Promise<TResult | null | EntitiesCollectionObject<TResult>> {\r\n\r\n        let singleResult = false;\r\n        if (TypeUtil.isString(ids)) {\r\n            ids = [ids] as string[];\r\n            singleResult = true;\r\n        }\r\n\r\n        const entityType = this._session.conventions.getJsTypeByDocumentType(documentType);\r\n\r\n        const results = await this._session.loadInternal(ids as string[], {\r\n            includes: this._includes,\r\n            documentType: entityType\r\n        });\r\n\r\n        return singleResult ?\r\n            Object.keys(results).map(x => results[x]).find(x => x) as TResult :\r\n            results;\r\n    }\r\n\r\n    /**\r\n     * Initializes a new instance of the MultiLoaderWithInclude class\r\n     */\r\n    public constructor(session: IDocumentSessionImpl) {\r\n        this._session = session;\r\n    }\r\n\r\n}\r\n"]}