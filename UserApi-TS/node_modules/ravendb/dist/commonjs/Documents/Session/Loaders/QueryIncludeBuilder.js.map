{"version":3,"file":"QueryIncludeBuilder.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Loaders/QueryIncludeBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { IncludeBuilderBase } from \"./IncludeBuilderBase.js\";\r\nimport { IQueryIncludeBuilder } from \"./IQueryIncludeBuilder.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { TimeSeriesRangeType } from \"../../Operations/TimeSeries/TimeSeriesRangeType.js\";\r\nimport { TimeValue } from \"../../../Primitives/TimeValue.js\";\r\nimport { TIME_SERIES } from \"../../../Constants.js\";\r\n\r\nexport class QueryIncludeBuilder extends IncludeBuilderBase implements IQueryIncludeBuilder {\r\n\r\n    public constructor(conventions: DocumentConventions) {\r\n        super(conventions);\r\n    }\r\n\r\n    public includeCounter(name: string): IQueryIncludeBuilder;\r\n    public includeCounter(path: string, name: string): IQueryIncludeBuilder;\r\n    public includeCounter(pathOrName: string, name?: string): IQueryIncludeBuilder {\r\n        if (TypeUtil.isUndefined(name)) {\r\n            this._includeCounter(\"\", pathOrName);\r\n        } else {\r\n            this._includeCounterWithAlias(pathOrName, name);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public includeCounters(names: string[]): IQueryIncludeBuilder;\r\n    public includeCounters(path: string, names: string[]): IQueryIncludeBuilder;\r\n    public includeCounters(pathOrNames: string | string[], names?: string[]): IQueryIncludeBuilder {\r\n        if (TypeUtil.isUndefined(names)) {\r\n            this._includeCounters(\"\", pathOrNames as string[]);\r\n        } else {\r\n            this._includeCounterWithAlias(pathOrNames as string, names);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public includeAllCounters(): IQueryIncludeBuilder;\r\n    public includeAllCounters(path: string): IQueryIncludeBuilder;\r\n    public includeAllCounters(path?: string): IQueryIncludeBuilder {\r\n        if (arguments.length === 1) {\r\n            this._includeAllCountersWithAlias(path);\r\n        } else {\r\n            this._includeAllCounters(\"\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public includeDocuments(path: string): IQueryIncludeBuilder {\r\n        this._includeDocuments(path);\r\n        return this;\r\n    }\r\n\r\n    public includeTimeSeries(name: string): IQueryIncludeBuilder;\r\n    public includeTimeSeries(name: string, from: Date, to: Date): IQueryIncludeBuilder;\r\n    public includeTimeSeries(path: string, name: string): IQueryIncludeBuilder;\r\n    public includeTimeSeries(path: string, name: string, from: Date, to: Date): IQueryIncludeBuilder;\r\n    public includeTimeSeries(name: string, type: TimeSeriesRangeType, time: TimeValue): IQueryIncludeBuilder;\r\n    public includeTimeSeries(name: string, type: TimeSeriesRangeType, count: number): IQueryIncludeBuilder;\r\n    public includeTimeSeries(names: string[], type: TimeSeriesRangeType, time: TimeValue): IQueryIncludeBuilder;\r\n    public includeTimeSeries(names: string[], type: TimeSeriesRangeType, count: number): IQueryIncludeBuilder;\r\n    public includeTimeSeries(nameOrPathOrNames: string | string[], fromOrNameOrType?: string | Date | TimeSeriesRangeType, toOrFromOrTimeOrCount?: Date | TimeValue | number, to?: Date): IQueryIncludeBuilder {\r\n        if (TypeUtil.isArray(nameOrPathOrNames)) {\r\n            if (TypeUtil.isNumber(toOrFromOrTimeOrCount)) {\r\n                this._includeArrayOfTimeSeriesByRangeTypeAndCount(nameOrPathOrNames, fromOrNameOrType as TimeSeriesRangeType, toOrFromOrTimeOrCount);\r\n            } else { // names + time\r\n                this._includeArrayOfTimeSeriesByRangeTypeAndTime(nameOrPathOrNames, fromOrNameOrType as TimeSeriesRangeType, toOrFromOrTimeOrCount as TimeValue);\r\n            }\r\n        } else if (toOrFromOrTimeOrCount instanceof TimeValue) {\r\n            this._includeTimeSeriesByRangeTypeAndTime(\"\", nameOrPathOrNames, fromOrNameOrType as TimeSeriesRangeType, toOrFromOrTimeOrCount as TimeValue);\r\n        } else if (TypeUtil.isNumber(toOrFromOrTimeOrCount)) {\r\n            this._includeTimeSeriesByRangeTypeAndCount(\"\", nameOrPathOrNames, fromOrNameOrType as TimeSeriesRangeType, toOrFromOrTimeOrCount);\r\n        } else if (TypeUtil.isString(fromOrNameOrType)) {\r\n            this._withAlias();\r\n            this._includeTimeSeriesFromTo(nameOrPathOrNames, fromOrNameOrType, toOrFromOrTimeOrCount, to);\r\n        } else {\r\n            this._includeTimeSeriesFromTo(\"\", nameOrPathOrNames, fromOrNameOrType, toOrFromOrTimeOrCount);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public includeCompareExchangeValue(path: string): IQueryIncludeBuilder {\r\n        this._includeCompareExchangeValue(path);\r\n        return this;\r\n    }\r\n\r\n    public includeAllTimeSeries(type: TimeSeriesRangeType, time: TimeValue): IQueryIncludeBuilder;\r\n    public includeAllTimeSeries(type: TimeSeriesRangeType, count: number): IQueryIncludeBuilder;\r\n    public includeAllTimeSeries(type: TimeSeriesRangeType, timeOrCount: number | TimeValue): IQueryIncludeBuilder {\r\n        if (TypeUtil.isNumber(timeOrCount)) {\r\n            this._includeTimeSeriesByRangeTypeAndCount(\"\", TIME_SERIES.ALL, type, timeOrCount);\r\n        } else {\r\n            this._includeTimeSeriesByRangeTypeAndTime(\"\", TIME_SERIES.ALL, type, timeOrCount);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public includeRevisions(path: string): IQueryIncludeBuilder;\r\n    public includeRevisions(before: Date): IQueryIncludeBuilder;\r\n    public includeRevisions(pathOrDate: Date | string): IQueryIncludeBuilder {\r\n        if (TypeUtil.isString(pathOrDate)) {\r\n            this._withAlias();\r\n            this._includeRevisionsByChangeVectors(pathOrDate);\r\n        } else {\r\n            this._includeRevisionsBefore(pathOrDate);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n"]}