{"version":3,"file":"IncludeBuilderBase.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Loaders/IncludeBuilderBase.ts"],"names":[],"mappings":"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","sourcesContent":["import { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { CountersByDocId } from \"../CounterInternalTypes.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { CaseInsensitiveKeysMap } from \"../../../Primitives/CaseInsensitiveKeysMap.js\";\r\nimport { CaseInsensitiveStringSet } from \"../../../Primitives/CaseInsensitiveStringSet.js\";\r\nimport { TimeSeriesRange } from \"../../Operations/TimeSeries/TimeSeriesRange.js\";\r\nimport { AbstractTimeSeriesRange } from \"../../Operations/TimeSeries/AbstractTimeSeriesRange.js\";\r\nimport { TIME_SERIES } from \"../../../Constants.js\";\r\nimport { TimeSeriesRangeType } from \"../../Operations/TimeSeries/TimeSeriesRangeType.js\";\r\nimport { TimeValue } from \"../../../Primitives/TimeValue.js\";\r\nimport { TimeSeriesTimeRange } from \"../../Operations/TimeSeries/TimeSeriesTimeRange.js\";\r\nimport { TimeSeriesCountRange } from \"../../Operations/TimeSeries/TimeSeriesCountRange.js\";\r\n\r\nexport class IncludeBuilderBase {\r\n\r\n    private _nextParameterId: number = 1;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public documentsToInclude: Set<string>;\r\n    public alias: string;\r\n    public countersToIncludeBySourcePath: CountersByDocId;\r\n    public timeSeriesToIncludeBySourceAlias: Map<string, AbstractTimeSeriesRange[]>;\r\n    public compareExchangeValuesToInclude: Set<string>;\r\n    public revisionsToIncludeByChangeVector: Set<string>;\r\n    public revisionsToIncludeByDateTime: Date;\r\n    public includeTimeSeriesTags: boolean;\r\n    public includeTimeSeriesDocument: boolean;\r\n\r\n    public get timeSeriesToInclude(): AbstractTimeSeriesRange[] {\r\n        if (!this.timeSeriesToIncludeBySourceAlias) {\r\n            return null;\r\n        }\r\n\r\n        return this.timeSeriesToIncludeBySourceAlias.get(\"\");\r\n    }\r\n\r\n    public get countersToInclude(): Set<string> {\r\n        if (!this.countersToIncludeBySourcePath) {\r\n            return null;\r\n        }\r\n\r\n        const value = this.countersToIncludeBySourcePath.get(\"\");\r\n        return value ? value[1] : new Set();\r\n    }\r\n\r\n    public get isAllCounters(): boolean {\r\n        if (!this.countersToIncludeBySourcePath) {\r\n            return false;\r\n        }\r\n\r\n        const value = this.countersToIncludeBySourcePath.get(\"\");\r\n        return value ? value[0] : false;\r\n    }\r\n\r\n    public constructor(conventions: DocumentConventions) {\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    protected _includeCompareExchangeValue(path: string) {\r\n        if (!this.compareExchangeValuesToInclude) {\r\n            this.compareExchangeValuesToInclude = new Set<string>();\r\n        }\r\n\r\n        this.compareExchangeValuesToInclude.add(path);\r\n    }\r\n\r\n    protected _includeCounterWithAlias(path: string, name: string): void;\r\n    protected _includeCounterWithAlias(path: string, names: string[]): void;\r\n    protected _includeCounterWithAlias(path: string, names: string | string[]): void {\r\n        this._withAlias();\r\n        if (Array.isArray(names)) {\r\n            this._includeCounters(path, names);\r\n        } else {\r\n            this._includeCounter(path, names);\r\n        }\r\n    }\r\n\r\n    protected _includeDocuments(path: string) {\r\n        if (!this.documentsToInclude) {\r\n            this.documentsToInclude = new Set();\r\n        }\r\n\r\n        this.documentsToInclude.add(path);\r\n    }\r\n\r\n    protected _includeRevisionsBefore(revisionsToIncludeByDateTime: Date): void {\r\n        this.revisionsToIncludeByDateTime = revisionsToIncludeByDateTime;\r\n    }\r\n\r\n    protected _includeRevisionsByChangeVectors(path: string): void {\r\n        if (StringUtil.isNullOrWhitespace(path)) {\r\n            throwError(\"InvalidArgumentException\", \"Path cannot be null or whitespace\");\r\n        }\r\n\r\n        if (!this.revisionsToIncludeByChangeVector) {\r\n            this.revisionsToIncludeByChangeVector = new Set<string>();\r\n        }\r\n\r\n        this.revisionsToIncludeByChangeVector.add(path);\r\n    }\r\n\r\n    protected _includeCounter(path: string, name: string): void {\r\n        if (!name) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be empty.\");\r\n        }\r\n\r\n        this._assertNotAllAndAddNewEntryIfNeeded(path);\r\n        this.countersToIncludeBySourcePath.get(path)[1].add(name);\r\n    }\r\n\r\n    protected _includeCounters(path: string, names: string[]): void {\r\n        if (!names) {\r\n            throwError(\"InvalidArgumentException\", \"Names cannot be null.\");\r\n        }\r\n\r\n        this._assertNotAllAndAddNewEntryIfNeeded(path);\r\n        for (const name of names) {\r\n            if (StringUtil.isNullOrWhitespace(name)) {\r\n                throwError(\r\n                    \"InvalidArgumentException\",\r\n                    \"Counters(String[] names): 'names' should not contain null or whitespace elements.\");\r\n            }\r\n\r\n            this.countersToIncludeBySourcePath.get(path)[1].add(name);\r\n        }\r\n    }\r\n\r\n    protected _includeAllCountersWithAlias(path: string): void {\r\n        this._withAlias();\r\n        this._includeAllCounters(path);\r\n    }\r\n\r\n    protected _includeAllCounters(sourcePath: string): void {\r\n        if (!this.countersToIncludeBySourcePath) {\r\n            this.countersToIncludeBySourcePath =\r\n                CaseInsensitiveKeysMap.create<[boolean, Set<string>]>();\r\n        }\r\n\r\n        const val = this.countersToIncludeBySourcePath.get(sourcePath);\r\n        if (val && val[1]) {\r\n            throwError(\r\n                \"InvalidOperationException\",\r\n                \"You cannot use allCounters() after using counter(String name) or counters(String[] names).\");\r\n        }\r\n\r\n        this.countersToIncludeBySourcePath.set(sourcePath, [true, null]);\r\n    }\r\n\r\n    protected _assertNotAllAndAddNewEntryIfNeeded(path: string): void {\r\n        if (this.countersToIncludeBySourcePath) {\r\n            const val = this.countersToIncludeBySourcePath.get(path);\r\n            if (val && val[0]) {\r\n                throwError(\r\n                    \"InvalidOperationException\", \"You cannot use counter(name) after using allCounters().\");\r\n            }\r\n        }\r\n\r\n        if (!this.countersToIncludeBySourcePath) {\r\n            this.countersToIncludeBySourcePath = CaseInsensitiveKeysMap.create<[boolean, Set<string>]>();\r\n        }\r\n\r\n        if (!this.countersToIncludeBySourcePath.has(path)) {\r\n            this.countersToIncludeBySourcePath.set(\r\n                path, [false, CaseInsensitiveStringSet.create()]);\r\n        }\r\n    }\r\n\r\n    protected _withAlias(): void {\r\n        if (!this.alias) {\r\n            this.alias = \"a_\" + (this._nextParameterId++);\r\n        }\r\n    }\r\n\r\n    protected _includeTimeSeriesFromTo(alias: string, name: string, from: Date, to: Date) {\r\n        this._assertValid(alias, name);\r\n\r\n        if (!this.timeSeriesToIncludeBySourceAlias) {\r\n            this.timeSeriesToIncludeBySourceAlias = new Map<string, AbstractTimeSeriesRange[]>();\r\n        }\r\n\r\n        let hashSet = this.timeSeriesToIncludeBySourceAlias.get(alias);\r\n        if (!hashSet) {\r\n            hashSet = [];\r\n            this.timeSeriesToIncludeBySourceAlias.set(alias, hashSet);\r\n        }\r\n\r\n        const range: TimeSeriesRange = {\r\n            name,\r\n            from,\r\n            to\r\n        };\r\n\r\n        const existingItemIdx = hashSet.findIndex(x => x.name === name);\r\n\r\n        if (existingItemIdx !== -1) {\r\n            hashSet.splice(existingItemIdx, 1);\r\n        }\r\n\r\n        hashSet.push(range);\r\n    }\r\n\r\n    protected _includeTimeSeriesByRangeTypeAndTime(alias: string, name: string, type: TimeSeriesRangeType, time: TimeValue) {\r\n        this._assertValid(alias, name);\r\n        IncludeBuilderBase._assertValidType(type, time);\r\n\r\n        if (!this.timeSeriesToIncludeBySourceAlias) {\r\n            this.timeSeriesToIncludeBySourceAlias = new Map<string, AbstractTimeSeriesRange[]>();\r\n        }\r\n\r\n        let hashSet = this.timeSeriesToIncludeBySourceAlias.get(alias);\r\n        if (!hashSet) {\r\n            hashSet = [];\r\n            this.timeSeriesToIncludeBySourceAlias.set(alias, hashSet);\r\n        }\r\n\r\n        const timeRange: TimeSeriesTimeRange = {\r\n            name,\r\n            type,\r\n            time\r\n        };\r\n\r\n        hashSet.push(timeRange);\r\n    }\r\n\r\n    private static _assertValidType(type: TimeSeriesRangeType, time: TimeValue): void {\r\n        switch (type) {\r\n            case \"None\": {\r\n                throwError(\"InvalidArgumentException\", \"Time range type cannot be set to 'None' when time is specified.\");\r\n                break;\r\n            }\r\n            case \"Last\": {\r\n                if (time) {\r\n                    if (time.value <= 0) {\r\n                        throwError(\"InvalidArgumentException\", \"Time range type cannot be set to 'Last' when time is negative or zero.\");\r\n                    }\r\n\r\n                    return;\r\n                }\r\n                throwError(\"InvalidArgumentException\", \"Time range type cannot be set to 'Last' when time is not specified.\");\r\n                break;\r\n            }\r\n            default: {\r\n                throwError(\"NotSupportedException\", \"Not supported time range type: \" + type);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _includeTimeSeriesByRangeTypeAndCount(alias: string, name: string, type: TimeSeriesRangeType, count: number): void {\r\n        this._assertValid(alias, name);\r\n        IncludeBuilderBase._assertValidTypeAndCount(type, count);\r\n\r\n        if (!this.timeSeriesToIncludeBySourceAlias) {\r\n            this.timeSeriesToIncludeBySourceAlias = new Map<string, AbstractTimeSeriesRange[]>();\r\n        }\r\n\r\n        let hashSet = this.timeSeriesToIncludeBySourceAlias.get(alias);\r\n        if (!hashSet) {\r\n            hashSet = [];\r\n            this.timeSeriesToIncludeBySourceAlias.set(alias, hashSet);\r\n        }\r\n\r\n        const countRange: TimeSeriesCountRange = {\r\n            name,\r\n            count,\r\n            type\r\n        };\r\n\r\n        hashSet.push(countRange);\r\n    }\r\n\r\n    private static _assertValidTypeAndCount(type: TimeSeriesRangeType, count: number): void {\r\n        switch (type) {\r\n            case \"None\": {\r\n                throwError(\"InvalidArgumentException\", \"Time range type cannot be set to 'None' when count is specified.\");\r\n                break;\r\n            }\r\n            case \"Last\": {\r\n                if (count <= 0) {\r\n                    throwError(\"InvalidArgumentException\", \"Count have to be positive.\");\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                throwError(\"NotSupportedException\", \"Not supported time range type: \" + type);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _includeArrayOfTimeSeriesByRangeTypeAndTime(names: string[], type: TimeSeriesRangeType, time: TimeValue): void {\r\n        if (!names) {\r\n            throwError(\"InvalidArgumentException\", \"Names cannot be null\");\r\n        }\r\n\r\n        for (const name of names) {\r\n            this._includeTimeSeriesByRangeTypeAndTime(\"\", name, type, time);\r\n        }\r\n    }\r\n\r\n    protected _includeArrayOfTimeSeriesByRangeTypeAndCount(names: string[], type: TimeSeriesRangeType, count: number): void {\r\n        if (!names) {\r\n            throwError(\"InvalidArgumentException\", \"Names cannot be null\");\r\n        }\r\n\r\n        for (const name of names) {\r\n            this._includeTimeSeriesByRangeTypeAndCount(\"\", name, type, count);\r\n        }\r\n    }\r\n\r\n    private _assertValid(alias: string, name: string): void {\r\n        if (StringUtil.isNullOrEmpty(name)) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null or empty\");\r\n        }\r\n\r\n        if (this.timeSeriesToIncludeBySourceAlias) {\r\n            const hashSet2 = this.timeSeriesToIncludeBySourceAlias.get(alias);\r\n            if (hashSet2 && hashSet2.length) {\r\n                if (TIME_SERIES.ALL === name) {\r\n                    throwError(\"InvalidArgumentException\", \"IIncludeBuilder: Cannot use 'includeAllTimeSeries' after using 'includeTimeSeries' or 'includeAllTimeSeries'.\");\r\n                }\r\n\r\n                if (hashSet2.some(x => x.name === TIME_SERIES.ALL)) {\r\n                    throwError(\"InvalidArgumentException\", \"IIncludeBuilder: Cannot use 'includeTimeSeries' or 'includeAllTimeSeries' after using 'includeAllTimeSeries'.\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}