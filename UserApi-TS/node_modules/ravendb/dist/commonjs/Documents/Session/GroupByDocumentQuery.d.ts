import { IGroupByDocumentQuery } from "./IGroupByDocumentQuery.js";
import { DocumentQuery } from "./DocumentQuery.js";
import { GroupByField } from "./GroupByField.js";
import { IDocumentQuery } from "./IDocumentQuery.js";
import { IFilterFactory } from "../Queries/IFilterFactory.js";
export declare class GroupByDocumentQuery<T extends object> implements IGroupByDocumentQuery<T> {
    private readonly _query;
    constructor(query: DocumentQuery<T>);
    selectKey(): IGroupByDocumentQuery<T>;
    selectKey(fieldName: string): IGroupByDocumentQuery<T>;
    selectKey(fieldName: string, projectedName: string): IGroupByDocumentQuery<T>;
    selectSum(field: GroupByField, ...fields: GroupByField[]): IDocumentQuery<T>;
    selectCount(): IDocumentQuery<T>;
    selectCount(projectedName: string): IDocumentQuery<T>;
    filter(builder: (factory: IFilterFactory<T>) => void, limit?: number): IGroupByDocumentQuery<T>;
}
//# sourceMappingURL=GroupByDocumentQuery.d.ts.map