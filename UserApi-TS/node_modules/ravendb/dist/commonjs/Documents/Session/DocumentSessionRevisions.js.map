{"version":3,"file":"DocumentSessionRevisions.js","sourceRoot":"","sources":["../../../../src/Documents/Session/DocumentSessionRevisions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    IRevisionsSessionOperations,\r\n    SessionRevisionsMetadataOptions,\r\n    SessionRevisionsOptions\r\n} from \"./IRevisionsSessionOperations.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\nimport { GetRevisionOperation } from \"./Operations/GetRevisionOperation.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { RevisionsCollectionObject } from \"../../Types/index.js\";\r\nimport { DocumentSessionRevisionsBase } from \"./DocumentSessionRevisionsBase.js\";\r\nimport { LazyRevisionOperations } from \"./Operations/Lazy/LazyRevisionOperations.js\";\r\nimport { DocumentSession } from \"./DocumentSession.js\";\r\nimport { GetRevisionsCountOperation } from \"./Operations/GetRevisionsCountOperation.js\";\r\nimport { ILazyRevisionsOperations } from \"./ILazyRevisionsOperations.js\";\r\nimport { IMetadataDictionary } from \"./IMetadataDictionary.js\";\r\n\r\nexport class DocumentSessionRevisions extends DocumentSessionRevisionsBase implements IRevisionsSessionOperations {\r\n\r\n    public constructor(session: InMemoryDocumentSessionOperations) {\r\n        super(session);\r\n    }\r\n\r\n    get lazily(): ILazyRevisionsOperations {\r\n        return new LazyRevisionOperations(this._session as DocumentSession);\r\n    }\r\n\r\n    public async getFor<TEntity extends object>(id: string): Promise<TEntity[]>;\r\n    public async getFor<TEntity extends object>(\r\n        id: string, options: SessionRevisionsOptions<TEntity>): Promise<TEntity[]>;\r\n    public async getFor<TEntity extends object>(\r\n        id: string, options?: SessionRevisionsOptions<TEntity>): Promise<TEntity[]> {\r\n        options = Object.assign({\r\n            pageSize: 25,\r\n            start: 0\r\n        } as SessionRevisionsOptions<TEntity>, options || {});\r\n\r\n        const operation = new GetRevisionOperation(this._session, id, options.start, options.pageSize);\r\n\r\n        const command = operation.createRequest();\r\n        if (!command) {\r\n            return operation.getRevisionsFor(options.documentType);\r\n        }\r\n        if (this._sessionInfo) {\r\n            this._sessionInfo.incrementRequestCount();\r\n        }\r\n        await this._requestExecutor.execute(command, this._sessionInfo);\r\n        operation.result = command.result;\r\n        return operation.getRevisionsFor(options.documentType);\r\n    }\r\n\r\n    public async getMetadataFor(id: string): Promise<IMetadataDictionary[]>;\r\n    public async getMetadataFor(id: string, options: SessionRevisionsMetadataOptions): Promise<IMetadataDictionary[]>;\r\n    public async getMetadataFor(id: string, options?: SessionRevisionsMetadataOptions): Promise<IMetadataDictionary[]> {\r\n        options = Object.assign({\r\n            pageSize: 25,\r\n            start: 0\r\n        } as SessionRevisionsMetadataOptions, options || {});\r\n        const operation = new GetRevisionOperation(this._session, id, options.start, options.pageSize, true);\r\n        const command = operation.createRequest();\r\n        if (!command) {\r\n            return operation.getRevisionsMetadataFor();\r\n        }\r\n        if (this._sessionInfo) {\r\n            this._sessionInfo.incrementRequestCount();\r\n        }\r\n        await this._requestExecutor.execute(command, this._sessionInfo);\r\n        operation.result = command.result;\r\n        return operation.getRevisionsMetadataFor();\r\n    }\r\n\r\n    public async get<TEntity extends object>(id: string, date: Date): Promise<TEntity | null>;\r\n    public async get<TEntity extends object>(id: string, date: Date, documentType: DocumentType<TEntity>): Promise<TEntity | null>;\r\n    public async get<TEntity extends object>(changeVector: string): Promise<TEntity | null>;\r\n    public async get<TEntity extends object>(changeVector: string,\r\n                                             documentType: DocumentType<TEntity>): Promise<TEntity | null>;\r\n    public async get<TEntity extends object>(changeVectors: string[])\r\n        : Promise<RevisionsCollectionObject<TEntity>>;\r\n    public async get<TEntity extends object>(changeVectors: string[], documentType: DocumentType<TEntity>)\r\n        : Promise<RevisionsCollectionObject<TEntity>>;\r\n    public async get<TEntity extends object>(\r\n        changeVectorOrVectorsOrId: string | string[],\r\n        documentTypeOrDate?: DocumentType<TEntity> | Date,\r\n        documentTypeForDateOverload?: DocumentType<TEntity>)\r\n        : Promise<RevisionsCollectionObject<TEntity> | TEntity> {\r\n\r\n        const documentType = TypeUtil.isDocumentType(documentTypeOrDate)\r\n            ? documentTypeOrDate as DocumentType<TEntity>\r\n            : undefined;\r\n\r\n        if (TypeUtil.isDate(documentTypeOrDate)) {\r\n            return this._getByIdAndDate(\r\n                changeVectorOrVectorsOrId as string, documentTypeOrDate, documentTypeForDateOverload);\r\n        } else {\r\n            return this._get(changeVectorOrVectorsOrId, documentType);\r\n        }\r\n    }\r\n\r\n    private async _getByIdAndDate<TEntity extends object>(\r\n        id: string, date: Date, clazz?: DocumentType<TEntity>) {\r\n        const operation = new GetRevisionOperation(this._session, id, date);\r\n        const command = operation.createRequest();\r\n        if (!command) {\r\n            return operation.getRevision(clazz);\r\n        }\r\n        if (this._sessionInfo) {\r\n            this._sessionInfo.incrementRequestCount();\r\n        }\r\n        await this._requestExecutor.execute(command, this._sessionInfo);\r\n        operation.result = command.result;\r\n        return operation.getRevision(clazz);\r\n    }\r\n\r\n    private async _get<TEntity extends object>(changeVectorOrVectors: string | string[],\r\n                                               documentType?: DocumentType<TEntity>)\r\n        : Promise<RevisionsCollectionObject<TEntity> | TEntity> {\r\n        const operation = new GetRevisionOperation(this._session, changeVectorOrVectors as any);\r\n\r\n        const command = operation.createRequest();\r\n        if (!command) {\r\n            return TypeUtil.isArray(changeVectorOrVectors)\r\n                ? operation.getRevisions(documentType)\r\n                : operation.getRevision(documentType);\r\n        }\r\n        if (this._sessionInfo) {\r\n            this._sessionInfo.incrementRequestCount();\r\n        }\r\n        await this._requestExecutor.execute(command, this._sessionInfo);\r\n        operation.result = command.result;\r\n        return TypeUtil.isArray(changeVectorOrVectors)\r\n            ? operation.getRevisions(documentType)\r\n            : operation.getRevision(documentType);\r\n    }\r\n\r\n    public async getCountFor(id: string): Promise<number> {\r\n        const operation = new GetRevisionsCountOperation(id);\r\n        const command = operation.createRequest();\r\n        if (this._sessionInfo) {\r\n            this._sessionInfo.incrementRequestCount();\r\n        }\r\n        await this._requestExecutor.execute(command, this._sessionInfo);\r\n        return command.result;\r\n    }\r\n}\r\n"]}