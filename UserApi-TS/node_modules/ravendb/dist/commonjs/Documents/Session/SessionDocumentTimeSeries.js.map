{"version":3,"file":"SessionDocumentTimeSeries.js","sourceRoot":"","sources":["../../../../src/Documents/Session/SessionDocumentTimeSeries.ts"],"names":[],"mappings":";;;AAAA,yEAAmE;AAInE,2DAAqD;AAIrD,MAAa,yBAA0B,SAAQ,gDAAqB;IAIhE,YAAmB,OAA0C,EAAE,kBAAgC,EAAE,IAAY;QACzG,KAAK,CAAC,OAAO,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAUM,GAAG,CACN,WAA2B,EAC3B,YAA4B,EAC5B,eAAyE,EACzE,eAAwB,EACxB,QAAiB;QAEjB,IAAI,sBAAQ,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE,CAAC;YACvC,OAAO,IAAI,CAAC,YAAY,CAAC,WAAmB,EAAE,YAAoB,EAAE,eAAe,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;QACpH,CAAC;aAAM,IAAI,sBAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;YAC5C,OAAO,IAAI,CAAC,YAAY,CAAC,WAAmB,EAAE,YAAoB,EAAE,IAAI,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;QACzG,CAAC;aAAM,IAAI,sBAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;YACxC,uCAAuC;YACvC,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,YAAsB,CAAC,CAAC;QACpF,CAAC;aAAM,CAAC;YACJ,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,YAAoB,EAAE,IAAI,EAAE,CAAC,EAAE,sBAAQ,CAAC,SAAS,CAAC,CAAC;QAC7F,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,YAAY,CAAC,IAAU,EAAE,EAAQ,EAAE,QAAsD,EAAE,KAAa,EAAE,QAAgB;QACpI,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC9E,CAAC;QAED,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAEtF,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAMM,MAAM,CAAC,SAAe,EAAE,aAAgC,EAAE,GAAY;QACzE,OAAO,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;IAC/D,CAAC;IAMM,SAAS,CAAC,wBAAkD,EAAE,aAAiC;QAClG,IAAI,sBAAQ,CAAC,MAAM,CAAC,wBAAwB,CAAC,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,sBAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;YACjF,OAAO,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,MAAM,GAAG,sBAAQ,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC;QAClH,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;IACvD,CAAC;CACJ;AAtED,8DAsEC","sourcesContent":["import { SessionTimeSeriesBase } from \"./SessionTimeSeriesBase.js\";\r\nimport { ISessionDocumentTimeSeries } from \"./ISessionDocumentTimeSeries.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\nimport { TimeSeriesEntry } from \"./TimeSeries/TimeSeriesEntry.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { ITimeSeriesIncludeBuilder } from \"./Loaders/ITimeSeriesIncludeBuilder.js\";\r\nimport { ISessionDocumentIncrementalTimeSeries } from \"./ISessionDocumentIncrementalTimeSeries.js\";\r\n\r\nexport class SessionDocumentTimeSeries extends SessionTimeSeriesBase implements ISessionDocumentTimeSeries, ISessionDocumentIncrementalTimeSeries {\r\n\r\n    public constructor(session: InMemoryDocumentSessionOperations, entity: any, name: string)\r\n    public constructor(session: InMemoryDocumentSessionOperations, documentId: string, name: string)\r\n    public constructor(session: InMemoryDocumentSessionOperations, documentIdOrEntity: string | any, name: string) {\r\n        super(session, documentIdOrEntity, name);\r\n    }\r\n\r\n    public get(): Promise<TimeSeriesEntry[]>;\r\n    public get(start: number, pageSize: number): Promise<TimeSeriesEntry[]>;\r\n    public get(from: Date, to: Date): Promise<TimeSeriesEntry[]>;\r\n    public get(from: Date, to: Date, start: number): Promise<TimeSeriesEntry[]>;\r\n    public get(from: Date, to: Date, start: number, pageSize: number): Promise<TimeSeriesEntry[]>;\r\n    public get(from: Date, to: Date, includes: (builder: ITimeSeriesIncludeBuilder) => void): Promise<TimeSeriesEntry[]>;\r\n    public get(from: Date, to: Date, includes: (builder: ITimeSeriesIncludeBuilder) => void, start: number): Promise<TimeSeriesEntry[]>;\r\n    public get(from: Date, to: Date, includes: (builder: ITimeSeriesIncludeBuilder) => void, start: number, pageSize: number): Promise<TimeSeriesEntry[]>;\r\n    public get(\r\n        startOrFrom?: number | Date,\r\n        toOrPageSize?: number | Date,\r\n        startOrIncludes?: number | ((builder: ITimeSeriesIncludeBuilder) => void),\r\n        startOrPageSize?: number,\r\n        pageSize?: number) {\r\n\r\n        if (TypeUtil.isFunction(startOrIncludes)) {\r\n            return this._getInternal(startOrFrom as Date, toOrPageSize as Date, startOrIncludes, startOrPageSize, pageSize);\r\n        } else if (TypeUtil.isNumber(startOrIncludes)) {\r\n            return this._getInternal(startOrFrom as Date, toOrPageSize as Date, null, startOrPageSize, pageSize);\r\n        } else if (TypeUtil.isNumber(startOrFrom)) {\r\n            // get(start: number, pageSize: number)\r\n            return this._getInternal(null, null, null, startOrFrom, toOrPageSize as number);\r\n        } else {\r\n            return this._getInternal(startOrFrom, toOrPageSize as Date, null, 0, TypeUtil.MAX_INT32);\r\n        }\r\n    }\r\n\r\n    private async _getInternal(from: Date, to: Date, includes: (builder: ITimeSeriesIncludeBuilder) => void, start: number, pageSize: number): Promise<TimeSeriesEntry[]> {\r\n        if (this._notInCache(from, to)) {\r\n            return this.getTimeSeriesAndIncludes(from, to, includes, start, pageSize);\r\n        }\r\n\r\n        const resultsToUser = await this._serveFromCache(from, to, start, pageSize, includes);\r\n\r\n        if (!resultsToUser) {\r\n            return null;\r\n        }\r\n\r\n        return resultsToUser.slice(0, pageSize);\r\n    }\r\n\r\n    public append(timestamp: Date, value: number): void;\r\n    public append(timestamp: Date, value: number, tag: string): void;\r\n    public append(timestamp: Date, values: number[]): void;\r\n    public append(timestamp: Date, values: number[], tag: string): void;\r\n    public append(timestamp: Date, valueOrValues: number[] | number, tag?: string): void {\r\n        return this._appendInternal(timestamp, valueOrValues, tag);\r\n    }\r\n\r\n    public increment(timestamp: Date, values: number[]): void;\r\n    public increment(values: number[]): void;\r\n    public increment(timestamp: Date, value: number): void;\r\n    public increment(value: number): void;\r\n    public increment(timestampOrValuesOrValue: Date | number[] | number, valueOrValues?: number[] | number): void {\r\n        if (TypeUtil.isDate(timestampOrValuesOrValue)) {\r\n            const values = TypeUtil.isArray(valueOrValues) ? valueOrValues : [valueOrValues];\r\n            return this._incrementInternal(timestampOrValuesOrValue, values);\r\n        }\r\n\r\n        const values = TypeUtil.isArray(timestampOrValuesOrValue) ? timestampOrValuesOrValue : [timestampOrValuesOrValue];\r\n        return this._incrementInternal(new Date(), values);\r\n    }\r\n}\r\n"]}