{"version":3,"file":"IDocumentQuery.js","sourceRoot":"","sources":["../../../../src/Documents/Session/IDocumentQuery.ts"],"names":[],"mappings":"","sourcesContent":["import { IDocumentQueryBaseSingle } from \"./IDocumentQueryBaseSingle.js\";\r\nimport { IAggregationDocumentQuery } from \"../Queries/Facets/IAggregationDocumentQuery.js\";\r\nimport { IEnumerableQuery } from \"./IEnumerableQuery.js\";\r\nimport { QueryResult } from \"../Queries/QueryResult.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { QueryData } from \"../Queries/QueryData.js\";\r\nimport { GroupBy } from \"../Queries/GroupBy.js\";\r\nimport { IDocumentQueryBase } from \"./IDocumentQueryBase.js\";\r\nimport { IGroupByDocumentQuery } from \"./IGroupByDocumentQuery.js\";\r\nimport { IFacetBuilder } from \"../Queries/Facets/IFacetBuilder.js\";\r\nimport { FacetBase } from \"../Queries/Facets/FacetBase.js\";\r\nimport { IMoreLikeThisBuilderForDocumentQuery } from \"../Queries/MoreLikeThis/IMoreLikeThisBuilderForDocumentQuery.js\";\r\nimport { MoreLikeThisBase } from \"../Queries/MoreLikeThis/MoreLikeThisBase.js\";\r\nimport { ISuggestionBuilder } from \"../Queries/Suggestions/ISuggestionBuilder.js\";\r\nimport { ISuggestionDocumentQuery } from \"../Queries/Suggestions/ISuggestionDocumentQuery.js\";\r\nimport { SuggestionBase } from \"../Queries/Suggestions/SuggestionBase.js\";\r\nimport { ITimeSeriesQueryBuilder } from \"../Queries/TimeSeries/ITimeSeriesQueryBuilder.js\";\r\nimport { TimeSeriesAggregationResult } from \"../Queries/TimeSeries/TimeSeriesAggregationResult.js\";\r\nimport { TimeSeriesRawResult } from \"../Queries/TimeSeries/TimeSeriesRawResult.js\";\r\nimport { Field } from \"../../Types/index.js\";\r\nimport { ProjectionBehavior } from \"../Queries/ProjectionBehavior.js\";\r\nimport { IFilterFactory } from \"../Queries/IFilterFactory.js\";\r\nimport { IQueryShardedContextBuilder } from \"./Querying/Sharding/IQueryShardedContextBuilder.js\";\r\nimport { IVectorOptions } from \"../Queries/VectorSearch/VectorSearchOptions.js\";\r\nimport {\r\n    IVectorEmbeddingField,\r\n    IVectorEmbeddingTextField,\r\n    IVectorField,\r\n    IVectorFieldFactory, IVectorFieldValueFactory\r\n} from \"./VectorFieldFactory.js\";\r\n\r\n/**\r\n * A query against a Raven index\r\n */\r\nexport interface IDocumentQuery<T extends object>\r\n    extends IDocumentQueryBase<T, IDocumentQuery<T>>,\r\n        IDocumentQueryBaseSingle<T>,\r\n        IEnumerableQuery<T> {\r\n\r\n    indexName: string;\r\n\r\n    /**\r\n     * Whether we should apply distinct operation to the query on the server side\r\n     */\r\n    isDistinct: boolean;\r\n\r\n    /**\r\n     * Returns the query result. Accessing this property for the first time will execute the query.\r\n     */\r\n    getQueryResult(): Promise<QueryResult>;\r\n\r\n    //TODO: support for js projections?\r\n\r\n    /**\r\n     * Selects the specified fields directly from the index if the are stored.\r\n     * If the field is not stored in index, value\r\n     * will come from document directly.\r\n     */\r\n    selectFields<TProjection extends object>(\r\n        property: string, projectionClass: DocumentType<TProjection>): IDocumentQuery<TProjection>;\r\n\r\n    /**\r\n     * Selects the specified fields directly from the index if the are stored.\r\n     * If the field is not stored in index, value\r\n     * will come from document directly.\r\n     */\r\n    selectFields<TProjection extends object>(\r\n        properties: string[], projectionClass: DocumentType<TProjection>): IDocumentQuery<TProjection>;\r\n\r\n    /**\r\n     * Selects the specified fields directly from the index if the are stored.\r\n     * If the field is not stored in index, value\r\n     * will come from document directly.\r\n     */\r\n    selectFields<TProjection extends object>(\r\n        properties: string[], projectionClass: DocumentType<TProjection>, projectionBehavior: ProjectionBehavior): IDocumentQuery<TProjection>;\r\n\r\n    /**\r\n     * Selects the specified fields directly from the index if the are stored.\r\n     * If the field is not stored in index, value will come from document directly.\r\n     */\r\n    selectFields<TProjection extends object>(properties: string[]): IDocumentQuery<TProjection>;\r\n\r\n    /**\r\n     * Selects the specified fields directly from the index if the are stored.\r\n     * If the field is not stored in index, value will come from document directly.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    selectFields<TProjection extends Object>(property: string): IDocumentQuery<TProjection>;\r\n\r\n    /**\r\n     * Selects the specified fields directly from the index if the are stored.\r\n     * If the field is not stored in index, value will come from document directly.\r\n     */\r\n    selectFields<TProjection extends object>(\r\n        queryData: QueryData, projectionClass: DocumentType<TProjection>): IDocumentQuery<TProjection>;\r\n\r\n    /**\r\n     * Selects the specified fields directly from the index if the are stored.\r\n     * If the field is not stored in index, value will come from document directly.\r\n     */\r\n    selectFields<TProjection extends object>(\r\n        queryData: QueryData, projectionClass: DocumentType<TProjection>, projectionBehavior: ProjectionBehavior): IDocumentQuery<TProjection>;\r\n\r\n    /**\r\n     * Selects a Time Series Aggregation based on\r\n     * a time series query generated by an ITimeSeriesQueryBuilder.\r\n     * @param timeSeriesQuery query provider\r\n     * @param projectionClass result class\r\n     */\r\n    selectTimeSeries(\r\n        timeSeriesQuery: (builder: ITimeSeriesQueryBuilder) => void,\r\n        projectionClass: DocumentType<TimeSeriesAggregationResult>): IDocumentQuery<TimeSeriesAggregationResult>;\r\n\r\n    /**\r\n     * Selects a Time Series Aggregation based on\r\n     * a time series query generated by an ITimeSeriesQueryBuilder.\r\n     * @param timeSeriesQuery query provider\r\n     * @param projectionClass result class\r\n     */\r\n    selectTimeSeries(\r\n        timeSeriesQuery: (builder: ITimeSeriesQueryBuilder) => void,\r\n        projectionClass: DocumentType<TimeSeriesRawResult>): IDocumentQuery<TimeSeriesRawResult>;\r\n\r\n    /**\r\n     * Changes the return type of the query\r\n     */\r\n    ofType<TResult extends object>(resultClass: DocumentType<TResult>): IDocumentQuery<TResult>;\r\n\r\n    groupBy(fieldName: Field<T>, ...fieldNames: string[]): IGroupByDocumentQuery<T>;\r\n\r\n    groupBy(field: GroupBy, ...fields: GroupBy[]): IGroupByDocumentQuery<T>;\r\n\r\n    moreLikeThis(\r\n        builder: (moreLikeThisBuilder: IMoreLikeThisBuilderForDocumentQuery<T>) => void): IDocumentQuery<T>;\r\n\r\n    moreLikeThis(moreLikeThis: MoreLikeThisBase): IDocumentQuery<T>;\r\n\r\n\r\n    /**\r\n     * Filter allows querying on documents without the need for issuing indexes.\r\n     * It is meant for exploratory queries or post query filtering.\r\n     * Criteria are evaluated at query time so please use Filter wisely to avoid performance issues.\r\n     * @param builder Builder of a Filter query\r\n     */\r\n    filter(builder: (factory: IFilterFactory<T>) => void): IDocumentQuery<T>;\r\n\r\n    /**\r\n     * Filter allows querying on documents without the need for issuing indexes.\r\n     * It is meant for exploratory queries or post query filtering.\r\n     * Criteria are evaluated at query time so please use Filter wisely to avoid performance issues.\r\n     * @param builder Builder of a Filter query\r\n     * @param limit Limits the number of documents processed by Filter.\r\n     */\r\n    filter(builder: (factory: IFilterFactory<T>) => void, limit: number): IDocumentQuery<T>;\r\n\r\n    //TBD MoreLikeThis\r\n\r\n    suggestUsing(suggestion: SuggestionBase): ISuggestionDocumentQuery<T>;\r\n\r\n    suggestUsing(action: (builder: ISuggestionBuilder<T>) => void): ISuggestionDocumentQuery<T>;\r\n\r\n    shardContext(action: (builder: IQueryShardedContextBuilder) => void): IDocumentQuery<T>;\r\n\r\n    aggregateBy(action: (builder: IFacetBuilder<T>) => void): IAggregationDocumentQuery<T>;\r\n\r\n    aggregateBy(facet: FacetBase): IAggregationDocumentQuery<T>;\r\n\r\n    aggregateBy(...facet: FacetBase[]): IAggregationDocumentQuery<T>;\r\n\r\n    aggregateUsing(facetSetupDocumentId: string): IAggregationDocumentQuery<T>;\r\n\r\n    vectorSearch(\r\n        fieldName: Field<T> | ((factory: IVectorFieldFactory<T>) => IVectorField | IVectorEmbeddingField | IVectorEmbeddingTextField),\r\n        valueFactory: number[] | string | ((factory: IVectorFieldValueFactory) => void),\r\n        options?: IVectorOptions\r\n    ): IDocumentQuery<T>;\r\n}"]}