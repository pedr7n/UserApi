{"version":3,"file":"EntityToJson.js","sourceRoot":"","sources":["../../../../src/Documents/Session/EntityToJson.ts"],"names":[],"mappings":"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","sourcesContent":["import { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\nimport { DocumentInfo } from \"./DocumentInfo.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { CONSTANTS } from \"../../Constants.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { ITypesAwareObjectMapper, TypeInfo } from \"../../Mapping/ObjectMapper.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { SetupDocumentBase } from \"../SetupDocumentBase.js\";\r\nimport { MetadataObject } from \"./MetadataObject.js\";\r\nimport { ObjectTypeDescriptor } from \"../../Types/index.js\";\r\nimport { Reference } from \"../../Utility/Reference.js\";\r\n\r\nexport class EntityToJson {\r\n\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n\r\n    /**\r\n     * All the listeners for this session\r\n     */\r\n    public constructor(session: InMemoryDocumentSessionOperations) {\r\n        this._session = session;\r\n    }\r\n\r\n    private _missingDictionary: Map<object, Map<string, object>> = new Map();\r\n\r\n    public get missingDictionary() {\r\n        return this._missingDictionary;\r\n    }\r\n\r\n    public convertEntityToJson(entity: object, documentInfo: DocumentInfo): object {\r\n        if (documentInfo) {\r\n            this._session.onBeforeConversionToDocumentInvoke(documentInfo.id, entity);\r\n        }\r\n\r\n        let document = EntityToJson._convertEntityToJsonInternal(entity, this._session.conventions, documentInfo);\r\n\r\n        if (documentInfo) {\r\n            const documentReference: Reference<object> = {\r\n                value: document\r\n            };\r\n            this._session.onAfterConversionToDocumentInvoke(documentInfo.id, entity, documentReference);\r\n            document = documentReference.value;\r\n        }\r\n\r\n        return document;\r\n    }\r\n\r\n    private static _convertEntityToJsonInternal(entity: object, conventions: DocumentConventions, documentInfo: DocumentInfo, removeIdentityProperty = true) {\r\n        const entityMapper = conventions.objectMapper;\r\n        let typeInfo: TypeInfo;\r\n        let jsonNode = entityMapper.toObjectLiteral(entity, (_typeInfo) => {\r\n            typeInfo = _typeInfo;\r\n        }, conventions.knownEntityTypesByName);\r\n\r\n        if (entity instanceof SetupDocumentBase) {\r\n            jsonNode = entity.toRemoteFieldNames();\r\n        } else {\r\n            jsonNode = conventions.transformObjectKeysToRemoteFieldNameConvention(jsonNode);\r\n        }\r\n\r\n        EntityToJson._writeMetadata(jsonNode, typeInfo, documentInfo);\r\n\r\n        if (removeIdentityProperty) {\r\n            const type: DocumentType = TypeUtil.findType(entity, conventions.knownEntityTypes);\r\n            EntityToJson._tryRemoveIdentityProperty(jsonNode, type, conventions);\r\n        }\r\n\r\n        return jsonNode;\r\n    }\r\n\r\n    //TODO: private void RegisterMissingProperties(object o, string id, object value)\r\n\r\n    public static convertEntityToJson(\r\n        entity: object, conventions: DocumentConventions): object;\r\n    public static convertEntityToJson(\r\n        entity: object,\r\n        conventions: DocumentConventions,\r\n        documentInfo: DocumentInfo,\r\n        removeIdentityProperty: boolean): object;\r\n    public static convertEntityToJson(\r\n        entity: object,\r\n        conventions: DocumentConventions,\r\n        documentInfo?: DocumentInfo,\r\n        removeIdentityProperty: boolean = true): object {\r\n\r\n        let typeInfo: TypeInfo;\r\n        const jsonNode = conventions.objectMapper.toObjectLiteral(entity, (_typeInfo) => {\r\n            typeInfo = _typeInfo;\r\n        });\r\n\r\n        EntityToJson._writeMetadata(jsonNode, typeInfo, documentInfo);\r\n\r\n        if (removeIdentityProperty) {\r\n            EntityToJson._tryRemoveIdentityProperty(jsonNode, typeInfo.typeName, conventions);\r\n        }\r\n\r\n        return jsonNode;\r\n    }\r\n\r\n    static nestedTypes = CONSTANTS.Documents.Metadata.NESTED_OBJECT_TYPES;\r\n    static ravenJsType = CONSTANTS.Documents.Metadata.RAVEN_JS_TYPE;\r\n\r\n    private static _writeMetadata(jsonNode: object, typeInfo: TypeInfo, documentInfo: DocumentInfo): void {\r\n        if (!documentInfo) {\r\n            return;\r\n        }\r\n\r\n\r\n        if (documentInfo.metadata) {\r\n            documentInfo.metadata[EntityToJson.nestedTypes] = typeInfo.nestedTypes;\r\n            documentInfo.metadata[EntityToJson.ravenJsType] ??= typeInfo.typeName;\r\n        }\r\n\r\n        function differentNestedTypes(): boolean {\r\n            const existing = documentInfo.metadataInstance[EntityToJson.nestedTypes];\r\n            if (!existing) {\r\n                return true;\r\n            }\r\n            if (Object.keys(existing).length !== Object.keys(typeInfo.nestedTypes).length) {\r\n                return true;\r\n            }\r\n            for (const key in typeInfo.nestedTypes) {\r\n                if (typeInfo.nestedTypes[key] !== existing[key]) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        if (documentInfo.metadataInstance) {\r\n            if (differentNestedTypes()) {\r\n                documentInfo.metadataInstance[EntityToJson.nestedTypes] = typeInfo.nestedTypes;\r\n            }\r\n            documentInfo.metadataInstance[EntityToJson.ravenJsType] ??= typeInfo.typeName;\r\n        }\r\n\r\n        let setMetadata: boolean = false;\r\n        const metadataNode: MetadataObject = {};\r\n\r\n        if (documentInfo.metadata && Object.keys(documentInfo.metadata).length > 0) {\r\n            setMetadata = true;\r\n            Object.assign(metadataNode, documentInfo.metadata);\r\n\r\n            // Add the document @metadata fields (for RDBC-213)\r\n            const entityMeta = documentInfo.entity[CONSTANTS.Documents.Metadata.KEY];\r\n            for (const metadataItem in entityMeta) {\r\n                // eslint-disable-next-line no-prototype-builtins\r\n                if (entityMeta.hasOwnProperty(metadataItem)) {\r\n                    setMetadata = true;\r\n                    metadataNode[metadataItem] = entityMeta[metadataItem];\r\n                }\r\n            }\r\n        } else if (documentInfo.metadataInstance) {\r\n            setMetadata = true;\r\n            Object.assign(metadataNode, documentInfo.metadataInstance);\r\n        }\r\n\r\n        if (documentInfo.collection) {\r\n            setMetadata = true;\r\n            metadataNode[\"@collection\"] = documentInfo.collection;\r\n        }\r\n\r\n        if (setMetadata) {\r\n            jsonNode[CONSTANTS.Documents.Metadata.KEY] = metadataNode;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts a json object to an entity.\r\n     */\r\n    public convertToEntity(targetEntityType: DocumentType, id: string, document: object, trackEntity: boolean): object {\r\n        const conventions = this._session.conventions;\r\n\r\n        const entityType: ObjectTypeDescriptor = conventions.getJsTypeByDocumentType(targetEntityType);\r\n        try {\r\n            if (TypeUtil.isType(document, targetEntityType)) {\r\n                return document;\r\n            }\r\n\r\n            const documentRef: Reference<object> = {\r\n                value: document\r\n            };\r\n            this._session.onBeforeConversionToEntityInvoke(id, entityType, documentRef);\r\n            document = documentRef.value;\r\n\r\n            let entity;\r\n\r\n            //TODO: if track! -> RegisterMissingProperties\r\n\r\n            const documentTypeFromConventions = conventions.getJsType(id, document);\r\n\r\n            const entityTypeInfoFromMetadata = EntityToJson._getEntityTypeInfoFromMetadata(document);\r\n            if (documentTypeFromConventions) {\r\n                const passedEntityTypeIsAssignableFromConventionsDocType =\r\n                    entityType\r\n                    && ((entityType.name === documentTypeFromConventions.name)\r\n                    || TypeUtil.isInstanceOf(entityType, documentTypeFromConventions));\r\n                if (passedEntityTypeIsAssignableFromConventionsDocType) {\r\n                    const mapper = conventions.objectMapper;\r\n                    entity = mapper.fromObjectLiteral(\r\n                        document, entityTypeInfoFromMetadata);\r\n                }\r\n            }\r\n\r\n            if (!entity) {\r\n                const mapper = conventions.objectMapper;\r\n                let passedTypeInfo = entityTypeInfoFromMetadata;\r\n                if (entityType) {\r\n                    passedTypeInfo =\r\n                        Object.assign(passedTypeInfo, { typeName: entityType.name });\r\n                }\r\n\r\n                entity = mapper.fromObjectLiteral(\r\n                    document, passedTypeInfo);\r\n            }\r\n\r\n            const isProjection = !!document[CONSTANTS.Documents.Metadata.PROJECTION];\r\n\r\n            if (id) {\r\n                this._session.generateEntityIdOnTheClient.trySetIdentity(entity, id, isProjection);\r\n            }\r\n\r\n            return entity;\r\n        } catch (err) {\r\n            throwError(\"InvalidOperationException\",\r\n                `Could not convert document ${id} to entity of type `\r\n                + `${entityType ? entityType.name : entityType}: ${err.stack}`,\r\n                err);\r\n        }\r\n    }\r\n\r\n    private static _getEntityTypeInfoFromMetadata(document: object): TypeInfo {\r\n        const metadata = document[CONSTANTS.Documents.Metadata.KEY];\r\n        if (!metadata) {\r\n            return {};\r\n        }\r\n\r\n        return {\r\n            typeName: metadata[CONSTANTS.Documents.Metadata.RAVEN_JS_TYPE],\r\n            nestedTypes: metadata[CONSTANTS.Documents.Metadata.NESTED_OBJECT_TYPES]\r\n        };\r\n    }\r\n\r\n    public populateEntity(entity: object, id: string, document: object): void {\r\n        if (!id) {\r\n            throwError(\"InvalidArgumentException\", \"Id cannot be null.\");\r\n        }\r\n\r\n        EntityToJson.populateEntity(entity, document, this._session.conventions.objectMapper);\r\n\r\n        this._session.generateEntityIdOnTheClient.trySetIdentity(entity, id);\r\n    }\r\n\r\n    public static populateEntity(entity: object, document: object, objectMapper: ITypesAwareObjectMapper) {\r\n        if (!entity) {\r\n            throwError(\"InvalidArgumentException\", \"Entity cannot be null\");\r\n        }\r\n\r\n        if (!document) {\r\n            throwError(\"InvalidArgumentException\", \"Document cannot be null\");\r\n        }\r\n\r\n        if (!objectMapper) {\r\n            throwError(\"InvalidArgumentException\", \"ObjectMapper cannot be null\");\r\n        }\r\n\r\n        try {\r\n            const entityValue = objectMapper.fromObjectLiteral(document);\r\n            Object.assign(entity, entityValue);\r\n\r\n        } catch (e) {\r\n            throwError(\"InvalidOperationException\", \"Could not populate entity.\", e);\r\n        }\r\n    }\r\n\r\n    private static _tryRemoveIdentityProperty(\r\n        document: object, entityType: DocumentType, conventions: DocumentConventions): boolean {\r\n        const identityProperty = conventions.getIdentityProperty(entityType);\r\n\r\n        if (!identityProperty) {\r\n            return false;\r\n        }\r\n\r\n        delete document[identityProperty];\r\n        return true;\r\n    }\r\n\r\n    public static convertToEntity(entityClass: DocumentType, id: string, document: object, conventions: DocumentConventions) {\r\n        const entityType: ObjectTypeDescriptor = conventions.getJsTypeByDocumentType(entityClass);\r\n        try {\r\n            let entity;\r\n            const documentTypeFromConventions = conventions.getJsType(id, document);\r\n\r\n            const entityTypeInfoFromMetadata = EntityToJson._getEntityTypeInfoFromMetadata(document);\r\n            if (documentTypeFromConventions) {\r\n                const passedEntityTypeIsAssignableFromConventionsDocType =\r\n                    entityType\r\n                    && ((entityType.name === documentTypeFromConventions.name)\r\n                    || TypeUtil.isInstanceOf(entityType, documentTypeFromConventions));\r\n                if (passedEntityTypeIsAssignableFromConventionsDocType) {\r\n                    const mapper = conventions.objectMapper;\r\n                    entity = mapper.fromObjectLiteral(\r\n                        document, entityTypeInfoFromMetadata);\r\n                }\r\n            }\r\n\r\n            if (!entity) {\r\n                const mapper = conventions.objectMapper;\r\n                let passedTypeInfo = entityTypeInfoFromMetadata;\r\n                if (entityType) {\r\n                    passedTypeInfo =\r\n                        Object.assign(passedTypeInfo, { typeName: entityType.name });\r\n                }\r\n\r\n                entity = mapper.fromObjectLiteral(\r\n                    document, passedTypeInfo);\r\n            }\r\n\r\n            return entity;\r\n\r\n        } catch (err) {\r\n            throwError(\"InvalidOperationException\",\r\n                `Could not convert document ${id} to entity of type `\r\n                + `${entityType ? entityType.name : entityType}: ${err.stack}`,\r\n                err);\r\n        }\r\n    }\r\n\r\n    public removeFromMissing(entity: object) {\r\n        this._missingDictionary.delete(entity);\r\n    }\r\n\r\n    public clear(): void {\r\n        this._missingDictionary.clear();\r\n    }\r\n}\r\n"]}