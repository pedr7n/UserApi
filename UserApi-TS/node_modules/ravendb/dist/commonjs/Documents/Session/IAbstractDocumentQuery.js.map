{"version":3,"file":"IAbstractDocumentQuery.js","sourceRoot":"","sources":["../../../../src/Documents/Session/IAbstractDocumentQuery.ts"],"names":[],"mappings":"","sourcesContent":["import { SearchOperator } from \"../Queries/SearchOperator.js\";\r\nimport { OrderingType } from \"./OrderingType.js\";\r\nimport { MethodCall } from \"./MethodCall.js\";\r\nimport { WhereParams } from \"./WhereParams.js\";\r\nimport { DynamicSpatialField } from \"../Queries/Spatial/DynamicSpatialField.js\";\r\nimport { SpatialCriteria } from \"../Queries/Spatial/SpatialCriteria.js\";\r\nimport { GroupBy } from \"../Queries/GroupBy.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { MoreLikeThisScope } from \"../Queries/MoreLikeThis/MoreLikeThisScope.js\";\r\nimport { SuggestionBase } from \"../Queries/Suggestions/SuggestionBase.js\";\r\nimport { HighlightingParameters } from \"../Queries/Highlighting/HighlightingParameters.js\";\r\nimport { ValueCallback } from \"../../Types/Callbacks.js\";\r\nimport { Highlightings } from \"../Queries/Highlighting/Hightlightings.js\";\r\nimport { IncludeBuilderBase } from \"./Loaders/IncludeBuilderBase.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\n\r\nexport interface IAbstractDocumentQuery<T> {\r\n\r\n    indexName: string;\r\n\r\n    collectionName: string;\r\n\r\n    /**\r\n     * Gets the document convention from the query session\r\n     */\r\n    conventions: DocumentConventions;\r\n\r\n    /**\r\n     * Determines if it is a dynamic map-reduce query\r\n     */\r\n    isDynamicMapReduce(): boolean;\r\n\r\n    /**\r\n     * Instruct the query to wait for non stale result for the specified wait timeout.\r\n     */\r\n    _waitForNonStaleResults(waitTimeout: number): void;\r\n\r\n    /**\r\n     * Gets the fields for projection\r\n     */\r\n    getProjectionFields(): string[];\r\n\r\n    /**\r\n     * Order the search results randomly\r\n     */\r\n    _randomOrdering(): void;\r\n\r\n    /**\r\n     * Order the search results randomly using the specified seed\r\n     * this is useful if you want to have repeatable random queries\r\n     */\r\n    _randomOrdering(seed: string): void;\r\n\r\n    //TBD 4.1 void _customSortUsing(String typeName);\r\n\r\n    //TBD 4.1 void _customSortUsing(String typeName, boolean descending);\r\n\r\n    /**\r\n     * Includes the specified path in the query, loading the document specified in that path\r\n     */\r\n    _include(path: string): void;\r\n\r\n    /**\r\n     * Includes the specified documents and/or counters in the query, specified by IncludeBuilder\r\n     * @param includes builder\r\n     */\r\n    _include(includes: IncludeBuilderBase): void;\r\n\r\n    // TBD expr linq void Include(Expression<Func<T, object>> path);\r\n\r\n    /**\r\n     * Takes the specified count.\r\n     */\r\n    _take(count: number): void;\r\n\r\n    /**\r\n     * Skips the specified count.\r\n     */\r\n    _skip(count: number): void;\r\n\r\n    /**\r\n     * Matches value\r\n     */\r\n    _whereEquals(fieldName: string, value: any): void;\r\n\r\n    /**\r\n     * Matches value\r\n     */\r\n    _whereEquals(fieldName: string, value: any, exact: boolean): void;\r\n\r\n    /**\r\n     * Matches value\r\n     */\r\n    _whereEquals(fieldName: string, method: MethodCall): void;\r\n\r\n    /**\r\n     * Matches value\r\n     */\r\n    _whereEquals(fieldName: string, method: MethodCall, exact: boolean): void;\r\n\r\n    /**\r\n     * Matches value\r\n     */\r\n    _whereEquals(whereParams: WhereParams): void;\r\n\r\n    /**\r\n     * Not matches value\r\n     */\r\n    _whereNotEquals(fieldName: string, value: any): void;\r\n\r\n    /**\r\n     * Not matches value\r\n     */\r\n    _whereNotEquals(fieldName: string, value: any, exact: boolean): void;\r\n\r\n    /**\r\n     * Not matches value\r\n     */\r\n    _whereNotEquals(fieldName: string, method: MethodCall): void;\r\n\r\n    /**\r\n     * Not matches value\r\n     */\r\n    _whereNotEquals(fieldName: string, method: MethodCall, exact: boolean): void;\r\n\r\n    /**\r\n     * Not matches value\r\n     */\r\n    _whereNotEquals(whereParams: WhereParams): void;\r\n\r\n    /**\r\n     * Simplified method for opening a new clause within the query\r\n     */\r\n    _openSubclause(): void;\r\n\r\n    /**\r\n     * Simplified method for closing a clause within the query\r\n     */\r\n    _closeSubclause(): void;\r\n\r\n    /**\r\n     * Negate the next operation\r\n     */\r\n    _negateNext(): void;\r\n\r\n    /**\r\n     * Check that the field has one of the specified value\r\n     */\r\n    _whereIn(fieldName: string, values: any[]): void;\r\n\r\n    /**\r\n     * Check that the field has one of the specified value\r\n     */\r\n    _whereIn(fieldName: string, values: any[], exact: boolean): void;\r\n\r\n    /**\r\n     * Matches fields which starts with the specified value.\r\n     */\r\n    _whereStartsWith(fieldName: string, value: any): void;\r\n\r\n    /**\r\n     * Matches fields which starts with the specified value.\r\n     */\r\n    _whereStartsWith(fieldName: string, value: any, exact: boolean): void;\r\n\r\n    /**\r\n     * Matches fields which ends with the specified value.\r\n     */\r\n    _whereEndsWith(fieldName: string, value: any): void;\r\n\r\n    /**\r\n     * Matches fields which ends with the specified value.\r\n     */\r\n    _whereEndsWith(fieldName: string, value: any, exact: boolean): void;\r\n\r\n    /**\r\n     * Matches fields where the value is between the specified start and end, inclusive\r\n     */\r\n    _whereBetween(fieldName: string, start: any, end: any): void;\r\n\r\n    /**\r\n     * Matches fields where the value is between the specified start and end, inclusive\r\n     */\r\n    _whereBetween(fieldName: string, start: any, end: any, exact: boolean): void;\r\n\r\n    /**\r\n     * Matches fields where the value is greater than the specified value\r\n     */\r\n    _whereGreaterThan(fieldName: string, value: any): void;\r\n\r\n    /**\r\n     * Matches fields where the value is greater than the specified value\r\n     */\r\n    _whereGreaterThan(fieldName: string, value: any, exact: boolean): void;\r\n\r\n    /**\r\n     * Matches fields where the value is greater than or equal to the specified value\r\n     */\r\n    _whereGreaterThanOrEqual(fieldName: string, value: any): void;\r\n\r\n    /**\r\n     * Matches fields where the value is greater than or equal to the specified value\r\n     */\r\n    _whereGreaterThanOrEqual(fieldName: string, value: any, exact: boolean): void;\r\n\r\n    /**\r\n     * Matches fields where the value is less than the specified value\r\n     */\r\n    _whereLessThan(fieldName: string, value: any): void;\r\n\r\n    /**\r\n     * Matches fields where the value is less than the specified value\r\n     */\r\n    _whereLessThan(fieldName: string, value: any, exact: boolean): void;\r\n\r\n    /**\r\n     * Matches fields where the value is less than or equal to the specified value\r\n     */\r\n    _whereLessThanOrEqual(fieldName: string, value: any): void;\r\n\r\n    /**\r\n     * Matches fields where the value is less than or equal to the specified value\r\n     */\r\n    _whereLessThanOrEqual(fieldName: string, value: any, exact: boolean): void;\r\n\r\n    _whereExists(fieldName: string): void;\r\n\r\n    _whereRegex(fieldName: string, pattern: string): void;\r\n\r\n    /**\r\n     * Add an AND to the query\r\n     */\r\n    _andAlso(): void;\r\n\r\n    /**\r\n     * Add an OR to the query\r\n     */\r\n    _orElse(): void;\r\n\r\n    /**\r\n     * Specifies a boost weight to the previous where clause.\r\n     * The higher the boost factor, the more relevant the term will be.\r\n     *\r\n     * boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight\r\n     *\r\n     * http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term\r\n     */\r\n    _boost(boost: number): void;\r\n\r\n    /**\r\n     * Specifies a fuzziness factor to the single word term in the last where clause\r\n     *\r\n     * 0.0 to 1.0 where 1.0 means closer match\r\n     *\r\n     * http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches\r\n     */\r\n    _fuzzy(fuzzy: number): void;\r\n\r\n    /**\r\n     * Specifies a proximity distance for the phrase in the last search clause\r\n     *\r\n     * http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches\r\n     */\r\n    _proximity(proximity: number): void;\r\n\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The field is the name of the field to sort, defaulting to sorting by ascending.\r\n     */\r\n    _orderBy(field: string): void;\r\n\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The field is the name of the field to sort, defaulting to sorting by ascending.\r\n     */\r\n    _orderBy(field: string, ordering: OrderingType): void;\r\n\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The field is the name of the field to sort using sorterName\r\n     */\r\n    _orderBy(field: string, options: { sorterName: string }): void;\r\n\r\n    _orderByDescending(field: string): void;\r\n\r\n    _orderByDescending(field: string, ordering: OrderingType): void;\r\n\r\n    _orderByDescending(field: string, options: { sorterName: string }): void;\r\n\r\n    _orderByScore(): void;\r\n\r\n    _orderByScoreDescending(): void;\r\n\r\n    _highlight(\r\n        parameters: HighlightingParameters,\r\n        highlightingsCallback: ValueCallback<Highlightings>): void;\r\n\r\n    /**\r\n     * Perform a search for documents which fields that match the searchTerms.\r\n     * If there is more than a single term, each of them will be checked independently.\r\n     */\r\n    _search(fieldName: string, searchTerms: string): void;\r\n\r\n    /**\r\n     * Perform a search for documents which fields that match the searchTerms.\r\n     * If there is more than a single term, each of them will be checked independently.\r\n     */\r\n    _search(fieldName: string, searchTerms: string, operator: SearchOperator): void;\r\n\r\n    toString(): string;\r\n\r\n    _intersect(): void;\r\n\r\n    addRootType(clazz: DocumentType): void;\r\n\r\n    _distinct(): void;\r\n\r\n    /**\r\n     * Performs a query matching ANY of the provided values against the given field (OR)\r\n     */\r\n    _containsAny(fieldName: string, values: any[]): void;\r\n\r\n    /**\r\n     * Performs a query matching ALL of the provided values against the given field (AND)\r\n     */\r\n    _containsAll(fieldName: string, values: any[]): void;\r\n\r\n    _groupBy(fieldName: string, ...fieldNames: string[]): void;\r\n\r\n    _groupBy(field: GroupBy, ...fields: GroupBy[]): void;\r\n\r\n    _groupByKey(fieldName: string): void;\r\n\r\n    _groupByKey(fieldName: string, projectedName: string): void;\r\n\r\n    _groupBySum(fieldName: string): void;\r\n\r\n    _groupBySum(fieldName: string, projectedName: string): void;\r\n\r\n    _groupByCount(): void;\r\n\r\n    _groupByCount(projectedName: string): void;\r\n\r\n    _whereTrue(): void;\r\n\r\n    _spatial(field: DynamicSpatialField, criteria: SpatialCriteria): void;\r\n\r\n    _spatial(fieldName: string, criteria: SpatialCriteria): void;\r\n\r\n    _orderByDistance(field: DynamicSpatialField, latitude: number, longitude: number): void;\r\n\r\n    _orderByDistance(fieldName: string, latitude: number, longitude: number): void;\r\n\r\n    _orderByDistance(fieldName: string, latitude: number, longitude: number, roundFactor: number): void;\r\n\r\n    _orderByDistance(field: DynamicSpatialField, shapeWkt: string): void;\r\n\r\n    _orderByDistance(fieldName: string, shapeWkt: string): void;\r\n\r\n    _orderByDistance(fieldName: string, shapeWkt: string, roundFactor: number): void;\r\n\r\n    _orderByDistanceDescending(field: DynamicSpatialField, latitude: number, longitude: number): void;\r\n\r\n    _orderByDistanceDescending(fieldName: string, latitude: number, longitude: number): void;\r\n\r\n    _orderByDistanceDescending(fieldName: string, latitude: number, longitude: number, roundFactor: number): void;\r\n\r\n    _orderByDistanceDescending(field: DynamicSpatialField, shapeWkt: string): void;\r\n\r\n    _orderByDistanceDescending(fieldName: string, shapeWkt: string): void;\r\n\r\n    _orderByDistanceDescending(fieldName: string, shapeWkt: string, roundFactor: number): void;\r\n\r\n    _moreLikeThis(): MoreLikeThisScope;\r\n\r\n    addFromAliasToFilterTokens(fromAlias: string): void;\r\n    addFromAliasToOrderByTokens(fromAlias: string): void;\r\n\r\n    addAliasToIncludesTokens(fromAlias: string): string;\r\n\r\n    // TBD void AggregateBy(FacetBase facet);\r\n    // TBD IAggregationDocumentQuery<T> AggregateBy(Action<IFacetBuilder<T>> builder);\r\n    // TBD void AggregateUsing(string facetSetupDocumentId);\r\n\r\n    _suggestUsing(suggestion: SuggestionBase);\r\n\r\n    parameterPrefix: string;\r\n\r\n    iterator(): Promise<IterableIterator<T>>;\r\n}\r\n"]}