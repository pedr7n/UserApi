{"version":3,"file":"AbstractDocumentQuery.js","sourceRoot":"","sources":["../../../../src/Documents/Session/AbstractDocumentQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import { Lazy } from \"../Lazy.js\";\r\nimport { QueryOperation } from \"./Operations/QueryOperation.js\";\r\nimport { GroupByCountToken } from \"./Tokens/GroupByCountToken.js\";\r\nimport { GroupByToken } from \"./Tokens/GroupByToken.js\";\r\nimport { HighlightingToken } from \"./Tokens/HighlightingToken.js\";\r\nimport { FieldsToFetchToken } from \"./Tokens/FieldsToFetchToken.js\";\r\nimport { DeclareToken } from \"./Tokens/DeclareToken.js\";\r\nimport { LoadToken } from \"./Tokens/LoadToken.js\";\r\nimport { FromToken } from \"./Tokens/FromToken.js\";\r\nimport { DistinctToken } from \"./Tokens/DistinctToken.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\nimport { QueryStatistics } from \"./QueryStatistics.js\";\r\nimport { IDocumentSession } from \"./IDocumentSession.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { QueryOperator } from \"../Queries/QueryOperator.js\";\r\nimport { IndexQuery } from \"../Queries/IndexQuery.js\";\r\nimport { IAbstractDocumentQuery } from \"./IAbstractDocumentQuery.js\";\r\nimport { GroupBy } from \"../Queries/GroupBy.js\";\r\nimport { GroupByKeyToken } from \"../Session/Tokens/GroupByKeyToken.js\";\r\nimport { GroupBySumToken } from \"../Session/Tokens/GroupBySumToken.js\";\r\nimport { ExplanationToken } from \"../Session/Tokens/ExplanationToken.js\";\r\nimport { TimingsToken } from \"../Session/Tokens/TimingsToken.js\";\r\nimport { TrueToken } from \"../Session/Tokens/TrueToken.js\";\r\nimport { WhereOptions, WhereToken } from \"../Session/Tokens/WhereToken.js\";\r\nimport { QueryFieldUtil } from \"../Queries/QueryFieldUtil.js\";\r\nimport { QueryToken } from \"./Tokens/QueryToken.js\";\r\nimport { CloseSubclauseToken } from \"./Tokens/CloseSubclauseToken.js\";\r\nimport { OpenSubclauseToken } from \"./Tokens/OpenSubclauseToken.js\";\r\nimport { NegateToken } from \"./Tokens/NegateToken.js\";\r\nimport { WhereParams } from \"./WhereParams.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { DateUtil } from \"../../Utility/DateUtil.js\";\r\nimport { MethodCall } from \"./MethodCall.js\";\r\nimport { QueryOperatorToken } from \"./Tokens/QueryOperatorToken.js\";\r\nimport { OrderByToken } from \"./Tokens/OrderByToken.js\";\r\nimport { FacetToken } from \"./Tokens/FacetToken.js\";\r\nimport { CounterIncludesToken } from \"./Tokens/CounterIncludesToken.js\";\r\nimport { QueryResult } from \"../Queries/QueryResult.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { QueryEventsEmitter } from \"./QueryEvents.js\";\r\nimport { EventEmitter } from \"node:events\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { IntersectMarkerToken } from \"./Tokens/IntersectMarkerToken.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { CONSTANTS, TIME_SERIES } from \"../../Constants.js\";\r\nimport { WhereOperator } from \"./Tokens/WhereOperator.js\";\r\nimport { OrderingType } from \"./OrderingType.js\";\r\nimport { SearchOperator } from \"../Queries/SearchOperator.js\";\r\nimport { DocumentQueryHelper } from \"./DocumentQueryHelper.js\";\r\nimport { SpatialRelation, SpatialUnits } from \"../Indexes/Spatial.js\";\r\nimport { ShapeToken } from \"./Tokens/ShapeToken.js\";\r\nimport { DynamicSpatialField } from \"../Queries/Spatial/DynamicSpatialField.js\";\r\nimport { SpatialCriteria } from \"../Queries/Spatial/SpatialCriteria.js\";\r\nimport { SessionBeforeQueryEventArgs } from \"./SessionEvents.js\";\r\nimport { CmpXchg } from \"./CmpXchg.js\";\r\nimport { ValueCallback } from \"../../Types/Callbacks.js\";\r\nimport { DocumentQueryCustomization } from \"./DocumentQueryCustomization.js\";\r\nimport { FacetBase } from \"../Queries/Facets/FacetBase.js\";\r\nimport { MoreLikeThisScope } from \"../Queries/MoreLikeThis/MoreLikeThisScope.js\";\r\nimport { MoreLikeThisToken } from \"./Tokens/MoreLikeThisToken.js\";\r\nimport { LazyQueryOperation } from \"../Session/Operations/Lazy/LazyQueryOperation.js\";\r\nimport { DocumentSession } from \"./DocumentSession.js\";\r\nimport { SuggestionBase } from \"../Queries/Suggestions/SuggestionBase.js\";\r\nimport { SuggestionOptions } from \"../Queries/Suggestions/SuggestionOptions.js\";\r\nimport { SuggestToken } from \"./Tokens/SuggestToken.js\";\r\nimport { SuggestionWithTerm } from \"../Queries/Suggestions/SuggestionWithTerm.js\";\r\nimport { SuggestionWithTerms } from \"../Queries/Suggestions/SuggestionWithTerms.js\";\r\nimport { QueryData } from \"../Queries/QueryData.js\";\r\nimport { QueryTimings } from \"../Queries/Timings/QueryTimings.js\";\r\nimport { Explanations } from \"../Queries/Explanation/Explanations.js\";\r\nimport { Highlightings } from \"../Queries/Highlighting/Hightlightings.js\";\r\nimport { extractHighlightingOptionsFromParameters } from \"../Queries/Highlighting/HighlightingOptions.js\";\r\nimport { HighlightingParameters } from \"../Queries/Highlighting/HighlightingParameters.js\";\r\nimport { QueryHighlightings } from \"../Queries/Highlighting/QueryHighlightings.js\";\r\nimport { ExplanationOptions } from \"../Queries/Explanation/ExplanationOptions.js\";\r\nimport { CountersByDocId } from \"./CounterInternalTypes.js\";\r\nimport { IncludeBuilderBase } from \"./Loaders/IncludeBuilderBase.js\";\r\nimport { IncludesUtil } from \"./IncludesUtil.js\";\r\nimport { TimeSeriesIncludesToken } from \"./Tokens/TimeSeriesIncludesToken.js\";\r\nimport { CompareExchangeValueIncludesToken } from \"./Tokens/CompareExchangeValueIncludesToken.js\";\r\nimport { ITimeSeriesQueryBuilder } from \"../Queries/TimeSeries/ITimeSeriesQueryBuilder.js\";\r\nimport { TimeSeriesQueryBuilder } from \"../Queries/TimeSeries/TimeSeriesQueryBuilder.js\";\r\nimport { StringBuilder } from \"../../Utility/StringBuilder.js\";\r\nimport { ProjectionBehavior } from \"../Queries/ProjectionBehavior.js\";\r\nimport { AbstractTimeSeriesRange } from \"../Operations/TimeSeries/AbstractTimeSeriesRange.js\";\r\nimport { IAbstractDocumentQueryImpl } from \"./IAbstractDocumentQueryImpl.js\";\r\nimport { RevisionIncludesToken } from \"./Tokens/RevisionIncludesToken.js\";\r\nimport { IDisposable } from \"../../Types/Contracts.js\";\r\nimport { IQueryShardedContextBuilder } from \"./Querying/Sharding/IQueryShardedContextBuilder.js\";\r\nimport { QueryShardedContextBuilder } from \"./Querying/Sharding/QueryShardedContextBuilder.js\";\r\nimport { IVectorOptions } from \"../Queries/VectorSearch/VectorSearchOptions.js\";\r\nimport {\r\n    IVectorEmbeddingField,\r\n    IVectorEmbeddingFieldFactoryAccessor, IVectorEmbeddingTextField,\r\n    IVectorField,\r\n    IVectorFieldFactory, IVectorFieldValueFactory, VectorEmbeddingFieldValueFactory\r\n} from \"./VectorFieldFactory.js\";\r\nimport { VectorEmbeddingFieldFactory } from \"../Queries/VectorSearch/VectorEmbeddingFieldFactory.js\";\r\nimport { Field } from \"../../Types/index.js\";\r\nimport { JsonSerializer } from \"../../Mapping/Json/Serializer.js\";\r\nimport { VectorSearchToken } from \"./Tokens/VectorSearchToken.js\";\r\n\r\n/**\r\n * A query against a Raven index\r\n */\r\nexport abstract class AbstractDocumentQuery<T extends object, TSelf extends AbstractDocumentQuery<T, TSelf>>\r\n    extends EventEmitter\r\n    implements QueryEventsEmitter, IAbstractDocumentQuery<T>, IAbstractDocumentQueryImpl<T> {\r\n\r\n    protected _clazz: DocumentType<T>;\r\n\r\n    private _aliasToGroupByFieldName: { [key: string]: string } = {};\r\n\r\n    protected _defaultOperator: QueryOperator = \"AND\";\r\n\r\n    protected _rootTypes: Set<DocumentType> = new Set<DocumentType>();\r\n\r\n    /**\r\n     * Whether to negate the next operation\r\n     */\r\n    protected _negate: boolean;\r\n\r\n    /**\r\n     * Whether to negate the next operation in Filter\r\n     */\r\n    protected _negateFilter: boolean;\r\n\r\n    private readonly _indexName: string;\r\n    private readonly _collectionName: string;\r\n    private _currentClauseDepth: number;\r\n\r\n    protected _queryRaw: string;\r\n\r\n    public get indexName() {\r\n        return this._indexName;\r\n    }\r\n\r\n    public get collectionName() {\r\n        return this._collectionName;\r\n    }\r\n\r\n    protected _filterModeStack: boolean[] = [];\r\n\r\n    protected _queryParameters: { [key: string]: any } = {};\r\n\r\n    protected _isIntersect: boolean;\r\n\r\n    protected _isGroupBy: boolean;\r\n\r\n    protected _theSession: InMemoryDocumentSessionOperations;\r\n\r\n    protected _pageSize: number;\r\n\r\n    protected _selectTokens: QueryToken[] = [];\r\n\r\n    protected _fromToken: FromToken;\r\n    protected _declareTokens: DeclareToken[];\r\n    protected _loadTokens: LoadToken[];\r\n    public fieldsToFetchToken: FieldsToFetchToken;\r\n\r\n    public _isProjectInto: boolean;\r\n\r\n    protected _whereTokens: QueryToken[] = [];\r\n\r\n    protected _groupByTokens: QueryToken[] = [];\r\n\r\n    protected _orderByTokens: QueryToken[] = [];\r\n\r\n    protected _withTokens: QueryToken[] = [];\r\n\r\n    protected _filterTokens: QueryToken[] = [];\r\n\r\n    protected _start: number;\r\n\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    /**\r\n     * Limits filter clause.\r\n     */\r\n    protected _filterLimit: number;\r\n\r\n    protected _timeout: number;\r\n\r\n    protected _theWaitForNonStaleResults: boolean;\r\n\r\n    protected _documentIncludes: Set<string> = new Set();\r\n\r\n    private _statsCallback: (stats: QueryStatistics) => void = TypeUtil.NOOP;\r\n\r\n    /**\r\n     * Holds the query stats\r\n     */\r\n    protected _queryStats: QueryStatistics = new QueryStatistics();\r\n\r\n    protected _disableEntitiesTracking: boolean;\r\n\r\n    protected _disableCaching: boolean;\r\n\r\n    protected projectionBehavior: ProjectionBehavior;\r\n\r\n    private _parameterPrefix = \"p\";\r\n\r\n    private _includesAlias: string;\r\n\r\n    protected _highlightingTokens: HighlightingToken[] = [];\r\n\r\n    protected _queryHighlightings: QueryHighlightings = new QueryHighlightings();\r\n\r\n    protected _queryTimings: QueryTimings;\r\n\r\n    protected _explanations: Explanations;\r\n\r\n    protected _explanationToken: ExplanationToken;\r\n\r\n    protected isFilterActive(): boolean {\r\n        return this._filterModeStack.length && this._filterModeStack[0];\r\n    }\r\n\r\n\r\n    public get isDistinct(): boolean {\r\n        return this._selectTokens\r\n            && this._selectTokens.length\r\n            && this._selectTokens[0] instanceof DistinctToken;\r\n    }\r\n\r\n    public get theWaitForNonStaleResults() {\r\n        return this._theWaitForNonStaleResults;\r\n    }\r\n\r\n    public get timeout() {\r\n        return this._timeout;\r\n    }\r\n\r\n    public get queryParameters() {\r\n        return this._queryParameters;\r\n    }\r\n\r\n    public get selectTokens() {\r\n        return this._selectTokens;\r\n    }\r\n\r\n    public get isProjectInto() {\r\n        return this._isProjectInto;\r\n    }\r\n\r\n    public set isProjectInto(value: boolean) {\r\n        this._isProjectInto = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the document convention from the query session\r\n     */\r\n    public get conventions(): DocumentConventions {\r\n        return this._conventions;\r\n    }\r\n\r\n    /**\r\n     * Gets the session associated with this document query\r\n     */\r\n    public get session() {\r\n        return this._theSession as any as IDocumentSession;\r\n    }\r\n\r\n    public isDynamicMapReduce(): boolean {\r\n        return this._groupByTokens && !!this._groupByTokens.length;\r\n    }\r\n\r\n    private _isInMoreLikeThis: boolean;\r\n\r\n    private _getDefaultTimeout(): number {\r\n        return this._conventions.waitForNonStaleResultsTimeout;\r\n    }\r\n\r\n    protected constructor(\r\n        clazz: DocumentType<T>,\r\n        session: InMemoryDocumentSessionOperations,\r\n        indexName: string,\r\n        collectionName: string,\r\n        isGroupBy: boolean,\r\n        declareTokens: DeclareToken[],\r\n        loadTokens: LoadToken[]);\r\n    protected constructor(\r\n        clazz: DocumentType<T>,\r\n        session: InMemoryDocumentSessionOperations,\r\n        indexName: string,\r\n        collectionName: string,\r\n        isGroupBy: boolean,\r\n        declareTokens: DeclareToken[],\r\n        loadTokens: LoadToken[],\r\n        fromAlias: string,\r\n        isProjectInto: boolean\r\n    );\r\n    protected constructor(\r\n        clazz: DocumentType<T>,\r\n        session: InMemoryDocumentSessionOperations,\r\n        indexName: string,\r\n        collectionName: string,\r\n        isGroupBy: boolean,\r\n        declareTokens: DeclareToken[],\r\n        loadTokens: LoadToken[],\r\n        fromAlias: string = null,\r\n        isProjectInto: boolean = false) {\r\n        super();\r\n\r\n        this._clazz = clazz;\r\n        this._rootTypes.add(clazz);\r\n        this._isGroupBy = isGroupBy;\r\n        this._indexName = indexName;\r\n        this._collectionName = collectionName;\r\n        this._fromToken = FromToken.create(indexName, collectionName, fromAlias);\r\n        this._declareTokens = declareTokens;\r\n        this._loadTokens = loadTokens;\r\n\r\n        this._theSession = session;\r\n\r\n        this.on(\"afterQueryExecuted\", (result: QueryResult) => {\r\n            this._updateStatsAndHighlightingsAndExplanations(result);\r\n        });\r\n\r\n        this._conventions = !session ?\r\n            new DocumentConventions() :\r\n            session.conventions;\r\n        // TBD _linqPathProvider = new LinqPathProvider(_conventions);\r\n        this._isProjectInto = isProjectInto || false;\r\n    }\r\n\r\n    private _assertMethodIsCurrentlySupported(methodName: string) {\r\n        if (!this.isFilterActive()) {\r\n            return;\r\n        }\r\n\r\n        throwError(\"InvalidQueryException\", methodName\r\n            + \" is currently unsupported for 'filter'. If you want to use\"\r\n            + methodName + \" in where method you have to put it before 'filter'\");\r\n\r\n    }\r\n\r\n    private _getCurrentWhereTokens(): QueryToken[] {\r\n        if (this.isFilterActive()) {\r\n            return this._filterTokens;\r\n        }\r\n\r\n        if (!this._isInMoreLikeThis) {\r\n            return this._whereTokens;\r\n        }\r\n\r\n        if (!this._whereTokens || !this._whereTokens.length) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Cannot get MoreLikeThisToken because there are no where token specified.\");\r\n        }\r\n        const lastToken = this._whereTokens.at(-1);\r\n\r\n        if (lastToken instanceof MoreLikeThisToken) {\r\n            return lastToken.whereTokens;\r\n        } else {\r\n            throwError(\"InvalidOperationException\", \"Last token is not MoreLikeThisToken\");\r\n        }\r\n    }\r\n\r\n    private _ensureValidFieldName(fieldName: string, isNestedPath: boolean): string {\r\n        if (!this._theSession\r\n            || !this._theSession.conventions\r\n            || isNestedPath\r\n            || this._isGroupBy) {\r\n            return QueryFieldUtil.escapeIfNecessary(fieldName, isNestedPath);\r\n        }\r\n\r\n        for (const rootType of this._rootTypes) {\r\n            const identityProperty = this._theSession.conventions.getIdentityProperty(rootType);\r\n            if (identityProperty && identityProperty === fieldName) {\r\n                return CONSTANTS.Documents.Indexing.Fields.DOCUMENT_ID_FIELD_NAME;\r\n            }\r\n        }\r\n\r\n        return QueryFieldUtil.escapeIfNecessary(fieldName);\r\n    }\r\n\r\n    private _appendOperatorIfNeeded(tokens: QueryToken[]): void {\r\n        this._assertNoRawQuery();\r\n\r\n        if (!tokens || !tokens.length) {\r\n            return;\r\n        }\r\n\r\n        const lastToken = tokens.at(-1);\r\n        if (!(lastToken instanceof WhereToken) && !(lastToken instanceof CloseSubclauseToken)) {\r\n            return;\r\n        }\r\n\r\n        let lastWhere: WhereToken = null;\r\n\r\n        for (let i = tokens.length - 1; i >= 0; i--) {\r\n            if (tokens[i] instanceof WhereToken) {\r\n                lastWhere = tokens[i] as WhereToken;\r\n                break;\r\n            }\r\n        }\r\n\r\n        let token: QueryOperatorToken = this._defaultOperator === \"AND\"\r\n            ? QueryOperatorToken.AND\r\n            : QueryOperatorToken.OR;\r\n\r\n        if (lastWhere\r\n            && lastWhere.options?.searchOperator) {\r\n            token = QueryOperatorToken.OR; // default to OR operator after search if AND was not specified explicitly\r\n        }\r\n\r\n        tokens.push(token);\r\n    }\r\n\r\n    private _transformCollection(fieldName: string, values: any[]): object[] {\r\n        const result: object[] = [];\r\n        for (const value of values) {\r\n            if (Array.isArray(value)) {\r\n                result.push(...this._transformCollection(fieldName, value));\r\n            } else {\r\n                const nestedWhereParams = new WhereParams();\r\n                nestedWhereParams.allowWildcards = true;\r\n                nestedWhereParams.fieldName = fieldName;\r\n                nestedWhereParams.value = value;\r\n\r\n                result.push(this._transformValue(nestedWhereParams));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private _negateIfNeeded(tokens: QueryToken[], fieldName: string): void {\r\n        if (!this._negate) {\r\n            return;\r\n        }\r\n\r\n        this._negate = false;\r\n\r\n        if (!tokens || !tokens.length || tokens.at(-1) instanceof OpenSubclauseToken) {\r\n            if (fieldName) {\r\n                this._whereExists(fieldName);\r\n            } else {\r\n                this._whereTrue();\r\n            }\r\n\r\n            this._andAlso();\r\n        }\r\n\r\n        tokens.push(NegateToken.INSTANCE);\r\n    }\r\n\r\n    public _usingDefaultOperator(operator): void {\r\n        if (this._getCurrentWhereTokens().length > 0) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Default operator can only be set before any where clause is added.\");\r\n        }\r\n\r\n        this._defaultOperator = operator;\r\n    }\r\n\r\n    /**\r\n     * Instruct the query to wait for non stale result for the specified wait timeout.\r\n     * This shouldn't be used outside of unit tests unless you are well aware of the implications\r\n     */\r\n    public _waitForNonStaleResults(waitTimeout?: number): void {\r\n        if (this._theWaitForNonStaleResults) {\r\n            if (!this._timeout || waitTimeout && this._timeout < waitTimeout) {\r\n                this._timeout = waitTimeout;\r\n            }\r\n            return;\r\n        }\r\n        this._theWaitForNonStaleResults = true;\r\n        this._timeout = waitTimeout || this._getDefaultTimeout();\r\n    }\r\n\r\n    protected _getLazyQueryOperation() {\r\n        if (!this._queryOperation) {\r\n            this._queryOperation = this.initializeQueryOperation();\r\n        }\r\n\r\n        const clazz = this._conventions.getJsTypeByDocumentType(this._clazz);\r\n        return  new LazyQueryOperation<T>(\r\n            this._theSession,\r\n            this._queryOperation,\r\n            this,\r\n            clazz);\r\n    }\r\n\r\n    public initializeQueryOperation(): QueryOperation {\r\n        const beforeQueryEventArgs = new SessionBeforeQueryEventArgs(\r\n            this._theSession, new DocumentQueryCustomization(this));\r\n        this._theSession.emit(\"beforeQuery\", beforeQueryEventArgs);\r\n\r\n        const indexQuery = this.getIndexQuery();\r\n        return new QueryOperation(\r\n            this._theSession,\r\n            this._indexName,\r\n            indexQuery,\r\n            this.fieldsToFetchToken,\r\n            this._disableEntitiesTracking,\r\n            false,\r\n            false,\r\n            this._isProjectInto);\r\n    }\r\n\r\n    private _transformValue(whereParams: WhereParams): any;\r\n    private _transformValue(whereParams: WhereParams, forRange: boolean): any;\r\n    private _transformValue(whereParams: WhereParams, forRange: boolean = false): any {\r\n        if (TypeUtil.isNullOrUndefined(whereParams.value)) {\r\n            return null;\r\n        }\r\n\r\n        if (\"\" === (whereParams.value as any)) {\r\n            return \"\";\r\n        }\r\n\r\n        let objectValue: string = null;\r\n\r\n        if (this._conventions.tryConvertValueToObjectForQuery(whereParams.fieldName,\r\n            whereParams.value, forRange, s => objectValue = s)) {\r\n            return objectValue;\r\n        }\r\n\r\n        const value = whereParams.value;\r\n        return this._stringifyParameter(value);\r\n    }\r\n\r\n    private _stringifyParameter(value: any) {\r\n        if (TypeUtil.isDate(value)) {\r\n            return DateUtil.utc.stringify(value);\r\n        }\r\n\r\n        if (TypeUtil.isString(value)) {\r\n            return value;\r\n        }\r\n\r\n        if (TypeUtil.isNumber(value)) {\r\n            return value;\r\n        }\r\n\r\n        if ((value as any) === false || (value as any) === true) {\r\n            return value;\r\n        }\r\n\r\n        return value || null;\r\n    }\r\n\r\n    private _addQueryParameter(value: any): string {\r\n        const parameterName = this.parameterPrefix + Object.keys(this._queryParameters).length;\r\n        this._queryParameters[parameterName] = this._stringifyParameter(value);\r\n        return parameterName;\r\n    }\r\n\r\n    protected static _getSourceAliasIfExists<TResult extends object>(documentType: DocumentType<TResult>,\r\n                                                                     queryData: QueryData,\r\n                                                                     fields: string[],\r\n                                                                     sourceAlias: (value: string) => void) {\r\n        sourceAlias(null);\r\n\r\n        if (fields.length !== 1 || !fields[0]) {\r\n            return;\r\n        }\r\n\r\n        const indexOf = fields[0].indexOf(\".\");\r\n        if (indexOf === -1) {\r\n            return;\r\n        }\r\n\r\n        const possibleAlias = fields[0].substring(0, indexOf);\r\n\r\n        if (queryData.fromAlias && queryData.fromAlias === possibleAlias) {\r\n            sourceAlias(possibleAlias);\r\n            return;\r\n        }\r\n\r\n        if (!queryData.loadTokens || queryData.loadTokens.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (!queryData.loadTokens.some(x => x.alias === possibleAlias)) {\r\n            return;\r\n        }\r\n\r\n        sourceAlias(possibleAlias);\r\n    }\r\n\r\n    protected _createTimeSeriesQueryData(timeSeriesQuery: (builder: ITimeSeriesQueryBuilder) => void) {\r\n        const builder = new TimeSeriesQueryBuilder();\r\n        timeSeriesQuery(builder);\r\n\r\n        const fields = [ TIME_SERIES.SELECT_FIELD_NAME + \"(\" + builder.queryText + \")\"];\r\n        const projections = [ TIME_SERIES.QUERY_FUNCTION ];\r\n        return new QueryData(fields, projections);\r\n    }\r\n\r\n    public _addFilterLimit(filterLimit: number) {\r\n        if (filterLimit <= 0) {\r\n            throwError(\"InvalidOperationException\", \"filterLimit need to be positive and bigger than 0.\");\r\n        }\r\n\r\n        if (filterLimit !== Number.MAX_SAFE_INTEGER) {\r\n            this._filterLimit = filterLimit;\r\n        }\r\n    }\r\n\r\n    private _getCurrentOrderByTokens() {\r\n        return this._orderByTokens;\r\n    }\r\n\r\n    private _getCurrentFilterTokens() {\r\n        return this._filterTokens;\r\n    }\r\n\r\n    protected _updateFieldsToFetchToken(fieldsToFetch: FieldsToFetchToken): void {\r\n        this.fieldsToFetchToken = fieldsToFetch;\r\n\r\n        if (this._selectTokens && !this._selectTokens.length) {\r\n            this._selectTokens.push(fieldsToFetch);\r\n        } else {\r\n            const fetchToken = [...this._selectTokens]\r\n                .find(x => x instanceof FieldsToFetchToken);\r\n\r\n            if (fetchToken) {\r\n                const idx = this._selectTokens.indexOf(fetchToken);\r\n                this._selectTokens[idx] = fieldsToFetch;\r\n            } else {\r\n                this._selectTokens.push(fieldsToFetch);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getIndexQuery(): IndexQuery {\r\n        let serverVersion: string = null;\r\n        if (this._theSession && this._theSession.requestExecutor) {\r\n            serverVersion = this._theSession.requestExecutor.lastServerVersion;\r\n        }\r\n\r\n        const compatibilityMode = serverVersion && serverVersion.localeCompare(\"4.2\") < 0;\r\n        const query = this.toString(compatibilityMode);\r\n        const indexQuery = this._generateIndexQuery(query);\r\n        this.emit(\"beforeQueryExecuted\", indexQuery);\r\n        return indexQuery;\r\n    }\r\n\r\n    /**\r\n     * Gets the fields for projection\r\n     */\r\n    public getProjectionFields(): string[] {\r\n        return this.fieldsToFetchToken &&\r\n        this.fieldsToFetchToken.projections\r\n            ? [...this.fieldsToFetchToken.projections]\r\n            : [] as string[];\r\n    }\r\n\r\n    /**\r\n     * Order the search results randomly using the specified seed\r\n     * this is useful if you want to have repeatable random queries\r\n     */\r\n    public _randomOrdering(): void;\r\n    /**\r\n     * Order the search results randomly using the specified seed\r\n     * this is useful if you want to have repeatable random queries\r\n     */\r\n    public _randomOrdering(seed?: string): void;\r\n    /**\r\n     * Order the search results randomly using the specified seed\r\n     * this is useful if you want to have repeatable random queries\r\n     */\r\n    public _randomOrdering(seed?: string): void {\r\n        this._assertNoRawQuery();\r\n\r\n        this._noCaching();\r\n\r\n        if (!seed) {\r\n            this._orderByTokens.push(OrderByToken.random);\r\n            return;\r\n        }\r\n\r\n        this._orderByTokens.push(OrderByToken.createRandom(seed));\r\n    }\r\n\r\n    // TBD public void _customSortUsing(String typeName)\r\n    // TBD public void _customSortUsing(String typeName, boolean descending)\r\n\r\n    public _projection(projectionBehavior: ProjectionBehavior) {\r\n        this.projectionBehavior = projectionBehavior;\r\n    }\r\n\r\n    public _shardContext(action: (builder: IQueryShardedContextBuilder) => void): void {\r\n        const builderImpl = new QueryShardedContextBuilder();\r\n\r\n        action(builderImpl);\r\n\r\n        const shardContext =  builderImpl.documentIds.size === 1 ? Array.from(builderImpl.documentIds.keys())[0] : Array.from(builderImpl.documentIds);\r\n\r\n        this.queryParameters[CONSTANTS.Documents.Querying.SHARD_CONTEXT_PARAMETER_NAME] = shardContext;\r\n    }\r\n\r\n    protected addGroupByAlias(fieldName: string, projectedName: string): void {\r\n        this._aliasToGroupByFieldName[projectedName] = fieldName;\r\n    }\r\n\r\n    private _assertNoRawQuery(): void {\r\n        if (this._queryRaw) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"RawQuery was called, cannot modify this query by calling on \"\r\n                + \"operations that would modify the query (such as Where, Select, OrderBy, GroupBy, etc)\");\r\n        }\r\n    }\r\n\r\n    public addParameter(name: string, value: any): void {\r\n        name = name.replace(/^\\$/, \"\");\r\n        if (Object.keys(this._queryParameters).includes(name)) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"The parameter \" + name + \" was already added\");\r\n        }\r\n\r\n        this._queryParameters[name] = value;\r\n    }\r\n\r\n    public _groupBy(fieldName: string, ...fieldNames: string[]): void;\r\n    public _groupBy(field: GroupBy, ...fields: GroupBy[]): void;\r\n    public _groupBy(fieldOrFieldName: GroupBy | string, ...fieldsOrFieldNames: any[]): void {\r\n\r\n        if (typeof (fieldOrFieldName) === \"string\") {\r\n            const mapping = fieldsOrFieldNames.map(x => GroupBy.field(x));\r\n            this._groupBy(GroupBy.field(fieldOrFieldName), ...mapping);\r\n            return;\r\n        }\r\n\r\n        if (!this._fromToken.isDynamic) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"groupBy only works with dynamic queries\");\r\n        }\r\n\r\n        this._assertNoRawQuery();\r\n        this._isGroupBy = true;\r\n\r\n        const fieldName = this._ensureValidFieldName((fieldOrFieldName as GroupBy).field, false);\r\n\r\n        this._groupByTokens.push(GroupByToken.create(fieldName, (fieldOrFieldName as GroupBy).method));\r\n\r\n        if (!fieldsOrFieldNames || !fieldsOrFieldNames.length) {\r\n            return;\r\n        }\r\n\r\n        for (const item of fieldsOrFieldNames) {\r\n            fieldOrFieldName = this._ensureValidFieldName((item as GroupBy).field, false);\r\n            this._groupByTokens.push(GroupByToken.create(fieldOrFieldName, (item as GroupBy).method));\r\n        }\r\n    }\r\n\r\n    public _groupByKey(fieldName: string): void;\r\n    public _groupByKey(fieldName: string, projectedName: string): void;\r\n    public _groupByKey(fieldName: string, projectedName: string = null): void {\r\n        this._assertNoRawQuery();\r\n        this._isGroupBy = true;\r\n\r\n        if (projectedName && this._aliasToGroupByFieldName[projectedName]) {\r\n            const aliasedFieldName = this._aliasToGroupByFieldName[projectedName];\r\n            if (!fieldName || fieldName.toLocaleLowerCase() === (projectedName || \"\").toLocaleLowerCase()) {\r\n                fieldName = aliasedFieldName;\r\n            }\r\n        } else if (fieldName\r\n            && Object.keys(this._aliasToGroupByFieldName)\r\n                .reduce((result, next) => result || next === fieldName, false)) {\r\n            fieldName = this._aliasToGroupByFieldName[fieldName];\r\n        }\r\n\r\n        this._selectTokens.push(GroupByKeyToken.create(fieldName, projectedName));\r\n    }\r\n\r\n    public _groupBySum(fieldName: string): void;\r\n    public _groupBySum(fieldName: string, projectedName: string): void;\r\n    public _groupBySum(fieldName: string, projectedName: string = null): void {\r\n        this._assertNoRawQuery();\r\n        this._isGroupBy = true;\r\n\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n        this._selectTokens.push(GroupBySumToken.create(fieldName, projectedName));\r\n    }\r\n\r\n    public _groupByCount(): void;\r\n    public _groupByCount(projectedName: string): void;\r\n    public _groupByCount(projectedName: string = null): void {\r\n        this._assertNoRawQuery();\r\n        this._isGroupBy = true;\r\n\r\n        this._selectTokens.push(GroupByCountToken.create(projectedName));\r\n    }\r\n\r\n    public _whereTrue(): void {\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, null);\r\n\r\n        tokens.push(TrueToken.INSTANCE);\r\n    }\r\n\r\n    public _moreLikeThis(): MoreLikeThisScope {\r\n        this._appendOperatorIfNeeded(this._whereTokens);\r\n\r\n        const token = new MoreLikeThisToken();\r\n        this._whereTokens.push(token);\r\n\r\n        this._isInMoreLikeThis = true;\r\n\r\n        return new MoreLikeThisScope(token, v => this._addQueryParameter(v), () => this._isInMoreLikeThis = false);\r\n    }\r\n\r\n    /**\r\n     * Includes the specified path in the query, loading the document specified in that path\r\n     */\r\n    public _include(path: string): void;\r\n    public _include(includes: IncludeBuilderBase): void;\r\n    public _include(pathOrIncludes: string | IncludeBuilderBase): void {\r\n        if (!pathOrIncludes) {\r\n            return;\r\n        }\r\n\r\n        if (TypeUtil.isString(pathOrIncludes)) {\r\n            if (this._theSession) {\r\n                this._theSession.assertNoIncludesInNonTrackingSession();\r\n            }\r\n            this._documentIncludes.add(pathOrIncludes);\r\n            return;\r\n        }\r\n\r\n        const { documentsToInclude } = pathOrIncludes;\r\n        if (documentsToInclude && documentsToInclude.size > 0) {\r\n            if (this._theSession) {\r\n                this._theSession.assertNoIncludesInNonTrackingSession();\r\n            }\r\n            for (const doc of documentsToInclude) {\r\n                this._documentIncludes.add(doc);\r\n            }\r\n        }\r\n\r\n        this._includeCounters(pathOrIncludes.alias, pathOrIncludes.countersToIncludeBySourcePath);\r\n\r\n        if (pathOrIncludes.timeSeriesToIncludeBySourceAlias) {\r\n            this._includeTimeSeries(pathOrIncludes.alias, pathOrIncludes.timeSeriesToIncludeBySourceAlias);\r\n        }\r\n\r\n        if (pathOrIncludes.revisionsToIncludeByDateTime) {\r\n            this._includeRevisionsByDate(pathOrIncludes.revisionsToIncludeByDateTime);\r\n        }\r\n\r\n        if (pathOrIncludes.revisionsToIncludeByChangeVector) {\r\n            this._includeRevisionsByChangeVector(pathOrIncludes.revisionsToIncludeByChangeVector);\r\n        }\r\n\r\n        if (pathOrIncludes.compareExchangeValuesToInclude && pathOrIncludes.compareExchangeValuesToInclude.size > 0) {\r\n            if (this._theSession) {\r\n                this._theSession.assertNoIncludesInNonTrackingSession();\r\n            }\r\n\r\n            this._compareExchangeValueIncludesTokens = [];\r\n\r\n            for (const compareExchangeValue of pathOrIncludes.compareExchangeValuesToInclude) {\r\n                this._compareExchangeValueIncludesTokens.push(CompareExchangeValueIncludesToken.create(compareExchangeValue));\r\n            }\r\n        }\r\n    }\r\n\r\n    // TBD: public void Include(Expression<Func<T, object>> path)\r\n\r\n    public _take(count: number): void {\r\n        this._pageSize = count;\r\n    }\r\n\r\n    public _skip(count: number): void {\r\n        this._start = count;\r\n    }\r\n\r\n    /**\r\n     * Filter the results from the index using the specified where clause.\r\n     */\r\n    public _whereLucene(fieldName: string, whereClause: string, exact: boolean): void {\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n\r\n        const options = exact ? new WhereOptions({ exact }) : null;\r\n        const whereToken = WhereToken.create(\"Lucene\", fieldName, this._addQueryParameter(whereClause), options);\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    /**\r\n     * Simplified method for opening a new clause within the query\r\n     */\r\n    public _openSubclause(): void {\r\n        this._currentClauseDepth++;\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, null);\r\n\r\n        tokens.push(OpenSubclauseToken.create());\r\n    }\r\n\r\n    /**\r\n     * Simplified method for closing a clause within the query\r\n     */\r\n    public _closeSubclause(): void {\r\n        this._currentClauseDepth--;\r\n\r\n        const tokens: QueryToken[] = this._getCurrentWhereTokens();\r\n        tokens.push(CloseSubclauseToken.create());\r\n    }\r\n\r\n    public _whereEquals(fieldName: string, method: MethodCall): void;\r\n    public _whereEquals(fieldName: string, method: MethodCall, exact: boolean): void;\r\n    public _whereEquals(fieldName: string, value: any): void;\r\n    public _whereEquals(fieldName: string, value: any, exact: boolean): void;\r\n    public _whereEquals(whereParams: WhereParams): void;\r\n    public _whereEquals(fieldNameOrWhereParams: string | WhereParams, value?: object, exact: boolean = false): void {\r\n        if (!TypeUtil.isObject(fieldNameOrWhereParams)) {\r\n            const params = new WhereParams();\r\n            params.fieldName = fieldNameOrWhereParams as string;\r\n            params.value = value;\r\n            params.exact = exact;\r\n            this._whereEquals(params);\r\n            return;\r\n        }\r\n\r\n        const whereParams = fieldNameOrWhereParams as WhereParams;\r\n        if (this._negate) {\r\n            this._negate = false;\r\n            this._whereNotEquals(whereParams);\r\n            return;\r\n        }\r\n\r\n        whereParams.fieldName = this._ensureValidFieldName(whereParams.fieldName, whereParams.nestedPath);\r\n\r\n        const tokens: QueryToken[] = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n\r\n        if (this._ifValueIsMethod(\"Equals\", whereParams, tokens)) {\r\n            return;\r\n        }\r\n\r\n        const transformToEqualValue = this._transformValue(whereParams);\r\n        const addQueryParameter: string = this._addQueryParameter(transformToEqualValue);\r\n        const whereToken = WhereToken.create(\r\n            \"Equals\",\r\n            whereParams.fieldName,\r\n            addQueryParameter,\r\n            new WhereOptions({\r\n                exact: whereParams.exact\r\n            }));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    private _ifValueIsMethod(op: WhereOperator, whereParams: WhereParams, tokens: QueryToken[]): boolean {\r\n        if (whereParams.value instanceof MethodCall) {\r\n            const mc = whereParams.value as MethodCall;\r\n\r\n            const args = mc.args.map(() => null);\r\n            for (let i = 0; i < mc.args.length; i++) {\r\n                args[i] = this._addQueryParameter(mc.args[i]);\r\n            }\r\n\r\n            let token: WhereToken;\r\n            const type = mc.constructor.name;\r\n            if (CmpXchg.name === type) {\r\n                token = WhereToken.create(\r\n                    op,\r\n                    whereParams.fieldName,\r\n                    null,\r\n                    new WhereOptions({\r\n                        methodType: \"CmpXchg\",\r\n                        parameters: args,\r\n                        property: mc.accessPath,\r\n                        exact: whereParams.exact\r\n                    }));\r\n            } else {\r\n                throwError(\"InvalidArgumentException\", `Unknown method ${type}.`);\r\n            }\r\n\r\n            tokens.push(token);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _whereNotEquals(fieldName: string, value: any): void;\r\n    public _whereNotEquals(fieldName: string, value: any, exact: boolean): void;\r\n    public _whereNotEquals(fieldName: string, method: MethodCall): void;\r\n    public _whereNotEquals(fieldName: string, method: MethodCall, exact: boolean): void;\r\n    public _whereNotEquals(whereParams: WhereParams): void;\r\n    public _whereNotEquals(fieldNameOrWhereParams: string | WhereParams, value?: object, exact: boolean = false): void {\r\n        let whereParams: WhereParams;\r\n        if (TypeUtil.isString(fieldNameOrWhereParams)) {\r\n            whereParams = new WhereParams();\r\n            whereParams.fieldName = fieldNameOrWhereParams as string;\r\n            whereParams.value = value;\r\n            whereParams.exact = exact;\r\n\r\n            return this._whereNotEquals(whereParams);\r\n        }\r\n\r\n        whereParams = fieldNameOrWhereParams as WhereParams;\r\n        if (this._negate) {\r\n            this._negate = false;\r\n            this._whereEquals(whereParams);\r\n            return;\r\n        }\r\n\r\n        const transformToEqualValue = this._transformValue(whereParams);\r\n\r\n        const tokens: QueryToken[] = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n\r\n        whereParams.fieldName = this._ensureValidFieldName(whereParams.fieldName, whereParams.nestedPath);\r\n\r\n        if (this._ifValueIsMethod(\"NotEquals\", whereParams, tokens)) {\r\n            return;\r\n        }\r\n\r\n        const whereToken = WhereToken.create(\r\n            \"NotEquals\",\r\n            whereParams.fieldName,\r\n            this._addQueryParameter(transformToEqualValue),\r\n            new WhereOptions(whereParams.exact));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    public _negateNext(): void {\r\n        this._negate = !this._negate;\r\n    }\r\n\r\n    /**\r\n     * Check that the field has one of the specified value\r\n     */\r\n    public _whereIn(fieldName: string, values: any[]): void;\r\n    /**\r\n     * Check that the field has one of the specified value\r\n     */\r\n    public _whereIn(fieldName: string, values: any[], exact: boolean): void;\r\n    /**\r\n     * Check that the field has one of the specified value\r\n     */\r\n    public _whereIn(fieldName: string, values: any[], exact: boolean = false): void {\r\n        this._assertMethodIsCurrentlySupported(\"whereIn\");\r\n\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n\r\n        const whereToken = WhereToken.create(\r\n            \"In\",\r\n            fieldName,\r\n            this._addQueryParameter(\r\n                this._transformCollection(fieldName, AbstractDocumentQuery._unpackCollection(values))));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    public _whereStartsWith(fieldName: string, value: any, exact: boolean = false): void {\r\n        this._assertMethodIsCurrentlySupported(\"whereStartsWith\");\r\n\r\n        const whereParams = new WhereParams();\r\n        whereParams.fieldName = fieldName;\r\n        whereParams.value = value;\r\n        whereParams.allowWildcards = true;\r\n\r\n        const transformToEqualValue = this._transformValue(whereParams);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n\r\n        whereParams.fieldName = this._ensureValidFieldName(whereParams.fieldName, whereParams.nestedPath);\r\n        this._negateIfNeeded(tokens, whereParams.fieldName);\r\n\r\n        const whereToken = WhereToken.create(\r\n            \"StartsWith\", whereParams.fieldName, this._addQueryParameter(transformToEqualValue), new WhereOptions({\r\n                exact\r\n            }));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    /**\r\n     * Matches fields which ends with the specified value.\r\n     */\r\n    public _whereEndsWith(fieldName: string, value: any, exact: boolean = false): void {\r\n        this._assertMethodIsCurrentlySupported(\"whereEndsWith\");\r\n\r\n        const whereParams = new WhereParams();\r\n        whereParams.fieldName = fieldName;\r\n        whereParams.value = value;\r\n        whereParams.allowWildcards = true;\r\n\r\n        const transformToEqualValue = this._transformValue(whereParams);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n\r\n        whereParams.fieldName = this._ensureValidFieldName(whereParams.fieldName, whereParams.nestedPath);\r\n        this._negateIfNeeded(tokens, whereParams.fieldName);\r\n\r\n        const whereToken = WhereToken.create(\r\n            \"EndsWith\", whereParams.fieldName, this._addQueryParameter(transformToEqualValue), new WhereOptions({\r\n                exact\r\n            }));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    /**\r\n     * Matches fields where the value is between the specified start and end, inclusive\r\n     */\r\n    public _whereBetween(fieldName: string, start: any, end: any): void;\r\n    /**\r\n     * Matches fields where the value is between the specified start and end, inclusive\r\n     */\r\n    public _whereBetween(fieldName: string, start: any, end: any, exact: boolean): void;\r\n    /**\r\n     * Matches fields where the value is between the specified start and end, inclusive\r\n     */\r\n    public _whereBetween(fieldName: string, start: any, end: any, exact: boolean = false): void {\r\n        this._assertMethodIsCurrentlySupported(\"whereBetween\");\r\n\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n\r\n        const startParams = new WhereParams();\r\n        startParams.value = start;\r\n        startParams.fieldName = fieldName;\r\n\r\n        const endParams = new WhereParams();\r\n        endParams.value = end;\r\n        endParams.fieldName = fieldName;\r\n\r\n        const fromParameterName = this._addQueryParameter(\r\n            !start ? \"*\" : this._transformValue(startParams, true));\r\n        const toParameterName = this._addQueryParameter(\r\n            !end ? \"NULL\" : this._transformValue(endParams, true));\r\n\r\n        const whereToken = WhereToken.create(\r\n            \"Between\", fieldName, null, new WhereOptions({\r\n                exact,\r\n                from: fromParameterName,\r\n                to: toParameterName\r\n            }));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    /**\r\n     * Matches fields where the value is greater than the specified value\r\n     */\r\n    public _whereGreaterThan(fieldName: string, value: any): void;\r\n    /**\r\n     * Matches fields where the value is greater than the specified value\r\n     */\r\n    public _whereGreaterThan(fieldName: string, value: any, exact: boolean): void;\r\n    /**\r\n     * Matches fields where the value is greater than the specified value\r\n     */\r\n    public _whereGreaterThan(fieldName: string, value: any, exact: boolean = false): void {\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n        const whereParams = new WhereParams();\r\n        whereParams.value = value;\r\n        whereParams.fieldName = fieldName;\r\n\r\n        const parameter = this._addQueryParameter(\r\n            !value ? \"*\" : this._transformValue(whereParams, true));\r\n\r\n        const whereToken = WhereToken.create(\r\n            \"GreaterThan\", fieldName, parameter, new WhereOptions({ exact }));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    /**\r\n     * Matches fields where the value is greater than or equal to the specified value\r\n     */\r\n    public _whereGreaterThanOrEqual(fieldName: string, value: any): void;\r\n    /**\r\n     * Matches fields where the value is greater than or equal to the specified value\r\n     */\r\n    public _whereGreaterThanOrEqual(fieldName: string, value: any, exact: boolean): void;\r\n    /**\r\n     * Matches fields where the value is greater than or equal to the specified value\r\n     */\r\n    public _whereGreaterThanOrEqual(fieldName: string, value: any, exact: boolean = false): void {\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n        const whereParams = new WhereParams();\r\n        whereParams.value = value;\r\n        whereParams.fieldName = fieldName;\r\n\r\n        const parameter = this._addQueryParameter(\r\n            !value ? \"*\" : this._transformValue(whereParams, true));\r\n        const whereToken = WhereToken.create(\r\n            \"GreaterThanOrEqual\", fieldName, parameter, new WhereOptions({ exact }));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    public _whereLessThan(fieldName: string, value: any): void;\r\n    public _whereLessThan(fieldName: string, value: any, exact: boolean): void;\r\n    public _whereLessThan(fieldName: string, value: any, exact: boolean = false): void {\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n\r\n        const whereParams = new WhereParams();\r\n        whereParams.value = value;\r\n        whereParams.fieldName = fieldName;\r\n\r\n        const parameter = this._addQueryParameter(\r\n            !value ? \"NULL\" : this._transformValue(whereParams, true));\r\n        const whereToken = WhereToken.create(\r\n            \"LessThan\", fieldName, parameter, new WhereOptions({ exact }));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    public _whereLessThanOrEqual(fieldName: string, value: any): void;\r\n    public _whereLessThanOrEqual(fieldName: string, value: any, exact: boolean): void;\r\n    public _whereLessThanOrEqual(fieldName: string, value: any, exact: boolean = false): void {\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n\r\n        const whereParams = new WhereParams();\r\n        whereParams.value = value;\r\n        whereParams.fieldName = fieldName;\r\n\r\n        const parameter = this._addQueryParameter(\r\n            !value ? \"NULL\" : this._transformValue(whereParams, true));\r\n        const whereToken = WhereToken.create(\r\n            \"LessThanOrEqual\", fieldName, parameter, new WhereOptions({ exact }));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    /**\r\n     * Matches fields where Regex.IsMatch(filedName, pattern)\r\n     */\r\n    public _whereRegex(fieldName: string, pattern: string): void {\r\n        this._assertMethodIsCurrentlySupported(\"whereRegex\");\r\n\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n\r\n        const whereParams = new WhereParams();\r\n        whereParams.value = pattern;\r\n        whereParams.fieldName = fieldName;\r\n\r\n        const parameter = this._addQueryParameter(this._transformValue(whereParams));\r\n\r\n        const whereToken = WhereToken.create(\r\n            \"Regex\", fieldName, parameter);\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    public _andAlso(wrapPreviousQueryClauses: boolean = false): void {\r\n        const tokens = this._getCurrentWhereTokens();\r\n        if (!tokens || !tokens.length) {\r\n            return;\r\n        }\r\n\r\n        if (tokens.at(-1) instanceof QueryOperatorToken) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Cannot add AND, previous token was already an operator token.\");\r\n        }\r\n\r\n        if (wrapPreviousQueryClauses) {\r\n            tokens.unshift(OpenSubclauseToken.create());\r\n            tokens.push(CloseSubclauseToken.create());\r\n            tokens.push(QueryOperatorToken.AND);\r\n        } else {\r\n            tokens.push(QueryOperatorToken.AND);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an OR to the query\r\n     */\r\n    public _orElse(): void {\r\n        const tokens = this._getCurrentWhereTokens();\r\n        if (!tokens && !tokens.length) {\r\n            return;\r\n        }\r\n\r\n        if (tokens.at(-1) instanceof QueryOperatorToken) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Cannot add OR, previous token was already an operator token.\");\r\n        }\r\n\r\n        tokens.push(QueryOperatorToken.OR);\r\n    }\r\n\r\n    public setFilterMode(on: boolean): IDisposable {\r\n        return new FilterModeScope(this._filterModeStack, on);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies a boost weight to the previous where clause.\r\n     * The higher the boost factor, the more relevant the term will be.\r\n     * <p>\r\n     * boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight\r\n     * <p>\r\n     * http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term\r\n     */\r\n    public _boost(boost: number): void {\r\n        this._assertMethodIsCurrentlySupported(\"boost\");\r\n\r\n        if (boost === 1.0) {\r\n            return;\r\n        }\r\n\r\n        if (boost < 0.0) {\r\n            throwError(\"InvalidArgumentException\", \"Boost factor must be a non-negative number\");\r\n        }\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n\r\n        let last = tokens.length ? tokens.at(-1) : null;\r\n\r\n        if (last instanceof WhereToken) {\r\n            last.options.boost = boost;\r\n        } else if (last instanceof CloseSubclauseToken) {\r\n            const parameter = this._addQueryParameter(boost);\r\n\r\n            const close = last;\r\n\r\n            let openSubclauseToSkip = 0;\r\n            let index = tokens.indexOf(last);\r\n\r\n            while (last && index > 0) {\r\n                index--;\r\n                last = tokens[index]; // find the previous option\r\n\r\n                if (last instanceof CloseSubclauseToken) {\r\n                    // We have to count how many inner subclauses were inside current subclause\r\n                    openSubclauseToSkip++;\r\n                } else if (last instanceof OpenSubclauseToken && openSubclauseToSkip > 0) {\r\n                    // Inner subclause open - we have to skip it because we want to match only the leftmost opening.\r\n                    openSubclauseToSkip--;\r\n                } else if (last instanceof OpenSubclauseToken) {\r\n                    last.boostParameterName = parameter;\r\n                    close.boostParameterName = parameter;\r\n                }\r\n            }\r\n        } else {\r\n            throwError(\"InvalidOperationException\", \"Cannot apply boost\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies a fuzziness factor to the single word term in the last where clause\r\n     * <p>\r\n     * 0.0 to 1.0 where 1.0 means closer match\r\n     * <p>\r\n     * https://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Fuzzy%20Searches\r\n     */\r\n    public _fuzzy(fuzzy: number): void {\r\n        this._assertMethodIsCurrentlySupported(\"fuzzy\");\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        if (!tokens && !tokens.length) {\r\n            throwError(\"InvalidOperationException\", \"Fuzzy can only be used right after where clause.\");\r\n        }\r\n\r\n        const whereToken = tokens.at(-1);\r\n        if (!(whereToken instanceof WhereToken)) {\r\n            throwError(\"InvalidOperationException\", \"Fuzzy can only be used right after where clause.\");\r\n        }\r\n\r\n        if ((whereToken as WhereToken).whereOperator !== \"Equals\" as WhereOperator) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Fuzzy can only be used right after where clause with equals operator\");\r\n        }\r\n\r\n        if (fuzzy < 0.0 || fuzzy > 1.0) {\r\n            throwError(\"InvalidArgumentException\", \"Fuzzy distance must be between 0.0 and 1.0.\");\r\n        }\r\n\r\n        (whereToken as WhereToken).options.fuzzy = fuzzy;\r\n    }\r\n\r\n    /**\r\n     * Specifies a proximity distance for the phrase in the last search clause\r\n     * <p>\r\n     * https://lucene.apache.org/core/2_9_4/queryparsersyntax.html#Proximity%20Searches\r\n     */\r\n    public _proximity(proximity: number): void {\r\n        this._assertMethodIsCurrentlySupported(\"proximity\");\r\n        const tokens = this._getCurrentWhereTokens();\r\n        if (!tokens && !tokens.length) {\r\n            throwError(\"InvalidOperationException\", \"Proximity can only be used right after search clause.\");\r\n        }\r\n\r\n        const whereToken = tokens.at(-1);\r\n        if (!(whereToken instanceof WhereToken)) {\r\n            throwError(\"InvalidOperationException\", \"Proximity can only be used right after search clause.\");\r\n        }\r\n\r\n        if ((whereToken as WhereToken).whereOperator !== \"Search\" as WhereOperator) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Proximity can only be used right after search clause\");\r\n        }\r\n\r\n        if (proximity < 0) {\r\n            throwError(\"InvalidArgumentException\", \"Proximity distance must be a number greater than or equal to 0\");\r\n        }\r\n\r\n        (whereToken as WhereToken).options.proximity = proximity;\r\n    }\r\n\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The fields are the names of the fields to sort, defaulting to sorting by ascending.\r\n     * You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending\r\n     */\r\n    public _orderBy(field: string): void;\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The fields are the names of the fields to sort, defaulting to sorting by ascending.\r\n     * You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending\r\n     */\r\n    public _orderBy(field: string, ordering: OrderingType): void;\r\n    public _orderBy(field: string, options: { sorterName: string });\r\n    public _orderBy(field: string, orderingOrOptions: OrderingType | { sorterName: string } = \"String\"): void {\r\n        if (TypeUtil.isString(orderingOrOptions)) {\r\n            this._assertNoRawQuery();\r\n            const f = this._ensureValidFieldName(field, false);\r\n            this._orderByTokens.push(OrderByToken.createAscending(f, { ordering: orderingOrOptions }));\r\n        } else {\r\n            const sorterName = orderingOrOptions.sorterName;\r\n            if (StringUtil.isNullOrEmpty(sorterName)) {\r\n                throwError(\"InvalidArgumentException\", \"SorterName cannot be null or empty\");\r\n            }\r\n\r\n            this._assertNoRawQuery();\r\n            const f = this._ensureValidFieldName(field, false);\r\n            this._orderByTokens.push(OrderByToken.createAscending(f, orderingOrOptions));\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The fields are the names of the fields to sort, defaulting to sorting by descending.\r\n     * You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending\r\n     */\r\n    public _orderByDescending(field: string): void;\r\n    /**\r\n     * Order the results by the specified fields\r\n     * The fields are the names of the fields to sort, defaulting to sorting by descending.\r\n     * You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending\r\n     */\r\n    public _orderByDescending(field: string, ordering: OrderingType): void;\r\n    public _orderByDescending(field: string, options: { sorterName: string });\r\n    public _orderByDescending(field: string, orderingOrOptions: OrderingType | { sorterName: string } = \"String\"): void {\r\n        if (TypeUtil.isString(orderingOrOptions)) {\r\n            this._assertNoRawQuery();\r\n            const f = this._ensureValidFieldName(field, false);\r\n            this._orderByTokens.push(OrderByToken.createDescending(f, { ordering: orderingOrOptions }));\r\n        } else {\r\n            const sorterName = orderingOrOptions.sorterName;\r\n            if (StringUtil.isNullOrEmpty(sorterName)) {\r\n                throwError(\"InvalidArgumentException\", \"SorterName cannot be null or empty\");\r\n            }\r\n\r\n            this._assertNoRawQuery();\r\n            const f = this._ensureValidFieldName(field, false);\r\n            this._orderByTokens.push(OrderByToken.createDescending(f, orderingOrOptions));\r\n        }\r\n    }\r\n\r\n    public _orderByScore(): void {\r\n        this._assertNoRawQuery();\r\n\r\n        this._orderByTokens.push(OrderByToken.scoreAscending);\r\n    }\r\n\r\n    public _orderByScoreDescending(): void {\r\n        this._assertNoRawQuery();\r\n        this._orderByTokens.push(OrderByToken.scoreDescending);\r\n    }\r\n\r\n    /**\r\n     * Provide statistics about the query, such as total count of matching records\r\n     */\r\n    public _statistics(statsCallback: (stats: QueryStatistics) => void): void {\r\n        this._queryStats.requestedByUser = true;\r\n        statsCallback(this._queryStats);\r\n    }\r\n\r\n    // TBD public void InvokeAfterStreamExecuted(BlittableJsonReaderObject result)\r\n\r\n    /**\r\n     * Generates the index query.\r\n     */\r\n    protected _generateIndexQuery(query: string): IndexQuery {\r\n        const indexQuery = new IndexQuery();\r\n        indexQuery.query = query;\r\n        indexQuery.waitForNonStaleResults = this._theWaitForNonStaleResults;\r\n        indexQuery.waitForNonStaleResultsTimeout = this._timeout;\r\n        indexQuery.queryParameters = this._queryParameters;\r\n        indexQuery.disableCaching = this._disableCaching;\r\n        indexQuery.projectionBehavior = this.projectionBehavior;\r\n        indexQuery.skipStatistics = !this._queryStats.requestedByUser;\r\n        return indexQuery;\r\n    }\r\n\r\n    /**\r\n     * Perform a search for documents which fields that match the searchTerms.\r\n     * If there is more than a single term, each of them will be checked independently.\r\n     */\r\n    public _search(fieldName: string, searchTerms: string): void;\r\n    /**\r\n     * Perform a search for documents which fields that match the searchTerms.\r\n     * If there is more than a single term, each of them will be checked independently.\r\n     */\r\n    public _search(fieldName: string, searchTerms: string, operator: SearchOperator): void;\r\n    /**\r\n     * Perform a search for documents which fields that match the searchTerms.\r\n     * If there is more than a single term, each of them will be checked independently.\r\n     */\r\n    public _search(fieldName: string, searchTerms: string, operator: SearchOperator = \"OR\"): void {\r\n        this._assertMethodIsCurrentlySupported(\"search\");\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n\r\n        const whereToken = WhereToken.create(\r\n            \"Search\", fieldName, this._addQueryParameter(searchTerms), new WhereOptions({ search: operator }));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    public toString(compatibilityMode: boolean = false): string {\r\n        if (this._queryRaw) {\r\n            if (compatibilityMode) {\r\n                return this._queryRaw;\r\n            }\r\n\r\n            const rawQueryText = new StringBuilder(this._queryRaw);\r\n            this._buildPagination(rawQueryText);\r\n\r\n            return rawQueryText.toString();\r\n        }\r\n\r\n        if (this._currentClauseDepth) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"A clause was not closed correctly within this query, current clause depth = \"\r\n                + this._currentClauseDepth);\r\n        }\r\n\r\n        const queryText = new StringBuilder();\r\n        this._buildDeclare(queryText);\r\n        this._buildFrom(queryText);\r\n        this._buildGroupBy(queryText);\r\n        this._buildWhere(queryText);\r\n        this._buildOrderBy(queryText);\r\n\r\n        this._buildLoad(queryText);\r\n        this._buildFilter(queryText);\r\n        this._buildSelect(queryText);\r\n        this._buildInclude(queryText);\r\n\r\n        if (!compatibilityMode) {\r\n            this._buildPagination(queryText);\r\n        }\r\n\r\n        return queryText.toString();\r\n    }\r\n\r\n    private _buildPagination(queryText: StringBuilder) {\r\n        if (this._start > 0 || !TypeUtil.isNullOrUndefined(this._pageSize)) {\r\n            queryText\r\n                .append(\" limit $\")\r\n                .append(this._addQueryParameter(this._start))\r\n                .append(\", $\")\r\n                .append(this._addQueryParameter(this._pageSize));\r\n        }\r\n\r\n        if (this._filterTokens.length > 0 && this._filterLimit > 0) {\r\n            queryText\r\n                .append(\" filter_limit $\")\r\n                .append(this._addQueryParameter(this._filterLimit));\r\n        }\r\n    }\r\n\r\n    private _buildInclude(queryText: StringBuilder): void {\r\n        if (!this._documentIncludes.size\r\n            && !this._highlightingTokens.length\r\n            && !this._explanationToken\r\n            && !this._queryTimings\r\n            && !this._counterIncludesTokens\r\n            && !this._revisionsIncludesTokens\r\n            && !this._timeSeriesIncludesTokens\r\n            && !this._compareExchangeValueIncludesTokens) {\r\n            return;\r\n        }\r\n\r\n        queryText.append(\" include \");\r\n\r\n        const firstRef = {\r\n            value: true\r\n        };\r\n\r\n        for (const include of this._documentIncludes) {\r\n            if (!firstRef.value) {\r\n                queryText.append(\",\");\r\n            }\r\n            firstRef.value = false;\r\n\r\n            let escapedInclude: string;\r\n            if (IncludesUtil.requiresQuotes(include, x => escapedInclude = x)) {\r\n                queryText.append(\"'\");\r\n                queryText.append(escapedInclude);\r\n                queryText.append(\"'\");\r\n            } else {\r\n                queryText.append(include);\r\n            }\r\n        }\r\n\r\n        this._writeIncludeTokens(this._counterIncludesTokens, firstRef, queryText);\r\n        this._writeIncludeTokens(this._timeSeriesIncludesTokens, firstRef, queryText);\r\n        this._writeIncludeTokens(this._revisionsIncludesTokens, firstRef, queryText);\r\n        this._writeIncludeTokens(this._compareExchangeValueIncludesTokens, firstRef, queryText);\r\n        this._writeIncludeTokens(this._highlightingTokens, firstRef, queryText);\r\n\r\n        if (this._explanationToken) {\r\n            if (!firstRef.value) {\r\n                queryText.append(\",\");\r\n            }\r\n\r\n            firstRef.value = false;\r\n            this._explanationToken.writeTo(queryText);\r\n        }\r\n\r\n        if (this._queryTimings) {\r\n            if (!firstRef.value) {\r\n                queryText.append(\",\");\r\n            }\r\n            firstRef.value = false;\r\n\r\n            TimingsToken.instance.writeTo(queryText);\r\n        }\r\n    }\r\n\r\n    private _writeIncludeTokens<TToken extends QueryToken>(tokens: TToken[], firstRef: { value: boolean }, queryText: StringBuilder) {\r\n        if (!tokens) {\r\n            return;\r\n        }\r\n\r\n        for (const token of tokens) {\r\n            if (!firstRef.value) {\r\n                queryText.append(\",\");\r\n            }\r\n\r\n            firstRef.value = false;\r\n\r\n            token.writeTo(queryText);\r\n        }\r\n    }\r\n\r\n    public _intersect(): void {\r\n        const tokens = this._getCurrentWhereTokens();\r\n        if (tokens.length > 0) {\r\n            const last = tokens.at(-1);\r\n            if (last instanceof WhereToken || last instanceof CloseSubclauseToken) {\r\n                this._isIntersect = true;\r\n\r\n                tokens.push(IntersectMarkerToken.INSTANCE);\r\n                return;\r\n            }\r\n        }\r\n\r\n        throwError(\"InvalidOperationException\", \"Cannot add INTERSECT at this point.\");\r\n    }\r\n\r\n    public _whereExists(fieldName: string): void {\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, null);\r\n\r\n\r\n        tokens.push(WhereToken.create(\"Exists\", fieldName, null));\r\n    }\r\n\r\n    public _containsAny(fieldName: string, values: any[]): void {\r\n        this._assertMethodIsCurrentlySupported(\"containsAny\");\r\n\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n\r\n        const array = this._transformCollection(fieldName, AbstractDocumentQuery._unpackCollection(values));\r\n        const whereToken = WhereToken.create(\r\n            \"In\", fieldName, this._addQueryParameter(array), new WhereOptions({ exact: false }));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    public _containsAll(fieldName: string, values: any[]): void {\r\n        this._assertMethodIsCurrentlySupported(\"containsAll\");\r\n\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n\r\n        const array = this._transformCollection(fieldName, AbstractDocumentQuery._unpackCollection(values));\r\n\r\n        if (!array.length) {\r\n            tokens.push(TrueToken.INSTANCE);\r\n            return;\r\n        }\r\n\r\n        const whereToken = WhereToken.create(\r\n            \"AllIn\", fieldName, this._addQueryParameter(array));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    public addRootType(clazz: DocumentType): void {\r\n        this._rootTypes.add(clazz);\r\n    }\r\n\r\n    // TBD public string GetMemberQueryPathForOrderBy(Expression expression)\r\n    // TBD public string GetMemberQueryPath(Expression expression)\r\n\r\n    public _distinct(): void {\r\n        if (this.isDistinct) {\r\n            throwError(\"InvalidOperationException\", \"This is already a distinct query.\");\r\n        }\r\n\r\n        if (!this._selectTokens.length) {\r\n            this._selectTokens.push(DistinctToken.INSTANCE);\r\n        } else {\r\n            this._selectTokens.unshift(DistinctToken.INSTANCE);\r\n        }\r\n    }\r\n\r\n    private _updateStatsAndHighlightingsAndExplanations(queryResult: QueryResult): void {\r\n        this._queryStats.updateQueryStats(queryResult);\r\n        this._queryHighlightings.update(queryResult);\r\n\r\n        if (this._explanations) {\r\n            this._explanations.update(queryResult);\r\n        }\r\n\r\n        if (this._queryTimings) {\r\n            this._queryTimings.update(queryResult);\r\n        }\r\n    }\r\n\r\n    private _buildSelect(writer: StringBuilder): void {\r\n        if (!this._selectTokens || !this._selectTokens.length) {\r\n            return;\r\n        }\r\n\r\n        writer.append(\" select \");\r\n        if (this._selectTokens.length === 1 && this._selectTokens[0] instanceof DistinctToken) {\r\n            this._selectTokens[0].writeTo(writer);\r\n            writer.append(\" *\");\r\n\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this._selectTokens.length; i++) {\r\n            const token = this._selectTokens[i];\r\n            if (i > 0 && !(this._selectTokens[i - 1] instanceof DistinctToken)) {\r\n                writer.append(\",\");\r\n            }\r\n\r\n            DocumentQueryHelper.addSpaceIfNeeded(\r\n                i > 0 ? this._selectTokens[i - 1] : null, token, writer);\r\n\r\n            token.writeTo(writer);\r\n        }\r\n    }\r\n\r\n    private _buildFrom(writer: StringBuilder) {\r\n        this._fromToken.writeTo(writer);\r\n    }\r\n\r\n    private _buildDeclare(writer: StringBuilder): void {\r\n        if (!this._declareTokens) {\r\n            return;\r\n        }\r\n\r\n        for (const token of this._declareTokens) {\r\n            token.writeTo(writer);\r\n        }\r\n    }\r\n\r\n    private _buildLoad(writer: StringBuilder): void {\r\n        if (!this._loadTokens || !this._loadTokens.length) {\r\n            return;\r\n        }\r\n\r\n        writer.append(\" load \");\r\n\r\n        for (let i = 0; i < this._loadTokens.length; i++) {\r\n            if (i !== 0) {\r\n                writer.append(\", \");\r\n            }\r\n\r\n            this._loadTokens[i].writeTo(writer);\r\n        }\r\n    }\r\n\r\n    private _buildWhere(writer: StringBuilder) {\r\n        if (!this._whereTokens || !this._whereTokens.length) {\r\n            return;\r\n        }\r\n\r\n        writer\r\n            .append(\" where \");\r\n\r\n        if (this._isIntersect) {\r\n            writer\r\n                .append(\"intersect(\");\r\n        }\r\n\r\n        for (let i = 0; i < this._whereTokens.length; i++) {\r\n            DocumentQueryHelper.addSpaceIfNeeded(\r\n                i > 0 ? this._whereTokens[i - 1] : null,\r\n                this._whereTokens[i],\r\n                writer);\r\n            this._whereTokens[i].writeTo(writer);\r\n        }\r\n\r\n        if (this._isIntersect) {\r\n            writer.append(\") \");\r\n        }\r\n    }\r\n\r\n    private _buildGroupBy(writer: StringBuilder): void {\r\n        if (!this._groupByTokens || !this._groupByTokens.length) {\r\n            return;\r\n        }\r\n\r\n        writer\r\n            .append(\" group by \");\r\n\r\n        let isFirst = true;\r\n\r\n        for (const token of this._groupByTokens) {\r\n            if (!isFirst) {\r\n                writer.append(\", \");\r\n            }\r\n\r\n            token.writeTo(writer);\r\n            isFirst = false;\r\n        }\r\n    }\r\n\r\n    private _buildFilter(writer: StringBuilder) {\r\n        if (this._filterTokens.length === 0) {\r\n            return;\r\n        }\r\n\r\n        writer\r\n            .append(\" filter \");\r\n\r\n        for (let i = 0; i < this._filterTokens.length; i++) {\r\n            DocumentQueryHelper.addSpaceIfNeeded(i > 0 ? this._filterTokens[i - 1] : null, this._filterTokens[i], writer);\r\n            this._filterTokens[i].writeTo(writer);\r\n        }\r\n    }\r\n\r\n    private _buildOrderBy(writer: StringBuilder): void {\r\n        if (!this._orderByTokens || !this._orderByTokens.length) {\r\n            return;\r\n        }\r\n\r\n        writer\r\n            .append(\" order by \");\r\n\r\n        let isFirst = true;\r\n\r\n        for (const token of this._orderByTokens) {\r\n            if (!isFirst) {\r\n                writer.append(\", \");\r\n            }\r\n\r\n            token.writeTo(writer);\r\n            isFirst = false;\r\n        }\r\n    }\r\n\r\n    private static _unpackCollection(items: object[]): object[] {\r\n        const results = [];\r\n\r\n        for (const item of items) {\r\n            if (Array.isArray(item)) {\r\n                results.push(...AbstractDocumentQuery._unpackCollection(item as any[]));\r\n            } else {\r\n                results.push(item);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    // TBD protected Action<BlittableJsonReaderObject> AfterStreamExecutedCallback;\r\n\r\n    protected _queryOperation: QueryOperation;\r\n\r\n    public queryOperation(): QueryOperation {\r\n        return this._queryOperation;\r\n    }\r\n\r\n    // TBD public IDocumentQueryCustomization AfterStreamExecuted(Action<BlittableJsonReaderObject> action)\r\n\r\n    public _noTracking(): void {\r\n        this._disableEntitiesTracking = true;\r\n    }\r\n\r\n    public _noCaching(): void {\r\n        this._disableCaching = true;\r\n    }\r\n\r\n    public _includeTimings(timingsCallback: (timings: QueryTimings) => void): void {\r\n        if (this._queryTimings) {\r\n            timingsCallback(this._queryTimings);\r\n            return;\r\n        }\r\n\r\n        this._queryTimings = new QueryTimings();\r\n        timingsCallback(this._queryTimings);\r\n    }\r\n\r\n    public _highlight(\r\n        parameters: HighlightingParameters,\r\n        highlightingsCallback: ValueCallback<Highlightings>): void {\r\n        highlightingsCallback(this._queryHighlightings.add(parameters.fieldName));\r\n        const optionsParameterName = parameters\r\n            ? this._addQueryParameter(\r\n                extractHighlightingOptionsFromParameters(parameters))\r\n            : null;\r\n        const token = HighlightingToken.create(\r\n            parameters.fieldName, parameters.fragmentLength, parameters.fragmentCount, optionsParameterName);\r\n        this._highlightingTokens.push(token);\r\n    }\r\n\r\n    protected _withinRadiusOf(\r\n        fieldName: string,\r\n        radius: number,\r\n        latitude: number,\r\n        longitude: number,\r\n        radiusUnits: SpatialUnits,\r\n        distErrorPercent: number): void {\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n\r\n        const whereToken = WhereToken.create(\r\n            \"SpatialWithin\",\r\n            fieldName,\r\n            null,\r\n            new WhereOptions({\r\n                shape: ShapeToken.circle(\r\n                    this._addQueryParameter(radius),\r\n                    this._addQueryParameter(latitude),\r\n                    this._addQueryParameter(longitude), radiusUnits),\r\n                distance: distErrorPercent\r\n            }));\r\n        tokens.push(whereToken);\r\n    }\r\n\r\n    protected _spatialByShapeWkt(\r\n        fieldName: string,\r\n        shapeWkt: string,\r\n        relation: SpatialRelation,\r\n        units: SpatialUnits,\r\n        distErrorPercent: number): void {\r\n        fieldName = this._ensureValidFieldName(fieldName, false);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldName);\r\n\r\n        const wktToken = ShapeToken.wkt(this._addQueryParameter(shapeWkt), units);\r\n\r\n        let whereOperator: WhereOperator;\r\n        switch (relation) {\r\n            case \"Within\": {\r\n                whereOperator = \"SpatialWithin\";\r\n                break;\r\n            }\r\n            case \"Contains\": {\r\n                whereOperator = \"SpatialContains\";\r\n                break;\r\n            }\r\n            case \"Disjoint\": {\r\n                whereOperator = \"SpatialDisjoint\";\r\n                break;\r\n            }\r\n            case \"Intersects\": {\r\n                whereOperator = \"SpatialIntersects\";\r\n                break;\r\n            }\r\n            default: {\r\n                throwError(\"InvalidArgumentException\", `relation: ${relation}.`);\r\n            }\r\n        }\r\n\r\n        tokens.push(WhereToken.create(\r\n            whereOperator, fieldName, null, new WhereOptions({\r\n                shape: wktToken,\r\n                distance: distErrorPercent\r\n            })));\r\n    }\r\n\r\n    public _spatial(dynamicField: DynamicSpatialField, criteria: SpatialCriteria): void;\r\n    public _spatial(fieldName: string, criteria: SpatialCriteria): void;\r\n    public _spatial(\r\n        fieldNameOrDynamicSpatialField: string | DynamicSpatialField,\r\n        criteria: SpatialCriteria): void {\r\n\r\n        let tokens: QueryToken[];\r\n        if (typeof (fieldNameOrDynamicSpatialField) === \"string\") {\r\n            const fieldName = this._ensureValidFieldName(fieldNameOrDynamicSpatialField, false);\r\n\r\n            tokens = this._getCurrentWhereTokens();\r\n            this._appendOperatorIfNeeded(tokens);\r\n            this._negateIfNeeded(tokens, fieldName);\r\n\r\n            tokens.push(criteria.toQueryToken(fieldName, (o) => this._addQueryParameter(o)));\r\n            return;\r\n        }\r\n\r\n        const dynamicField = fieldNameOrDynamicSpatialField as DynamicSpatialField;\r\n        this._assertIsDynamicQuery(dynamicField, \"spatial\");\r\n\r\n        tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, null);\r\n\r\n        tokens.push(criteria.toQueryToken(\r\n            dynamicField.toField(\r\n                (fName, isNestedPath) => this._ensureValidFieldName(fName, isNestedPath)),\r\n            (o) => this._addQueryParameter(o)));\r\n    }\r\n\r\n    public _orderByDistance(field: DynamicSpatialField, latitude: number, longitude: number): void;\r\n    public _orderByDistance(field: DynamicSpatialField, shapeWkt: string): void;\r\n    public _orderByDistance(fieldName: string, latitude: number, longitude: number): void;\r\n    public _orderByDistance(fieldName: string, latitude: number, longitude: number, roundFactor: number): void;\r\n    public _orderByDistance(fieldName: string, shapeWkt: string): void;\r\n    public _orderByDistance(fieldName: string, shapeWkt: string, roundFactor: number): void;\r\n    public _orderByDistance(\r\n        fieldNameOrField: string | DynamicSpatialField, shapeWktOrLatitude: string | number, longitudeOrRoundFactor?: number, roundFactor?: number): void {\r\n\r\n        if (TypeUtil.isString(fieldNameOrField)) {\r\n            if (TypeUtil.isString(shapeWktOrLatitude)) {\r\n                const roundFactorParameterName = longitudeOrRoundFactor ? this._addQueryParameter(longitudeOrRoundFactor) : null;\r\n                this._orderByTokens.push(\r\n                    OrderByToken.createDistanceAscending(\r\n                        fieldNameOrField as string, this._addQueryParameter(shapeWktOrLatitude), roundFactorParameterName));\r\n\r\n            } else {\r\n                const roundFactorParameterName = roundFactor ? this._addQueryParameter(roundFactor) : null;\r\n                this._orderByTokens.push(\r\n                    OrderByToken.createDistanceAscending(\r\n                        fieldNameOrField as string,\r\n                        this._addQueryParameter(shapeWktOrLatitude), this._addQueryParameter(longitudeOrRoundFactor), roundFactorParameterName));\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        const field = fieldNameOrField as DynamicSpatialField;\r\n        this._assertIsDynamicQuery(field, \"orderByDistance\");\r\n\r\n        if (!fieldNameOrField) {\r\n            throwError(\"InvalidArgumentException\", \"Field cannot be null.\");\r\n        }\r\n\r\n        if (TypeUtil.isString(shapeWktOrLatitude)) {\r\n            this._orderByDistance(\r\n                \"'\" + field.toField((f, isNestedPath) =>\r\n                    this._ensureValidFieldName(f, isNestedPath)) + \"'\", shapeWktOrLatitude as string);\r\n        } else {\r\n            this._orderByDistance(\r\n                \"'\" + field.toField((f, isNestedPath) =>\r\n                    this._ensureValidFieldName(f, isNestedPath)) + \"'\", shapeWktOrLatitude as number, longitudeOrRoundFactor, field.roundFactor);\r\n        }\r\n    }\r\n\r\n    public _orderByDistanceDescending(field: DynamicSpatialField, latitude: number, longitude: number): void;\r\n    public _orderByDistanceDescending(field: DynamicSpatialField, shapeWkt: string): void;\r\n    public _orderByDistanceDescending(fieldName: string, latitude: number, longitude: number): void;\r\n    public _orderByDistanceDescending(fieldName: string, latitude: number, longitude: number, roundFactor: number): void;\r\n    public _orderByDistanceDescending(fieldName: string, shapeWkt: string): void;\r\n    public _orderByDistanceDescending(fieldName: string, shapeWkt: string, roundFactor: number): void;\r\n    public _orderByDistanceDescending(\r\n        fieldNameOrField: string | DynamicSpatialField, shapeWktOrLatitude: string | number, longitudeOrRoundFactor?: number, roundFactor?: number): void {\r\n\r\n        if (TypeUtil.isString(fieldNameOrField)) {\r\n            if (TypeUtil.isString(shapeWktOrLatitude)) {\r\n                const roundFactorParameterName = longitudeOrRoundFactor ? this._addQueryParameter(longitudeOrRoundFactor) : null;\r\n                this._orderByTokens.push(\r\n                    OrderByToken.createDistanceDescending(\r\n                        fieldNameOrField as string, this._addQueryParameter(shapeWktOrLatitude), roundFactorParameterName));\r\n            } else {\r\n                const roundFactorParameterName = roundFactor ? this._addQueryParameter(roundFactor) : null;\r\n                this._orderByTokens.push(\r\n                    OrderByToken.createDistanceDescending(\r\n                        fieldNameOrField as string,\r\n                        this._addQueryParameter(shapeWktOrLatitude), this._addQueryParameter(longitudeOrRoundFactor), roundFactorParameterName));\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        const field = fieldNameOrField as DynamicSpatialField;\r\n        this._assertIsDynamicQuery(field, \"orderByDistance\");\r\n\r\n        if (!fieldNameOrField) {\r\n            throwError(\"InvalidArgumentException\", \"Field cannot be null.\");\r\n        }\r\n\r\n        if (TypeUtil.isString(shapeWktOrLatitude)) {\r\n            this._orderByDistanceDescending(\r\n                \"'\" + field.toField((f, isNestedPath) =>\r\n                    this._ensureValidFieldName(f, isNestedPath)) + \"'\", shapeWktOrLatitude as string);\r\n        } else {\r\n            this._orderByDistanceDescending(\r\n                \"'\" + field.toField((f, isNestedPath) =>\r\n                    this._ensureValidFieldName(f, isNestedPath)) + \"'\", shapeWktOrLatitude as number, longitudeOrRoundFactor, field.roundFactor);\r\n        }\r\n    }\r\n\r\n    private _assertIsDynamicQuery(dynamicField: DynamicSpatialField, methodName: string) {\r\n        if (!this._fromToken.isDynamic) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Cannot execute query method '\" + methodName +\r\n                \"'. Field '\" + dynamicField.toField(this._ensureValidFieldName) +\r\n                \"' cannot be used when static index '\" +\r\n                this._fromToken.indexName + \"' is queried. \" +\r\n                \"Dynamic spatial fields can only be used with dynamic queries, \" +\r\n                \" for static index queries please use valid spatial fields defined in index definition.\");\r\n        }\r\n    }\r\n\r\n    protected _initSync(): Promise<void> {\r\n        if (this._queryOperation) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._queryOperation = this.initializeQueryOperation();\r\n        return this._executeActualQuery();\r\n    }\r\n\r\n    private async _executeActualQuery(): Promise<void> {\r\n        // TBD 4.1 context = this._queryOperation.enterQueryContext();\r\n        const command = this._queryOperation.createRequest();\r\n        await this._theSession.requestExecutor.execute(command, this._theSession.sessionInfo);\r\n        this._queryOperation.setResult(command.result);\r\n        this.emit(\"afterQueryExecuted\", this._queryOperation.getCurrentQueryResults());\r\n        /* TBD 4.1\r\n        .finally(() => {\r\n            if (context) {\r\n                context.dispose();\r\n            }\r\n        });\r\n        */\r\n    }\r\n\r\n    public async iterator(): Promise<IterableIterator<T>> {\r\n        await this._initSync();\r\n        const results = this._queryOperation.complete<T>(this._clazz);\r\n        return results[Symbol.iterator]();\r\n    }\r\n\r\n    public async all(): Promise<T[]> {\r\n        const results = await this.iterator();\r\n        const array = [...results];\r\n\r\n        if (this.conventions.returnPlainJsObjects) {\r\n            return array.map(item => JsonSerializer.toPlainObject(item))\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    public async getQueryResult(): Promise<QueryResult> {\r\n        await this._initSync();\r\n        return this._queryOperation.getCurrentQueryResults().createSnapshot();\r\n    }\r\n\r\n    public async first(): Promise<T> {\r\n        const entries = await this._executeQueryOperation(1);\r\n\r\n        if (entries.length === 0) {\r\n            throwError(\"InvalidOperationException\", \"Expected at least one result.\");\r\n        }\r\n\r\n        if (this.conventions.returnPlainJsObjects) {\r\n            return JsonSerializer.toPlainObject(entries[0]);\r\n        }\r\n\r\n        return entries[0];\r\n    }\r\n\r\n    public async firstOrNull(): Promise<T | null> {\r\n        const entries = await this._executeQueryOperation(1);\r\n\r\n        if (this.conventions.returnPlainJsObjects) {\r\n            return JsonSerializer.toPlainObject(entries[0]) || null;\r\n        }\r\n\r\n        return entries[0] || null;\r\n    }\r\n\r\n    public async single(): Promise<T> {\r\n        const entries = await this._executeQueryOperation(2);\r\n\r\n        if (entries.length !== 1) {\r\n            throwError(\"InvalidOperationException\",\r\n                `Expected single result, but got ${ entries.length ? \"more than that\" : 0 }.`);\r\n        }\r\n\r\n        if (this.conventions.returnPlainJsObjects) {\r\n            return JsonSerializer.toPlainObject(entries[0]);\r\n        }\r\n\r\n        return entries[0];\r\n    }\r\n\r\n    public async singleOrNull(): Promise<T | null> {\r\n        const entries = await this._executeQueryOperation(2);\r\n        if (entries.length === 2) {\r\n            throwError(\"InvalidOperationException\",\r\n                `Expected single result, but got more than that.`);\r\n        }\r\n\r\n        if (this.conventions.returnPlainJsObjects) {\r\n            return entries.length === 1 ? JsonSerializer.toPlainObject(entries[0]) : null;\r\n        }\r\n\r\n        return entries.length === 1 ? entries[0] : null;\r\n    }\r\n\r\n    public async count(): Promise<number> {\r\n        this._take(0);\r\n        const queryResult = await this.getQueryResult();\r\n        return queryResult.totalResults;\r\n    }\r\n\r\n    private async _executeQueryOperation(take?: number): Promise<T[]> {\r\n        await this._executeQueryOperationInternal(take);\r\n        return this.queryOperation().complete(this._clazz);\r\n    }\r\n\r\n    private async _executeQueryOperationInternal(take: number) {\r\n        if ((take || take === 0) && (!this._pageSize || this._pageSize > take)) {\r\n            this._take(take);\r\n        }\r\n\r\n        await this._initSync();\r\n    }\r\n\r\n    public async longCount(): Promise<number> {\r\n        this._take(0);\r\n        const queryResult = await this.getQueryResult();\r\n        return queryResult.totalResults;\r\n    }\r\n\r\n    public async any(): Promise<boolean> {\r\n        if (this.isDistinct) {\r\n            // for distinct it is cheaper to do count 1\r\n            const result = await this._executeQueryOperation(1);\r\n            return !!result[0];\r\n\r\n        }\r\n\r\n        this._take(0);\r\n        const queryResult = await this.getQueryResult();\r\n        return queryResult.totalResults > 0;\r\n    }\r\n\r\n    public _aggregateBy(facet: FacetBase): void {\r\n        for (const token of this._selectTokens) {\r\n            if (token instanceof FacetToken) {\r\n                continue;\r\n            }\r\n            throwError(\"InvalidOperationException\",\r\n                \"Aggregation query can select only facets while it got \" + token.constructor.name + \" token\");\r\n        }\r\n        const facetToken = FacetToken.create(facet, (val) => this._addQueryParameter(val));\r\n        this._selectTokens.push(facetToken);\r\n    }\r\n\r\n    public _aggregateUsing(facetSetupDocumentId: string): void {\r\n        this._selectTokens.push(FacetToken.create(facetSetupDocumentId));\r\n    }\r\n\r\n    public lazily(): Lazy<T[]> {\r\n        const lazyQueryOperation = this._getLazyQueryOperation();\r\n\r\n        return (this._theSession as DocumentSession)\r\n            .addLazyOperation(lazyQueryOperation);\r\n    }\r\n\r\n    public countLazily(): Lazy<number> {\r\n        if (!this._queryOperation) {\r\n            this._take(0);\r\n            this._queryOperation = this.initializeQueryOperation();\r\n        }\r\n\r\n        const clazz = this._conventions.getJsTypeByDocumentType(this._clazz);\r\n        const lazyQueryOperation =\r\n            new LazyQueryOperation<T>(\r\n                this._theSession,\r\n                this._queryOperation,\r\n                this,\r\n                clazz);\r\n        return (this._theSession as DocumentSession).addLazyCountOperation(lazyQueryOperation);\r\n    }\r\n\r\n    public _suggestUsing(suggestion: SuggestionBase) {\r\n        if (!suggestion) {\r\n            throwError(\"InvalidArgumentException\", \"suggestion cannot be null\");\r\n        }\r\n\r\n        this._assertCanSuggest(suggestion);\r\n\r\n        let token: SuggestToken = null;\r\n\r\n        if (suggestion instanceof SuggestionWithTerm) {\r\n            const term = suggestion;\r\n            token = SuggestToken.create(\r\n                term.field, term.displayField, this._addQueryParameter(term.term), this._getOptionsParameterName(term.options));\r\n        } else if (suggestion instanceof SuggestionWithTerms) {\r\n            const terms = suggestion;\r\n            token = SuggestToken.create(\r\n                terms.field, terms.displayField, this._addQueryParameter(terms.terms), this._getOptionsParameterName(terms.options));\r\n        } else {\r\n            throwError(\"InvalidOperationException\", \"Unknown type of suggestion: \" + suggestion);\r\n        }\r\n\r\n        this._selectTokens.push(token);\r\n    }\r\n\r\n    private _getOptionsParameterName(options: SuggestionOptions): string {\r\n        let optionsParameterName = null;\r\n\r\n        if (options) {\r\n            optionsParameterName = this._addQueryParameter(options);\r\n        }\r\n\r\n        return optionsParameterName;\r\n    }\r\n\r\n    private _assertCanSuggest(suggestion: SuggestionBase): void {\r\n        if (this._whereTokens.length) {\r\n            throwError(\"InvalidOperationException\", \"Cannot add suggest when WHERE statements are present.\");\r\n        }\r\n\r\n        if (this._selectTokens.length) {\r\n            const lastToken = this._selectTokens.at(-1);\r\n            if (lastToken instanceof SuggestToken) {\r\n                if (lastToken.fieldName === suggestion.field) {\r\n                    throwError(\"InvalidOperationException\", \"Cannot add suggest for the same field again.\");\r\n                }\r\n            } else {\r\n                throwError(\"InvalidOperationException\", \"Cannot add suggest when SELECT statements are present.\");\r\n            }\r\n        }\r\n\r\n        if (this._orderByTokens.length) {\r\n            throwError(\"InvalidOperationException\", \"Cannot add suggest when ORDER BY statements are present.\");\r\n        }\r\n    }\r\n\r\n    public _includeExplanations(\r\n        options: ExplanationOptions, explanationsCallback: ValueCallback<Explanations>): void {\r\n       if (this._explanationToken) {\r\n           throwError(\"InvalidOperationException\", \"Duplicate IncludeExplanations method calls are forbidden.\");\r\n       }\r\n\r\n       const optionsParameterName = options\r\n            ? this._addQueryParameter(options)\r\n            : null;\r\n       this._explanationToken = ExplanationToken.create(optionsParameterName);\r\n       this._explanations = new Explanations();\r\n\r\n       explanationsCallback(this._explanations);\r\n   }\r\n\r\n    protected _timeSeriesIncludesTokens: TimeSeriesIncludesToken[];\r\n\r\n    protected _counterIncludesTokens: CounterIncludesToken[];\r\n\r\n    protected _compareExchangeValueIncludesTokens: CompareExchangeValueIncludesToken[];\r\n\r\n    protected _revisionsIncludesTokens: RevisionIncludesToken[];\r\n\r\n    protected _includeCounters(\r\n        alias: string, counterToIncludeByDocId: CountersByDocId): void {\r\n        if (!counterToIncludeByDocId || !counterToIncludeByDocId.size) {\r\n            return;\r\n        }\r\n\r\n        if (this._theSession) {\r\n            this._theSession.assertNoIncludesInNonTrackingSession();\r\n        }\r\n\r\n        this._counterIncludesTokens = [];\r\n        this._includesAlias = alias;\r\n\r\n        for (const [ key, val ] of counterToIncludeByDocId.entries()) {\r\n            if (val[0]) {\r\n                this._counterIncludesTokens.push(CounterIncludesToken.all(key));\r\n                continue;\r\n            }\r\n\r\n            const valArr = [...val[1]];\r\n            if (!valArr || !valArr.length) {\r\n                continue;\r\n            }\r\n\r\n            for (const name of val[1]) {\r\n                this._counterIncludesTokens.push(CounterIncludesToken.create(key, name));\r\n            }\r\n        }\r\n    }\r\n\r\n    private _includeTimeSeries(alias: string, timeSeriesToInclude: Map<string, AbstractTimeSeriesRange[]>) {\r\n        if (!timeSeriesToInclude || !timeSeriesToInclude.size) {\r\n            return;\r\n        }\r\n\r\n        if (this._theSession) {\r\n            this._theSession.assertNoIncludesInNonTrackingSession();\r\n        }\r\n\r\n        this._timeSeriesIncludesTokens = [];\r\n        if (!this._includesAlias) {\r\n            this._includesAlias = alias;\r\n        }\r\n\r\n        for (const kvp of timeSeriesToInclude.entries()) {\r\n            for (const range of kvp[1].values()) {\r\n                this._timeSeriesIncludesTokens.push(TimeSeriesIncludesToken.create(kvp[0], range));\r\n            }\r\n        }\r\n    }\r\n\r\n    public getQueryType(): DocumentType<T> {\r\n        return this._clazz;\r\n    }\r\n\r\n    public addFromAliasToWhereTokens(fromAlias: string): void {\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._addFromAliasToTokens(fromAlias, tokens);\r\n    }\r\n\r\n    public addFromAliasToOrderByTokens(fromAlias: string) {\r\n        const tokens = this._getCurrentOrderByTokens();\r\n        this._addFromAliasToTokens(fromAlias, tokens);\r\n    }\r\n\r\n    addFromAliasToFilterTokens(fromAlias: string) {\r\n        const tokens = this._getCurrentFilterTokens();\r\n        this._addFromAliasToTokens(fromAlias, tokens);\r\n    }\r\n\r\n    private _addFromAliasToTokens(fromAlias: string, tokens: QueryToken[]): void {\r\n        if (!fromAlias) {\r\n            throwError(\"InvalidArgumentException\", \"Alias cannot be null or empty.\");\r\n        }\r\n\r\n        for (const token of tokens) {\r\n            if (token instanceof WhereToken) {\r\n                token.addAlias(fromAlias);\r\n            }\r\n            if (token instanceof OrderByToken) {\r\n                token.addAlias(fromAlias);\r\n            }\r\n        }\r\n    }\r\n\r\n     public addAliasToIncludesTokens(fromAlias: string): string {\r\n        if (!this._includesAlias) {\r\n            return fromAlias;\r\n        }\r\n\r\n        if (!fromAlias) {\r\n            fromAlias = this._includesAlias;\r\n            this.addFromAliasToWhereTokens(fromAlias);\r\n        }\r\n\r\n        if (this._counterIncludesTokens) {\r\n            for (const counterIncludesToken of this._counterIncludesTokens) {\r\n                counterIncludesToken.addAliasToPath(fromAlias);\r\n            }\r\n        }\r\n\r\n        if (this._timeSeriesIncludesTokens) {\r\n            for (const token of this._timeSeriesIncludesTokens) {\r\n                token.addAliasToPath(fromAlias);\r\n            }\r\n        }\r\n\r\n        return fromAlias;\r\n    }\r\n\r\n    private _includeRevisionsByDate(dateTime: Date) {\r\n        if (!this._revisionsIncludesTokens) {\r\n            this._revisionsIncludesTokens = [];\r\n        }\r\n\r\n        if (this._theSession) {\r\n            this._theSession.assertNoIncludesInNonTrackingSession();\r\n        }\r\n\r\n        this._revisionsIncludesTokens.push(RevisionIncludesToken.createForDate(dateTime));\r\n    }\r\n\r\n    private _includeRevisionsByChangeVector(revisionsToIncludeByChangeVector: Set<string>) {\r\n        if (!this._revisionsIncludesTokens) {\r\n            this._revisionsIncludesTokens = [];\r\n        }\r\n\r\n        if (!revisionsToIncludeByChangeVector || revisionsToIncludeByChangeVector.size === 0) {\r\n            return;\r\n        }\r\n\r\n        if (this._theSession) {\r\n            this._theSession.assertNoIncludesInNonTrackingSession();\r\n        }\r\n\r\n        for (const changeVector of revisionsToIncludeByChangeVector) {\r\n            this._revisionsIncludesTokens.push(RevisionIncludesToken.createForPath(changeVector));\r\n        }\r\n    }\r\n\r\n    public get parameterPrefix() {\r\n        return this._parameterPrefix;\r\n    }\r\n\r\n    public set parameterPrefix(prefix: string) {\r\n        this._parameterPrefix = prefix;\r\n    }\r\n\r\n    /**\r\n     * Performs a vector similarity search against a field containing vector embeddings\r\n     * @param fieldName The field containing vector values or a field expression\r\n     * @param valueOrFactory The query vector or a function that configures how to provide the vector value\r\n     * @param options Additional vector search options\r\n     */\r\n    protected _vectorSearch(\r\n        fieldName: Field<T> | ((factory: IVectorFieldFactory<T>) => IVectorField | IVectorEmbeddingField | IVectorEmbeddingTextField),\r\n        valueOrFactory: number[] | string | ((factory: IVectorFieldValueFactory) => void),\r\n        options?: IVectorOptions\r\n    ) {\r\n        this._assertMethodIsCurrentlySupported(\"vectorSearch\");\r\n\r\n        const fieldAccessor = this._resolveVectorSearchFieldAccessor(fieldName);\r\n        const {value, isDocumentId} = this._resolveVectorSearchValueFactory(valueOrFactory);\r\n\r\n        const tokens = this._getCurrentWhereTokens();\r\n        this._appendOperatorIfNeeded(tokens);\r\n        this._negateIfNeeded(tokens, fieldAccessor.fieldName);\r\n\r\n        const sourceQuantizationType = VectorSearchToken.getSourceQuantizationType(fieldAccessor);\r\n        const targetQuantizationType = VectorSearchToken.getTargetQuantizationType(fieldAccessor);\r\n        const taskIdentifier = VectorSearchToken.getTaskIdentifier(fieldAccessor);\r\n\r\n        const parameterName = this._addQueryParameter(value);\r\n\r\n        const vectorSearchToken = new VectorSearchToken(\r\n            fieldAccessor.fieldName,\r\n            parameterName,\r\n            sourceQuantizationType,\r\n            targetQuantizationType,\r\n            options?.similarity || null,\r\n            options?.numberOfCandidates || null,\r\n            options?.isExact || VectorSearchToken.DEFAULT_IS_EXACT,\r\n            isDocumentId,\r\n            taskIdentifier\r\n        );\r\n\r\n        tokens.push(vectorSearchToken);\r\n    }\r\n\r\n\r\n    private _resolveVectorSearchFieldAccessor(fieldName: Field<T> | ((factory: IVectorFieldFactory<T>) => IVectorField | IVectorEmbeddingField | IVectorEmbeddingTextField)): IVectorEmbeddingFieldFactoryAccessor<T> {\r\n        const vectorFactory = new VectorEmbeddingFieldFactory<T>();\r\n\r\n        if (typeof fieldName === \"string\") {\r\n            return vectorFactory.withField(fieldName) as IVectorEmbeddingFieldFactoryAccessor<T>;\r\n        } else if (typeof fieldName === \"function\") {\r\n            return fieldName(vectorFactory) as IVectorEmbeddingFieldFactoryAccessor<T>;\r\n        } else {\r\n            throwError(\"InvalidArgumentException\", \"fieldName must be either a string or a function that selects a vector field\");\r\n        }\r\n    }\r\n\r\n    private _resolveVectorSearchValueFactory(valueOrFactory: number[] | string | ((factory: IVectorFieldValueFactory) => void)) {\r\n        if (typeof valueOrFactory === \"function\") {\r\n            const fieldValueFactory = new VectorEmbeddingFieldValueFactory();\r\n            valueOrFactory(fieldValueFactory);\r\n\r\n            const value = fieldValueFactory.embedding || fieldValueFactory.embeddings ||\r\n                fieldValueFactory.text || fieldValueFactory.texts || fieldValueFactory.byId;\r\n\r\n            if (!value) {\r\n                throwError(\"InvalidOperationException\", \"No value was provided in the valueFactory\");\r\n            }\r\n\r\n            return {value, isDocumentId: !!fieldValueFactory.byId};\r\n        } else {\r\n            return {value: valueOrFactory, isDocumentId: false};\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass FilterModeScope implements IDisposable {\r\n    private readonly _modeStack: boolean[];\r\n\r\n    public constructor(modeStack: boolean[], on: boolean) {\r\n        this._modeStack = modeStack;\r\n        this._modeStack.push(on);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._modeStack.pop();\r\n    }\r\n}\r\n"]}