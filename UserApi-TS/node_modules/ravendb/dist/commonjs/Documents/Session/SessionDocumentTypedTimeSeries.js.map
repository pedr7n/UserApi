{"version":3,"file":"SessionDocumentTypedTimeSeries.js","sourceRoot":"","sources":["../../../../src/Documents/Session/SessionDocumentTypedTimeSeries.ts"],"names":[],"mappings":"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","sourcesContent":["import { SessionTimeSeriesBase } from \"./SessionTimeSeriesBase.js\";\r\nimport { ISessionDocumentTypedTimeSeries } from \"./ISessionDocumentTypedTimeSeries.js\";\r\nimport { ClassConstructor } from \"../../Types/index.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\nimport { TypedTimeSeriesEntry } from \"./TimeSeries/TypedTimeSeriesEntry.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { TimeSeriesValuesHelper } from \"./TimeSeries/TimeSeriesValuesHelper.js\";\r\nimport { ISessionDocumentTypedIncrementalTimeSeries } from \"./ISessionDocumentTypedIncrementalTimeSeries.js\";\r\n\r\nexport class SessionDocumentTypedTimeSeries<T extends object> extends SessionTimeSeriesBase\r\n    implements ISessionDocumentTypedTimeSeries<T>, ISessionDocumentTypedIncrementalTimeSeries<T> {\r\n    private readonly _clazz: ClassConstructor<T>;\r\n\r\n    public constructor(session: InMemoryDocumentSessionOperations, entity: any, name: string, clazz: ClassConstructor<T>);\r\n    public constructor(session: InMemoryDocumentSessionOperations, documentId: string, name: string, clazz: ClassConstructor<T>);\r\n    public constructor(session: InMemoryDocumentSessionOperations, documentIdOrEntity: string | any, name: string, clazz: ClassConstructor<T>) {\r\n        super(session, documentIdOrEntity, name);\r\n\r\n        this._clazz = clazz;\r\n    }\r\n\r\n    public async get(): Promise<TypedTimeSeriesEntry<T>[]>;\r\n    public async get(from: Date, to: Date): Promise<TypedTimeSeriesEntry<T>[]>;\r\n    public async get(from: Date, to: Date, start: number): Promise<TypedTimeSeriesEntry<T>[]>;\r\n    public async get(from: Date, to: Date, start: number, pageSize: number): Promise<TypedTimeSeriesEntry<T>[]>;\r\n    public async get(startOrFrom?: number | Date, toOrPageSize?: number | Date, start?: number, pageSize?: number): Promise<TypedTimeSeriesEntry<T>[]> {\r\n        if (TypeUtil.isNumber(startOrFrom)) {\r\n            // get(start: number, pageSize: number)\r\n            return this._getTyped(null, null, startOrFrom, toOrPageSize as number);\r\n        } else {\r\n            return this._getTyped(startOrFrom, toOrPageSize as Date, 0, TypeUtil.MAX_INT32);\r\n        }\r\n    }\r\n\r\n    private async _getTyped(from: Date, to: Date, start: number, pageSize: number): Promise<TypedTimeSeriesEntry<T>[]> {\r\n        if (this._notInCache(from, to)) {\r\n            const entries = await this.getTimeSeriesAndIncludes(from, to, null, start, pageSize);\r\n            if (!entries) {\r\n                return null;\r\n            }\r\n\r\n            return entries.map(x => x.asTypedEntry(this._clazz));\r\n        }\r\n\r\n        const results = await this._getFromCache(from, to, null, start, pageSize);\r\n        return results.map(x => x.asTypedEntry(this._clazz));\r\n    }\r\n\r\n    public append(timestamp: Date, entry: T): void;\r\n    public append(timestamp: Date, entry: T, tag: string): void;\r\n    public append(entry: TypedTimeSeriesEntry<T>): void;\r\n    public append(entryOrTimestamp: TypedTimeSeriesEntry<T> | Date, entry?: T, tag?: string): void {\r\n        if (entryOrTimestamp instanceof TypedTimeSeriesEntry) {\r\n            this.append(entryOrTimestamp.timestamp, entryOrTimestamp.value, entryOrTimestamp.tag);\r\n        } else {\r\n            const values = TimeSeriesValuesHelper.getValues<T>(this._clazz, entry);\r\n            this._appendInternal(entryOrTimestamp, values, tag);\r\n        }\r\n    }\r\n\r\n    public increment(timestamp: Date, values: number[]): void;\r\n    public increment(values: number[]): void;\r\n    public increment(timestamp: Date, value: number): void;\r\n    public increment(value: number): void;\r\n    public increment(timestamp: Date, entry: T): void;\r\n    public increment(entry: T): void;\r\n    public increment(entryOrTimestampOrValuesOrValue: T | Date | number[] | number, valuesOrValueOrEntry?: number[] | number | T): void {\r\n        if (entryOrTimestampOrValuesOrValue instanceof Date) {\r\n            if (valuesOrValueOrEntry instanceof TypedTimeSeriesEntry) {\r\n                const values = valuesOrValueOrEntry.values ?? [valuesOrValueOrEntry.value];\r\n                return this.increment(valuesOrValueOrEntry.timestamp, values);\r\n            } else if (TypeUtil.isNumber(valuesOrValueOrEntry)) {\r\n                return this._incrementInternal(entryOrTimestampOrValuesOrValue, [valuesOrValueOrEntry]);\r\n            } else if (TypeUtil.isArray(valuesOrValueOrEntry)) {\r\n                return this._incrementInternal(entryOrTimestampOrValuesOrValue, valuesOrValueOrEntry);\r\n            } else {\r\n                const values = TimeSeriesValuesHelper.getValues(this._clazz, valuesOrValueOrEntry);\r\n                return this._incrementInternal(entryOrTimestampOrValuesOrValue, values);\r\n            }\r\n        } else {\r\n            if (entryOrTimestampOrValuesOrValue instanceof TypedTimeSeriesEntry) {\r\n                const values = entryOrTimestampOrValuesOrValue.values ?? [entryOrTimestampOrValuesOrValue.value];\r\n                return this.increment(entryOrTimestampOrValuesOrValue.timestamp, values);\r\n            } else if (TypeUtil.isArray(entryOrTimestampOrValuesOrValue)) {\r\n                return this._incrementInternal(new Date(), entryOrTimestampOrValuesOrValue);\r\n            } else if (TypeUtil.isNumber(entryOrTimestampOrValuesOrValue)) {\r\n                return this._incrementInternal(new Date(), [entryOrTimestampOrValuesOrValue]);\r\n            } else {\r\n                const values = TimeSeriesValuesHelper.getValues(this._clazz, entryOrTimestampOrValuesOrValue);\r\n                return this._incrementInternal(new Date(), values);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}