{"version":3,"file":"DocumentQuery.js","sourceRoot":"","sources":["../../../../src/Documents/Session/DocumentQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractDocumentQuery } from \"./AbstractDocumentQuery.js\";\r\nimport { IDocumentQuery } from \"./IDocumentQuery.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\nimport { DeclareToken } from \"./Tokens/DeclareToken.js\";\r\nimport { LoadToken } from \"./Tokens/LoadToken.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { CONSTANTS } from \"../../Constants.js\";\r\nimport { QueryData } from \"../Queries/QueryData.js\";\r\nimport { OrderingType } from \"./OrderingType.js\";\r\nimport { SearchOperator } from \"../Queries/SearchOperator.js\";\r\nimport { QueryStatistics } from \"./QueryStatistics.js\";\r\nimport { QueryOperator } from \"../Queries/QueryOperator.js\";\r\nimport { MethodCall } from \"./MethodCall.js\";\r\nimport { WhereParams } from \"./WhereParams.js\";\r\nimport { IGroupByDocumentQuery } from \"./IGroupByDocumentQuery.js\";\r\nimport { GroupBy } from \"../Queries/GroupBy.js\";\r\nimport { GroupByDocumentQuery } from \"./GroupByDocumentQuery.js\";\r\nimport { FieldsToFetchToken } from \"./Tokens/FieldsToFetchToken.js\";\r\nimport { SpatialCriteriaFactory } from \"../Queries/Spatial/SpatialCriteriaFactory.js\";\r\nimport { SpatialCriteria } from \"../Queries/Spatial/SpatialCriteria.js\";\r\nimport { DynamicSpatialField } from \"../Queries/Spatial/DynamicSpatialField.js\";\r\nimport { SpatialRelation, SpatialUnits } from \"../Indexes/Spatial.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { IFacetBuilder } from \"../Queries/Facets/IFacetBuilder.js\";\r\nimport { IAggregationDocumentQuery } from \"../Queries/Facets/IAggregationDocumentQuery.js\";\r\nimport { Facet } from \"../Queries/Facets/Facet.js\";\r\nimport { FacetBase } from \"../Queries/Facets/FacetBase.js\";\r\nimport { FacetBuilder } from \"../Queries/Facets/FacetBuilder.js\";\r\nimport { AggregationDocumentQuery } from \"../Queries/Facets/AggregationDocumentQuery.js\";\r\nimport { MoreLikeThisBase } from \"../Queries/MoreLikeThis/MoreLikeThisBase.js\";\r\nimport { IMoreLikeThisBuilderForDocumentQuery } from \"../Queries/MoreLikeThis/IMoreLikeThisBuilderForDocumentQuery.js\";\r\nimport { MoreLikeThisUsingDocument } from \"../Queries/MoreLikeThis/MoreLikeThisUsingDocument.js\";\r\nimport { MoreLikeThisBuilder } from \"../Queries/MoreLikeThis/MoreLikeThisBuilder.js\";\r\nimport {\r\n    MoreLikeThisUsingDocumentForDocumentQuery\r\n} from \"../Queries/MoreLikeThis/MoreLikeThisUsingDocumentForDocumentQuery.js\";\r\nimport { SuggestionBase } from \"../Queries/Suggestions/SuggestionBase.js\";\r\nimport { ISuggestionDocumentQuery } from \"../Queries/Suggestions/ISuggestionDocumentQuery.js\";\r\nimport { ISuggestionBuilder } from \"../Queries/Suggestions/ISuggestionBuilder.js\";\r\nimport { SuggestionDocumentQuery } from \"../Queries/Suggestions/SuggestionDocumentQuery.js\";\r\nimport { SuggestionBuilder } from \"../Queries/Suggestions/SuggestionBuilder.js\";\r\nimport { ValueCallback } from \"../../Types/Callbacks.js\";\r\nimport { QueryTimings } from \"../Queries/Timings/QueryTimings.js\";\r\nimport { Explanations } from \"../Queries/Explanation/Explanations.js\";\r\nimport { ExplanationOptions } from \"../Queries/Explanation/ExplanationOptions.js\";\r\nimport { Highlightings } from \"../Queries/Highlighting/Hightlightings.js\";\r\nimport { HighlightingParameters } from \"../Queries/Highlighting/HighlightingParameters.js\";\r\nimport { IQueryIncludeBuilder } from \"./Loaders/IQueryIncludeBuilder.js\";\r\nimport { QueryIncludeBuilder } from \"./Loaders/QueryIncludeBuilder.js\";\r\nimport { ITimeSeriesQueryBuilder } from \"../Queries/TimeSeries/ITimeSeriesQueryBuilder.js\";\r\nimport { TimeSeriesAggregationResult } from \"../Queries/TimeSeries/TimeSeriesAggregationResult.js\";\r\nimport { TimeSeriesRawResult } from \"../Queries/TimeSeries/TimeSeriesRawResult.js\";\r\nimport { Field } from \"../../Types/index.js\";\r\nimport { IAbstractDocumentQueryImpl } from \"./IAbstractDocumentQueryImpl.js\";\r\nimport { ProjectionBehavior } from \"../Queries/ProjectionBehavior.js\";\r\nimport { IFilterFactory } from \"../Queries/IFilterFactory.js\";\r\nimport { FilterFactory } from \"../Queries/FilterFactory.js\";\r\nimport { IQueryShardedContextBuilder } from \"./Querying/Sharding/IQueryShardedContextBuilder.js\";\r\nimport { IVectorOptions } from \"../Queries/VectorSearch/VectorSearchOptions.js\";\r\nimport {\r\n    IVectorEmbeddingField,\r\n    IVectorEmbeddingTextField,\r\n    IVectorField,\r\n    IVectorFieldFactory,\r\n    IVectorFieldValueFactory\r\n} from \"./VectorFieldFactory.js\";\r\n\r\nexport const NESTED_OBJECT_TYPES_PROJECTION_FIELD = \"__PROJECTED_NESTED_OBJECT_TYPES__\";\r\n\r\nexport class DocumentQuery<T extends object>\r\n    extends AbstractDocumentQuery<T, DocumentQuery<T>> implements IDocumentQuery<T>, IAbstractDocumentQueryImpl<T> {\r\n\r\n    public constructor(\r\n        documentType: DocumentType<T>,\r\n        session: InMemoryDocumentSessionOperations,\r\n        indexName: string,\r\n        collectionName: string,\r\n        isGroupBy: boolean);\r\n    public constructor(\r\n        documentType: DocumentType<T>,\r\n        session: InMemoryDocumentSessionOperations,\r\n        indexName: string,\r\n        collectionName: string,\r\n        isGroupBy: boolean,\r\n        declareTokens: DeclareToken[],\r\n        loadTokens: LoadToken[],\r\n        fromAlias: string);\r\n    public constructor(\r\n        documentType: DocumentType<T>,\r\n        session: InMemoryDocumentSessionOperations,\r\n        indexName: string,\r\n        collectionName: string,\r\n        isGroupBy: boolean,\r\n        declareTokens: DeclareToken[],\r\n        loadTokens: LoadToken[],\r\n        fromAlias: string,\r\n        isProjectInto: boolean);\r\n    public constructor(\r\n        documentType: DocumentType<T>,\r\n        session: InMemoryDocumentSessionOperations,\r\n        indexName: string,\r\n        collectionName: string,\r\n        isGroupBy: boolean,\r\n        declareTokens?: DeclareToken[],\r\n        loadTokens?: LoadToken[],\r\n        fromAlias?: string,\r\n        isProjectInto?: boolean) {\r\n        super(documentType, session, indexName, collectionName, isGroupBy, declareTokens, loadTokens, fromAlias, isProjectInto);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    public selectFields<TProjection extends Object>(\r\n        property: string): IDocumentQuery<TProjection>;\r\n    public selectFields<TProjection extends object>(\r\n        properties: string[]): IDocumentQuery<TProjection>;\r\n    public selectFields<TProjection extends object>(\r\n        queryData: QueryData,\r\n        projectionType: DocumentType<TProjection>): IDocumentQuery<TProjection>;\r\n    public selectFields<TProjection extends object>(\r\n        property: string,\r\n        projectionType: DocumentType<TProjection>): IDocumentQuery<TProjection>;\r\n    public selectFields<TProjection extends object>(\r\n        properties: string[],\r\n        projectionType: DocumentType<TProjection>): IDocumentQuery<TProjection>;\r\n    public selectFields<TProjection extends object>(\r\n        property: string,\r\n        projectionType: DocumentType<TProjection>,\r\n        projectionBehavior: ProjectionBehavior): IDocumentQuery<TProjection>;\r\n    public selectFields<TProjection extends object>(\r\n        properties: string[],\r\n        projectionType: DocumentType<TProjection>,\r\n        projectionBehavior: ProjectionBehavior): IDocumentQuery<TProjection>;\r\n    public selectFields<TProjection extends object>(\r\n        propertiesOrQueryData: string | string[] | QueryData,\r\n        projectionType?: DocumentType<TProjection>,\r\n        projectionBehavior?: ProjectionBehavior): IDocumentQuery<TProjection> {\r\n\r\n        projectionBehavior ??= \"Default\";\r\n\r\n        if (this.isProjectInto || (this.fieldsToFetchToken?.projections?.length > 0)) {\r\n            QueryData.throwProjectionIsAlreadyDone();\r\n        }\r\n\r\n        if (projectionType) {\r\n            this._theSession.conventions.tryRegisterJsType(projectionType);\r\n        }\r\n\r\n        if (TypeUtil.isString(propertiesOrQueryData)) {\r\n            propertiesOrQueryData = [propertiesOrQueryData as string];\r\n        }\r\n\r\n        if (Array.isArray(propertiesOrQueryData)) {\r\n            if (projectionType) {\r\n                return this._selectFieldsByProjectionType(propertiesOrQueryData, projectionType, projectionBehavior);\r\n            }\r\n\r\n            const queryData = new QueryData(propertiesOrQueryData, propertiesOrQueryData);\r\n            queryData.isProjectInto = true;\r\n            queryData.projectionBehavior = projectionBehavior;\r\n            return this.selectFields(queryData, projectionType);\r\n        } else {\r\n            propertiesOrQueryData.isProjectInto = true;\r\n            const queryData = propertiesOrQueryData as QueryData;\r\n\r\n            // add nested object types to result, so we can properly read types\r\n            if (!queryData.isCustomFunction) {\r\n                queryData.fields = [...queryData.fields, `${CONSTANTS.Documents.Metadata.KEY}.${CONSTANTS.Documents.Metadata.NESTED_OBJECT_TYPES}`];\r\n                queryData.projections = [...queryData.projections, CONSTANTS.Documents.Metadata.NESTED_OBJECT_TYPES_PROJECTION_FIELD];\r\n            }\r\n\r\n            // we don't assign here projection behavior as it comes from override which already holds proper behavior from QueryData\r\n            // queryData.projectionBehavior = projectionBehavior;\r\n\r\n            return this.createDocumentQueryInternal(projectionType, queryData);\r\n        }\r\n    }\r\n\r\n    private _selectFieldsByProjectionType<TProjection extends object>(\r\n        properties: string[], projectionType: DocumentType<TProjection>, projectionBehavior: ProjectionBehavior): IDocumentQuery<TProjection> {\r\n        if (!properties || !properties.length) {\r\n            throwError(\"InvalidArgumentException\", \"Fields cannot be null or empty.\");\r\n        }\r\n\r\n        try {\r\n            const projections = properties;\r\n            const fields = properties.map(x => x);\r\n\r\n            const queryData = new QueryData(fields, projections);\r\n            queryData.projectionBehavior = projectionBehavior;\r\n\r\n            return this.selectFields(queryData, projectionType);\r\n        } catch (err) {\r\n            throwError(\"RavenException\",\r\n                \"Unable to project to type: \" + projectionType, err);\r\n        }\r\n    }\r\n\r\n    selectTimeSeries(\r\n        timeSeriesQuery: (builder: ITimeSeriesQueryBuilder) => void,\r\n        projectionClass: DocumentType<TimeSeriesAggregationResult>): IDocumentQuery<TimeSeriesAggregationResult>;\r\n    selectTimeSeries(\r\n        timeSeriesQuery: (builder: ITimeSeriesQueryBuilder) => void,\r\n        projectionClass: DocumentType<TimeSeriesRawResult>): IDocumentQuery<TimeSeriesRawResult>;\r\n    selectTimeSeries(\r\n        timeSeriesQuery: (builder: ITimeSeriesQueryBuilder) => void,\r\n        projectionClass: DocumentType<TimeSeriesAggregationResult | TimeSeriesRawResult>): IDocumentQuery<TimeSeriesAggregationResult | TimeSeriesRawResult> {\r\n        const queryData = this._createTimeSeriesQueryData(timeSeriesQuery);\r\n        return this.selectFields(queryData, projectionClass);\r\n    }\r\n\r\n    public distinct(): IDocumentQuery<T> {\r\n        this._distinct();\r\n        return this;\r\n    }\r\n\r\n    public orderByScore(): IDocumentQuery<T> {\r\n        this._orderByScore();\r\n        return this;\r\n    }\r\n\r\n    public orderByScoreDescending(): IDocumentQuery<T> {\r\n        this._orderByScoreDescending();\r\n        return this;\r\n    }\r\n\r\n    public includeExplanations(\r\n        explanationsCallback: ValueCallback<Explanations>): IDocumentQuery<T>;\r\n    public includeExplanations(\r\n        options: ExplanationOptions,\r\n        explanationsCallback?: ValueCallback<Explanations>): IDocumentQuery<T>;\r\n    public includeExplanations(\r\n        optionsOrExplanationsCallback: ExplanationOptions | ValueCallback<Explanations>,\r\n        explanationsCallback?: ValueCallback<Explanations>): IDocumentQuery<T> {\r\n        if (arguments.length === 1) {\r\n            return this.includeExplanations(\r\n                null, optionsOrExplanationsCallback as ValueCallback<Explanations>);\r\n        }\r\n\r\n        this._includeExplanations(\r\n            optionsOrExplanationsCallback as ExplanationOptions, explanationsCallback);\r\n\r\n        return this;\r\n    }\r\n\r\n    public timings(timings: ValueCallback<QueryTimings>): IDocumentQuery<T> {\r\n        this._includeTimings(timings);\r\n        return this;\r\n    }\r\n\r\n    public waitForNonStaleResults(): IDocumentQuery<T>;\r\n    public waitForNonStaleResults(waitTimeout: number): IDocumentQuery<T>;\r\n    public waitForNonStaleResults(waitTimeout: number = null): IDocumentQuery<T> {\r\n        this._waitForNonStaleResults(waitTimeout);\r\n        return this;\r\n    }\r\n\r\n    public addParameter(name: string, value: any): IDocumentQuery<T> {\r\n        super.addParameter(name, value);\r\n        return this;\r\n    }\r\n\r\n    public addOrder(fieldName: Field<T>, descending: boolean): IDocumentQuery<T>;\r\n    public addOrder(fieldName: Field<T>, descending: boolean, ordering: OrderingType): IDocumentQuery<T>;\r\n    public addOrder(fieldName: Field<T>, descending: boolean, ordering: OrderingType = \"String\"): IDocumentQuery<T> {\r\n        if (descending) {\r\n            this.orderByDescending(fieldName, ordering);\r\n        } else {\r\n            this.orderBy(fieldName, ordering);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // TBD public IDocumentQuery<T> AddOrder<TValue>(Expression<Func<T, TValue>> propertySelector, bool descending, OrderingType ordering)\r\n\r\n    // TBD void IQueryBase<T, IDocumentQuery<T>>.AfterStreamExecuted(Action<BlittableJsonReaderObject> action)\r\n    // TBD void IQueryBase<T, IRawDocumentQuery<T>>.AfterStreamExecuted(Action<BlittableJsonReaderObject> action)\r\n\r\n    public openSubclause(): IDocumentQuery<T> {\r\n        this._openSubclause();\r\n        return this;\r\n    }\r\n\r\n    public closeSubclause(): IDocumentQuery<T> {\r\n        this._closeSubclause();\r\n        return this;\r\n    }\r\n\r\n    public negateNext(): IDocumentQuery<T> {\r\n        this._negateNext();\r\n        return this;\r\n    }\r\n\r\n    public search(fieldName: Field<T>, searchTerms: string): IDocumentQuery<T>;\r\n    public search(fieldName: Field<T>, searchTerms: string, operator: SearchOperator): IDocumentQuery<T>;\r\n    public search(fieldName: Field<T>, searchTerms: string, operator?: SearchOperator): IDocumentQuery<T> {\r\n        this._search(fieldName, searchTerms, operator);\r\n        return this;\r\n    }\r\n\r\n    // TBD public IDocumentQuery<T> Search<TValue>(Expression<Func<T, TValue>> propertySelector, string searchTerms, SearchOperator @operator)\r\n\r\n    public intersect(): IDocumentQuery<T> {\r\n        this._intersect();\r\n        return this;\r\n    }\r\n\r\n    public containsAny(fieldName: Field<T>, values: any[]): IDocumentQuery<T> {\r\n        this._containsAny(fieldName, values);\r\n        return this;\r\n    }\r\n\r\n    // TBD public IDocumentQuery<T> ContainsAny<TValue>(Expression<Func<T, TValue>> propertySelector, IEnumerable<TValue> values)\r\n\r\n    public containsAll(fieldName: Field<T>, values): IDocumentQuery<T> {\r\n        this._containsAll(fieldName, values);\r\n        return this;\r\n    }\r\n\r\n    // TBD public IDocumentQuery<T> ContainsAll<TValue>(Expression<Func<T, TValue>> propertySelector, IEnumerable<TValue> values)\r\n\r\n    public statistics(stats: (stats: QueryStatistics) => void): IDocumentQuery<T> {\r\n        this._statistics(stats);\r\n        return this;\r\n    }\r\n\r\n    public usingDefaultOperator(queryOperator: QueryOperator): IDocumentQuery<T> {\r\n        this._usingDefaultOperator(queryOperator);\r\n        return this;\r\n    }\r\n\r\n    public noTracking(): IDocumentQuery<T> {\r\n        this._noTracking();\r\n        return this;\r\n    }\r\n\r\n    public noCaching(): IDocumentQuery<T> {\r\n        this._noCaching();\r\n        return this;\r\n    }\r\n\r\n    public include(path: string): IDocumentQuery<T>;\r\n    public include(includes: (includeBuilder: IQueryIncludeBuilder) => void): IDocumentQuery<T>;\r\n    public include(pathOrIncludes: string | ((includeBuilder: IQueryIncludeBuilder) => void)): IDocumentQuery<T> {\r\n        if (TypeUtil.isFunction(pathOrIncludes)) {\r\n            const includesBuilder = new QueryIncludeBuilder(this.conventions);\r\n            pathOrIncludes(includesBuilder);\r\n            this._include(includesBuilder);\r\n        } else if (TypeUtil.isString(pathOrIncludes)) {\r\n            this._include(pathOrIncludes);\r\n        } else {\r\n            throwError(\"InvalidArgumentException\", \"include() accepts either string or function.\");\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // TBD: IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.Include(Expression<Func<T, object>> path)\r\n\r\n    public not(): IDocumentQuery<T> {\r\n        this.negateNext();\r\n        return this;\r\n    }\r\n\r\n    public take(count: number): IDocumentQuery<T> {\r\n        this._take(count);\r\n        return this;\r\n    }\r\n\r\n    public skip(count: number): IDocumentQuery<T> {\r\n        this._skip(count);\r\n        return this;\r\n    }\r\n\r\n    public whereLucene(fieldName: Field<T>, whereClause: string): IDocumentQuery<T>;\r\n    public whereLucene(fieldName: Field<T>, whereClause: string, exact: boolean): IDocumentQuery<T>;\r\n    public whereLucene(fieldName: Field<T>, whereClause: string, exact?: boolean): IDocumentQuery<T> {\r\n        this._whereLucene(fieldName, whereClause, exact);\r\n        return this;\r\n    }\r\n\r\n    public whereEquals(fieldName: Field<T>, method: MethodCall): IDocumentQuery<T>;\r\n    public whereEquals(fieldName: Field<T>, method: MethodCall, exact: boolean): IDocumentQuery<T>;\r\n    public whereEquals(fieldName: Field<T>, value: any): void;\r\n    public whereEquals(fieldName: Field<T>, value: any, exact: boolean): IDocumentQuery<T>;\r\n    public whereEquals(whereParams: WhereParams): IDocumentQuery<T>;\r\n    public whereEquals(...args: any[]): IDocumentQuery<T> {\r\n        (this._whereEquals as any)(...args as any[]);\r\n        return this;\r\n    }\r\n\r\n    public whereNotEquals(fieldName: Field<T>, method: MethodCall): IDocumentQuery<T>;\r\n    public whereNotEquals(fieldName: Field<T>, method: MethodCall, exact: boolean): IDocumentQuery<T>;\r\n    public whereNotEquals(fieldName: Field<T>, value: any): void;\r\n    public whereNotEquals(fieldName: Field<T>, value: any, exact: boolean): IDocumentQuery<T>;\r\n    public whereNotEquals(whereParams: WhereParams): IDocumentQuery<T>;\r\n    public whereNotEquals(...args: any[]): IDocumentQuery<T> {\r\n        (this._whereNotEquals as any)(...args);\r\n        return this;\r\n    }\r\n\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.WhereEquals<TValue>(Expression<Func<T, TValue>> propertySelector, TValue value, bool exact)\r\n    // TBD IDocumentQuery<T> IFilterDocumentQueryBase<T, IDocumentQuery<T>>.WhereEquals<TValue>(Expression<Func<T, TValue>> propertySelector, MethodCall value, bool exact)\r\n\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.WhereNotEquals<TValue>(Expression<Func<T, TValue>> propertySelector, TValue value, bool exact)\r\n    // TBD IDocumentQuery<T> IFilterDocumentQueryBase<T, IDocumentQuery<T>>.WhereNotEquals<TValue>(Expression<Func<T, TValue>> propertySelector, MethodCall value, bool exact)\r\n\r\n    public whereIn(fieldName: Field<T>, values: any[]): IDocumentQuery<T>;\r\n    public whereIn(fieldName: Field<T>, values: any[], exact: boolean): IDocumentQuery<T>;\r\n    public whereIn(...args: any[]): IDocumentQuery<T> {\r\n        (this._whereIn as any)(...args);\r\n        return this;\r\n    }\r\n\r\n    // TBD public IDocumentQuery<T> WhereIn<TValue>(Expression<Func<T, TValue>> propertySelector,\r\n    // IEnumerable<TValue> values, bool exact = false)\r\n\r\n    public whereStartsWith(fieldName: Field<T>, value: any): IDocumentQuery<T>\r\n    public whereStartsWith(fieldName: Field<T>, value: any, exact: boolean): IDocumentQuery<T>\r\n    public whereStartsWith(fieldName: Field<T>, value: any, exact?: boolean): IDocumentQuery<T> {\r\n        this._whereStartsWith(fieldName, value, exact);\r\n        return this;\r\n    }\r\n\r\n    public whereEndsWith(fieldName: Field<T>, value: any): IDocumentQuery<T>\r\n    public whereEndsWith(fieldName: Field<T>, value: any, exact: boolean): IDocumentQuery<T>\r\n    public whereEndsWith(fieldName: Field<T>, value: any, exact?: boolean): IDocumentQuery<T> {\r\n        this._whereEndsWith(fieldName, value, exact);\r\n        return this;\r\n    }\r\n\r\n    // TBD: public IDocumentQuery<T> WhereEndsWith<TValue>(Expression<Func<T, TValue>> propertySelector, TValue value)\r\n\r\n    public whereBetween(fieldName: Field<T>, start: any, end: any): IDocumentQuery<T>;\r\n    public whereBetween(fieldName: Field<T>, start: any, end: any, exact: boolean): IDocumentQuery<T>;\r\n    public whereBetween(...args: any[]): IDocumentQuery<T> {\r\n        (this._whereBetween as any)(...args);\r\n        return this;\r\n    }\r\n\r\n    public whereGreaterThan(fieldName: Field<T>, value: any): IDocumentQuery<T>;\r\n    public whereGreaterThan(fieldName: Field<T>, value: any, exact: boolean): IDocumentQuery<T>;\r\n    public whereGreaterThan(...args: any[]): IDocumentQuery<T> {\r\n        (this._whereGreaterThan as any)(...args);\r\n        return this;\r\n    }\r\n\r\n    // TBD public IDocumentQuery<T> WhereBetween<TValue>(Expression<Func<T, TValue>> propertySelector, TValue start, TValue end, bool exact = false)\r\n\r\n    public whereGreaterThanOrEqual(fieldName: Field<T>, value: any): IDocumentQuery<T>;\r\n    public whereGreaterThanOrEqual(fieldName: Field<T>, value: any, exact: boolean): IDocumentQuery<T>;\r\n    public whereGreaterThanOrEqual(...args: any[]): IDocumentQuery<T> {\r\n        (this._whereGreaterThanOrEqual as any)(...args);\r\n        return this;\r\n    }\r\n\r\n    public whereLessThan(fieldName: Field<T>, value: any): IDocumentQuery<T> ;\r\n    public whereLessThan(fieldName: Field<T>, value: any, exact: boolean): IDocumentQuery<T>;\r\n    public whereLessThan(...args: any[]): IDocumentQuery<T> {\r\n        (this._whereLessThan as any)(...args);\r\n        return this;\r\n    }\r\n\r\n    public whereLessThanOrEqual(fieldName: Field<T>, value: any): IDocumentQuery<T> ;\r\n    public whereLessThanOrEqual(fieldName: Field<T>, value: any, exact: boolean): IDocumentQuery<T>;\r\n    public whereLessThanOrEqual(...args: any[]): IDocumentQuery<T> {\r\n        (this._whereLessThanOrEqual as any)(...args);\r\n        return this;\r\n    }\r\n\r\n    // TBD public IDocumentQuery<T> WhereGreaterThan<TValue>(Expression<Func<T, TValue>> propertySelector, TValue value, bool exact = false)\r\n    // TBD public IDocumentQuery<T> WhereGreaterThanOrEqual<TValue>(Expression<Func<T, TValue>> propertySelector, TValue value, bool exact = false)\r\n\r\n    // TBD public IDocumentQuery<T> WhereLessThanOrEqual<TValue>(Expression<Func<T, TValue>> propertySelector, TValue value, bool exact = false)\r\n\r\n    // TBD public IDocumentQuery<T> WhereLessThanOrEqual<TValue>(\r\n    //      Expression<Func<T, TValue>> propertySelector, TValue value, bool exact = false)\r\n    // TBD public IDocumentQuery<T> WhereExists<TValue>(Expression<Func<T, TValue>> propertySelector)\r\n\r\n    public whereExists(fieldName: Field<T>): IDocumentQuery<T> {\r\n        this._whereExists(fieldName);\r\n        return this;\r\n    }\r\n\r\n    // TBD IDocumentQuery<T> IFilterDocumentQueryBase<T, IDocumentQuery<T>>.WhereRegex<TValue>(Expression<Func<T, TValue>> propertySelector, string pattern)\r\n\r\n    public whereRegex(fieldName: Field<T>, pattern: string): IDocumentQuery<T> {\r\n        this._whereRegex(fieldName, pattern);\r\n        return this;\r\n    }\r\n\r\n    public andAlso(): IDocumentQuery<T>;\r\n    public andAlso(wrapPreviousQueryClauses: boolean): IDocumentQuery<T>;\r\n    public andAlso(wrapPreviousQueryClauses?: boolean): IDocumentQuery<T> {\r\n        this._andAlso(wrapPreviousQueryClauses);\r\n        return this;\r\n    }\r\n\r\n    public orElse(): IDocumentQuery<T> {\r\n        this._orElse();\r\n        return this;\r\n    }\r\n\r\n    public boost(boost: number): IDocumentQuery<T> {\r\n        this._boost(boost);\r\n        return this;\r\n    }\r\n\r\n    public fuzzy(fuzzy: number): IDocumentQuery<T> {\r\n        this._fuzzy(fuzzy);\r\n        return this;\r\n    }\r\n\r\n    public proximity(proximity: number): IDocumentQuery<T> {\r\n        this._proximity(proximity);\r\n        return this;\r\n    }\r\n\r\n    public randomOrdering(): IDocumentQuery<T>;\r\n    public randomOrdering(seed: string): IDocumentQuery<T>;\r\n    public randomOrdering(seed?: string): IDocumentQuery<T> {\r\n        this._randomOrdering(seed);\r\n        return this;\r\n    }\r\n\r\n    // TBD 4.1 public IDocumentQuery<T> customSortUsing(String typeName, boolean descending)\r\n\r\n    public groupBy(fieldName: Field<T>, ...fieldNames: string[]): IGroupByDocumentQuery<T>;\r\n    public groupBy(field: GroupBy, ...fields: GroupBy[]): IGroupByDocumentQuery<T>;\r\n    public groupBy(...args: any[]): IGroupByDocumentQuery<T> {\r\n        (this._groupBy as any)(...args);\r\n\r\n        return new GroupByDocumentQuery<T>(this);\r\n    }\r\n\r\n    public ofType<TResult extends object>(tResultClass: DocumentType<TResult>): IDocumentQuery<TResult> {\r\n        if (tResultClass) {\r\n            this._theSession.conventions.tryRegisterJsType(tResultClass);\r\n        }\r\n\r\n        return this.createDocumentQueryInternal(tResultClass);\r\n    }\r\n\r\n    public orderBy(field: Field<T>): IDocumentQuery<T>;\r\n    public orderBy(field: Field<T>, ordering: OrderingType): IDocumentQuery<T>;\r\n    public orderBy(field: Field<T>, options: { sorterName: string }): IDocumentQuery<T>;\r\n    public orderBy(...args: any[]): IDocumentQuery<T> {\r\n        (this._orderBy as any)(...args);\r\n        return this;\r\n    }\r\n\r\n    public orderByDescending(field: Field<T>): IDocumentQuery<T>;\r\n    public orderByDescending(field: Field<T>, ordering: OrderingType): IDocumentQuery<T>;\r\n    public orderByDescending(field: Field<T>, options: { sorterName: string }): IDocumentQuery<T>;\r\n    public orderByDescending(...args: any[]): IDocumentQuery<T> {\r\n        (this._orderByDescending as any)(...args);\r\n        return this;\r\n    }\r\n\r\n    // TBD public IDocumentQuery<T> OrderBy<TValue>(params Expression<Func<T, TValue>>[] propertySelectors)\r\n\r\n    // TBD expr public IDocumentQuery<T> OrderByDescending<TValue>(\r\n    //      params Expression<Func<T, TValue>>[] propertySelectors)\r\n\r\n    public createDocumentQueryInternal<TResult extends object>(\r\n        resultClass: DocumentType<TResult>): DocumentQuery<TResult>;\r\n    public createDocumentQueryInternal<TResult extends object>(\r\n        resultClass: DocumentType<TResult>, queryData: QueryData): DocumentQuery<TResult>;\r\n    public createDocumentQueryInternal<TResult extends object>(\r\n        resultClass: DocumentType<TResult>, queryData?: QueryData): DocumentQuery<TResult> {\r\n        let newFieldsToFetch: FieldsToFetchToken;\r\n\r\n        if (queryData && queryData.fields.length > 0) {\r\n            let { fields } = queryData;\r\n\r\n            if (!this._isGroupBy) {\r\n                const identityProperty = this.conventions.getIdentityProperty(resultClass);\r\n\r\n                if (identityProperty) {\r\n                    fields = queryData.fields.map(\r\n                        p => p === identityProperty ? CONSTANTS.Documents.Indexing.Fields.DOCUMENT_ID_FIELD_NAME : p);\r\n                }\r\n            }\r\n\r\n            let sourceAliasReference: string;\r\n            DocumentQuery._getSourceAliasIfExists(resultClass, queryData, fields, s => sourceAliasReference = s);\r\n            newFieldsToFetch = FieldsToFetchToken.create(fields, queryData.projections,\r\n                queryData.isCustomFunction, sourceAliasReference);\r\n        } else {\r\n            newFieldsToFetch = null;\r\n            if (this.fieldsToFetchToken) {\r\n                queryData = new QueryData(\r\n                    this.fieldsToFetchToken.fieldsToFetch,\r\n                    this.fieldsToFetchToken.projections,\r\n                    this._fromToken.alias(),\r\n                    this._declareTokens,\r\n                    this._loadTokens,\r\n                    this.fieldsToFetchToken.customFunction\r\n                );\r\n                queryData.projectionBehavior = this.projectionBehavior;\r\n            }\r\n        }\r\n\r\n        if (newFieldsToFetch) {\r\n            this._updateFieldsToFetchToken(newFieldsToFetch);\r\n        }\r\n\r\n        const query = new DocumentQuery(\r\n            resultClass,\r\n            this._theSession,\r\n            this.indexName,\r\n            this.collectionName,\r\n            this._isGroupBy,\r\n            queryData ? queryData.declareTokens : null,\r\n            queryData ? queryData.loadTokens : null,\r\n            queryData ? queryData.fromAlias : null,\r\n            queryData ? queryData.isProjectInto : null);\r\n\r\n        query._queryRaw = this._queryRaw;\r\n        query._pageSize = this._pageSize;\r\n        query._selectTokens = this._selectTokens;\r\n        query.fieldsToFetchToken = this.fieldsToFetchToken;\r\n        query._whereTokens = this._whereTokens;\r\n        query._orderByTokens = this._orderByTokens;\r\n        query._groupByTokens = this._groupByTokens;\r\n        query._filterTokens = this._filterTokens;\r\n        query._queryParameters = this._queryParameters;\r\n        query._filterModeStack = [...this._filterModeStack];\r\n        query._start = this._start;\r\n        query._timeout = this._timeout;\r\n        query._queryStats = queryData?.queryStatistics ?? this._queryStats;\r\n        query._theWaitForNonStaleResults = this._theWaitForNonStaleResults;\r\n        query._negate = this._negate;\r\n        //noinspection unchecked\r\n        query._documentIncludes = new Set(this._documentIncludes);\r\n        query._counterIncludesTokens = this._counterIncludesTokens;\r\n        query._timeSeriesIncludesTokens = this._timeSeriesIncludesTokens;\r\n        query._revisionsIncludesTokens = this._revisionsIncludesTokens;\r\n        query._compareExchangeValueIncludesTokens = this._compareExchangeValueIncludesTokens;\r\n        query._rootTypes = new Set([this._clazz]);\r\n\r\n        for (const listener of query.listeners(\"beforeQuery\")) {\r\n            query.on(\"beforeQuery\", listener as any);\r\n        }\r\n\r\n        for (const listener of query.listeners(\"afterQuery\")) {\r\n            query.on(\"afterQuery\", listener as any);\r\n        }\r\n\r\n        for (const listener of query.listeners(\"afterStreamExecuted\")) {\r\n            query.on(\"afterStreamExecuted\", listener as any);\r\n        }\r\n\r\n        query._explanations = this._explanations;\r\n        query._explanationToken = this._explanationToken;\r\n        query._queryTimings = this._queryTimings;\r\n        query._queryHighlightings = this._queryHighlightings;\r\n        query._highlightingTokens = this._highlightingTokens;\r\n        query._disableEntitiesTracking = this._disableEntitiesTracking;\r\n        query._disableCaching = this._disableCaching;\r\n        query.projectionBehavior = queryData ? queryData.projectionBehavior : this.projectionBehavior;\r\n        query._isIntersect = this._isIntersect;\r\n        query._defaultOperator = this._defaultOperator;\r\n        query._filterLimit = this._filterLimit;\r\n\r\n        return query;\r\n    }\r\n\r\n    public aggregateBy(builder: (facetBuilder: IFacetBuilder<T>) => void): IAggregationDocumentQuery<T>;\r\n    public aggregateBy(facet: FacetBase): IAggregationDocumentQuery<T>;\r\n    public aggregateBy(...facets: FacetBase[]): IAggregationDocumentQuery<T>;\r\n    public aggregateBy(\r\n        facetOrFacetBuilder: FacetBase[] | FacetBase | ((facetBuilder: IFacetBuilder<T>) => void),\r\n        ...facets: Facet[]): IAggregationDocumentQuery<T> {\r\n\r\n        if (TypeUtil.isNullOrUndefined(facetOrFacetBuilder)) {\r\n            throwError(\"InvalidArgumentException\", \"Facet or facet builder cannot be null.\");\r\n        }\r\n\r\n        const argType = typeof facetOrFacetBuilder;\r\n        if (argType === \"function\") {\r\n            const ff = new FacetBuilder<T>();\r\n            (facetOrFacetBuilder as ((facetBuilder: IFacetBuilder<T>) => void))(ff);\r\n            return this.aggregateBy(ff.getFacet());\r\n        }\r\n\r\n        for (const facet of [facetOrFacetBuilder as FacetBase, ...facets]) {\r\n            this._aggregateBy(facet);\r\n        }\r\n\r\n        return new AggregationDocumentQuery<T>(this);\r\n    }\r\n\r\n    public aggregateUsing(facetSetupDocumentId: string): IAggregationDocumentQuery<T> {\r\n        this._aggregateUsing(facetSetupDocumentId);\r\n        return new AggregationDocumentQuery<T>(this);\r\n    }\r\n\r\n    public highlight(\r\n        parameters: HighlightingParameters,\r\n        hightlightingsCallback: ValueCallback<Highlightings>): IDocumentQuery<T> {\r\n        this._highlight(parameters, hightlightingsCallback);\r\n        return this;\r\n    }\r\n\r\n    //TBD expr IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.Highlight(Expression<Func<T, object>> path, int fragmentLength, int fragmentCount, out Highlightings highlightings)\r\n    //TBD expr IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.Highlight(Expression<Func<T, object>> path, int fragmentLength, int fragmentCount, HighlightingOptions options, out Highlightings highlightings)\r\n    //TBD expr public IDocumentQuery<T> Spatial(Expression<Func<T, object>> path, Func<SpatialCriteriaFactory, SpatialCriteria> clause)\r\n\r\n    public spatial(\r\n        fieldName: Field<T>,\r\n        clause: (factory: SpatialCriteriaFactory) => SpatialCriteria): IDocumentQuery<T>;\r\n    public spatial(\r\n        field: DynamicSpatialField,\r\n        clause: (factory: SpatialCriteriaFactory) => SpatialCriteria): IDocumentQuery<T>;\r\n    public spatial(\r\n        fieldNameOrField: string | DynamicSpatialField,\r\n        clause: (factory: SpatialCriteriaFactory) => SpatialCriteria): IDocumentQuery<T> {\r\n        const criteria = clause(SpatialCriteriaFactory.INSTANCE);\r\n        this._spatial(fieldNameOrField as any, criteria);\r\n        return this;\r\n    }\r\n\r\n    // TBD public IDocumentQuery<T> Spatial(Func<SpatialDynamicFieldFactory<T>, DynamicSpatialField> field, Func<SpatialCriteriaFactory, SpatialCriteria> clause)\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.WithinRadiusOf<TValue>(Expression<Func<T, TValue>> propertySelector, double radius, double latitude, double longitude, SpatialUnits? radiusUnits, double distanceErrorPct)\r\n\r\n    /**\r\n     * Filter matches to be inside the specified radius\r\n     */\r\n    public withinRadiusOf(\r\n        fieldName: Field<T>, radius: number, latitude: number, longitude: number): IDocumentQuery<T>;\r\n    /**\r\n     * Filter matches to be inside the specified radius\r\n     */\r\n    public withinRadiusOf(\r\n        fieldName: Field<T>,\r\n        radius: number,\r\n        latitude: number,\r\n        longitude: number,\r\n        radiusUnits: SpatialUnits): IDocumentQuery<T>;\r\n    /**\r\n     * Filter matches to be inside the specified radius\r\n     */\r\n    public withinRadiusOf(\r\n        fieldName: Field<T>,\r\n        radius: number,\r\n        latitude: number,\r\n        longitude: number,\r\n        radiusUnits: SpatialUnits,\r\n        distanceErrorPct: number): IDocumentQuery<T>;\r\n    /**\r\n     * Filter matches to be inside the specified radius\r\n     */\r\n    public withinRadiusOf(\r\n        fieldName: Field<T>,\r\n        radius: number,\r\n        latitude: number,\r\n        longitude: number,\r\n        radiusUnits: SpatialUnits = null,\r\n        distanceErrorPct: number = CONSTANTS.Documents.Indexing.Spatial.DEFAULT_DISTANCE_ERROR_PCT): IDocumentQuery<T> {\r\n        this._withinRadiusOf(fieldName, radius, latitude, longitude, radiusUnits, distanceErrorPct);\r\n        return this;\r\n    }\r\n\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.RelatesToShape<TValue>(Expression<Func<T, TValue>> propertySelector, string shapeWkt, SpatialRelation relation, double distanceErrorPct)\r\n\r\n    public relatesToShape(\r\n        fieldName: Field<T>, shapeWkt: string, relation: SpatialRelation): IDocumentQuery<T>;\r\n    public relatesToShape(\r\n        fieldName: Field<T>, shapeWkt: string, relation: SpatialRelation, distanceErrorPct: number): IDocumentQuery<T>;\r\n    public relatesToShape(\r\n        fieldName: Field<T>,\r\n        shapeWkt: string,\r\n        relation: SpatialRelation,\r\n        units: SpatialUnits,\r\n        distanceErrorPct: number): IDocumentQuery<T>;\r\n    public relatesToShape(\r\n        fieldName: Field<T>,\r\n        shapeWkt: string,\r\n        relation: SpatialRelation,\r\n        distanceErrorPctOrUnits?: SpatialUnits | number,\r\n        distanceErrorPct?: number): IDocumentQuery<T> {\r\n\r\n        let units;\r\n        if (TypeUtil.isNullOrUndefined(distanceErrorPct)) {\r\n            if (TypeUtil.isString(distanceErrorPctOrUnits)) {\r\n                units = distanceErrorPctOrUnits as SpatialUnits;\r\n                distanceErrorPct = CONSTANTS.Documents.Indexing.Spatial.DEFAULT_DISTANCE_ERROR_PCT;\r\n            } else {\r\n                units = null;\r\n                distanceErrorPct = distanceErrorPctOrUnits as number;\r\n            }\r\n        } else {\r\n            units = distanceErrorPctOrUnits;\r\n        }\r\n\r\n        this._spatialByShapeWkt(fieldName, shapeWkt, relation, units, distanceErrorPct);\r\n        return this;\r\n    }\r\n\r\n    public orderByDistance(field: DynamicSpatialField, latitude: number, longitude: number): IDocumentQuery<T>;\r\n    public orderByDistance(field: DynamicSpatialField, shapeWkt: string): IDocumentQuery<T>;\r\n    public orderByDistance(fieldName: Field<T>, latitude: number, longitude: number): IDocumentQuery<T>;\r\n    public orderByDistance(fieldName: Field<T>, latitude: number, longitude: number, roundFactor: number): IDocumentQuery<T>;\r\n    public orderByDistance(fieldName: Field<T>, shapeWkt: string): IDocumentQuery<T>;\r\n    public orderByDistance(...args: any[]): IDocumentQuery<T> {\r\n        (this._orderByDistance as any)(...args);\r\n        return this;\r\n    }\r\n\r\n    public orderByDistanceDescending(\r\n        field: DynamicSpatialField, latitude: number, longitude: number): IDocumentQuery<T>;\r\n    public orderByDistanceDescending(field: DynamicSpatialField, shapeWkt: string): IDocumentQuery<T>;\r\n    public orderByDistanceDescending(fieldName: Field<T>, latitude: number, longitude: number): IDocumentQuery<T>;\r\n    public orderByDistanceDescending(fieldName: Field<T>, latitude: number, longitude: number, roundFactor: number): IDocumentQuery<T>;\r\n    public orderByDistanceDescending(fieldName: Field<T>, shapeWkt: string): IDocumentQuery<T>;\r\n    public orderByDistanceDescending(...args: any[]): IDocumentQuery<T> {\r\n        (this._orderByDistanceDescending as any)(...args);\r\n        return this;\r\n    }\r\n\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.OrderByDistance(Func<DynamicSpatialFieldFactory<T>, DynamicSpatialField> field, double latitude, double longitude)\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.OrderByDistance(Func<DynamicSpatialFieldFactory<T>, DynamicSpatialField> field, string shapeWkt)\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.OrderByDistance<TValue>(Expression<Func<T, TValue>> propertySelector, double latitude, double longitude)\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.OrderByDistance<TValue>(Expression<Func<T, TValue>> propertySelector, string shapeWkt)\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.OrderByDistanceDescending(Func<DynamicSpatialFieldFactory<T>, DynamicSpatialField> field, double latitude, double longitude)\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.OrderByDistanceDescending(Func<DynamicSpatialFieldFactory<T>, DynamicSpatialField> field, string shapeWkt)\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.OrderByDistanceDescending<TValue>(Expression<Func<T, TValue>> propertySelector, double latitude, double longitude)\r\n    // TBD IDocumentQuery<T> IDocumentQueryBase<T, IDocumentQuery<T>>.OrderByDistanceDescending<TValue>(Expression<Func<T, TValue>> propertySelector, string shapeWkt)\r\n\r\n    public moreLikeThis(\r\n        builder: (moreLikeThisBuilder: IMoreLikeThisBuilderForDocumentQuery<T>) => void): IDocumentQuery<T>;\r\n    public moreLikeThis(moreLikeThis: MoreLikeThisBase): IDocumentQuery<T>;\r\n    public moreLikeThis(\r\n        moreLikeThisBaseOrBuilder:\r\n            MoreLikeThisBase\r\n            | ((moreLikeThisBuilder: IMoreLikeThisBuilderForDocumentQuery<T>) => void)): IDocumentQuery<T> {\r\n        if (moreLikeThisBaseOrBuilder instanceof MoreLikeThisBase) {\r\n            const mlt = this._moreLikeThis();\r\n\r\n            try {\r\n                mlt.withOptions(moreLikeThisBaseOrBuilder.options);\r\n\r\n                if (moreLikeThisBaseOrBuilder instanceof MoreLikeThisUsingDocument) {\r\n                    mlt.withDocument(moreLikeThisBaseOrBuilder.documentJson);\r\n                }\r\n            } finally {\r\n                mlt.dispose();\r\n            }\r\n        } else {\r\n            const f = new MoreLikeThisBuilder<T>();\r\n            moreLikeThisBaseOrBuilder(f);\r\n\r\n            const moreLikeThis = this._moreLikeThis();\r\n            try {\r\n                moreLikeThis.withOptions(f.getMoreLikeThis().options);\r\n\r\n                const innerMoreLikeThis = f.getMoreLikeThis();\r\n\r\n                if (innerMoreLikeThis instanceof MoreLikeThisUsingDocument) {\r\n                    moreLikeThis.withDocument(innerMoreLikeThis.documentJson);\r\n                } else if (innerMoreLikeThis instanceof MoreLikeThisUsingDocumentForDocumentQuery) {\r\n                    innerMoreLikeThis.forDocumentQuery(this);\r\n                }\r\n            } finally {\r\n                moreLikeThis.dispose();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public suggestUsing(suggestion: SuggestionBase): ISuggestionDocumentQuery<T>;\r\n    public suggestUsing(action: (builder: ISuggestionBuilder<T>) => void): ISuggestionDocumentQuery<T>;\r\n    public suggestUsing(suggestBaseOrBuilder:\r\n                            SuggestionBase\r\n                            | ((builder: ISuggestionBuilder<T>) => void)): ISuggestionDocumentQuery<T> {\r\n\r\n        if (suggestBaseOrBuilder instanceof SuggestionBase) {\r\n            this._suggestUsing(suggestBaseOrBuilder);\r\n            return new SuggestionDocumentQuery<T>(this);\r\n        } else {\r\n            const f = new SuggestionBuilder<T>();\r\n            suggestBaseOrBuilder(f);\r\n\r\n            this.suggestUsing(f.suggestion);\r\n\r\n            return new SuggestionDocumentQuery<T>(this);\r\n        }\r\n    }\r\n\r\n    public filter(builder: (factory: IFilterFactory<T>) => void, limit?: number): IDocumentQuery<T> {\r\n        limit ??= Number.MAX_SAFE_INTEGER;\r\n\r\n        const mode = this.setFilterMode(true);\r\n        try {\r\n            const f = new FilterFactory(this, limit);\r\n            builder(f);\r\n        } finally {\r\n            mode.dispose();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    shardContext(action: (builder: IQueryShardedContextBuilder) => void): IDocumentQuery<T> {\r\n        this._shardContext(action);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Performs a vector similarity search using the specified field and embedding vector.\r\n     * @param fieldName Field containing vector values or a function that returns a field using the vector factory\r\n     * @param valueFactory The vector to compare against as a function, array of numbers, or string\r\n     * @param options Additional vector search options\r\n     */\r\n    public vectorSearch(\r\n        fieldName: Field<T> | ((factory: IVectorFieldFactory<T>) => IVectorField | IVectorEmbeddingField | IVectorEmbeddingTextField),\r\n        valueFactory: number[] | string | ((factory: IVectorFieldValueFactory) => void),\r\n        options?: IVectorOptions\r\n    ): IDocumentQuery<T> {\r\n        this._vectorSearch(fieldName, valueFactory, options);\r\n        return this;\r\n    }\r\n}\r\n"]}