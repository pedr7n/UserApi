{"version":3,"file":"RawDocumentQuery.js","sourceRoot":"","sources":["../../../../src/Documents/Session/RawDocumentQuery.ts"],"names":[],"mappings":";;;AAAA,yEAAmE;AASnE,qGAA+F;AAG/F,MAAa,gBACT,SAAQ,gDAA6C;IAErD,YAAmB,OAA0C,EAAE,QAAgB,EAAE,KAAuB;QACpG,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,IAAI,CAAC,KAAa;QACrB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAClB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,IAAI,CAAC,KAAa;QACrB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAClB,OAAO,IAAI,CAAC;IAChB,CAAC;IAIM,sBAAsB,CAAC,WAAoB;QAC9C,IAAI,CAAC,uBAAuB,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,OAAO,CAAC,OAAoC;QAC/C,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,UAAU;QACb,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,SAAS;QACZ,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,oBAAoB,CAAC,aAA4B;QACpD,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,UAAU,CAAC,aAA+C;QAC7D,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,YAAY,CAAC,IAAY,EAAE,KAAU;QACxC,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,kBAAkB;QACrB,MAAM,KAAK,GAAG,IAAI,4DAA2B,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACtE,OAAO,KAAK,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAEM,UAAU,CAAC,kBAAsC;QACpD,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAhED,4CAgEC","sourcesContent":["import { AbstractDocumentQuery } from \"./AbstractDocumentQuery.js\";\r\nimport { IRawDocumentQuery } from \"./IRawDocumentQuery.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { QueryOperator } from \"../Queries/QueryOperator.js\";\r\nimport { QueryStatistics } from \"./QueryStatistics.js\";\r\nimport { QueryTimings } from \"../Queries/Timings/QueryTimings.js\";\r\nimport { ValueCallback } from \"../../Types/Callbacks.js\";\r\nimport { FacetResult } from \"../Queries/Facets/index.js\";\r\nimport { AggregationRawDocumentQuery } from \"../Queries/Facets/AggregationRawDocumentQuery.js\";\r\nimport { ProjectionBehavior } from \"../Queries/ProjectionBehavior.js\";\r\n\r\nexport class RawDocumentQuery<T extends object>\r\n    extends AbstractDocumentQuery<T, RawDocumentQuery<T>> implements IRawDocumentQuery<T> {\r\n\r\n    public constructor(session: InMemoryDocumentSessionOperations, rawQuery: string, clazz?: DocumentType<T>) {\r\n        super(clazz, session, null, null, false, null, null);\r\n        this._queryRaw = rawQuery;\r\n    }\r\n\r\n    public skip(count: number): IRawDocumentQuery<T> {\r\n        this._skip(count);\r\n        return this;\r\n    }\r\n\r\n    public take(count: number): IRawDocumentQuery<T> {\r\n        this._take(count);\r\n        return this;\r\n    }\r\n\r\n    public waitForNonStaleResults(): IRawDocumentQuery<T>;\r\n    public waitForNonStaleResults(waitTimeout?: number): IRawDocumentQuery<T>;\r\n    public waitForNonStaleResults(waitTimeout?: number): IRawDocumentQuery<T> {\r\n        this._waitForNonStaleResults(waitTimeout || null);\r\n        return this;\r\n    }\r\n\r\n    public timings(timings: ValueCallback<QueryTimings>): IRawDocumentQuery<T> {\r\n        this._includeTimings(timings);\r\n        return this;\r\n    }\r\n\r\n    public noTracking(): IRawDocumentQuery<T> {\r\n        this._noTracking();\r\n        return this;\r\n    }\r\n\r\n    public noCaching(): IRawDocumentQuery<T> {\r\n        this._noCaching();\r\n        return this;\r\n    }\r\n\r\n    public usingDefaultOperator(queryOperator: QueryOperator): IRawDocumentQuery<T> {\r\n        this._usingDefaultOperator(queryOperator);\r\n        return this;\r\n    }\r\n\r\n    public statistics(statsCallback: (stats: QueryStatistics) => void): IRawDocumentQuery<T> {\r\n        this._statistics(statsCallback);\r\n        return this;\r\n    }\r\n\r\n    public addParameter(name: string, value: any): IRawDocumentQuery<T> {\r\n        super.addParameter(name, value);\r\n        return this;\r\n    }\r\n\r\n    public executeAggregation(): Promise<Record<string, FacetResult>> {\r\n        const query = new AggregationRawDocumentQuery(this, this._theSession);\r\n        return query.execute();\r\n    }\r\n\r\n    public projection(projectionBehavior: ProjectionBehavior): IRawDocumentQuery<T> {\r\n        this._projection(projectionBehavior);\r\n        return this;\r\n    }\r\n}\r\n"]}