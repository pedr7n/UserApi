{"version":3,"file":"SubscriptionWorker.js","sourceRoot":"","sources":["../../../../src/Documents/Subscriptions/SubscriptionWorker.ts"],"names":[],"mappings":";;;AAGA,mFAA6E;AAC7E,iEAA2D;AAE3D,sEAAyF;AAEzF,MAAa,kBAAqC,SAAQ,0DAAmD;IAExF,MAAM,CAAgB;IAEvC,YAAmB,OAAqC,EACrC,aAAsB,EAAE,aAA4B,EAAE,MAAc;QACnF,KAAK,CAAC,OAAO,EAAE,aAAa,EAAE,aAAa,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;QAE1E,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC;IAChC,CAAC;IAES,kBAAkB;QACxB,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxD,CAAC;IAES,uBAAuB,CAAC,GAAW,EAAE,IAA6B;QACxE,IAAI,IAAI,CAAC,iCAAiC,EAAE,CAAC;YACzC,IAAI,CAAC,iCAAiC,CAAC,OAAO,EAAE,CAAC;QACrD,CAAC;QAED,IAAI,CAAC,iCAAiC,GAAG,oCAAe,CAAC,8CAA8C,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAEjI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;IACvE,CAAC;IAES,gBAAgB;QACtB,OAAO,IAAI,wCAAiB,CAAI,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,EAC/D,IAAI,CAAC,iCAAiC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3E,CAAC;IAES,mCAAmC;QACzC,QAAQ;IACZ,CAAC;CACJ;AAjCD,gDAiCC","sourcesContent":["import { IDisposable } from \"../../Types/Contracts.js\";\r\nimport { DocumentStore } from \"../DocumentStore.js\";\r\n\r\nimport { AbstractSubscriptionWorker } from \"./AbstractSubscriptionWorker.js\";\r\nimport { SubscriptionBatch } from \"./SubscriptionBatch.js\";\r\nimport { SubscriptionWorkerOptions } from \"./SubscriptionWorkerOptions.js\";\r\nimport { IRequestExecutorOptions, RequestExecutor } from \"../../Http/RequestExecutor.js\";\r\n\r\nexport class SubscriptionWorker<T extends object> extends AbstractSubscriptionWorker<SubscriptionBatch<T>, T> implements IDisposable {\r\n\r\n    private readonly _store: DocumentStore;\r\n\r\n    public constructor(options: SubscriptionWorkerOptions<T>,\r\n                       withRevisions: boolean, documentStore: DocumentStore, dbName: string) {\r\n        super(options, withRevisions, documentStore.getEffectiveDatabase(dbName));\r\n\r\n        this._store = documentStore;\r\n    }\r\n\r\n    protected getRequestExecutor(): RequestExecutor {\r\n        return this._store.getRequestExecutor(this._dbName);\r\n    }\r\n\r\n    protected setLocalRequestExecutor(url: string, opts: IRequestExecutorOptions) {\r\n        if (this._subscriptionLocalRequestExecutor) {\r\n            this._subscriptionLocalRequestExecutor.dispose();\r\n        }\r\n\r\n        this._subscriptionLocalRequestExecutor = RequestExecutor.createForSingleNodeWithoutConfigurationUpdates(url, this._dbName, opts);\r\n\r\n        this._store.registerEvents(this._subscriptionLocalRequestExecutor);\r\n    }\r\n\r\n    protected createEmptyBatch(): SubscriptionBatch<T> {\r\n        return new SubscriptionBatch<T>(this._documentType, this._revisions,\r\n            this._subscriptionLocalRequestExecutor, this._store, this._dbName);\r\n    }\r\n\r\n    protected trySetRedirectNodeOnConnectToServer() {\r\n        // no-op\r\n    }\r\n}\r\n"]}