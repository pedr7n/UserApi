{"version":3,"file":"IDocumentStore.js","sourceRoot":"","sources":["../../../src/Documents/IDocumentStore.ts"],"names":[],"mappings":"","sourcesContent":["import { IDocumentSession } from \"./Session/IDocumentSession.js\";\r\nimport { IStoreAuthOptions } from \"../Auth/AuthOptions.js\";\r\nimport {\r\n    SessionBeforeStoreEventArgs,\r\n    SessionAfterSaveChangesEventArgs,\r\n    SessionBeforeQueryEventArgs,\r\n    SessionBeforeDeleteEventArgs,\r\n    BeforeConversionToDocumentEventArgs,\r\n    AfterConversionToDocumentEventArgs,\r\n    BeforeConversionToEntityEventArgs,\r\n    AfterConversionToEntityEventArgs,\r\n    FailedRequestEventArgs,\r\n    TopologyUpdatedEventArgs, BeforeRequestEventArgs, SucceedRequestEventArgs\r\n} from \"./Session/SessionEvents.js\";\r\nimport { IDisposable } from \"../Types/Contracts.js\";\r\nimport { MaintenanceOperationExecutor } from \"./Operations/MaintenanceOperationExecutor.js\";\r\nimport { OperationExecutor } from \"./Operations/OperationExecutor.js\";\r\nimport { RequestExecutor } from \"../Http/RequestExecutor.js\";\r\nimport { DocumentConventions } from \"./Conventions/DocumentConventions.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"./Session/InMemoryDocumentSessionOperations.js\";\r\nimport { BulkInsertOperation } from \"./BulkInsertOperation.js\";\r\nimport { IDatabaseChanges } from \"./Changes/IDatabaseChanges.js\";\r\nimport { DocumentSubscriptions } from \"./Subscriptions/DocumentSubscriptions.js\";\r\nimport { SessionOptions } from \"./Session/SessionOptions.js\";\r\nimport { DatabaseSmuggler } from \"./Smuggler/DatabaseSmuggler.js\";\r\nimport { IAbstractIndexCreationTask } from \"./Indexes/IAbstractIndexCreationTask.js\";\r\nimport { TimeSeriesOperations } from \"./TimeSeries/TimeSeriesOperations.js\";\r\nimport { IHiLoIdGenerator } from \"./Identity/IHiLoIdGenerator.js\";\r\nimport { BulkInsertOptions } from \"./BulkInsert/BulkInsertOptions.js\";\r\nimport { AiOperations } from \"./Operations/AI/AiOperations.js\";\r\n\r\nexport interface SessionEventsProxy {\r\n    addSessionListener(eventName: \"failedRequest\", eventHandler: (eventArgs: FailedRequestEventArgs) => void): this;\r\n\r\n    addSessionListener(eventName: \"beforeStore\", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"afterSaveChanges\", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): this;\r\n\r\n    addSessionListener(eventName: \"beforeQuery\", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"beforeDelete\", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"beforeConversionToDocument\",\r\n        eventHandler: (eventArgs: BeforeConversionToDocumentEventArgs) => void\r\n    ): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"afterConversionToDocument\",\r\n        eventHandler: (eventArgs: AfterConversionToDocumentEventArgs) => void\r\n    ): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"beforeConversionToEntity\",\r\n        eventHandler: (eventArgs: BeforeConversionToEntityEventArgs) => void\r\n    ): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"afterConversionToEntity\",\r\n        eventHandler: (eventArgs: AfterConversionToEntityEventArgs) => void\r\n    ): this;\r\n\r\n    removeSessionListener(eventName: \"failedRequest\", eventHandler: (eventArgs: FailedRequestEventArgs) => void): void;\r\n\r\n    removeSessionListener(\r\n        eventName: \"beforeStore\", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): void;\r\n\r\n    removeSessionListener(\r\n        eventName: \"afterSaveChanges\", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): void;\r\n\r\n    removeSessionListener(\r\n        eventName: \"beforeQuery\", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): void;\r\n\r\n    removeSessionListener(\r\n        eventName: \"beforeDelete\", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): void;\r\n\r\n    removeSessionListener(\r\n        eventName: \"beforeConversionToDocument\",\r\n        eventHandler: (eventArgs: BeforeConversionToDocumentEventArgs) => void\r\n    ): void;\r\n\r\n    removeSessionListener(\r\n        eventName: \"afterConversionToDocument\",\r\n        eventHandler: (eventArgs: AfterConversionToDocumentEventArgs) => void\r\n    ): void;\r\n\r\n    removeSessionListener(\r\n        eventName: \"beforeConversionToEntity\",\r\n        eventHandler: (eventArgs: BeforeConversionToEntityEventArgs) => void\r\n    ): void;\r\n\r\n    removeSessionListener(\r\n        eventName: \"afterConversionToEntity\",\r\n        eventHandler: (eventArgs: AfterConversionToEntityEventArgs) => void\r\n    ): void;\r\n}\r\n\r\nexport type DocumentStoreEvent = \"beforeDispose\" | \"afterDispose\";\r\n\r\nexport interface SessionCreatedEventArgs {\r\n    session: InMemoryDocumentSessionOperations;\r\n}\r\n\r\nexport interface SessionDisposingEventArgs {\r\n    session: InMemoryDocumentSessionOperations;\r\n}\r\n\r\nexport interface DocumentStoreEventEmitter {\r\n\r\n    on(eventName: \"beforeRequest\", eventHandler: (args: BeforeRequestEventArgs) => void): this;\r\n\r\n    on(eventName: \"succeedRequest\", eventHandler: (args: SucceedRequestEventArgs) => void): this;\r\n\r\n    on(eventName: \"failedRequest\", eventHandler: (args: FailedRequestEventArgs) => void): this;\r\n\r\n    on(eventName: \"sessionCreated\", eventHandler: (args: SessionCreatedEventArgs) => void): this;\r\n\r\n    on(eventName: \"beforeDispose\", eventHandler: () => void): this;\r\n\r\n    on(eventName: \"afterDispose\", eventHandler: (callback: () => void) => void): this;\r\n\r\n    on(eventName: \"executorsDisposed\", eventHandler: (callback: () => void) => void): this;\r\n\r\n    once(eventName: \"beforeRequest\", eventHandler: (args: BeforeRequestEventArgs) => void): this;\r\n\r\n    once(eventName: \"succeedRequest\", eventHandler: (args: SucceedRequestEventArgs) => void): this;\r\n\r\n    once(eventName: \"failedRequest\", eventHandler: (args: FailedRequestEventArgs) => void): this;\r\n\r\n    once(eventName: \"sessionCreated\", eventHandler: (args: SessionCreatedEventArgs) => void): this;\r\n\r\n    once(eventName: \"beforeDispose\", eventHandler: () => void): this;\r\n\r\n    once(eventName: \"afterDispose\", eventHandler: (callback: () => void) => void): this;\r\n\r\n    once(eventName: \"executorsDisposed\", eventHandler: (callback: () => void) => void): this;\r\n\r\n    removeListener(eventName: \"beforeRequest\", eventHandler: (args: BeforeRequestEventArgs) => void): this;\r\n\r\n    removeListener(eventName: \"succeedRequest\", eventHandler: (args: SucceedRequestEventArgs) => void): this;\r\n\r\n    removeListener(eventName: \"failedRequest\", eventHandler: (args: FailedRequestEventArgs) => void): this;\r\n\r\n    removeListener(eventName: \"sessionCreated\", eventHandler: (args: SessionCreatedEventArgs) => void): void;\r\n\r\n    removeListener(eventName: \"beforeDispose\", eventHandler: () => void): void;\r\n\r\n    removeListener(eventName: \"afterDispose\", eventHandler: (callback: () => void) => void): void;\r\n\r\n    removeListener(eventName: \"executorsDisposed\", eventHandler: (callback: () => void) => void): void;\r\n}\r\n\r\nexport interface IDocumentStore extends IDisposable,\r\n    SessionEventsProxy,\r\n    DocumentStoreEventEmitter {\r\n\r\n    /**\r\n     * Opens document session\r\n     */\r\n    openSession(options: SessionOptions): IDocumentSession;\r\n\r\n    /**\r\n     * Opens document session\r\n     */\r\n    openSession(database: string): IDocumentSession;\r\n\r\n    /**\r\n     * Opens document session\r\n     */\r\n    openSession(): IDocumentSession;\r\n\r\n    /**\r\n     * Subscribe to change notifications from the server\r\n     */\r\n    changes(): IDatabaseChanges;\r\n\r\n    /**\r\n     * Subscribe to change notifications from the server\r\n     */\r\n    changes(database: string): IDatabaseChanges;\r\n\r\n    /**\r\n     * Subscribe to change notifications from the server\r\n     */\r\n    changes(database: string, nodeTag: string): IDatabaseChanges;\r\n\r\n    // TBD 4.1 IDisposable AggressivelyCacheFor(TimeSpan cacheDuration, string database = null);\r\n    // TBD 4.1 IDisposable AggressivelyCache(string database = null);\r\n\r\n    /**\r\n     * Setup the context for no aggressive caching\r\n     *\r\n     * This is mainly useful for internal use inside RavenDB, when we are executing\r\n     * queries that have been marked with WaitForNonStaleResults, we temporarily disable\r\n     * aggressive caching.\r\n     */\r\n    /* TBD 4.1\r\n    disableAggressiveCaching(): IDisposable;\r\n    */\r\n    /**\r\n     * Setup the context for no aggressive caching\r\n     *\r\n     * This is mainly useful for internal use inside RavenDB, when we are executing\r\n     * queries that have been marked with WaitForNonStaleResults, we temporarily disable\r\n     * aggressive caching.\r\n     */\r\n    /* TBD 4.1\r\n    disableAggressiveCaching(database: string): IDisposable;\r\n    */\r\n\r\n    identifier: string;\r\n\r\n    /**\r\n     * Initializes this instance.\r\n     */\r\n    initialize(): IDocumentStore;\r\n\r\n    /**\r\n     * Executes the index creation\r\n     */\r\n    executeIndex(task: IAbstractIndexCreationTask): Promise<void>;\r\n\r\n    /**\r\n     * Executes the index creation\r\n     */\r\n    executeIndex(task: IAbstractIndexCreationTask, database: string): Promise<void>;\r\n\r\n    /**\r\n     * Executes the index creation\r\n     */\r\n    executeIndexes(tasks: IAbstractIndexCreationTask[]): Promise<void>;\r\n\r\n    /**\r\n     * Executes the index creation\r\n     */\r\n    executeIndexes(tasks: IAbstractIndexCreationTask[], database: string): Promise<void>;\r\n\r\n    /**\r\n     * Contains authentication information: client certificate data;\r\n     */\r\n    authOptions: IStoreAuthOptions;\r\n\r\n    hiLoIdGenerator: IHiLoIdGenerator;\r\n\r\n    timeSeries: TimeSeriesOperations;\r\n\r\n    ai: AiOperations;\r\n    /**\r\n     * Gets the conventions\r\n     */\r\n    conventions: DocumentConventions;\r\n\r\n    /**\r\n     * Gets the URLs\r\n     */\r\n    urls: string[];\r\n\r\n    bulkInsert(): BulkInsertOperation;\r\n    bulkInsert(database: string): BulkInsertOperation;\r\n    bulkInsert(database: string, options: BulkInsertOptions): BulkInsertOperation;\r\n    bulkInsert(options: BulkInsertOptions): BulkInsertOperation;\r\n\r\n    subscriptions: DocumentSubscriptions;\r\n\r\n    database: string;\r\n\r\n    getRequestExecutor(databaseName?: string): RequestExecutor;\r\n\r\n    maintenance: MaintenanceOperationExecutor;\r\n\r\n    operations: OperationExecutor;\r\n\r\n    smuggler: DatabaseSmuggler;\r\n\r\n    requestTimeout(timeoutInMs: number): IDisposable;\r\n\r\n    requestTimeout(timeoutInMs: number, database: string): IDisposable;\r\n\r\n    addSessionListener(\r\n        eventName: \"sessionDisposing\", eventHandler: (args: SessionDisposingEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"topologyUpdated\", eventHandler: (args: TopologyUpdatedEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"succeedRequest\", eventHandler: (args: SucceedRequestEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"beforeRequest\", eventHandler: (args: BeforeRequestEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"failedRequest\", eventHandler: (args: FailedRequestEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"beforeStore\", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"afterSaveChanges\", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"beforeQuery\", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"beforeDelete\", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"beforeConversionToDocument\", eventHandler: (eventArgs: BeforeConversionToDocumentEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"afterConversionToDocument\", eventHandler: (eventArgs: AfterConversionToDocumentEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"beforeConversionToEntity\", eventHandler: (eventArgs: BeforeConversionToEntityEventArgs) => void): this;\r\n\r\n    addSessionListener(\r\n        eventName: \"afterConversionToEntity\", eventHandler: (eventArgs: AfterConversionToEntityEventArgs) => void): this;\r\n}\r\n"]}