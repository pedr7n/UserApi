{"version":3,"file":"DocumentStoreBase.js","sourceRoot":"","sources":["../../../src/Documents/DocumentStoreBase.ts"],"names":[],"mappings":"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","sourcesContent":["import { MaintenanceOperationExecutor } from \"./Operations/MaintenanceOperationExecutor.js\";\r\nimport { EventEmitter } from \"node:events\";\r\nimport { IDocumentStore, SessionDisposingEventArgs } from \"./IDocumentStore.js\";\r\nimport { throwError } from \"../Exceptions/index.js\";\r\nimport { validateUri } from \"../Utility/UriUtil.js\";\r\nimport { IAuthOptions } from \"../Auth/AuthOptions.js\";\r\nimport {\r\n    SessionBeforeStoreEventArgs,\r\n    SessionAfterSaveChangesEventArgs,\r\n    SessionBeforeQueryEventArgs,\r\n    SessionBeforeDeleteEventArgs,\r\n    BeforeConversionToDocumentEventArgs,\r\n    AfterConversionToDocumentEventArgs,\r\n    BeforeConversionToEntityEventArgs,\r\n    AfterConversionToEntityEventArgs,\r\n    FailedRequestEventArgs,\r\n    TopologyUpdatedEventArgs,\r\n    BeforeRequestEventArgs,\r\n    SucceedRequestEventArgs\r\n} from \"./Session/SessionEvents.js\";\r\nimport { OperationExecutor } from \"./Operations/OperationExecutor.js\";\r\nimport { IDocumentSession } from \"./Session/IDocumentSession.js\";\r\nimport { DocumentSession } from \"./Session/DocumentSession.js\";\r\nimport { DocumentConventions } from \"./Conventions/DocumentConventions.js\";\r\nimport { RequestExecutor } from \"../Http/RequestExecutor.js\";\r\nimport { IndexCreation } from \"./Indexes/IndexCreation.js\";\r\nimport { PutIndexesOperation } from \"./Operations/Indexes/PutIndexesOperation.js\";\r\nimport { BulkInsertOperation } from \"./BulkInsertOperation.js\";\r\nimport { IDatabaseChanges } from \"./Changes/IDatabaseChanges.js\";\r\nimport { DocumentSubscriptions } from \"./Subscriptions/DocumentSubscriptions.js\";\r\nimport { DocumentStore } from \"./DocumentStore.js\";\r\nimport { TypeUtil } from \"../Utility/TypeUtil.js\";\r\nimport { CaseInsensitiveKeysMap } from \"../Primitives/CaseInsensitiveKeysMap.js\";\r\nimport { SessionOptions } from \"./Session/SessionOptions.js\";\r\nimport { DatabaseSmuggler } from \"./Smuggler/DatabaseSmuggler.js\";\r\nimport { IDisposable } from \"../Types/Contracts.js\";\r\nimport { TimeSeriesOperations } from \"./TimeSeries/TimeSeriesOperations.js\";\r\nimport { IAbstractIndexCreationTask } from \"./Indexes/IAbstractIndexCreationTask.js\";\r\nimport { StringUtil } from \"../Utility/StringUtil.js\";\r\nimport { IHiLoIdGenerator } from \"./Identity/IHiLoIdGenerator.js\";\r\nimport { BulkInsertOptions } from \"./BulkInsert/BulkInsertOptions.js\";\r\nimport { AiOperations } from \"./Operations/AI/AiOperations.js\";\r\n\r\nexport abstract class DocumentStoreBase\r\n    extends EventEmitter\r\n    implements IDocumentStore {\r\n\r\n    /* TBD 4.1\r\n    public abstract disableAggressiveCaching(): IDisposable;\r\n    public abstract disableAggressiveCaching(database: string): IDisposable;\r\n    */\r\n\r\n    protected constructor() {\r\n        super();\r\n        this._subscriptions = new DocumentSubscriptions(this as any as DocumentStore);\r\n    }\r\n\r\n    public abstract dispose(): void;\r\n\r\n    protected _disposed: boolean;\r\n\r\n    public isDisposed(): boolean {\r\n        return this._disposed;\r\n    }\r\n\r\n    // TBD: public abstract IDisposable AggressivelyCacheFor(TimeSpan cacheDuration, string database = null);\r\n\r\n    public abstract changes(): IDatabaseChanges;\r\n    public abstract changes(database: string): IDatabaseChanges;\r\n    public abstract changes(database: string, nodeTag: string): IDatabaseChanges;\r\n\r\n    // TBD: public abstract IDisposable DisableAggressiveCaching(string database = null);\r\n\r\n    public abstract identifier: string;\r\n\r\n    public abstract hiLoIdGenerator: IHiLoIdGenerator;\r\n\r\n    public abstract initialize(): IDocumentStore;\r\n\r\n    public abstract openSession(): IDocumentSession;\r\n    public abstract openSession(database: string): IDocumentSession;\r\n    public abstract openSession(sessionOptions: SessionOptions): IDocumentSession;\r\n\r\n    public executeIndex(task: IAbstractIndexCreationTask): Promise<void>;\r\n    public executeIndex(task: IAbstractIndexCreationTask, database: string): Promise<void>;\r\n    public executeIndex(\r\n        task: IAbstractIndexCreationTask,\r\n        database?: string): Promise<void> {\r\n        this.assertInitialized();\r\n        return task.execute(this, this.conventions, database);\r\n    }\r\n\r\n    public async executeIndexes(tasks: IAbstractIndexCreationTask[]): Promise<void>;\r\n    public async executeIndexes(tasks: IAbstractIndexCreationTask[], database: string): Promise<void>;\r\n    public async executeIndexes(tasks: IAbstractIndexCreationTask[], database?: string): Promise<void> {\r\n        this.assertInitialized();\r\n        const indexesToAdd = IndexCreation.createIndexesToAdd(tasks, this.conventions);\r\n\r\n        await this.maintenance\r\n            .forDatabase(this.getEffectiveDatabase(database))\r\n            .send(new PutIndexesOperation(...indexesToAdd));\r\n    }\r\n\r\n    private _timeSeriesOperation: TimeSeriesOperations;\r\n\r\n    public get timeSeries() {\r\n        if (!this._timeSeriesOperation) {\r\n            this._timeSeriesOperation = new TimeSeriesOperations(this);\r\n        }\r\n\r\n        return this._timeSeriesOperation;\r\n    }\r\n\r\n    private _conventions: DocumentConventions;\r\n\r\n    private _aiOperations: AiOperations;\r\n\r\n    public get ai() {\r\n        if (!this._aiOperations) {\r\n            this._aiOperations = new AiOperations(this);\r\n        }\r\n\r\n        return this._aiOperations;\r\n    }\r\n\r\n    public get conventions() {\r\n        if (!this._conventions) {\r\n            this._conventions = new DocumentConventions();\r\n        }\r\n\r\n        return this._conventions;\r\n    }\r\n\r\n    public set conventions(value) {\r\n        this._assertNotInitialized(\"conventions\");\r\n        this._conventions = value;\r\n    }\r\n\r\n    protected _urls: string[] = [];\r\n\r\n    public get urls() {\r\n        return this._urls;\r\n    }\r\n\r\n    public set urls(value: string[]) {\r\n        this._assertNotInitialized(\"urls\");\r\n\r\n        if (!value || !Array.isArray(value)) {\r\n            throwError(\"InvalidArgumentException\",\r\n                `Invalid urls array passed: ${value.toString()}.`);\r\n        }\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n            if (!value[i]) {\r\n                throwError(\"InvalidArgumentException\",\r\n                    `Url cannot be null or undefined - url index: ${i}`);\r\n            }\r\n\r\n            validateUri(value[i]);\r\n\r\n            value[i] = value[i].replace(/\\/$/, \"\");\r\n        }\r\n\r\n        this._urls = value;\r\n    }\r\n\r\n    protected _initialized: boolean;\r\n\r\n    private _authOptions: IAuthOptions;\r\n\r\n    public abstract bulkInsert(): BulkInsertOperation;\r\n    public abstract bulkInsert(database: string): BulkInsertOperation;\r\n    public abstract bulkInsert(database: string, options: BulkInsertOptions): BulkInsertOperation;\r\n    public abstract bulkInsert(options: BulkInsertOptions): BulkInsertOperation;\r\n\r\n    private readonly _subscriptions: DocumentSubscriptions;\r\n\r\n    public get subscriptions(): DocumentSubscriptions {\r\n        return this._subscriptions;\r\n    }\r\n\r\n    private readonly _lastRaftIndexPerDatabase: Map<string, number> = CaseInsensitiveKeysMap.create();\r\n\r\n    public getLastTransactionIndex(database: string): number {\r\n        const index = this._lastRaftIndexPerDatabase.get(database);\r\n        if (!index) {\r\n            return null;\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    public setLastTransactionIndex(database: string, index: number): void {\r\n        if (!index) {\r\n            return;\r\n        }\r\n\r\n        const initialValue = this._lastRaftIndexPerDatabase.get(database);\r\n        const result = TypeUtil.isUndefined(initialValue)\r\n            ? index\r\n            : Math.max(initialValue, index);\r\n        this._lastRaftIndexPerDatabase.set(database, result);\r\n    }\r\n\r\n    protected _ensureNotDisposed(): void {\r\n        if (this._disposed) {\r\n            throwError(\"InvalidOperationException\", \"The document store has already been disposed and cannot be used\");\r\n        }\r\n    }\r\n\r\n    public assertInitialized(): void {\r\n        if (!this._initialized) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"You cannot open a session or access the database commands before initializing the document store. \"\r\n                + \"Did you forget calling initialize()?\");\r\n        }\r\n    }\r\n\r\n    private _assertNotInitialized(property: string) {\r\n        if (this._initialized) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"You cannot set '\" + property + \"' after the document store has been initialized.\");\r\n        }\r\n    }\r\n\r\n    protected _database: string;\r\n\r\n    public get database(): string {\r\n        return this._database;\r\n    }\r\n\r\n    public set database(value) {\r\n        this._assertNotInitialized(\"database\");\r\n        this._database = value;\r\n    }\r\n\r\n    public get authOptions(): IAuthOptions {\r\n        return this._authOptions;\r\n    }\r\n\r\n    public set authOptions(value: IAuthOptions) {\r\n        this._assertNotInitialized(\"authOptions\");\r\n        this._authOptions = value;\r\n    }\r\n\r\n    public abstract get smuggler(): DatabaseSmuggler;\r\n\r\n    public abstract getRequestExecutor(databaseName?: string): RequestExecutor;\r\n\r\n    // TBD public IDisposable AggressivelyCache(string database = null)\r\n\r\n    protected _eventHandlers: [string, (eventArgs: any) => void][] = [];\r\n\r\n    public addSessionListener(\r\n        eventName: \"sessionDisposing\", eventHandler: (eventArgs: SessionDisposingEventArgs) => void): this;\r\n    public addSessionListener(\r\n        eventName: \"failedRequest\", eventHandler: (eventArgs: FailedRequestEventArgs) => void): this;\r\n    public addSessionListener(\r\n        eventName: \"topologyUpdated\", eventHandler: (eventArgs: TopologyUpdatedEventArgs) => void): this;\r\n    public addSessionListener(\r\n        eventName: \"beforeStore\", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): this;\r\n    public addSessionListener(\r\n        eventName: \"afterSaveChanges\", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): this;\r\n    public addSessionListener(\r\n        eventName: \"beforeQuery\", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): this;\r\n    public addSessionListener(\r\n        eventName: \"beforeDelete\", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): this;\r\n    public addSessionListener(\r\n        eventName: \"beforeConversionToDocument\",\r\n        eventHandler: (eventArgs: BeforeConversionToDocumentEventArgs) => void\r\n    ): this;\r\n    public addSessionListener(\r\n        eventName: \"afterConversionToDocument\",\r\n        eventHandler: (eventArgs: AfterConversionToDocumentEventArgs) => void\r\n    ): this;\r\n    public addSessionListener(\r\n        eventName: \"beforeConversionToEntity\",\r\n        eventHandler: (eventArgs: BeforeConversionToEntityEventArgs) => void\r\n    ): this;\r\n    public addSessionListener(\r\n        eventName: \"afterConversionToEntity\",\r\n        eventHandler: (eventArgs: AfterConversionToEntityEventArgs) => void\r\n    ): this;\r\n    public addSessionListener(\r\n        eventName: \"beforeRequest\",\r\n        eventHandler: (eventArgs: BeforeRequestEventArgs) => void\r\n    ): this;\r\n    public addSessionListener(\r\n        eventName: \"succeedRequest\",\r\n        eventHandler: (eventArgs: SucceedRequestEventArgs) => void\r\n    ): this;\r\n    public addSessionListener(eventName: any, eventHandler: (eventArgs: any) => void): this {\r\n        this._eventHandlers.push([eventName, eventHandler]);\r\n        return this;\r\n    }\r\n\r\n    public removeSessionListener(\r\n        eventName: \"failedRequest\", eventHandler: (eventArgs: FailedRequestEventArgs) => void): void;\r\n    public removeSessionListener(\r\n        eventName: \"topologyUpdated\", eventHandler: (eventArgs: TopologyUpdatedEventArgs) => void): void;\r\n    public removeSessionListener(\r\n        eventName: \"beforeStore\", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): void;\r\n    public removeSessionListener(\r\n        eventName: \"afterSaveChanges\", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): void;\r\n    public removeSessionListener(\r\n        eventName: \"beforeQuery\", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): void;\r\n    public removeSessionListener(\r\n        eventName: \"beforeDelete\", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): void;\r\n    public removeSessionListener(\r\n        eventName: \"beforeConversionToDocument\",\r\n        eventHandler: (eventArgs: BeforeConversionToDocumentEventArgs) => void\r\n    ): void;\r\n    public removeSessionListener(\r\n        eventName: \"afterConversionToDocument\",\r\n        eventHandler: (eventArgs: AfterConversionToDocumentEventArgs) => void\r\n    ): void;\r\n    public removeSessionListener(\r\n        eventName: \"beforeConversionToEntity\",\r\n        eventHandler: (eventArgs: BeforeConversionToEntityEventArgs) => void\r\n    ): void;\r\n    public removeSessionListener(\r\n        eventName: \"afterConversionToEntity\",\r\n        eventHandler: (eventArgs: AfterConversionToEntityEventArgs) => void\r\n    ): void;\r\n    public removeSessionListener(\r\n        eventName: \"beforeRequest\",\r\n        eventHandler: (eventArgs: BeforeRequestEventArgs) => void\r\n    ): void;\r\n    public removeSessionListener(\r\n        eventName: \"succeedRequest\",\r\n        eventHandler: (eventArgs: SucceedRequestEventArgs) => void\r\n    ): void;\r\n    public removeSessionListener(eventName: any, eventHandler: (eventArgs: any) => void): void {\r\n        const toRemove = this._eventHandlers\r\n            .find(x => x[0] === eventName && x[1] === eventHandler);\r\n        if (toRemove) {\r\n            this._eventHandlers.splice(this._eventHandlers.indexOf(toRemove), 1);\r\n        }\r\n    }\r\n\r\n    public registerEvents(requestExecutor: RequestExecutor): void;\r\n    public registerEvents(session: DocumentSession): void;\r\n    public registerEvents(requestExecutorOrSession: RequestExecutor | DocumentSession): void {\r\n        for (const [eventName, eventHandler] of this._eventHandlers) {\r\n            if (eventName === \"failedRequest\"\r\n                || eventName === \"topologyUpdated\"\r\n                || eventName === \"beforeRequest\"\r\n                || eventName === \"succeedRequest\") {\r\n                (requestExecutorOrSession as RequestExecutor).on(eventName as any, eventHandler);\r\n            } else {\r\n                (requestExecutorOrSession as DocumentSession).on(eventName, eventHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    public abstract maintenance: MaintenanceOperationExecutor;\r\n\r\n    public abstract operations: OperationExecutor;\r\n\r\n    public abstract requestTimeout(timeoutInMs: number): IDisposable;\r\n\r\n    public abstract requestTimeout(timeoutInMs: number, database: string): IDisposable;\r\n\r\n    protected _assertValidConfiguration(): void {\r\n        this.conventions.validate();\r\n    }\r\n\r\n    public getEffectiveDatabase(database: string): string {\r\n        return DocumentStoreBase.getEffectiveDatabase(this, database);\r\n    }\r\n\r\n    public static getEffectiveDatabase(store: IDocumentStore, database: string) {\r\n        if (!database) {\r\n            database = store.database;\r\n        }\r\n\r\n        if (!StringUtil.isNullOrWhitespace(database)) {\r\n            return database;\r\n        }\r\n\r\n        throwError(\"InvalidArgumentException\", \"Cannot determine database to operate on. \" +\r\n            \"Please either specify 'database' directly as an action parameter \" +\r\n            \"or set the default database to operate on using 'DocumentStore.database' property. \" +\r\n            \"Did you forget to pass 'database' parameter?\");\r\n    }\r\n}\r\n"]}