{"version":3,"file":"AbstractIndexCreationTaskBase.js","sourceRoot":"","sources":["../../../../src/Documents/Indexes/AbstractIndexCreationTaskBase.ts"],"names":[],"mappings":";;;AAIA,yFAAmF;AACnF,qFAA+E;AAE/E,kEAA4D;AAI5D,MAAsB,6BAClB,SAAQ,4DAA2B;IAO5B,WAAW,CAAsB;IACjC,QAAQ,CAAgB;IACxB,QAAQ,CAAgB;IAExB,cAAc,CAAsB;IACpC,8BAA8B,CAAiC;IAC/D,gBAAgB,CAAmB;IACnC,KAAK,CAAa;IAClB,qBAAqB,CAAa;IAElC,aAAa,CAAC,UAAkB,EAAE,WAAmB;QACxD,IAAI,CAAC,qBAAqB,KAAK,EAAE,CAAC;QAElC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;IAC/D,CAAC;IAcM,KAAK,CAAC,OAAO,CAChB,KAAqB,EACrB,WAAiC,EACjC,QAAiB;QACjB,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC5B,OAAO,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC;QAED,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;IACxD,CAAC;IAEO,KAAK,CAAC,SAAS,CACnB,KAAqB,EAAE,WAAgC,EAAE,QAAgB;QACzE,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC;QAExC,IAAI,CAAC;YACD,QAAQ,GAAG,wCAAiB,CAAC,oBAAoB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YACnE,IAAI,CAAC,WAAW,GAAG,WAAW,IAAI,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC;YAErG,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;YACrD,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YAE3C,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC7C,CAAC;YAED,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC7C,CAAC;YAED,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACvC,CAAC;YAED,IAAI,IAAI,CAAC,8BAA8B,EAAE,CAAC;gBACtC,eAAe,CAAC,8BAA8B,GAAG,IAAI,CAAC,8BAA8B,CAAC;YACzF,CAAC;YAED,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,eAAe,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;YACzD,CAAC;YAED,MAAM,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC;iBACxC,IAAI,CAAC,IAAI,4CAAmB,CAAC,eAAe,CAAC,CAAC,CAAC;QACxD,CAAC;gBAAS,CAAC;YACP,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC;QACtC,CAAC;IACL,CAAC;CAEJ;AArFD,sEAqFC","sourcesContent":["import { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { IndexDefinition } from \"./IndexDefinition.js\";\r\nimport { IndexPriority, IndexLockMode, IndexState, SearchEngineType } from \"./Enums.js\";\r\nimport { IDocumentStore } from \"../IDocumentStore.js\";\r\nimport { PutIndexesOperation } from \"../Operations/Indexes/PutIndexesOperation.js\";\r\nimport { AbstractCommonApiForIndexes } from \"./AbstractCommonApiForIndexes.js\";\r\nimport { IAbstractIndexCreationTask } from \"./IAbstractIndexCreationTask.js\";\r\nimport { DocumentStoreBase } from \"../DocumentStoreBase.js\";\r\nimport { IndexDeploymentMode } from \"./IndexDeploymentMode.js\";\r\nimport { ArchivedDataProcessingBehavior } from \"../DataArchival/ArchivedDataProcessingBehavior.js\";\r\n\r\nexport abstract class AbstractIndexCreationTaskBase<TIndexDefinition extends IndexDefinition>\r\n    extends AbstractCommonApiForIndexes implements IAbstractIndexCreationTask {\r\n\r\n    /**\r\n     *  Creates the index definition.\r\n     */\r\n    public abstract createIndexDefinition(): TIndexDefinition;\r\n\r\n    public conventions: DocumentConventions;\r\n    public priority: IndexPriority;\r\n    public lockMode: IndexLockMode;\r\n\r\n    public deploymentMode: IndexDeploymentMode;\r\n    public archivedDataProcessingBehavior: ArchivedDataProcessingBehavior;\r\n    public searchEngineType: SearchEngineType;\r\n    public state: IndexState;\r\n    public compoundFieldsStrings: string[][];\r\n\r\n    public compoundField(firstField: string, secondField: string) {\r\n        this.compoundFieldsStrings ??= [];\r\n\r\n        this.compoundFieldsStrings.push([firstField, secondField]);\r\n    }\r\n\r\n    /**\r\n     * Executes the index creation against the specified document store.\r\n     */\r\n    public async execute(store: IDocumentStore): Promise<void>;\r\n    /**\r\n     * Executes the index creation against the specified document store.\r\n     */\r\n    public async execute(store: IDocumentStore, conventions: DocumentConventions): Promise<void>;\r\n    /**\r\n     * Executes the index creation against the specified document store.\r\n     */\r\n    public async execute(store: IDocumentStore, conventions: DocumentConventions, database: string): Promise<void>;\r\n    public async execute(\r\n        store: IDocumentStore,\r\n        conventions?: DocumentConventions,\r\n        database?: string): Promise<void> {\r\n        if (!conventions && !database) {\r\n            return store.executeIndex(this);\r\n        }\r\n\r\n        return this._putIndex(store, conventions, database);\r\n    }\r\n\r\n    private async _putIndex(\r\n        store: IDocumentStore, conventions: DocumentConventions, database: string): Promise<void> {\r\n        const oldConventions = this.conventions;\r\n\r\n        try {\r\n            database = DocumentStoreBase.getEffectiveDatabase(store, database);\r\n            this.conventions = conventions || this.conventions || store.getRequestExecutor(database).conventions;\r\n\r\n            const indexDefinition = this.createIndexDefinition();\r\n            indexDefinition.name = this.getIndexName();\r\n\r\n            if (this.lockMode) {\r\n                indexDefinition.lockMode = this.lockMode;\r\n            }\r\n\r\n            if (this.priority) {\r\n                indexDefinition.priority = this.priority;\r\n            }\r\n\r\n            if (this.state) {\r\n                indexDefinition.state = this.state;\r\n            }\r\n\r\n            if (this.archivedDataProcessingBehavior) {\r\n                indexDefinition.archivedDataProcessingBehavior = this.archivedDataProcessingBehavior;\r\n            }\r\n\r\n            if (this.deploymentMode) {\r\n                indexDefinition.deploymentMode = this.deploymentMode;\r\n            }\r\n\r\n            await store.maintenance.forDatabase(database)\r\n                .send(new PutIndexesOperation(indexDefinition));\r\n        } finally {\r\n            this.conventions = oldConventions;\r\n        }\r\n    }\r\n\r\n}\r\n"]}