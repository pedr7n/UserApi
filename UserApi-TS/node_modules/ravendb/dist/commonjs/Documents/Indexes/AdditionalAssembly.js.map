{"version":3,"file":"AdditionalAssembly.js","sourceRoot":"","sources":["../../../../src/Documents/Indexes/AdditionalAssembly.ts"],"names":[],"mappings":";;;AAAA,wDAAuD;AACvD,+DAAyD;AAGzD,MAAa,kBAAkB;IAEpB,YAAY,CAAS;IACrB,YAAY,CAAS;IACrB,WAAW,CAAS;IACpB,cAAc,CAAS;IACvB,gBAAgB,CAAS;IACzB,MAAM,CAAW;IAExB;QACI,QAAQ;IACZ,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,MAAgB;QACrC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjC,IAAA,qBAAU,EAAC,0BAA0B,EAAE,+BAA+B,CAAC,CAAC;QAC5E,CAAC;QAED,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACpD,kBAAkB,CAAC,MAAM,GAAG,MAAM,CAAC;QACnC,OAAO,kBAAkB,CAAC;IAC9B,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,YAAoB,EAAE,SAAmB,IAAI;QACnE,IAAI,0BAAU,CAAC,kBAAkB,CAAC,YAAY,CAAC,EAAE,CAAC;YAC9C,IAAA,qBAAU,EAAC,0BAA0B,EAAE,4CAA4C,CAAC,CAAC;QACzF,CAAC;QAED,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACpD,kBAAkB,CAAC,YAAY,GAAG,YAAY,CAAC;QAC/C,kBAAkB,CAAC,MAAM,GAAG,MAAM,CAAC;QACnC,OAAO,kBAAkB,CAAC;IAC9B,CAAC;IAEM,MAAM,CAAC,QAAQ,CAAC,YAAoB,EAAE,SAAmB,IAAI;QAChE,IAAI,0BAAU,CAAC,kBAAkB,CAAC,YAAY,CAAC,EAAE,CAAC;YAC9C,IAAA,qBAAU,EAAC,0BAA0B,EAAE,4CAA4C,CAAC,CAAC;QACzF,CAAC;QAED,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACpD,kBAAkB,CAAC,YAAY,GAAG,YAAY,CAAC;QAC/C,kBAAkB,CAAC,MAAM,GAAG,MAAM,CAAC;QACnC,OAAO,kBAAkB,CAAC;IAC9B,CAAC;IAEM,MAAM,CAAC,SAAS,CAAC,WAAmB,EAAE,cAAsB,EAAE,mBAA2B,IAAI,EAAE,SAAmB,IAAI;QACzH,IAAI,0BAAU,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE,CAAC;YAC7C,IAAA,qBAAU,EAAC,0BAA0B,EAAE,2CAA2C,CAAC,CAAC;QACxF,CAAC;QACD,IAAI,0BAAU,CAAC,kBAAkB,CAAC,cAAc,CAAC,EAAE,CAAC;YAChD,IAAA,qBAAU,EAAC,0BAA0B,EAAE,8CAA8C,CAAC,CAAC;QAC3F,CAAC;QAED,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACpD,kBAAkB,CAAC,WAAW,GAAG,WAAW,CAAC;QAC7C,kBAAkB,CAAC,cAAc,GAAG,cAAc,CAAC;QACnD,kBAAkB,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACvD,kBAAkB,CAAC,MAAM,GAAG,MAAM,CAAC;QACnC,OAAO,kBAAkB,CAAC;IAC9B,CAAC;CACJ;AA5DD,gDA4DC","sourcesContent":["import { throwError } from \"../../Exceptions/index.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\n\r\n\r\nexport class AdditionalAssembly {\r\n\r\n    public assemblyName: string;\r\n    public assemblyPath: string;\r\n    public packageName: string;\r\n    public packageVersion: string;\r\n    public packageSourceUrl: string;\r\n    public usings: string[];\r\n\r\n    private constructor() {\r\n        // empty\r\n    }\r\n\r\n    public static onlyUsings(usings: string[]) {\r\n        if (!usings || usings.length === 0) {\r\n            throwError(\"InvalidArgumentException\", \"Using cannot be null or empty\");\r\n        }\r\n\r\n        const additionalAssembly = new AdditionalAssembly();\r\n        additionalAssembly.usings = usings;\r\n        return additionalAssembly;\r\n    }\r\n\r\n    public static fromRuntime(assemblyName: string, usings: string[] = null) {\r\n        if (StringUtil.isNullOrWhitespace(assemblyName)) {\r\n            throwError(\"InvalidArgumentException\", \"AssemblyName cannot be null or whitespace.\");\r\n        }\r\n\r\n        const additionalAssembly = new AdditionalAssembly();\r\n        additionalAssembly.assemblyName = assemblyName;\r\n        additionalAssembly.usings = usings;\r\n        return additionalAssembly;\r\n    }\r\n\r\n    public static fromPath(assemblyPath: string, usings: string[] = null) {\r\n        if (StringUtil.isNullOrWhitespace(assemblyPath)) {\r\n            throwError(\"InvalidArgumentException\", \"AssemblyPath cannot be null or whitespace.\");\r\n        }\r\n\r\n        const additionalAssembly = new AdditionalAssembly();\r\n        additionalAssembly.assemblyPath = assemblyPath;\r\n        additionalAssembly.usings = usings;\r\n        return additionalAssembly;\r\n    }\r\n\r\n    public static fromNuGet(packageName: string, packageVersion: string, packageSourceUrl: string = null, usings: string[] = null) {\r\n        if (StringUtil.isNullOrWhitespace(packageName)) {\r\n            throwError(\"InvalidArgumentException\", \"PackageName cannot be null or whitespace.\");\r\n        }\r\n        if (StringUtil.isNullOrWhitespace(packageVersion)) {\r\n            throwError(\"InvalidArgumentException\", \"PackageVersion cannot be null or whitespace.\");\r\n        }\r\n\r\n        const additionalAssembly = new AdditionalAssembly();\r\n        additionalAssembly.packageName = packageName;\r\n        additionalAssembly.packageVersion = packageVersion;\r\n        additionalAssembly.packageSourceUrl = packageSourceUrl;\r\n        additionalAssembly.usings = usings;\r\n        return additionalAssembly;\r\n    }\r\n}\r\n"]}