{"version":3,"file":"AbstractCsharpIndexCreationTask.js","sourceRoot":"","sources":["../../../../src/Documents/Indexes/AbstractCsharpIndexCreationTask.ts"],"names":[],"mappings":";;;AAAA,kFAA4E;AAC5E,6DAA+E;AAC/E,+FAAyF;AACzF,qDAA6C;AAC7C,+DAAyD;AAEzD;;;;;GAKG;AACH,MAAsB,+BAAgC,SAAQ,sEAAgC;IAEnF,GAAG,CAAS;IACZ,MAAM,CAAS;IAEtB;;;OAGG;IACH,IAAW,WAAW;QAClB,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;IACzB,CAAC;IAED;;OAEG;IACI,qBAAqB;QACxB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,GAAG,IAAI,4CAAmB,EAAE,CAAC;QACjD,CAAC;QAED,MAAM,sBAAsB,GAAG,IAAI,2CAAsB,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAC/E,sBAAsB,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC5D,sBAAsB,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAChE,sBAAsB,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACtC,sBAAsB,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC5C,sBAAsB,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAC1D,sBAAsB,CAAC,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAClE,sBAAsB,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QACpE,sBAAsB,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC;QAC1E,sBAAsB,CAAC,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAA;QACrE,sBAAsB,CAAC,wBAAwB,GAAG,IAAI,CAAC,wBAAwB,CAAC;QAChF,sBAAsB,CAAC,4CAA4C,GAAG,IAAI,CAAC,4CAA4C,CAAC;QACxH,sBAAsB,CAAC,+BAA+B,GAAG,IAAI,CAAC,+BAA+B,CAAC;QAC9F,sBAAsB,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAClE,sBAAsB,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;QACxE,sBAAsB,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAC1D,sBAAsB,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAChD,sBAAsB,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAChD,sBAAsB,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1C,sBAAsB,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC5D,sBAAsB,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC;QAC1E,sBAAsB,CAAC,8BAA8B,GAAG,IAAI,CAAC,8BAA8B,CAAC;QAE5F,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,KAAK,MAAM,EAAE,CAAC;YAC5D,sBAAsB,CAAC,aAAa,CAAC,sBAAO,CAAC,kCAAkC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC7G,CAAC;aAAM,IAAI,CAAC,0BAAU,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC;YACxD,sBAAsB,CAAC,aAAa,CAAC,sBAAO,CAAC,kCAAkC,CAAC,GAAG,OAAO,CAAC;QAC/F,CAAC;QAED,OAAO,sBAAsB,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACtE,CAAC;CACJ;AApDD,0EAoDC","sourcesContent":["import { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { IndexDefinition, IndexDefinitionBuilder } from \"./IndexDefinition.js\";\r\nimport { AbstractGenericIndexCreationTask } from \"./AbstractGenericIndexCreationTask.js\";\r\nimport { INDEXES } from \"../../Constants.js\";\r\nimport { ObjectUtil } from \"../../Utility/ObjectUtil.js\";\r\n\r\n/**\r\n * Base class for creating indexes using C# code in string.\r\n * If you want to create JavaScript based index, please use:\r\n *\r\n * __AbstractJavaScriptIndexCreationTask__\r\n */\r\nexport abstract class AbstractCsharpIndexCreationTask extends AbstractGenericIndexCreationTask {\r\n\r\n    public map: string;\r\n    public reduce: string;\r\n\r\n    /**\r\n     * Gets a value indicating whether this instance is map reduce index definition\r\n     * @return if index is of type: Map/Reduce\r\n     */\r\n    public get isMapReduce(): boolean {\r\n        return !!this.reduce;\r\n    }\r\n\r\n    /**\r\n     * Creates the index definition.\r\n     */\r\n    public createIndexDefinition(): IndexDefinition {\r\n        if (!this.conventions) {\r\n            this.conventions = new DocumentConventions();\r\n        }\r\n\r\n        const indexDefinitionBuilder = new IndexDefinitionBuilder(this.getIndexName());\r\n        indexDefinitionBuilder.indexesStrings = this.indexesStrings;\r\n        indexDefinitionBuilder.analyzersStrings = this.analyzersStrings;\r\n        indexDefinitionBuilder.map = this.map;\r\n        indexDefinitionBuilder.reduce = this.reduce;\r\n        indexDefinitionBuilder.storesStrings = this.storesStrings;\r\n        indexDefinitionBuilder.suggestionsOptions = this.indexSuggestions;\r\n        indexDefinitionBuilder.termVectorsStrings = this.termVectorsStrings;\r\n        indexDefinitionBuilder.spatialIndexesStrings = this.spatialOptionsStrings;\r\n        indexDefinitionBuilder.vectorFieldStrings = this.vectorOptionsStrings\r\n        indexDefinitionBuilder.outputReduceToCollection = this.outputReduceToCollection;\r\n        indexDefinitionBuilder.patternForOutputReduceToCollectionReferences = this.patternForOutputReduceToCollectionReferences;\r\n        indexDefinitionBuilder.patternReferencesCollectionName = this.patternReferencesCollectionName;\r\n        indexDefinitionBuilder.additionalSources = this.additionalSources;\r\n        indexDefinitionBuilder.additionalAssemblies = this.additionalAssemblies;\r\n        indexDefinitionBuilder.configuration = this.configuration;\r\n        indexDefinitionBuilder.lockMode = this.lockMode;\r\n        indexDefinitionBuilder.priority = this.priority;\r\n        indexDefinitionBuilder.state = this.state;\r\n        indexDefinitionBuilder.deploymentMode = this.deploymentMode;\r\n        indexDefinitionBuilder.compoundFieldsStrings = this.compoundFieldsStrings;\r\n        indexDefinitionBuilder.archivedDataProcessingBehavior = this.archivedDataProcessingBehavior;\r\n\r\n        if (this.searchEngineType && this.searchEngineType !== \"None\") {\r\n            indexDefinitionBuilder.configuration[INDEXES.INDEXING_STATIC_SEARCH_ENGINE_TYPE] = this.searchEngineType;\r\n        } else if (!ObjectUtil.isEmpty(this.vectorOptionsStrings)) {\r\n            indexDefinitionBuilder.configuration[INDEXES.INDEXING_STATIC_SEARCH_ENGINE_TYPE] = \"Corax\";\r\n        }\r\n\r\n        return indexDefinitionBuilder.toIndexDefinition(this.conventions);\r\n    }\r\n}\r\n"]}