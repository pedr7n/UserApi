{"version":3,"file":"AbstractIndexDefinitionBuilder.js","sourceRoot":"","sources":["../../../../src/Documents/Indexes/AbstractIndexDefinitionBuilder.ts"],"names":[],"mappings":";;;AAGA,wDAAuD;AAEvD,iEAA2D;AAK3D,MAAsB,8BAA8B;IAC7B,UAAU,CAAS;IAE/B,MAAM,CAAS;IAEf,aAAa,CAAkC;IAC/C,cAAc,CAAmC;IACjD,gBAAgB,CAA4B;IAC5C,kBAAkB,CAAc;IAChC,kBAAkB,CAAqC;IACvD,qBAAqB,CAAoC;IACzD,kBAAkB,CAAwC;IAC1D,QAAQ,CAAgB;IACxB,QAAQ,CAAgB;IACxB,KAAK,CAAa;IAClB,qBAAqB,CAAa;IAClC,cAAc,CAAsB;IACpC,wBAAwB,CAAS;IACjC,4CAA4C,CAAS;IACrD,+BAA+B,CAAS;IAExC,iBAAiB,CAAyB;IAC1C,oBAAoB,CAAuB;IAC3C,aAAa,CAAqB;IAGzC,oEAAoE;IACpE,YAAsB,SAAiB;QACnC,IAAI,CAAC,UAAU,GAAG,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QACrD,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;YAC/B,IAAA,qBAAU,EAAC,0BAA0B,EAAE,wDAAwD,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;QACvH,CAAC;QACD,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,EAAE,CAAC;QACpC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC5B,CAAC;IAEM,iBAAiB,CAAC,WAAgC,EAAE,cAAuB,IAAI;QAClF,IAAI,CAAC;YACD,MAAM,eAAe,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;YACnD,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;YACvC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YACrC,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YACzC,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YACzC,eAAe,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;YACrD,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACnC,eAAe,CAAC,wBAAwB,GAAG,IAAI,CAAC,wBAAwB,CAAC;YACzE,eAAe,CAAC,4CAA4C,GAAG,IAAI,CAAC,4CAA4C,CAAC;YACjH,eAAe,CAAC,+BAA+B,GAAG,IAAI,CAAC,+BAA+B,CAAC;YACvF,eAAe,CAAC,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAE5D,MAAM,WAAW,GAA4C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC;iBAC9G,GAAG,CAAC,CAAE,IAAI,EAAE,EAAE,CACX,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YAEvB,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,cAAc,EAClD,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC;YAClD,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,aAAa,EACjD,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;YACjD,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,gBAAgB,EACpD,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC;YAClD,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,kBAAkB,EACtD,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC;YACpD,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,qBAAqB,EACzD,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;YACjD,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,WAAW,EAC1C,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;YACrD,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,kBAAkB,EACtD,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;YAEhD,eAAe,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;YAC3D,eAAe,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;YACjE,eAAe,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;YAEnD,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YAEtD,OAAO,eAAe,CAAC;QAC3B,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,IAAA,qBAAU,EAAC,2BAA2B,EAAE,yBAAyB,GAAG,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;QAC9F,CAAC;IACL,CAAC;IAMO,YAAY,CAChB,eAAgC,EAChC,MAAkC,EAClC,MAAoD;QAEpD,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YAC1C,MAAM,QAAQ,GAAM,MAAM,CAAC,SAAS,CAAC,CAAC;YACtC,MAAM,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC;gBAC3C,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,wCAAiB,EAAE,CAAC;YAEjE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC5B,CAAC;IACL,CAAC;CACJ;AAzGD,wEAyGC","sourcesContent":["import { IndexConfiguration, IndexDefinition } from \"./IndexDefinition.js\";\r\nimport { FieldIndexing, FieldStorage, FieldTermVector, IndexLockMode, IndexPriority, IndexState } from \"./Enums.js\";\r\nimport { SpatialOptions } from \"./Spatial.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { IndexFieldOptions } from \"./IndexFieldOptions.js\";\r\nimport { IndexDeploymentMode } from \"./IndexDeploymentMode.js\";\r\nimport { AdditionalAssembly } from \"./AdditionalAssembly.js\";\r\nimport { FieldVectorOptions } from \"../Queries/VectorSearch/VectorSearchOptions.js\";\r\n\r\nexport abstract class AbstractIndexDefinitionBuilder<TIndexDefinition extends IndexDefinition> {\r\n    protected readonly _indexName: string;\r\n\r\n    public reduce: string;\r\n\r\n    public storesStrings: { [key: string]: FieldStorage };\r\n    public indexesStrings: { [key: string]: FieldIndexing };\r\n    public analyzersStrings: { [key: string]: string };\r\n    public suggestionsOptions: Set<string>;\r\n    public termVectorsStrings: { [key: string]: FieldTermVector };\r\n    public spatialIndexesStrings: { [key: string]: SpatialOptions };\r\n    public vectorFieldStrings: { [key: string]: FieldVectorOptions };\r\n    public lockMode: IndexLockMode;\r\n    public priority: IndexPriority;\r\n    public state: IndexState;\r\n    public compoundFieldsStrings: string[][];\r\n    public deploymentMode: IndexDeploymentMode;\r\n    public outputReduceToCollection: string;\r\n    public patternForOutputReduceToCollectionReferences: string;\r\n    public patternReferencesCollectionName: string;\r\n\r\n    public additionalSources: Record<string, string>;\r\n    public additionalAssemblies: AdditionalAssembly[];\r\n    public configuration: IndexConfiguration;\r\n\r\n\r\n    // noinspection TypeScriptAbstractClassConstructorCanBeMadeProtected\r\n    protected constructor(indexName: string) {\r\n        this._indexName = indexName || this.constructor.name;\r\n        if (this._indexName.length > 256) {\r\n            throwError(\"InvalidArgumentException\", \"The index name is limited to 256 characters, but was: \" + this._indexName);\r\n        }\r\n        this.storesStrings = {};\r\n        this.indexesStrings = {};\r\n        this.suggestionsOptions = new Set();\r\n        this.analyzersStrings = {};\r\n        this.termVectorsStrings = {};\r\n        this.spatialIndexesStrings = {};\r\n        this.vectorFieldStrings = {};\r\n\r\n        this.configuration = {};\r\n    }\r\n\r\n    public toIndexDefinition(conventions: DocumentConventions, validateMap: boolean = true) {\r\n        try {\r\n            const indexDefinition = this._newIndexDefinition();\r\n            indexDefinition.name = this._indexName;\r\n            indexDefinition.reduce = this.reduce;\r\n            indexDefinition.lockMode = this.lockMode;\r\n            indexDefinition.priority = this.priority;\r\n            indexDefinition.deploymentMode = this.deploymentMode;\r\n            indexDefinition.state = this.state;\r\n            indexDefinition.outputReduceToCollection = this.outputReduceToCollection;\r\n            indexDefinition.patternForOutputReduceToCollectionReferences = this.patternForOutputReduceToCollectionReferences;\r\n            indexDefinition.patternReferencesCollectionName = this.patternReferencesCollectionName;\r\n            indexDefinition.compoundFields = this.compoundFieldsStrings;\r\n\r\n            const suggestions: { [suggestionOption: string]: boolean } = Object.fromEntries(Array.from(this.suggestionsOptions)\r\n                .map(( item) =>\r\n                    [item, true]));\r\n\r\n            this._applyValues(indexDefinition, this.indexesStrings,\r\n                (options, value) => options.indexing = value);\r\n            this._applyValues(indexDefinition, this.storesStrings,\r\n                (options, value) => options.storage = value);\r\n            this._applyValues(indexDefinition, this.analyzersStrings,\r\n                (options, value) => options.analyzer = value);\r\n            this._applyValues(indexDefinition, this.termVectorsStrings,\r\n                (options, value) => options.termVector = value);\r\n            this._applyValues(indexDefinition, this.spatialIndexesStrings,\r\n                (options, value) => options.spatial = value);\r\n            this._applyValues(indexDefinition, suggestions,\r\n                (options, value) => options.suggestions = value);\r\n            this._applyValues(indexDefinition, this.vectorFieldStrings,\r\n                (options, value) => options.vector = value);\r\n\r\n            indexDefinition.additionalSources = this.additionalSources;\r\n            indexDefinition.additionalAssemblies = this.additionalAssemblies;\r\n            indexDefinition.configuration = this.configuration;\r\n\r\n            this._toIndexDefinition(indexDefinition, conventions);\r\n\r\n            return indexDefinition;\r\n        } catch (err) {\r\n            throwError(\"IndexCompilationException\", \"Failed to create index \" + this._indexName, err);\r\n        }\r\n    }\r\n\r\n    protected abstract _newIndexDefinition(): TIndexDefinition;\r\n\r\n    protected abstract _toIndexDefinition(indexDefinition: TIndexDefinition, conventions: DocumentConventions);\r\n\r\n    private _applyValues<T>(\r\n        indexDefinition: IndexDefinition,\r\n        values: { [fieldName: string]: T },\r\n        action: (options: IndexFieldOptions, val: T) => void) {\r\n\r\n        for (const fieldName of Object.keys(values)) {\r\n            const fieldVal: T = values[fieldName];\r\n            const field = indexDefinition.fields[fieldName] =\r\n                indexDefinition.fields[fieldName] || new IndexFieldOptions();\r\n\r\n            action(field, fieldVal);\r\n        }\r\n    }\r\n}"]}