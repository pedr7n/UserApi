{"version":3,"file":"IndexDefinitionHelper.js","sourceRoot":"","sources":["../../../../src/Documents/Indexes/IndexDefinitionHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { IndexType } from \"./Enums.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { IndexSourceType } from \"./IndexSourceType.js\";\r\n\r\nconst COMMENT_REGEX = new RegExp(\"(?:/\\\\*(?:[^*]|(?:\\\\*+[^*/]))*\\\\*+/)|(?://.*)\", \"gm\");\r\n\r\nexport class IndexDefinitionHelper {\r\n    public static detectStaticIndexType(map: string, reduce: string): IndexType {\r\n        if (!map) {\r\n            throwError(\"InvalidArgumentException\", \"Index definitions contains no Maps\");\r\n        }\r\n\r\n        map = IndexDefinitionHelper._stripComments(map);\r\n        map = IndexDefinitionHelper._unifyWhiteSpace(map);\r\n\r\n        const mapLower = map.toLocaleLowerCase();\r\n\r\n        if (mapLower.startsWith(\"from\")\r\n            || mapLower.startsWith(\"docs\")\r\n            || (mapLower.startsWith(\"timeseries\") && !mapLower.startsWith(\"timeseries.map\"))\r\n            || (mapLower.startsWith(\"counters\") && !mapLower.startsWith(\"counters.map\"))) {\r\n            // C# indexes must start with \"from\" for query syntax or\r\n            // \"docs\" for method syntax\r\n\r\n            if (StringUtil.isNullOrWhitespace(reduce)) {\r\n                return \"Map\";\r\n            }\r\n            return \"MapReduce\";\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(reduce)) {\r\n            return \"JavaScriptMap\";\r\n        }\r\n\r\n        return \"JavaScriptMapReduce\";\r\n    }\r\n\r\n    /**\r\n     * Extract runtime enum notation\r\n     * @param functionBody\r\n     */\r\n    public static extractEnumNotation(functionBody: string): string {\r\n        functionBody = functionBody.trim();\r\n\r\n        if (functionBody.endsWith(\";\")) {\r\n            return IndexDefinitionHelper.extractEnumNotation(functionBody.substring(0, functionBody.length - 1));\r\n        }\r\n\r\n        if (functionBody.startsWith(\"return\")) {\r\n            return IndexDefinitionHelper.extractEnumNotation(functionBody.substring(\"return\".length));\r\n        }\r\n\r\n        const openBracketIdx = functionBody.indexOf(\"{\");\r\n        const closeBracketIdx = functionBody.lastIndexOf(\"}\");\r\n\r\n        if (openBracketIdx < closeBracketIdx && openBracketIdx !== -1 && closeBracketIdx !== -1) {\r\n            const body = functionBody.substring(openBracketIdx + 1, closeBracketIdx);\r\n            return IndexDefinitionHelper.extractEnumNotation(body);\r\n        }\r\n\r\n        const hasArrow = functionBody.indexOf(\"=>\");\r\n        if (hasArrow !== -1) {\r\n            return IndexDefinitionHelper.extractEnumNotation(functionBody.substring(hasArrow + 2));\r\n        }\r\n\r\n        const openParentesis = functionBody.indexOf(\"(\");\r\n        const closeParentesis = functionBody.lastIndexOf(\")\");\r\n\r\n        if (openParentesis < closeParentesis && openParentesis !== -1 && closeParentesis !== -1) {\r\n            const body = functionBody.substring(openParentesis + 1, closeParentesis);\r\n            return IndexDefinitionHelper.extractEnumNotation(body);\r\n        }\r\n\r\n        return functionBody;\r\n    }\r\n\r\n    public static detectStaticIndexSourceType(map: string): IndexSourceType {\r\n        if (StringUtil.isNullOrWhitespace(map)) {\r\n            throwError(\"InvalidArgumentException\", \"Value cannot be null or whitespace.\");\r\n        }\r\n\r\n        map = IndexDefinitionHelper._stripComments(map);\r\n        map = IndexDefinitionHelper._unifyWhiteSpace(map);\r\n\r\n        // detect first supported syntax: timeseries.Companies.HeartRate.Where\r\n        const mapLower = map.toLocaleLowerCase();\r\n        if (mapLower.startsWith(\"timeseries\")) {\r\n            return \"TimeSeries\";\r\n        }\r\n\r\n        if (mapLower.startsWith(\"counters\")) {\r\n            return \"Counters\";\r\n        }\r\n\r\n        if (mapLower.startsWith(\"from\")) {\r\n            // detect `from ts in timeseries` or `from ts in timeseries.Users.HeartRate`\r\n\r\n            const tokens = mapLower.split(\" \", 4)\r\n                .filter(x => !StringUtil.isNullOrEmpty(x));\r\n\r\n            if (tokens.length >= 4 && \"in\" === tokens[2].toLocaleLowerCase()) {\r\n                if (tokens[3].startsWith(\"timeseries\")) {\r\n                    return \"TimeSeries\";\r\n                }\r\n                if (tokens[3].startsWith(\"counters\")) {\r\n                    return \"Counters\";\r\n                }\r\n            }\r\n        }\r\n\r\n        // fallback to documents based index\r\n        return \"Documents\";\r\n    }\r\n\r\n    private static _stripComments(input: string): string {\r\n        return input.replace(COMMENT_REGEX, \"\").trim();\r\n    }\r\n\r\n    private static _unifyWhiteSpace(input: string): string {\r\n        return input.replace(/(\\s+)/g, \" \");\r\n    }\r\n}\r\n"]}