{"version":3,"file":"AbstractGenericIndexCreationTask.js","sourceRoot":"","sources":["../../../../src/Documents/Indexes/AbstractGenericIndexCreationTask.ts"],"names":[],"mappings":";;;AAAA,yFAAmF;AAEnF,6CAAqE;AACrE,qDAA+C;AAG/C,wDAAuD;AAKvD;;GAEG;AACH,MAAsB,gCAAiE,SAAQ,gEAA8C;IAE/H,aAAa,CAAiD;IAC9D,cAAc,CAAkD;IAChE,gBAAgB,CAA2C;IAC3D,gBAAgB,CAAgC;IAChD,kBAAkB,CAAoD;IACtE,qBAAqB,CAAmD;IACxE,oBAAoB,CAAuD;IAE3E,wBAAwB,CAAS;IACjC,4CAA4C,CAAS;IACrD,+BAA+B,CAAS;IAElD;QACI,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,aAAa,GAAG,EAAoD,CAAC;QAC1E,IAAI,CAAC,cAAc,GAAG,EAAqD,CAAC;QAC5E,IAAI,CAAC,gBAAgB,GAAG,EAA8C,CAAC;QACvE,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAA4B,CAAC;QAC5D,IAAI,CAAC,kBAAkB,GAAG,EAAuD,CAAC;QAClF,IAAI,CAAC,qBAAqB,GAAG,EAAsD,CAAC;QACpF,IAAI,CAAC,oBAAoB,GAAG,EAA0D,CAAC;IAC3F,CAAC;IAID;;OAEG;IACO,KAAK,CAAC,KAA+B,EAAE,QAAuB;QACpE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;IAC1C,CAAC;IAED;;OAEG;IACO,OAAO,CAAC,KAA+B,EAAE,QAAuE;QACtH,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,IAAI,kCAAqB,EAAE,CAAC,CAAC;IAC9E,CAAC;IAED,gGAAgG;IAEtF,cAAc,CAAC,OAAqB;QAC1C,IAAI,CAAC,aAAa,CAAC,wBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;IACjF,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,KAAa,EAAE,OAAqB;QAChD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IACxC,CAAC;IAED;;OAEG;IACO,OAAO,CAAC,KAA+B,EAAE,QAAgB;QAC/D,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;IAC5C,CAAC;IAED;;OAEG;IACO,UAAU,CAAC,KAA+B,EAAE,UAA2B;QAC7E,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC;IAChD,CAAC;IAES,UAAU,CAAC,KAA+B;QAChD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAES,WAAW,CAAC,QAA4B;QAC9C,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,IAAA,qBAAU,EAAC,0BAA0B,EAAE,yBAAyB,CAAC,CAAC;QACtE,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC7B,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAES,WAAW,CAAC,KAA+B,EAAE,MAA0B;QAC7E,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;IAC9C,CAAC;CACJ;AAxFD,4EAwFC","sourcesContent":["import { AbstractIndexCreationTaskBase } from \"./AbstractIndexCreationTaskBase.js\";\r\nimport { FieldStorage, FieldIndexing, FieldTermVector } from \"./Enums.js\";\r\nimport { SpatialOptions, SpatialOptionsFactory } from \"./Spatial.js\";\r\nimport { CONSTANTS } from \"../../Constants.js\";\r\nimport { IndexDefinition } from \"./IndexDefinition.js\";\r\nimport { AdditionalAssembly } from \"./AdditionalAssembly.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { FieldVectorOptions } from \"../Queries/VectorSearch/VectorSearchOptions.js\";\r\n\r\ntype FieldOrAllFields<TField> = TField | \"__all_fields\";\r\n\r\n/**\r\n * Base class for creating indexes\r\n */\r\nexport abstract class AbstractGenericIndexCreationTask<TField extends string = string> extends AbstractIndexCreationTaskBase<IndexDefinition> {\r\n\r\n    protected storesStrings: Record<FieldOrAllFields<TField>, FieldStorage>;\r\n    protected indexesStrings: Record<FieldOrAllFields<TField>, FieldIndexing>;\r\n    protected analyzersStrings: Record<FieldOrAllFields<TField>, string>;\r\n    protected indexSuggestions: Set<FieldOrAllFields<TField>>;\r\n    protected termVectorsStrings: Record<FieldOrAllFields<TField>, FieldTermVector>;\r\n    protected spatialOptionsStrings: Record<FieldOrAllFields<TField>, SpatialOptions>;\r\n    protected vectorOptionsStrings: Record<FieldOrAllFields<TField>, FieldVectorOptions>;\r\n\r\n    protected outputReduceToCollection: string;\r\n    protected patternForOutputReduceToCollectionReferences: string;\r\n    protected patternReferencesCollectionName: string;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.storesStrings = {} as Record<FieldOrAllFields<TField>, FieldStorage>;\r\n        this.indexesStrings = {} as Record<FieldOrAllFields<TField>, FieldIndexing>;\r\n        this.analyzersStrings = {} as Record<FieldOrAllFields<TField>, string>;\r\n        this.indexSuggestions = new Set<FieldOrAllFields<TField>>();\r\n        this.termVectorsStrings = {} as Record<FieldOrAllFields<TField>, FieldTermVector>;\r\n        this.spatialOptionsStrings = {} as Record<FieldOrAllFields<TField>, SpatialOptions>;\r\n        this.vectorOptionsStrings = {} as Record<FieldOrAllFields<TField>, FieldVectorOptions>;\r\n    }\r\n\r\n    abstract get isMapReduce(): boolean;\r\n\r\n    /**\r\n     * Register a field to be indexed\r\n     */\r\n    protected index(field: FieldOrAllFields<TField>, indexing: FieldIndexing): void {\r\n        this.indexesStrings[field] = indexing;\r\n    }\r\n\r\n    /**\r\n     * Register a field to be spatially indexed\r\n     */\r\n    protected spatial(field: FieldOrAllFields<TField>, indexing: (spatialOptsFactory: SpatialOptionsFactory) => SpatialOptions): void {\r\n        this.spatialOptionsStrings[field] = indexing(new SpatialOptionsFactory());\r\n    }\r\n\r\n    // TBD protected void Store(Expression<Func<TReduceResult, object>> field, FieldStorage storage)\r\n\r\n    protected storeAllFields(storage: FieldStorage): void {\r\n        this.storesStrings[CONSTANTS.Documents.Indexing.Fields.ALL_FIELDS] = storage;\r\n    }\r\n\r\n    /**\r\n     * Register a field to be stored\r\n     */\r\n    protected store(field: TField, storage: FieldStorage): void {\r\n        this.storesStrings[field] = storage;\r\n    }\r\n\r\n    /**\r\n     * Register a field to be analyzed\r\n     */\r\n    protected analyze(field: FieldOrAllFields<TField>, analyzer: string): void {\r\n        this.analyzersStrings[field] = analyzer;\r\n    }\r\n\r\n    /**\r\n     * Register a field to have term vectors\r\n     */\r\n    protected termVector(field: FieldOrAllFields<TField>, termVector: FieldTermVector): void {\r\n        this.termVectorsStrings[field] = termVector;\r\n    }\r\n\r\n    protected suggestion(field: FieldOrAllFields<TField>): void {\r\n        this.indexSuggestions.add(field);\r\n    }\r\n\r\n    protected addAssembly(assembly: AdditionalAssembly) {\r\n        if (!assembly) {\r\n            throwError(\"InvalidArgumentException\", \"Assembly cannot be null\");\r\n        }\r\n\r\n        if (!this.additionalAssemblies) {\r\n            this.additionalAssemblies = [];\r\n        }\r\n\r\n        this.additionalAssemblies.push(assembly);\r\n    }\r\n\r\n    protected vectorField(field: FieldOrAllFields<TField>, vector: FieldVectorOptions): void {\r\n        this.vectorOptionsStrings[field] = vector;\r\n    }\r\n}\r\n"]}