{"version":3,"file":"AbstractMultiMapCountersIndexCreationTask.js","sourceRoot":"","sources":["../../../../../src/Documents/Indexes/Counters/AbstractMultiMapCountersIndexCreationTask.ts"],"names":[],"mappings":";;;AAAA,+GAAyG;AACzG,2DAA0D;AAE1D,2FAAqF;AACrF,qFAA+E;AAE/E,MAAsB,yCAA0C,SAAQ,sFAAwC;IAC3F,IAAI,GAAa,EAAE,CAAC;IAE3B,OAAO,CAAC,GAAW;QACzB,IAAI,CAAC,GAAG,EAAE,CAAC;YACP,IAAA,qBAAU,EAAC,0BAA0B,EAAE,oBAAoB,CAAC,CAAC;QACjE,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,qBAAqB;QACjB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,GAAG,IAAI,4CAAmB,EAAE,CAAC;QACjD,CAAC;QAED,MAAM,sBAAsB,GAAG,IAAI,kEAA8B,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAEvF,sBAAsB,CAAC,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC;QAC7D,sBAAsB,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACjE,sBAAsB,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7C,sBAAsB,CAAC,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;QAC3D,sBAAsB,CAAC,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACnE,sBAAsB,CAAC,kBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QACrE,sBAAsB,CAAC,qBAAqB,GAAG,IAAI,CAAC,sBAAsB,CAAC;QAC3E,sBAAsB,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC;QACvE,sBAAsB,CAAC,wBAAwB,GAAG,IAAI,CAAC,yBAAyB,CAAC;QACjF,sBAAsB,CAAC,4CAA4C,GAAG,IAAI,CAAC,6CAA6C,CAAC;QACzH,sBAAsB,CAAC,+BAA+B,GAAG,IAAI,CAAC,gCAAgC,CAAC;QAC/F,sBAAsB,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAClE,sBAAsB,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;QACxE,sBAAsB,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAC1D,sBAAsB,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAChD,sBAAsB,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAChD,sBAAsB,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1C,sBAAsB,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAE5D,MAAM,eAAe,GAAG,sBAAsB,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAC1F,eAAe,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE1C,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AA1CD,8FA0CC","sourcesContent":["import { AbstractGenericCountersIndexCreationTask } from \"./AbstractGenericCountersIndexCreationTask.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { CountersIndexDefinition } from \"./CountersIndexDefinition.js\";\r\nimport { CountersIndexDefinitionBuilder } from \"./CountersIndexDefinitionBuilder.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\n\r\nexport abstract class AbstractMultiMapCountersIndexCreationTask extends AbstractGenericCountersIndexCreationTask {\r\n    private readonly maps: string[] = [];\r\n\r\n    protected _addMap(map: string) {\r\n        if (!map) {\r\n            throwError(\"InvalidArgumentException\", \"Map cannot be null\");\r\n        }\r\n\r\n        this.maps.push(map);\r\n    }\r\n\r\n    createIndexDefinition(): CountersIndexDefinition {\r\n        if (!this.conventions) {\r\n            this.conventions = new DocumentConventions();\r\n        }\r\n\r\n        const indexDefinitionBuilder = new CountersIndexDefinitionBuilder(this.getIndexName());\r\n\r\n        indexDefinitionBuilder.indexesStrings = this._indexesStrings;\r\n        indexDefinitionBuilder.analyzersStrings = this._analyzersStrings;\r\n        indexDefinitionBuilder.reduce = this._reduce;\r\n        indexDefinitionBuilder.storesStrings = this._storesStrings;\r\n        indexDefinitionBuilder.suggestionsOptions = this._indexSuggestions;\r\n        indexDefinitionBuilder.termVectorsStrings = this._termVectorsStrings;\r\n        indexDefinitionBuilder.spatialIndexesStrings = this._spatialOptionsStrings;\r\n        indexDefinitionBuilder.vectorFieldStrings = this._vectorOptionsStrings;\r\n        indexDefinitionBuilder.outputReduceToCollection = this._outputReduceToCollection;\r\n        indexDefinitionBuilder.patternForOutputReduceToCollectionReferences = this._patternForOutputReduceToCollectionReferences;\r\n        indexDefinitionBuilder.patternReferencesCollectionName = this._patternReferencesCollectionName;\r\n        indexDefinitionBuilder.additionalSources = this.additionalSources;\r\n        indexDefinitionBuilder.additionalAssemblies = this.additionalAssemblies;\r\n        indexDefinitionBuilder.configuration = this.configuration;\r\n        indexDefinitionBuilder.lockMode = this.lockMode;\r\n        indexDefinitionBuilder.priority = this.priority;\r\n        indexDefinitionBuilder.state = this.state;\r\n        indexDefinitionBuilder.deploymentMode = this.deploymentMode;\r\n\r\n        const indexDefinition = indexDefinitionBuilder.toIndexDefinition(this.conventions, false);\r\n        indexDefinition.maps = new Set(this.maps);\r\n\r\n        return indexDefinition;\r\n    }\r\n}\r\n\r\n"]}