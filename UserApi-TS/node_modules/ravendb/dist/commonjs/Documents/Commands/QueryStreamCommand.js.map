{"version":3,"file":"QueryStreamCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/QueryStreamCommand.ts"],"names":[],"mappings":";;;AACA,gEAAmF;AAEnF,4DAAuE;AAEvE,wDAAuD;AAKvD,MAAa,kBAAmB,SAAQ,8BAAkC;IAErD,YAAY,CAAsB;IAClC,WAAW,CAAa;IAEzC,YAAmB,WAAgC,EAAE,KAAiB;QAClE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,IAAA,qBAAU,EAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,KAAK,EAAE,CAAC;YACT,IAAA,qBAAU,EAAC,0BAA0B,EAAE,uBAAuB,CAAC,CAAC;QACpE,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IACjC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,cAAc,IAAI,CAAC,QAAQ,+BAA+B;YAC1E,IAAI,EAAE,IAAA,+BAAe,EAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC;YAC1D,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;SACjD,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,eAAe,CACxB,KAAgB,EAChB,QAAsB,EACtB,UAAoB,EACpB,GAAW;QACX,IAAI,CAAC,MAAM,GAAG;YACV,QAAQ;YACR,MAAM,EAAE,UAAU;SACrB,CAAC;QAEF,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA9CD,gDA8CC","sourcesContent":["import { Readable } from \"node:stream\";\r\nimport { RavenCommand, ResponseDisposeHandling } from \"../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { IndexQuery, writeIndexQuery } from \"../Queries/IndexQuery.js\";\r\nimport { StreamResultResponse } from \"./StreamResultResponse.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters, HttpResponse } from \"../../Primitives/Http.js\";\r\nimport { HttpCache } from \"../../Http/HttpCache.js\";\r\n\r\nexport class QueryStreamCommand extends RavenCommand<StreamResultResponse> {\r\n\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _indexQuery: IndexQuery;\r\n\r\n    public constructor(conventions: DocumentConventions, query: IndexQuery) {\r\n        super();\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null.\");\r\n        }\r\n\r\n        if (!query) {\r\n            throwError(\"InvalidArgumentException\", \"Query cannot be null.\");\r\n        }\r\n\r\n        this._conventions = conventions;\r\n        this._indexQuery = query;\r\n        this._responseType = \"Empty\";\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        return {\r\n            method: \"POST\",\r\n            uri: `${node.url}/databases/${node.database}/streams/queries?format=jsonl`,\r\n            body: writeIndexQuery(this._conventions, this._indexQuery),\r\n            headers: this._headers().typeAppJson().build()\r\n        };\r\n    }\r\n\r\n    public async processResponse(\r\n        cache: HttpCache,\r\n        response: HttpResponse,\r\n        bodyStream: Readable,\r\n        url: string): Promise<ResponseDisposeHandling> {\r\n        this.result = {\r\n            response,\r\n            stream: bodyStream\r\n        };\r\n\r\n        return \"Manually\";\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}