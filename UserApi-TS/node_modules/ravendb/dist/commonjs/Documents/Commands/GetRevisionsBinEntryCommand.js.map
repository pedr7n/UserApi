{"version":3,"file":"GetRevisionsBinEntryCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/GetRevisionsBinEntryCommand.ts"],"names":[],"mappings":";;;AACA,2DAAqD;AAErD,qEAA+D;AAC/D,gEAA0D;AAK1D,MAAa,2BAA4B,SAAQ,8BAA+B;IAC3D,YAAY,CAAsB;IAClC,MAAM,CAAS;IACf,SAAS,CAAS;IAClB,kBAAkB,CAAS;IAI5C,YAAmB,WAAgC,EAAE,wBAAyC,EAAE,QAAiB;QAC7G,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAEhC,IAAI,sBAAQ,CAAC,QAAQ,CAAC,wBAAwB,CAAC,EAAE,CAAC;YAC9C,IAAI,CAAC,kBAAkB,GAAG,wBAAwB,CAAC;YACnD,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,OAAO;QACX,CAAC;QAGD,IAAI,CAAC,MAAM,GAAG,wBAAwB,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,uBAAuB,GAAG,IAAI,CAAC,MAAM,CAAC;QAE3F,IAAI,sBAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YAC7C,GAAG,IAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;QACzC,CAAC;QAED,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,GAAG,IAAI,qBAAqB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QAC3D,CAAC;QAED,OAAO;YACH,GAAG;SACN,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,OAAO;QACX,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM;YACP,MAAM,4CAAmB,CAAC,iCAAiC,CACvD,UAAU,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAEtD,OAAO,IAAc,CAAC;IAC1B,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA1DD,kEA0DC","sourcesContent":["import { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { GetDocumentsCommand } from \"./GetDocumentsCommand.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { IRavenArrayResult } from \"../../Types/index.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\n\r\nexport class GetRevisionsBinEntryCommand extends RavenCommand<IRavenArrayResult> {\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n    private readonly _continuationToken: string;\r\n\r\n    public constructor(conventions: DocumentConventions, continuationToken: string)\r\n    public constructor(conventions: DocumentConventions, start: number, pageSize: number)\r\n    public constructor(conventions: DocumentConventions, startOrContinuationToken: number | string, pageSize?: number) {\r\n        super();\r\n\r\n        this._conventions = conventions;\r\n\r\n        if (TypeUtil.isString(startOrContinuationToken)) {\r\n            this._continuationToken = startOrContinuationToken;\r\n            this._start = 0;\r\n            this._pageSize = null;\r\n            return;\r\n        }\r\n\r\n\r\n        this._start = startOrContinuationToken;\r\n        this._pageSize = pageSize;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/databases/\" + node.database + \"/revisions/bin?start=\" + this._start;\r\n\r\n        if (TypeUtil.isNullOrUndefined(this._pageSize)) {\r\n            uri += \"&pageSize=\" + this._pageSize;\r\n        }\r\n\r\n        if (this._continuationToken) {\r\n            uri += \"&continuationToken=\" + this._continuationToken;\r\n        }\r\n\r\n        return {\r\n            uri\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this.result = null;\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n        this.result =\r\n            await GetDocumentsCommand.parseDocumentsResultResponseAsync(\r\n                bodyStream, this._conventions, b => body = b);\r\n\r\n        return body as string;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}