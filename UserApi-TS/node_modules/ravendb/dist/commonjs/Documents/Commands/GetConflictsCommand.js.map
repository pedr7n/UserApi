{"version":3,"file":"GetConflictsCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/GetConflictsCommand.ts"],"names":[],"mappings":";;;AACA,gEAA0D;AAM1D,2DAAqD;AAErD,MAAa,mBAAoB,SAAQ,8BAAgC;IAEpD,GAAG,CAAS;IACZ,YAAY,CAAsB;IAEnD,YAAmB,EAAU,EAAE,WAAgC;QAC3D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC9C,+BAA+B,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrE,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;SACN,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAqC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEnH,MAAM,EAAE,OAAO,EAAE,GAAG,UAAU,EAAE,GAAG,OAAO,CAAC;QAE3C,IAAI,CAAC,MAAM,GAAG;YACV,GAAG,UAAU;YACb,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBACvB,GAAG,CAAC;gBACJ,YAAY,EAAE,sBAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC;aACnD,CAAC,CAAC;SACN,CAAC;QAEF,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA5CD,kDA4CC","sourcesContent":["import { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { GetConflictsResult } from \"./GetConflictsResult.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { ServerResponse } from \"../../Types/index.js\";\r\nimport { DateUtil } from \"../../Utility/DateUtil.js\";\r\n\r\nexport class GetConflictsCommand extends RavenCommand<GetConflictsResult> {\r\n\r\n    private readonly _id: string;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(id: string, conventions: DocumentConventions) {\r\n        super();\r\n        this._id = id;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database\r\n            + \"/replication/conflicts?docId=\" + encodeURIComponent(this._id);\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const payload = await this._defaultPipeline<ServerResponse<GetConflictsResult>>(_ => body = _).process(bodyStream);\r\n\r\n        const { results, ...otherProps } = payload;\r\n\r\n        this.result = {\r\n            ...otherProps,\r\n            results: results.map(r => ({\r\n                ...r,\r\n                lastModified: DateUtil.utc.parse(r.lastModified)\r\n            }))\r\n        };\r\n\r\n        return body;\r\n    }\r\n}\r\n"]}