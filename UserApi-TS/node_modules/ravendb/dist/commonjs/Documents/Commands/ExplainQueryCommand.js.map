{"version":3,"file":"ExplainQueryCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/ExplainQueryCommand.ts"],"names":[],"mappings":";;;AACA,gEAA0D;AAE1D,4DAAuE;AACvE,wDAAuD;AASvD,MAAa,mBAAoB,SAAQ,8BAAkC;IAEtD,YAAY,CAAsB;IAClC,WAAW,CAAa;IAEzC,YAAmB,WAAgC,EAAE,UAAsB;QACvE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,IAAA,qBAAU,EAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAA,qBAAU,EAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,wBAAwB,CAAC;QAEhF,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QACtD,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG;YACH,IAAI,EAAE,IAAA,+BAAe,EAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC;YAC1D,OAAO;SACV,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,OAAO;QACX,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QAExB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAClD,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzB,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAyB,CAAC;QAC/D,IAAI,CAAC,cAAc,EAAE,CAAC;YAClB,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7B,OAAO;QACX,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC;QAC7B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAxDD,kDAwDC","sourcesContent":["import { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { IndexQuery, writeIndexQuery } from \"../Queries/IndexQuery.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport interface ExplainQueryResult {\r\n    index: string;\r\n    reason: string;\r\n}\r\n\r\nexport class ExplainQueryCommand extends RavenCommand<ExplainQueryResult[]> {\r\n\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _indexQuery: IndexQuery;\r\n\r\n    public constructor(conventions: DocumentConventions, indexQuery: IndexQuery) {\r\n        super();\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n\r\n        if (!indexQuery) {\r\n            throwError(\"InvalidArgumentException\", \"IndexQuery cannot be null\");\r\n        }\r\n\r\n        this._conventions = conventions;\r\n        this._indexQuery = indexQuery;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/queries?debug=explain\";\r\n\r\n        const headers = this._headers().typeAppJson().build();\r\n        return {\r\n            method: \"POST\",\r\n            uri,\r\n            body: writeIndexQuery(this._conventions, this._indexQuery),\r\n            headers\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this.result = null;\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n\r\n        const data = await this._defaultPipeline(_ => body = _)\r\n            .process(bodyStream);\r\n\r\n        const explainResults = data[\"results\"] as ExplainQueryResult[];\r\n        if (!explainResults) {\r\n            this._throwInvalidResponse();\r\n            return;\r\n        }\r\n\r\n        this.result = explainResults;\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}