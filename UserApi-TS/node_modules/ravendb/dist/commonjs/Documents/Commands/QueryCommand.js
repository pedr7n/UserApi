"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryCommand = void 0;
const QueryResult_js_1 = require("../Queries/QueryResult.js");
const IndexQuery_js_1 = require("../Queries/IndexQuery.js");
const index_js_1 = require("../../Exceptions/index.js");
const QueryTimings_js_1 = require("../Queries/Timings/QueryTimings.js");
const StringUtil_js_1 = require("../../Utility/StringUtil.js");
const StreamUtil_js_1 = require("../../Utility/StreamUtil.js");
const ObjectUtil_js_1 = require("../../Utility/ObjectUtil.js");
const AbstractQueryCommand_js_1 = require("./AbstractQueryCommand.js");
const DateUtil_js_1 = require("../../Utility/DateUtil.js");
class QueryCommand extends AbstractQueryCommand_js_1.AbstractQueryCommand {
    _conventions;
    _indexQuery;
    _session;
    constructor(session, indexQuery, opts) {
        super(indexQuery, !indexQuery.disableCaching, opts?.metadataOnly, opts?.indexEntriesOnly, false);
        this._session = session;
        if (!indexQuery) {
            (0, index_js_1.throwError)("InvalidArgumentException", "indexQuery cannot be null.");
        }
        this._indexQuery = indexQuery;
        this._conventions = session.conventions;
    }
    getQueryHash() {
        return this._indexQuery.getQueryHash(this._session.conventions.objectMapper);
    }
    _getContent() {
        return (0, IndexQuery_js_1.writeIndexQuery)(this._session.conventions, this._indexQuery);
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this.result = null;
            return;
        }
        let body = null;
        this.result = await QueryCommand.parseQueryResultResponseAsync(bodyStream, this._session.conventions, fromCache, b => body = b);
        return body;
    }
    static async parseQueryResultResponseAsync(bodyStream, conventions, fromCache, bodyCallback) {
        const body = await (0, StreamUtil_js_1.readToEnd)(bodyStream);
        bodyCallback?.(body);
        const parsedJson = JSON.parse(body);
        const queryResult = QueryCommand._mapToLocalObject(parsedJson, conventions);
        if (fromCache) {
            queryResult.durationInMs = -1;
            if (queryResult.timingsInMs) {
                queryResult.timingsInMs.durationInMs = -1;
                queryResult.timingsInMs = null;
            }
        }
        return queryResult;
    }
    static _mapTimingsToLocalObject(timings) {
        if (!timings) {
            return undefined;
        }
        const mapped = new QueryTimings_js_1.QueryTimings();
        mapped.durationInMs = timings.DurationInMs;
        mapped.timings = timings.Timings ? {} : undefined;
        if (timings.Timings) {
            for (const time of Object.keys(timings.Timings)) {
                mapped.timings[StringUtil_js_1.StringUtil.uncapitalize(time)] = QueryCommand._mapTimingsToLocalObject(timings.Timings[time]);
            }
        }
        return mapped;
    }
    static _mapToLocalObject(json, conventions) {
        const props = {
            results: json.Results.map(x => ObjectUtil_js_1.ObjectUtil.transformDocumentKeys(x, conventions)),
            includes: ObjectUtil_js_1.ObjectUtil.mapIncludesToLocalObject(json.Includes, conventions),
            indexName: json.IndexName,
            indexTimestamp: DateUtil_js_1.DateUtil.utc.parse(json.IndexTimestamp),
            includedPaths: json.IncludedPaths,
            isStale: json.IsStale,
            skippedResults: json.SkippedResults,
            totalResults: json.TotalResults,
            highlightings: json.Highlightings,
            explanations: json.Explanations,
            timingsInMs: json.TimingsInMs,
            lastQueryTime: DateUtil_js_1.DateUtil.utc.parse(json.LastQueryTime),
            durationInMs: json.DurationInMs,
            resultEtag: json.ResultEtag,
            nodeTag: json.NodeTag,
            scannedResults: json.ScannedResults,
            counterIncludes: ObjectUtil_js_1.ObjectUtil.mapCounterIncludesToLocalObject(json.CounterIncludes),
            includedCounterNames: json.IncludedCounterNames,
            timeSeriesIncludes: ObjectUtil_js_1.ObjectUtil.mapTimeSeriesIncludesToLocalObject(json.TimeSeriesIncludes),
            compareExchangeValueIncludes: ObjectUtil_js_1.ObjectUtil.mapCompareExchangeToLocalObject(json.CompareExchangeValueIncludes),
            revisionIncludes: json.RevisionIncludes,
            timeSeriesFields: json.TimeSeriesFields,
            timings: QueryCommand._mapTimingsToLocalObject(json.Timings)
        };
        return Object.assign(new QueryResult_js_1.QueryResult(), props);
    }
}
exports.QueryCommand = QueryCommand;
//# sourceMappingURL=QueryCommand.js.map