import { Readable } from "node:stream";
import { RavenCommand, ResponseDisposeHandling } from "../../Http/RavenCommand.js";
import { DocumentConventions } from "../Conventions/DocumentConventions.js";
import { IndexQuery } from "../Queries/IndexQuery.js";
import { StreamResultResponse } from "./StreamResultResponse.js";
import { ServerNode } from "../../Http/ServerNode.js";
import { HttpRequestParameters, HttpResponse } from "../../Primitives/Http.js";
import { HttpCache } from "../../Http/HttpCache.js";
export declare class QueryStreamCommand extends RavenCommand<StreamResultResponse> {
    private readonly _conventions;
    private readonly _indexQuery;
    constructor(conventions: DocumentConventions, query: IndexQuery);
    createRequest(node: ServerNode): HttpRequestParameters;
    processResponse(cache: HttpCache, response: HttpResponse, bodyStream: Readable, url: string): Promise<ResponseDisposeHandling>;
    get isReadRequest(): boolean;
}
//# sourceMappingURL=QueryStreamCommand.d.ts.map