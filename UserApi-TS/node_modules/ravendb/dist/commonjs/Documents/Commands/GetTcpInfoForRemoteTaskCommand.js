"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTcpInfoForRemoteTaskCommand = void 0;
const RavenCommand_js_1 = require("../../Http/RavenCommand.js");
const index_js_1 = require("../../Exceptions/index.js");
class GetTcpInfoForRemoteTaskCommand extends RavenCommand_js_1.RavenCommand {
    _remoteDatabase;
    _remoteTask;
    _tag;
    _verifyDatabase;
    _requestedNode;
    constructor(tag, remoteDatabase, remoteTask, verifyDatabase = false) {
        super();
        if (!remoteDatabase) {
            (0, index_js_1.throwError)("InvalidArgumentException", "RemoteDatabase cannot be null");
        }
        this._remoteDatabase = remoteDatabase;
        if (!remoteTask) {
            (0, index_js_1.throwError)("InvalidArgumentException", "RemoteTask cannot be null");
        }
        this._remoteTask = remoteTask;
        this._tag = tag;
        this._verifyDatabase = verifyDatabase;
        this.timeout = 15_000;
    }
    createRequest(node) {
        let uri = node.url + "/info/remote-task/tcp?" +
            "database=" + this._urlEncode(this._remoteDatabase) +
            "&remote-task=" + this._urlEncode(this._remoteTask) +
            "&tag=" + this._urlEncode(this._tag);
        if (this._verifyDatabase) {
            uri += "&verify-database=true";
        }
        this._requestedNode = node;
        return {
            method: "GET",
            uri
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
    getRequestedNode() {
        return this._requestedNode;
    }
    get isReadRequest() {
        return false;
    }
}
exports.GetTcpInfoForRemoteTaskCommand = GetTcpInfoForRemoteTaskCommand;
//# sourceMappingURL=GetTcpInfoForRemoteTaskCommand.js.map