{"version":3,"file":"GetSubscriptionsCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/GetSubscriptionsCommand.ts"],"names":[],"mappings":";;;AAAA,gEAA0D;AAM1D,MAAa,uBAAwB,SAAQ,8BAAiC;IAEzD,MAAM,CAAS;IACf,SAAS,CAAS;IAEnC,YAAmB,KAAa,EAAE,QAAgB;QAC9C,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC9C,uBAAuB,GAAG,IAAI,CAAC,MAAM,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;QAE5E,OAAO;YACH,GAAG;SACN,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,OAAO;QACX,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAClD,OAAO,CAAC,UAAU,CAAC,CAAC;QACzB,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAwB,CAAC;QACvD,IAAI,CAAC,OAAO,EAAE,CAAC;YACX,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7B,OAAO;QACX,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;QACtB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA3CD,0DA2CC","sourcesContent":["import { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { SubscriptionState } from \"../Subscriptions/SubscriptionState.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\n\r\nexport class GetSubscriptionsCommand extends RavenCommand<SubscriptionState[]> {\r\n\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n\r\n    public constructor(start: number, pageSize: number) {\r\n        super();\r\n\r\n        this._start = start;\r\n        this._pageSize = pageSize;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database\r\n            + \"/subscriptions?start=\" + this._start + \"&pageSize=\" + this._pageSize;\r\n\r\n        return {\r\n            uri\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this.result = null;\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n        const data = await this._defaultPipeline(_ => body = _)\r\n            .process(bodyStream);\r\n        const results = data[\"results\"] as SubscriptionState[];\r\n        if (!results) {\r\n            this._throwInvalidResponse();\r\n            return;\r\n        }\r\n\r\n        this.result = results;\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return true;\r\n    }\r\n}\r\n"]}