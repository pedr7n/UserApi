{"version":3,"file":"StreamCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/StreamCommand.ts"],"names":[],"mappings":";;;AACA,gEAAmF;AAEnF,wDAAuD;AAKvD,MAAa,aAAc,SAAQ,8BAAkC;IAChD,IAAI,CAAS;IAE9B,YAAmB,GAAW;QAC1B,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,GAAG,EAAE,CAAC;YACP,IAAA,qBAAU,EAAC,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IACjC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,OAAO;YACH,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,cAAc,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE;SAC7D,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,eAAe,CACxB,KAAgB,EAChB,QAAsB,EACtB,UAAoB,EACpB,GAAW;QACX,IAAI,CAAC,MAAM,GAAG;YACV,QAAQ;YACR,MAAM,EAAE,UAAU;SACrB,CAAC;QAEF,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AApCD,sCAoCC","sourcesContent":["import { Readable } from \"node:stream\";\r\nimport { RavenCommand, ResponseDisposeHandling } from \"../../Http/RavenCommand.js\";\r\nimport { StreamResultResponse } from \"./StreamResultResponse.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters, HttpResponse } from \"../../Primitives/Http.js\";\r\nimport { HttpCache } from \"../../Http/HttpCache.js\";\r\n\r\nexport class StreamCommand extends RavenCommand<StreamResultResponse> {\r\n    private readonly _url: string;\r\n\r\n    public constructor(url: string) {\r\n        super();\r\n\r\n        if (!url) {\r\n            throwError(\"InvalidArgumentException\", \"Url cannot be null.\");\r\n        }\r\n\r\n        this._url = url;\r\n        this._responseType = \"Empty\";\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        return {\r\n            uri: `${node.url}/databases/${node.database}/${this._url}`\r\n        };\r\n    }\r\n\r\n    public async processResponse(\r\n        cache: HttpCache,\r\n        response: HttpResponse,\r\n        bodyStream: Readable,\r\n        url: string): Promise<ResponseDisposeHandling> {\r\n        this.result = {\r\n            response,\r\n            stream: bodyStream\r\n        };\r\n\r\n        return \"Manually\";\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return true;\r\n    }\r\n}\r\n"]}