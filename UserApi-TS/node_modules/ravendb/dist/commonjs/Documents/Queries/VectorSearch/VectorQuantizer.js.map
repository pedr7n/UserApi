{"version":3,"file":"VectorQuantizer.js","sourceRoot":"","sources":["../../../../../src/Documents/Queries/VectorSearch/VectorQuantizer.ts"],"names":[],"mappings":";;;AAAA,MAAa,eAAe;IACxB;;;;;;;OAOG;IACI,MAAM,CAAC,MAAM,CAAC,YAAqC;QACtD,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QACnC,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAErC,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC9B,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,CAAC;QAED,MAAM,WAAW,GAAG,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,WAAW,CAAC;QAE9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC9B,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;QACtC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QAE1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACzB,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,MAAM,CAAC,YAAqC;QACtD,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QACnC,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC;QAE5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACpC,MAAM,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAEhC,IAAI,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;gBACvB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC;YAC5C,CAAC;QACL,CAAC;QAED,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;CACJ;AA1DD,0CA0DC","sourcesContent":["export class VectorQuantizer {\r\n    /**\r\n     * Converts a float array to an int8 array.\r\n     * Finds the maximum absolute value and scales all values to fit in int8 range (-127 to 127).\r\n     * Appends the maximum absolute value as a float at the end.\r\n     *\r\n     * @param rawEmbedding The float array to convert\r\n     * @returns A new array with the quantized values\r\n     */\r\n    public static toInt8(rawEmbedding: number[] | Float32Array): number[] {\r\n        const length = rawEmbedding.length;\r\n        const result = new Array(length + 4);\r\n\r\n        let maxAbsValue = 0;\r\n        for (let i = 0; i < length; i++) {\r\n            maxAbsValue = Math.max(maxAbsValue, Math.abs(rawEmbedding[i]));\r\n        }\r\n\r\n        const scaleFactor = maxAbsValue === 0 ? 1 : 127 / maxAbsValue;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            result[i] = Math.round(rawEmbedding[i] * scaleFactor);\r\n        }\r\n\r\n        const buffer = new ArrayBuffer(4);\r\n        const dataView = new DataView(buffer);\r\n        dataView.setFloat32(0, maxAbsValue, true);\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            result[length + i] = dataView.getInt8(i);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Converts a float array to a binary representation where each value is represented by 1 bit.\r\n     * 1 if the value is non-negative, 0 if negative. Packs 8 values per byte.\r\n     *\r\n     * @param rawEmbedding The float array to convert\r\n     * @returns A new array with the binary-packed values\r\n     */\r\n    public static toInt1(rawEmbedding: number[] | Float32Array): number[] {\r\n        const length = rawEmbedding.length;\r\n        const outputLength = Math.ceil(length / 8);\r\n        const result = new Uint8Array(outputLength);\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            const byteIndex = Math.floor(i / 8);\r\n            const bitPosition = 7 - (i % 8);\r\n\r\n            if (rawEmbedding[i] >= 0) {\r\n                result[byteIndex] |= (1 << bitPosition);\r\n            }\r\n        }\r\n\r\n        return Array.from(result);\r\n    }\r\n}\r\n"]}