{"version":3,"file":"Hightlightings.js","sourceRoot":"","sources":["../../../../../src/Documents/Queries/Highlighting/Hightlightings.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,aAAa;IAEd,cAAc,CAAwB;IAEtC,UAAU,CAAS;IAE3B,YAAmB,SAAiB;QACjC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;IACpC,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC5C,CAAC;IAED;;;OAGG;IACI,YAAY,CAAC,GAAW;QAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5C,OAAO,MAAM,IAAI,EAAE,CAAC;IACxB,CAAC;IAEM,MAAM,CAAC,aAAuC;QACjD,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QAC5B,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,aAAa,CAAC,EAAE,CAAC;YACxD,OAAO;QACX,CAAC;QAED,MAAM,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC9C,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACpC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9C,CAAC;IACL,CAAC;CACH;AAvCD,sCAuCC","sourcesContent":["import { QueryResultHighlightings } from \"../GenericQueryResult.js\";\r\n\r\n/**\r\n *  Query highlightings for the documents.\r\n */\r\nexport class Highlightings {\r\n    \r\n    private _highlightings: Map<string, string[]>;\r\n    \r\n    private _fieldName: string;\r\n\r\n    public constructor(fieldName: string) {\r\n       this._fieldName = fieldName;\r\n       this._highlightings = new Map();\r\n   }\r\n\r\n   public get fieldName() {\r\n       return this._fieldName;\r\n   }\r\n\r\n   public get resultIndents(): string[] {\r\n       return Object.keys(this._highlightings);\r\n   }\r\n   \r\n   /**\r\n    * @param key  The document id, or the map/reduce key field.\r\n    * @return Returns the list of document's field highlighting fragments.\r\n    */\r\n   public getFragments(key: string): string[] {\r\n       const result = this._highlightings.get(key);\r\n       return result || [];\r\n   }\r\n\r\n   public update(highlightings: QueryResultHighlightings): void {\r\n       this._highlightings.clear();\r\n       if (!highlightings || !(this._fieldName in highlightings)) {\r\n           return;\r\n       }\r\n\r\n       const result = highlightings[this._fieldName];\r\n       for (const key of Object.keys(result)) {\r\n           this._highlightings.set(key, result[key]);\r\n       }\r\n   }\r\n}\r\n"]}