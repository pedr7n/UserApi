{"version":3,"file":"AggregationDocumentQuery.js","sourceRoot":"","sources":["../../../../../src/Documents/Queries/Facets/AggregationDocumentQuery.ts"],"names":[],"mappings":";;;AAAA,uEAAiE;AAOjE,uDAAiD;AAIjD,MAAa,wBAA2C,SAAQ,8CAAoB;IAGxE,OAAO,CAA6C;IAE5D,YAAmB,MAAwB;QACvC,KAAK,CAAC,MAAM,CAAC,OAAmD,CAAC,CAAC;QAClE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAIM,cAAc,CACjB,cAAsE;QACtE,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE,CAAC;YACvC,MAAM,CAAC,GAAG,IAAI,8BAAY,EAAK,CAAC;YAChC,cAAc,CAAC,CAAC,CAAC,CAAC;YAClB,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7C,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,cAA2B,CAAC,CAAC;QACvD,OAAO,IAAI,CAAC;IAChB,CAAC;IAES,cAAc,CAAC,2BAAoC,IAAI;QAC7D,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;IACxC,CAAC;IAEM,IAAI,CAAC,SAA+B,EAAE,WAAwB;QACjE,IAAI,SAAS,KAAK,oBAAoB,EAAE,CAAC;YACrC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAC9C,CAAC;IACL,CAAC;CACJ;AAjCD,4DAiCC","sourcesContent":["import { AggregationQueryBase } from \"./AggregationQueryBase.js\";\r\nimport { FacetBase } from \"./FacetBase.js\";\r\nimport { IAggregationDocumentQuery } from \"./IAggregationDocumentQuery.js\";\r\nimport { DocumentQuery } from \"../../Session/DocumentQuery.js\";\r\nimport { AbstractDocumentQuery } from \"../../Session/AbstractDocumentQuery.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"../../Session/InMemoryDocumentSessionOperations.js\";\r\nimport { IFacetBuilder } from \"./IFacetBuilder.js\";\r\nimport { FacetBuilder } from \"./FacetBuilder.js\";\r\nimport { IndexQuery } from \"../IndexQuery.js\";\r\nimport { QueryResult } from \"../QueryResult.js\";\r\n\r\nexport class AggregationDocumentQuery<T extends object> extends AggregationQueryBase\r\n    implements IAggregationDocumentQuery<T> {\r\n\r\n    private _source: AbstractDocumentQuery<T, DocumentQuery<T>>;\r\n\r\n    public constructor(source: DocumentQuery<T>) {\r\n        super(source.session as any as InMemoryDocumentSessionOperations);\r\n        this._source = source;\r\n    }\r\n\r\n    public andAggregateBy(facet: FacetBase): IAggregationDocumentQuery<T>;\r\n    public andAggregateBy(builder: (facetBuilder: IFacetBuilder<T>) => void): IAggregationDocumentQuery<T>;\r\n    public andAggregateBy(\r\n        builderOrFacet: ((facetBuilder: IFacetBuilder<T>) => void) | FacetBase): IAggregationDocumentQuery<T> {\r\n        if (typeof builderOrFacet === \"function\") {\r\n            const f = new FacetBuilder<T>();\r\n            builderOrFacet(f);\r\n            return this.andAggregateBy(f.getFacet());\r\n        }\r\n\r\n        this._source._aggregateBy(builderOrFacet as FacetBase);\r\n        return this;\r\n    }\r\n\r\n    protected _getIndexQuery(updateAfterQueryExecuted: boolean = true): IndexQuery {\r\n        return this._source.getIndexQuery();\r\n    }\r\n\r\n    public emit(eventName: \"afterQueryExecuted\", queryResult: QueryResult) {\r\n        if (eventName === \"afterQueryExecuted\") {\r\n            this._source.emit(eventName, queryResult);\r\n        }\r\n    }\r\n}\r\n"]}