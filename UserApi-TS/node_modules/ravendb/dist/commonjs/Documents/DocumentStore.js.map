{"version":3,"file":"DocumentStore.js","sourceRoot":"","sources":["../../../src/Documents/DocumentStore.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { randomUUID } from \"node:crypto\";\r\nimport { throwError } from \"../Exceptions/index.js\";\r\nimport { RequestExecutor } from \"../Http/RequestExecutor.js\";\r\nimport { getLogger } from \"../Utility/LogUtil.js\";\r\nimport { DocumentStoreBase } from \"./DocumentStoreBase.js\";\r\nimport { IDocumentStore } from \"./IDocumentStore.js\";\r\nimport { MaintenanceOperationExecutor } from \"./Operations/MaintenanceOperationExecutor.js\";\r\nimport { OperationExecutor } from \"./Operations/OperationExecutor.js\";\r\nimport { IDocumentSession } from \"./Session/IDocumentSession.js\";\r\nimport { SessionOptions } from \"./Session/SessionOptions.js\";\r\nimport { DocumentSession } from \"./Session/DocumentSession.js\";\r\nimport { IAuthOptions } from \"../Auth/AuthOptions.js\";\r\nimport { BulkInsertOperation } from \"./BulkInsertOperation.js\";\r\nimport { IDatabaseChanges } from \"./Changes/IDatabaseChanges.js\";\r\nimport { DatabaseChanges } from \"./Changes/DatabaseChanges.js\";\r\nimport { DatabaseSmuggler } from \"./Smuggler/DatabaseSmuggler.js\";\r\nimport { DatabaseChangesOptions } from \"./Changes/DatabaseChangesOptions.js\";\r\nimport { IDisposable } from \"../Types/Contracts.js\";\r\nimport { MultiDatabaseHiLoIdGenerator } from \"./Identity/MultiDatabaseHiLoIdGenerator.js\";\r\nimport { TypeUtil } from \"../Utility/TypeUtil.js\";\r\nimport { wrapWithTimeout } from \"../Utility/PromiseUtil.js\";\r\nimport { BulkInsertOptions } from \"./BulkInsert/BulkInsertOptions.js\";\r\n\r\nconst log = getLogger({ module: \"DocumentStore\" });\r\n\r\nexport class DocumentStore extends DocumentStoreBase {\r\n\r\n    private _log =\r\n        getLogger({ module: \"DocumentStore-\" + Math.floor(Math.random() * 1000) });\r\n\r\n    private readonly _databaseChanges: Map<string, IDatabaseChanges> = new Map(); //TODO: check usage - it has compound key!\r\n    // TBD: private ConcurrentDictionary<string, Lazy<EvictItemsFromCacheBasedOnChanges>> _aggressiveCacheChanges =\r\n    // new ConcurrentDictionary<string, Lazy<EvictItemsFromCacheBasedOnChanges>>();\r\n    // TBD: private readonly ConcurrentDictionary<string, EvictItemsFromCacheBasedOnChanges> \r\n    // _observeChangesAndEvictItemsFromCacheForDatabases = \r\n    // new ConcurrentDictionary<string, EvictItemsFromCacheBasedOnChanges>();\r\n\r\n    private _requestExecutors: Map<string, RequestExecutor> = new Map();\r\n\r\n    private _multiDbHiLo: MultiDatabaseHiLoIdGenerator;\r\n\r\n    private _maintenanceOperationExecutor: MaintenanceOperationExecutor;\r\n    private _operationExecutor: OperationExecutor;\r\n    private _smuggler: DatabaseSmuggler;\r\n\r\n    private _identifier: string;\r\n    private _aggressiveCachingUsed: boolean;\r\n\r\n    public constructor(url: string, database: string);\r\n    public constructor(urls: string[], database: string);\r\n    public constructor(url: string, database: string, authOptions: IAuthOptions);\r\n    public constructor(urls: string[], database: string, authOptions: IAuthOptions);\r\n    public constructor(urls: string | string[], database: string, authOptions?: IAuthOptions) {\r\n        super();\r\n\r\n        this._database = database;\r\n        this.authOptions = authOptions;\r\n        this.urls = Array.isArray(urls)\r\n            ? urls as string[]\r\n            : [urls];\r\n    }\r\n\r\n    private _getDatabaseChangesCacheKey(options: DatabaseChangesOptions) {\r\n        return options.databaseName.toLowerCase() + \"/\" + (options.nodeTag || \"<null>\");\r\n    }\r\n\r\n    public get identifier(): string {\r\n        if (this._identifier) {\r\n            return this._identifier;\r\n        }\r\n\r\n        if (!this._urls) {\r\n            return null;\r\n        }\r\n\r\n        const urlsString = this._urls.join(\", \");\r\n        if (this._database) {\r\n            return `${ urlsString } DB: ${this._database}`;\r\n        }\r\n\r\n        return urlsString;\r\n    }\r\n\r\n    public set identifier(identifier: string) {\r\n        this._identifier = identifier;\r\n    }\r\n\r\n    public get hiLoIdGenerator() {\r\n        return this._multiDbHiLo;\r\n    }\r\n\r\n    /**\r\n     * Disposes the document store\r\n     */\r\n    public dispose(): void {\r\n        this._log.info(\"Dispose.\");\r\n        this.emit(\"beforeDispose\");\r\n\r\n        /* TBD\r\n            foreach (var value in _aggressiveCacheChanges.Values)\r\n            {\r\n                if (value.IsValueCreated == false)\r\n                    continue;\r\n\r\n                value.Value.Dispose();\r\n            }*/\r\n        for (const change of this._databaseChanges.values()) {\r\n            change.dispose();\r\n        }\r\n\r\n        /* TODO\r\n            // try to wait until all the async disposables are completed\r\n            Task.WaitAll(tasks.ToArray(), TimeSpan.FromSeconds(3));\r\n            // if this is still going, we continue with disposal, it is for graceful shutdown only, anyway\r\n        */\r\n\r\n        const disposeChain = Promise.resolve();\r\n\r\n        disposeChain\r\n            .then(async () => {\r\n                if (this._multiDbHiLo) {\r\n                    try {\r\n                        return await this._multiDbHiLo.returnUnusedRange();\r\n                    } catch (err) {\r\n                        return await this._log.warn(\"Error returning unused ID range.\", err);\r\n                    }\r\n                }\r\n            })\r\n            .then(async () => {\r\n                this._disposed = true;\r\n                this.subscriptions.dispose();\r\n\r\n                const task = new Promise<void>((resolve, reject) => {\r\n                    let listenersExecCallbacksCount = 0;\r\n                    const listenersCount = this.listenerCount(\"afterDispose\");\r\n                    if (listenersCount === 0) {\r\n                        resolve();\r\n                    } else {\r\n                        this.emit(\"afterDispose\", () => {\r\n                            if (listenersCount === ++listenersExecCallbacksCount) {\r\n                                resolve();\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                try {\r\n                    return await wrapWithTimeout(task, 5_000);\r\n                } catch (err) {\r\n                    return await this._log.warn(`Error handling 'afterDispose'`, err);\r\n                }\r\n            })\r\n            .then(() => {\r\n                this._log.info(`Disposing request executors ${this._requestExecutors.size}`);\r\n                for (const [db, executor] of this._requestExecutors.entries()) {\r\n                    try {\r\n                        executor.dispose();\r\n                    } catch (err) {\r\n                        this._log.warn(err, `Error disposing request executor.`);\r\n                    }\r\n                }\r\n            })\r\n            .finally(() => this.emit(\"executorsDisposed\"));\r\n    }\r\n\r\n    /**\r\n     * Opens document session.\r\n     */\r\n    public openSession(): IDocumentSession;\r\n    /**\r\n     * Opens document session.\r\n     */\r\n    public openSession(database: string): IDocumentSession;\r\n    /**\r\n     * Opens document session\r\n     */\r\n    public openSession(sessionOpts: SessionOptions): IDocumentSession;\r\n    /**\r\n     * Opens document session\r\n     */\r\n    public openSession(databaseOrSessionOptions?: string | SessionOptions): IDocumentSession {\r\n        if (!databaseOrSessionOptions) {\r\n            const sessionOptions: SessionOptions = {\r\n                disableAtomicDocumentWritesInClusterWideTransaction: this.conventions.disableAtomicDocumentWritesInClusterWideTransaction\r\n            };\r\n            return this.openSession(sessionOptions);\r\n        }\r\n\r\n        this.assertInitialized();\r\n        this._ensureNotDisposed();\r\n\r\n        if (typeof(databaseOrSessionOptions) === \"string\") {\r\n            return this.openSession({\r\n                database: databaseOrSessionOptions,\r\n                disableAtomicDocumentWritesInClusterWideTransaction: this.conventions.disableAtomicDocumentWritesInClusterWideTransaction\r\n            });\r\n        }\r\n\r\n        databaseOrSessionOptions = databaseOrSessionOptions || {} as any;\r\n        const sessionOpts = databaseOrSessionOptions as SessionOptions;\r\n\r\n        const sessionId = randomUUID();\r\n        const session = new DocumentSession(this, sessionId, sessionOpts);\r\n        this.registerEvents(session);\r\n        this.emit(\"sessionCreated\", { session });\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Gets request executor for specific database. Default is initial database.\r\n     */\r\n    public getRequestExecutor(database?: string): RequestExecutor {\r\n        this.assertInitialized();\r\n\r\n        database = this.getEffectiveDatabase(database);\r\n\r\n        const databaseLower = database.toLowerCase();\r\n\r\n        let executor = this._requestExecutors.get(databaseLower);\r\n        if (executor) {\r\n            return executor;\r\n        }\r\n\r\n        const createRequestExecutor = () => {\r\n            const requestExecutor = RequestExecutor.create(this.urls, database, {\r\n                authOptions: this.authOptions,\r\n                documentConventions: this.conventions\r\n            });\r\n            this.registerEvents(requestExecutor);\r\n\r\n            return requestExecutor;\r\n        }\r\n\r\n        const createRequestExecutorForSingleNode = () => {\r\n            const forSingleNode = RequestExecutor.createForSingleNodeWithConfigurationUpdates(\r\n                this.urls[0], database, {\r\n                    authOptions: this.authOptions,\r\n                    documentConventions: this.conventions\r\n                });\r\n\r\n            this.registerEvents(forSingleNode);\r\n\r\n            return forSingleNode;\r\n        }\r\n\r\n        if (!this.conventions.disableTopologyUpdates) {\r\n            executor = createRequestExecutor();\r\n        } else {\r\n            executor = createRequestExecutorForSingleNode();\r\n        }\r\n\r\n        this._log.info(`New request executor for database ${database}`);\r\n        this._requestExecutors.set(databaseLower, executor);\r\n\r\n        return executor;\r\n    }\r\n\r\n    requestTimeout(timeoutInMs: number): IDisposable;\r\n    requestTimeout(timeoutInMs: number, database: string): IDisposable;\r\n    requestTimeout(timeoutInMs: number, database?: string): IDisposable {\r\n        this.assertInitialized();\r\n\r\n        database = this.getEffectiveDatabase(database);\r\n\r\n        if (!database) {\r\n            throwError(\"InvalidOperationException\", \"Cannot use requestTimeout without a default database defined \" +\r\n                \"unless 'database' parameter is provided. Did you forget to pass 'database' parameter?\");\r\n        }\r\n\r\n        const requestExecutor = this.getRequestExecutor(database)\r\n        const oldTimeout = requestExecutor.defaultTimeout;\r\n\r\n        requestExecutor.defaultTimeout = timeoutInMs;\r\n\r\n        return {\r\n            dispose: () => requestExecutor.defaultTimeout = oldTimeout\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initializes this instance.\r\n     */\r\n    public initialize(): IDocumentStore {\r\n        if (this._initialized) {\r\n            return this;\r\n        }\r\n\r\n        this._assertValidConfiguration();\r\n\r\n        RequestExecutor.validateUrls(this.urls, this.authOptions);\r\n\r\n        try {\r\n            if (!this.conventions.documentIdGenerator) { // don't overwrite what the user is doing\r\n                const generator = new MultiDatabaseHiLoIdGenerator(this);\r\n                this._multiDbHiLo = generator;\r\n\r\n                this.conventions.documentIdGenerator =\r\n                    (dbName: string, entity: object) => generator.generateDocumentId(dbName, entity);\r\n            }\r\n\r\n            this.conventions.freeze();\r\n            this._initialized = true;\r\n        } catch (e) {\r\n            this.dispose();\r\n            throw e;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Validate the configuration for the document store\r\n     */\r\n    protected _assertValidConfiguration(): void {\r\n        if (!this._urls || !this._urls.length) {\r\n            throwError(\"InvalidArgumentException\", \"Document store URLs cannot be empty\");\r\n        }\r\n\r\n        super._assertValidConfiguration();\r\n    }\r\n\r\n    /**\r\n     * Setup the context for no aggressive caching\r\n     *\r\n     * This is mainly useful for internal use inside RavenDB, when we are executing\r\n     * queries that have been marked with WaitForNonStaleResults, we temporarily disable\r\n     * aggressive caching.\r\n     */\r\n    /* TBD 4.1\r\n    public disableAggressiveCaching(): IDisposable;\r\n    */\r\n\r\n    /**\r\n     * Setup the context for no aggressive caching\r\n     *\r\n     * This is mainly useful for internal use inside RavenDB, when we are executing\r\n     * queries that have been marked with WaitForNonStaleResults, we temporarily disable\r\n     * aggressive caching.\r\n     */\r\n\r\n    /* TBD 4.1\r\n    public disableAggressiveCaching(): IDisposable;\r\n    public disableAggressiveCaching(database: string): IDisposable;\r\n    public disableAggressiveCaching(database?: string): IDisposable {\r\n        this.assertInitialized();\r\n        const re: RequestExecutor = this.getRequestExecutor(database || this.database);\r\n        const old = re.aggressiveCaching;\r\n        re.aggressiveCaching = null;\r\n        const dispose = () => re.aggressiveCaching = old;\r\n\r\n        return { dispose };\r\n    }\r\n     */\r\n\r\n    public changes(): IDatabaseChanges;\r\n    public changes(database: string): IDatabaseChanges;\r\n    public changes(database: string, nodeTag: string): IDatabaseChanges;\r\n    public changes(database?: string, nodeTag?: string): IDatabaseChanges {\r\n        this.assertInitialized();\r\n\r\n        const changesOptions: DatabaseChangesOptions = {\r\n            databaseName: database || this.database,\r\n            nodeTag\r\n        };\r\n        const cacheKey = this._getDatabaseChangesCacheKey(changesOptions);\r\n        if (this._databaseChanges.has(cacheKey)) {\r\n            return this._databaseChanges.get(cacheKey);\r\n        }\r\n\r\n        const newChanges = this._createDatabaseChanges(changesOptions);\r\n        this._databaseChanges.set(cacheKey, newChanges);\r\n        return newChanges;\r\n    }\r\n\r\n    protected _createDatabaseChanges(node: DatabaseChangesOptions) {\r\n        return new DatabaseChanges(this.getRequestExecutor(node.databaseName), node.databaseName,\r\n            () => this._databaseChanges.delete(this._getDatabaseChangesCacheKey(node)), node.nodeTag);\r\n    }\r\n\r\n\r\n    // TBD public override IDatabaseChanges Changes(string database = null)\r\n    // TBD protected virtual IDatabaseChanges CreateDatabaseChanges(string database)\r\n    // TBD public override IDisposable AggressivelyCacheFor(TimeSpan cacheDuration, string database = null)\r\n    // TBD private void ListenToChangesAndUpdateTheCache(string database)\r\n\r\n    /**\r\n     * Gets maintenance operations executor.\r\n     */\r\n    public get maintenance(): MaintenanceOperationExecutor {\r\n        this.assertInitialized();\r\n\r\n        if (!this._maintenanceOperationExecutor) {\r\n            this._maintenanceOperationExecutor = new MaintenanceOperationExecutor(this);\r\n        }\r\n\r\n        return this._maintenanceOperationExecutor;\r\n    }\r\n\r\n    public get smuggler(): DatabaseSmuggler {\r\n        if (!this._smuggler) {\r\n            this._smuggler = new DatabaseSmuggler(this);\r\n        }\r\n\r\n        return this._smuggler;\r\n    }\r\n\r\n    /**\r\n     * Gets operations executor.\r\n     */\r\n    public get operations(): OperationExecutor {\r\n        if (!this._operationExecutor) {\r\n            this._operationExecutor = new OperationExecutor(this);\r\n        }\r\n\r\n        return this._operationExecutor;\r\n    }\r\n\r\n    public bulkInsert(): BulkInsertOperation;\r\n    public bulkInsert(database: string): BulkInsertOperation;\r\n    public bulkInsert(options: BulkInsertOptions): BulkInsertOperation;\r\n    public bulkInsert(database: string, options: BulkInsertOptions): BulkInsertOperation;\r\n    public bulkInsert(databaseOrOptions?: string | BulkInsertOptions, optionalOptions?: BulkInsertOptions): BulkInsertOperation {\r\n        this.assertInitialized();\r\n\r\n        const database = TypeUtil.isString(databaseOrOptions) ? this.getEffectiveDatabase(databaseOrOptions) : this.getEffectiveDatabase(null);\r\n        const options: BulkInsertOptions = TypeUtil.isString(databaseOrOptions) ? optionalOptions : databaseOrOptions;\r\n\r\n        return new BulkInsertOperation(database, this, options);\r\n    }\r\n}\r\n"]}