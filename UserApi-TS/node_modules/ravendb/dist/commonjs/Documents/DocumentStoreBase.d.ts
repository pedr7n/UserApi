import { MaintenanceOperationExecutor } from "./Operations/MaintenanceOperationExecutor.js";
import { EventEmitter } from "node:events";
import { IDocumentStore, SessionDisposingEventArgs } from "./IDocumentStore.js";
import { IAuthOptions } from "../Auth/AuthOptions.js";
import { SessionBeforeStoreEventArgs, SessionAfterSaveChangesEventArgs, SessionBeforeQueryEventArgs, SessionBeforeDeleteEventArgs, BeforeConversionToDocumentEventArgs, AfterConversionToDocumentEventArgs, BeforeConversionToEntityEventArgs, AfterConversionToEntityEventArgs, FailedRequestEventArgs, TopologyUpdatedEventArgs, BeforeRequestEventArgs, SucceedRequestEventArgs } from "./Session/SessionEvents.js";
import { OperationExecutor } from "./Operations/OperationExecutor.js";
import { IDocumentSession } from "./Session/IDocumentSession.js";
import { DocumentSession } from "./Session/DocumentSession.js";
import { DocumentConventions } from "./Conventions/DocumentConventions.js";
import { RequestExecutor } from "../Http/RequestExecutor.js";
import { BulkInsertOperation } from "./BulkInsertOperation.js";
import { IDatabaseChanges } from "./Changes/IDatabaseChanges.js";
import { DocumentSubscriptions } from "./Subscriptions/DocumentSubscriptions.js";
import { SessionOptions } from "./Session/SessionOptions.js";
import { DatabaseSmuggler } from "./Smuggler/DatabaseSmuggler.js";
import { IDisposable } from "../Types/Contracts.js";
import { TimeSeriesOperations } from "./TimeSeries/TimeSeriesOperations.js";
import { IAbstractIndexCreationTask } from "./Indexes/IAbstractIndexCreationTask.js";
import { IHiLoIdGenerator } from "./Identity/IHiLoIdGenerator.js";
import { BulkInsertOptions } from "./BulkInsert/BulkInsertOptions.js";
import { AiOperations } from "./Operations/AI/AiOperations.js";
export declare abstract class DocumentStoreBase extends EventEmitter implements IDocumentStore {
    protected constructor();
    abstract dispose(): void;
    protected _disposed: boolean;
    isDisposed(): boolean;
    abstract changes(): IDatabaseChanges;
    abstract changes(database: string): IDatabaseChanges;
    abstract changes(database: string, nodeTag: string): IDatabaseChanges;
    abstract identifier: string;
    abstract hiLoIdGenerator: IHiLoIdGenerator;
    abstract initialize(): IDocumentStore;
    abstract openSession(): IDocumentSession;
    abstract openSession(database: string): IDocumentSession;
    abstract openSession(sessionOptions: SessionOptions): IDocumentSession;
    executeIndex(task: IAbstractIndexCreationTask): Promise<void>;
    executeIndex(task: IAbstractIndexCreationTask, database: string): Promise<void>;
    executeIndexes(tasks: IAbstractIndexCreationTask[]): Promise<void>;
    executeIndexes(tasks: IAbstractIndexCreationTask[], database: string): Promise<void>;
    private _timeSeriesOperation;
    get timeSeries(): TimeSeriesOperations;
    private _conventions;
    private _aiOperations;
    get ai(): AiOperations;
    get conventions(): DocumentConventions;
    set conventions(value: DocumentConventions);
    protected _urls: string[];
    get urls(): string[];
    set urls(value: string[]);
    protected _initialized: boolean;
    private _authOptions;
    abstract bulkInsert(): BulkInsertOperation;
    abstract bulkInsert(database: string): BulkInsertOperation;
    abstract bulkInsert(database: string, options: BulkInsertOptions): BulkInsertOperation;
    abstract bulkInsert(options: BulkInsertOptions): BulkInsertOperation;
    private readonly _subscriptions;
    get subscriptions(): DocumentSubscriptions;
    private readonly _lastRaftIndexPerDatabase;
    getLastTransactionIndex(database: string): number;
    setLastTransactionIndex(database: string, index: number): void;
    protected _ensureNotDisposed(): void;
    assertInitialized(): void;
    private _assertNotInitialized;
    protected _database: string;
    get database(): string;
    set database(value: string);
    get authOptions(): IAuthOptions;
    set authOptions(value: IAuthOptions);
    abstract get smuggler(): DatabaseSmuggler;
    abstract getRequestExecutor(databaseName?: string): RequestExecutor;
    protected _eventHandlers: [string, (eventArgs: any) => void][];
    addSessionListener(eventName: "sessionDisposing", eventHandler: (eventArgs: SessionDisposingEventArgs) => void): this;
    addSessionListener(eventName: "failedRequest", eventHandler: (eventArgs: FailedRequestEventArgs) => void): this;
    addSessionListener(eventName: "topologyUpdated", eventHandler: (eventArgs: TopologyUpdatedEventArgs) => void): this;
    addSessionListener(eventName: "beforeStore", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): this;
    addSessionListener(eventName: "afterSaveChanges", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): this;
    addSessionListener(eventName: "beforeQuery", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): this;
    addSessionListener(eventName: "beforeDelete", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): this;
    addSessionListener(eventName: "beforeConversionToDocument", eventHandler: (eventArgs: BeforeConversionToDocumentEventArgs) => void): this;
    addSessionListener(eventName: "afterConversionToDocument", eventHandler: (eventArgs: AfterConversionToDocumentEventArgs) => void): this;
    addSessionListener(eventName: "beforeConversionToEntity", eventHandler: (eventArgs: BeforeConversionToEntityEventArgs) => void): this;
    addSessionListener(eventName: "afterConversionToEntity", eventHandler: (eventArgs: AfterConversionToEntityEventArgs) => void): this;
    addSessionListener(eventName: "beforeRequest", eventHandler: (eventArgs: BeforeRequestEventArgs) => void): this;
    addSessionListener(eventName: "succeedRequest", eventHandler: (eventArgs: SucceedRequestEventArgs) => void): this;
    removeSessionListener(eventName: "failedRequest", eventHandler: (eventArgs: FailedRequestEventArgs) => void): void;
    removeSessionListener(eventName: "topologyUpdated", eventHandler: (eventArgs: TopologyUpdatedEventArgs) => void): void;
    removeSessionListener(eventName: "beforeStore", eventHandler: (eventArgs: SessionBeforeStoreEventArgs) => void): void;
    removeSessionListener(eventName: "afterSaveChanges", eventHandler: (eventArgs: SessionAfterSaveChangesEventArgs) => void): void;
    removeSessionListener(eventName: "beforeQuery", eventHandler: (eventArgs: SessionBeforeQueryEventArgs) => void): void;
    removeSessionListener(eventName: "beforeDelete", eventHandler: (eventArgs: SessionBeforeDeleteEventArgs) => void): void;
    removeSessionListener(eventName: "beforeConversionToDocument", eventHandler: (eventArgs: BeforeConversionToDocumentEventArgs) => void): void;
    removeSessionListener(eventName: "afterConversionToDocument", eventHandler: (eventArgs: AfterConversionToDocumentEventArgs) => void): void;
    removeSessionListener(eventName: "beforeConversionToEntity", eventHandler: (eventArgs: BeforeConversionToEntityEventArgs) => void): void;
    removeSessionListener(eventName: "afterConversionToEntity", eventHandler: (eventArgs: AfterConversionToEntityEventArgs) => void): void;
    removeSessionListener(eventName: "beforeRequest", eventHandler: (eventArgs: BeforeRequestEventArgs) => void): void;
    removeSessionListener(eventName: "succeedRequest", eventHandler: (eventArgs: SucceedRequestEventArgs) => void): void;
    registerEvents(requestExecutor: RequestExecutor): void;
    registerEvents(session: DocumentSession): void;
    abstract maintenance: MaintenanceOperationExecutor;
    abstract operations: OperationExecutor;
    abstract requestTimeout(timeoutInMs: number): IDisposable;
    abstract requestTimeout(timeoutInMs: number, database: string): IDisposable;
    protected _assertValidConfiguration(): void;
    getEffectiveDatabase(database: string): string;
    static getEffectiveDatabase(store: IDocumentStore, database: string): string;
}
//# sourceMappingURL=DocumentStoreBase.d.ts.map