{"version":3,"file":"DatabaseSmugglerOptions.js","sourceRoot":"","sources":["../../../../src/Documents/Smuggler/DatabaseSmugglerOptions.ts"],"names":[],"mappings":";;;AAIA,MAAa,uBAAuB;IACzB,MAAM,CAAU,wBAAwB,GAAuB;QAClE,SAAS,EAAE,WAAW,EAAE,mBAAmB,EAAE,WAAW,EAAE,gBAAgB,EAAE,4BAA4B,EAAE,YAAY;QACtH,iBAAiB,EAAE,aAAa,EAAE,eAAe,EAAE,eAAe,EAAE,YAAY;KACnF,CAAC;IAEK,MAAM,CAAU,wCAAwC,GAA6B;QACxF,QAAQ,EAAE,sBAAsB,EAAE,YAAY,EAAE,sBAAsB,EAAE,iBAAiB,EAAE,wBAAwB;QACnH,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,sBAAsB,EAAE,SAAS,EAAE,SAAS;QAClF,qBAAqB,EAAE,sBAAsB,EAAE,YAAY,EAAE,sBAAsB;QACnF,WAAW,EAAE,UAAU,EAAE,uBAAuB,EAAE,UAAU,EAAE,gCAAgC;QAC9F,mBAAmB,EAAE,uBAAuB,EAAE,wBAAwB,EAAE,UAAU;QAClF,gBAAgB,EAAE,SAAS,EAAE,YAAY,EAAE,cAAc;KAC5D,CAAC;IAEM,MAAM,CAAU,sCAAsC,GAAW,EAAE,GAAG,KAAK,CAAC;IAE7E,cAAc,CAAqB;IACnC,2BAA2B,CAA2B;IACtD,cAAc,CAAU;IACxB,iBAAiB,CAAU;IAC3B,eAAe,CAAU;IACzB,eAAe,CAAU;IACzB,eAAe,CAAS;IACxB,0BAA0B,CAAS;IACnC,oBAAoB,CAAU;IAE9B,aAAa,CAAS;IACtB,WAAW,CAAW;IAC7B;;OAEG;IACI,iBAAiB,CAAU;IAElC;QACI,IAAI,CAAC,cAAc,GAAG,CAAC,GAAG,uBAAuB,CAAC,wBAAwB,CAAC,CAAC;QAC5E,IAAI,CAAC,2BAA2B,GAAG,CAAC,GAAG,uBAAuB,CAAC,wCAAwC,CAAC,CAAC;QACzG,IAAI,CAAC,0BAA0B,GAAG,uBAAuB,CAAC,sCAAsC,CAAC;QACjG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IAC1B,CAAC;;AAzCL,0DA0CC","sourcesContent":["import { IDatabaseSmugglerOptions } from \"./IDatabaseSmugglerOptions.js\";\r\nimport { DatabaseItemType } from \"./DatabaseItemType.js\";\r\nimport { DatabaseRecordItemType } from \"./DatabaseRecordItemType.js\";\r\n\r\nexport class DatabaseSmugglerOptions implements IDatabaseSmugglerOptions {\r\n    public static readonly DEFAULT_OPERATE_ON_TYPES: DatabaseItemType[] = [\r\n        \"Indexes\", \"Documents\", \"RevisionDocuments\", \"Conflicts\", \"DatabaseRecord\", \"ReplicationHubCertificates\", \"Identities\",\r\n        \"CompareExchange\", \"Attachments\", \"CounterGroups\", \"Subscriptions\", \"TimeSeries\"\r\n    ];\r\n\r\n    public static readonly DEFAULT_OPERATE_ON_DATABASE_RECORD_TYPES: DatabaseRecordItemType[] = [\r\n        \"Client\", \"ConflictSolverConfig\", \"Expiration\", \"ExternalReplications\", \"PeriodicBackups\", \"RavenConnectionStrings\",\r\n        \"RavenEtls\", \"Revisions\", \"Settings\", \"SqlConnectionStrings\", \"Sorters\", \"SqlEtls\",\r\n        \"HubPullReplications\", \"SinkPullReplications\", \"TimeSeries\", \"DocumentsCompression\",\r\n        \"Analyzers\", \"LockMode\", \"OlapConnectionStrings\", \"OlapEtls\", \"ElasticSearchConnectionStrings\",\r\n        \"ElasticSearchEtls\", \"PostgreSqlIntegration\", \"QueueConnectionStrings\", \"QueueEtl\",\r\n        \"IndexesHistory\", \"Refresh\", \"QueueSinks\", \"DataArchival\"\r\n    ];\r\n\r\n    private static readonly DEFAULT_MAX_STEPS_FOR_TRANSFORM_SCRIPT: number = 10 * 1_000;\r\n\r\n    public operateOnTypes: DatabaseItemType[];\r\n    public operateOnDatabaseRecordType: DatabaseRecordItemType[];\r\n    public includeExpired: boolean;\r\n    public includeArtificial: boolean;\r\n    public includeArchived: boolean;\r\n    public removeAnalyzers: boolean;\r\n    public transformScript: string;\r\n    public maxStepsForTransformScript: number;\r\n    public skipRevisionCreation: boolean;\r\n\r\n    public encryptionKey: string;\r\n    public collections: string[];\r\n    /**\r\n     * In case the database is corrupted (for example, Compression Dictionaries are lost), it is possible to export all the remaining data.\r\n     */\r\n    public skipCorruptedData: boolean;\r\n\r\n    constructor() {\r\n        this.operateOnTypes = [...DatabaseSmugglerOptions.DEFAULT_OPERATE_ON_TYPES];\r\n        this.operateOnDatabaseRecordType = [...DatabaseSmugglerOptions.DEFAULT_OPERATE_ON_DATABASE_RECORD_TYPES];\r\n        this.maxStepsForTransformScript = DatabaseSmugglerOptions.DEFAULT_MAX_STEPS_FOR_TRANSFORM_SCRIPT;\r\n        this.includeExpired = true;\r\n        this.includeArchived = true;\r\n        this.collections = [];\r\n    }\r\n}\r\n"]}