{"version":3,"file":"ToggleOngoingTaskStateOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/OngoingTasks/ToggleOngoingTaskStateOperation.ts"],"names":[],"mappings":";;;AAKA,mEAA6D;AAG7D,8DAAwD;AAExD,4EAAsE;AAEtE,MAAa,+BAA+B;IACvB,OAAO,CAAS;IAChB,SAAS,CAAS;IAClB,KAAK,CAAkB;IACvB,QAAQ,CAAU;IAInC,YAAmB,gBAAiC,EAAE,IAAqB,EAAE,OAAgB;QACzF,IAAI,sBAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC;YACtC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC;QACtC,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,OAAO,GAAG,gBAAgB,CAAC;YAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,sBAAsB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/F,CAAC;CACJ;AA5BD,0EA4BC;AAED,MAAM,sBAAuB,SAAQ,8BAAqC;IACrD,OAAO,CAAS;IAChB,SAAS,CAAS;IAClB,KAAK,CAAkB;IACvB,QAAQ,CAAU;IAEnC,YAAmB,MAAc,EAAE,QAAgB,EAAE,IAAqB,EAAE,OAAgB;QACxF,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa;cAC5B,IAAI,CAAC,QAAQ,GAAG,yBAAyB;cACzC,IAAI,CAAC,OAAO,GAAG,QAAQ,GAAG,IAAI,CAAC,KAAK;cACpC,WAAW,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAEvD,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,GAAG,IAAI,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7D,CAAC;QAED,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;SACjB,CAAC;IACN,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,UAAU,EAAE,CAAC;YACb,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { OngoingTaskType } from \"./OngoingTaskType.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { ModifyOngoingTaskResult } from \"../../../ServerWide/ModifyOnGoingTaskResult.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class ToggleOngoingTaskStateOperation implements IMaintenanceOperation<ModifyOngoingTaskResult> {\r\n    private readonly _taskId: number;\r\n    private readonly _taskName: string;\r\n    private readonly _type: OngoingTaskType;\r\n    private readonly _disable: boolean;\r\n\r\n    public constructor(taskId: number, type: OngoingTaskType, disable: boolean)\r\n    public constructor(taskName: string, type: OngoingTaskType, disable: boolean)\r\n    public constructor(taskNameOrTaskId: number | string, type: OngoingTaskType, disable: boolean) {\r\n        if (TypeUtil.isString(taskNameOrTaskId)) {\r\n            this._taskId = 0;\r\n            this._taskName = taskNameOrTaskId;\r\n        } else {\r\n            this._taskId = taskNameOrTaskId;\r\n            this._taskName = null;\r\n        }\r\n\r\n        this._type = type;\r\n        this._disable = disable;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<ModifyOngoingTaskResult> {\r\n        return new ToggleTaskStateCommand(this._taskId, this._taskName, this._type, this._disable);\r\n    }\r\n}\r\n\r\nclass ToggleTaskStateCommand extends RavenCommand<ModifyOngoingTaskResult> implements IRaftCommand {\r\n    private readonly _taskId: number;\r\n    private readonly _taskName: string;\r\n    private readonly _type: OngoingTaskType;\r\n    private readonly _disable: boolean;\r\n\r\n    public constructor(taskId: number, taskName: string, type: OngoingTaskType, disable: boolean) {\r\n        super();\r\n\r\n        this._taskId = taskId;\r\n        this._taskName = taskName;\r\n        this._type = type;\r\n        this._disable = disable;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/databases/\"\r\n            + node.database + \"/admin/tasks/state?key=\"\r\n            + this._taskId + \"&type=\" + this._type\r\n            + \"&disable=\" + (this._disable ? \"true\" : \"false\");\r\n\r\n        if (this._taskName) {\r\n            uri += \"&taskName=\" + encodeURIComponent(this._taskName);\r\n        }\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\"\r\n        };\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (bodyStream) {\r\n            return this._parseResponseDefaultAsync(bodyStream);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}