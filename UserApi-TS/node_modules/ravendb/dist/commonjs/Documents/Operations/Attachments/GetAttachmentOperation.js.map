{"version":3,"file":"GetAttachmentOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Attachments/GetAttachmentOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { AttachmentDetails } from \"../../Attachments/index.js\";\r\nimport { getEtagHeader } from \"../../../Utility/HttpUtil.js\";\r\nimport { HttpRequestParameters, HttpResponse } from \"../../../Primitives/Http.js\";\r\nimport { AttachmentResult, AttachmentType } from \"../../Attachments/index.js\";\r\nimport { RavenCommand, ResponseDisposeHandling } from \"../../../Http/RavenCommand.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { Readable } from \"node:stream\";\r\n\r\nexport class GetAttachmentOperation implements IOperation<AttachmentResult> {\r\n    private readonly _documentId: string;\r\n    private readonly _name: string;\r\n    private readonly _type: AttachmentType;\r\n    private readonly _changeVector: string;\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public constructor(documentId: string, name: string, type: AttachmentType, changeVector: string) {\r\n        this._documentId = documentId;\r\n        this._name = name;\r\n        this._type = type;\r\n        this._changeVector = changeVector;\r\n    }\r\n\r\n    public getCommand(\r\n        store: IDocumentStore, conventions: DocumentConventions, cache: HttpCache): RavenCommand<AttachmentResult> {\r\n        return new GetAttachmentCommand(\r\n            this._documentId, this._name, this._type, this._changeVector);\r\n    }\r\n\r\n}\r\n\r\nexport class GetAttachmentCommand extends RavenCommand<AttachmentResult> {\r\n    private readonly _documentId: string;\r\n    private readonly _name: string;\r\n    private readonly _type: AttachmentType;\r\n    private readonly _changeVector: string;\r\n\r\n    public constructor(documentId: string, name: string, type: AttachmentType, changeVector: string) {\r\n        super();\r\n\r\n        this.result = null;\r\n\r\n        if (StringUtil.isNullOrWhitespace(documentId)) {\r\n            throwError(\"InvalidArgumentException\", \"DocumentId cannot be null or empty\");\r\n        }\r\n        if (StringUtil.isNullOrWhitespace(name)) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null or empty\");\r\n        }\r\n        if (type !== \"Document\" && !changeVector) {\r\n            throwError(\"InvalidArgumentException\", \"Change vector cannot be null for attachment type \" + type);\r\n        }\r\n\r\n        this._documentId = documentId;\r\n        this._name = name;\r\n        this._type = type;\r\n        this._changeVector = changeVector;\r\n        this._responseType = \"Empty\";\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/attachments?id=\"\r\n            + encodeURIComponent(this._documentId) + \"&name=\" + encodeURIComponent(this._name);\r\n\r\n        if (this._type !== \"Document\") {\r\n            const body = this._serializer.serialize({ Type: this._type, ChangeVector: this._changeVector });\r\n\r\n            return {\r\n                uri,\r\n                method: \"POST\",\r\n                body\r\n            };\r\n        }\r\n        return { uri };\r\n    }\r\n\r\n    public async processResponse(\r\n        cache: HttpCache,\r\n        response: HttpResponse,\r\n        bodyStream: Readable,\r\n        url: string): Promise<ResponseDisposeHandling> {\r\n        const contentType = response.headers.get(\"content-type\");\r\n        const changeVector = getEtagHeader(response);\r\n        const hash = response.headers.get(\"attachment-hash\") as string;\r\n        let size = 0;\r\n        const sizeHeader = response.headers.get(\"attachment-size\") as string;\r\n        if (sizeHeader) {\r\n            size = Number.parseInt(sizeHeader, 10);\r\n        }\r\n\r\n        const details: AttachmentDetails = {\r\n            name: this._name,\r\n            documentId: this._documentId,\r\n            contentType,\r\n            hash,\r\n            changeVector,\r\n            size\r\n        };\r\n\r\n        this.result = new AttachmentResult(bodyStream, details, response);\r\n        return \"Manually\";\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return true;\r\n    }\r\n}\r\n"]}