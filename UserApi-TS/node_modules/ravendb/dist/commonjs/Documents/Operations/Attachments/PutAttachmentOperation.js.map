{"version":3,"file":"PutAttachmentOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Attachments/PutAttachmentOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { AttachmentData, AttachmentDetails } from \"../../Attachments/index.js\";\r\nimport { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class PutAttachmentOperation implements IOperation<AttachmentDetails> {\r\n    private readonly _documentId: string;\r\n    private readonly _name: string;\r\n    private readonly _stream: AttachmentData;\r\n    private readonly _contentType: string;\r\n    private readonly _changeVector: string;\r\n\r\n    public constructor(documentId: string, name: string, stream: AttachmentData);\r\n    public constructor(documentId: string, name: string, stream: AttachmentData, contentType: string);\r\n    public constructor(documentId: string, name: string, stream: AttachmentData,\r\n                       contentType: string, changeVector: string);\r\n    public constructor(documentId: string, name: string, stream: AttachmentData,\r\n                       contentType?: string, changeVector?: string) {\r\n        this._documentId = documentId;\r\n        this._name = name;\r\n        this._stream = stream;\r\n        this._contentType = contentType;\r\n        this._changeVector = changeVector;\r\n    }\r\n\r\n    public getCommand(store: IDocumentStore, conventions: DocumentConventions,\r\n                      httpCache: HttpCache): RavenCommand<AttachmentDetails> {\r\n        return new PutAttachmentCommand(this._documentId, this._name,\r\n            this._stream, this._contentType, this._changeVector);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nexport class PutAttachmentCommand extends RavenCommand<AttachmentDetails> {\r\n    private readonly _documentId: string;\r\n    private readonly _name: string;\r\n    private readonly _stream: AttachmentData;\r\n    private readonly _contentType: string;\r\n    private readonly _changeVector: string;\r\n\r\n    public constructor(documentId: string, name: string,\r\n                       stream: AttachmentData, contentType: string, changeVector: string) {\r\n        super();\r\n\r\n        if (StringUtil.isNullOrWhitespace(documentId)) {\r\n            throwError(\"InvalidArgumentException\", \"DocumentId cannot be null or empty\");\r\n        }\r\n        if (StringUtil.isNullOrWhitespace(name)) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null or empty\");\r\n        }\r\n\r\n        this._documentId = documentId;\r\n        this._name = name;\r\n        this._stream = stream;\r\n        this._contentType = contentType;\r\n        this._changeVector = changeVector;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/databases/\" + node.database\r\n            + \"/attachments?id=\" + encodeURIComponent(this._documentId)\r\n            + \"&name=\" + encodeURIComponent(this._name);\r\n\r\n        if (!StringUtil.isNullOrEmpty(this._contentType)) {\r\n            uri += \"&contentType=\" + encodeURIComponent(this._contentType);\r\n        }\r\n\r\n        const req = {\r\n            uri,\r\n            method: \"PUT\",\r\n            body: this._stream\r\n        } as HttpRequestParameters;\r\n\r\n        this._addChangeVectorIfNotNull(this._changeVector, req);\r\n\r\n        return req;\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        let body: string = null;\r\n        this.result = await this._defaultPipeline(_ => body = _)\r\n            .process(bodyStream);\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return false;\r\n    }\r\n}\r\n"]}