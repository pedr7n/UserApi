{"version":3,"file":"RunConversationOperation.js","sourceRoot":"","sources":["../../../../../../src/Documents/Operations/AI/Agents/RunConversationOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../../OperationAbstractions.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport type { AiAgentActionResponse } from \"./AiAgentActionResponse.js\";\r\nimport type { AiConversationCreationOptions } from \"./AiConversationCreationOptions.js\";\r\nimport type { ConversationResult } from \"./ConversationResult.js\";\r\nimport { RavenCommand } from \"../../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../../Conventions/DocumentConventions.js\";\r\nimport { IRaftCommand } from \"../../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../../Utility/RaftIdGenerator.js\";\r\nimport { ServerNode } from \"../../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../../Primitives/Http.js\";\r\nimport { throwError } from \"../../../../Exceptions/index.js\";\r\nimport { JsonSerializer } from \"../../../../Mapping/Json/Serializer.js\";\r\nimport { ObjectUtil } from \"../../../../Utility/ObjectUtil.js\";\r\nimport { StringUtil } from \"../../../../Utility/StringUtil.js\";\r\n\r\nexport class RunConversationOperation<TAnswer> implements IMaintenanceOperation<ConversationResult<TAnswer>> {\r\n    private readonly _agentId: string;\r\n    private readonly _conversationId: string;\r\n    private readonly _userPrompt?: string;\r\n    private readonly _actionResponses?: AiAgentActionResponse[];\r\n    private readonly _options?: AiConversationCreationOptions;\r\n    private readonly _changeVector?: string;\r\n\r\n    public constructor(\r\n        agentId: string,\r\n        conversationId: string,\r\n        userPrompt?: string,\r\n        actionResponses?: AiAgentActionResponse[],\r\n        options?: AiConversationCreationOptions,\r\n        changeVector?: string\r\n    ) {\r\n        if (StringUtil.isNullOrEmpty(agentId)) {\r\n            throwError(\"InvalidArgumentException\", \"agentId cannot be null or empty.\");\r\n        }\r\n        if (StringUtil.isNullOrEmpty(conversationId)) {\r\n            throwError(\"InvalidArgumentException\", \"conversationId cannot be null or empty.\");\r\n        }\r\n        this._agentId = agentId;\r\n        this._conversationId = conversationId;\r\n        this._userPrompt = userPrompt;\r\n        this._actionResponses = actionResponses;\r\n        this._options = options;\r\n        this._changeVector = changeVector;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<ConversationResult<TAnswer>> {\r\n        return new RunConversationCommand<TAnswer>(\r\n            this._conversationId,\r\n            this._agentId,\r\n            this._userPrompt,\r\n            this._actionResponses,\r\n            this._options,\r\n            this._changeVector,\r\n            conventions\r\n        );\r\n    }\r\n}\r\n\r\nclass RunConversationCommand<TAnswer>\r\n    extends RavenCommand<ConversationResult<TAnswer>> implements IRaftCommand {\r\n\r\n    private readonly _conversationId: string;\r\n    private readonly _agentId: string;\r\n    private readonly _prompt?: string;\r\n    private readonly _actionResponses?: AiAgentActionResponse[];\r\n    private readonly _options?: AiConversationCreationOptions;\r\n    private readonly _changeVector?: string;\r\n    private _raftId: string;\r\n\r\n    public constructor(\r\n        conversationId: string,\r\n        agentId: string,\r\n        prompt: string | undefined,\r\n        actionResponses: AiAgentActionResponse[] | undefined,\r\n        options: AiConversationCreationOptions | undefined,\r\n        changeVector: string | undefined,\r\n        conventions: DocumentConventions\r\n    ) {\r\n        super();\r\n        this._conversationId = conversationId;\r\n        this._agentId = agentId;\r\n        this._prompt = prompt;\r\n        this._actionResponses = actionResponses;\r\n        this._options = options;\r\n        this._changeVector = changeVector;\r\n\r\n        if (this._conversationId && this._conversationId.endsWith(\"|\")) {\r\n            this._raftId = RaftIdGenerator.newId();\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return this._raftId;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uriParams = new URLSearchParams({\r\n            conversationId: this._conversationId,\r\n            agentId: this._agentId,\r\n        });\r\n\r\n        if (this._changeVector) {\r\n            uriParams.append(\"changeVector\", this._changeVector);\r\n        }\r\n\r\n        const uri = `${node.url}/databases/${node.database}/ai/agent?${uriParams}`;\r\n\r\n        const bodyObj = {\r\n            ActionResponses: this._actionResponses,\r\n            UserPrompt: this._prompt,\r\n            CreationOptions: this._options\r\n        };\r\n\r\n        const headers = this._headers().typeAppJson().build();\r\n\r\n        // Serialize properties to PascalCase, except \"parameters\" in CreationOptions, which must keep user-provided, case-sensitive keys unchanged.\r\n        const serialized = ObjectUtil.transformObjectKeys(bodyObj, {\r\n            defaultTransform: ObjectUtil.pascalCase,\r\n            ignorePaths: [\r\n                new RegExp(\"^CreationOptions\\\\.Parameters\\\\..*$\")\r\n            ]\r\n        });\r\n\r\n\r\n        return {\r\n            method: \"POST\",\r\n            uri,\r\n            headers,\r\n            body: JsonSerializer.getDefault().serialize(serialized)\r\n        };\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream)\r\n    }\r\n}"]}