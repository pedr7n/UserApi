{"version":3,"file":"AiConversation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/AI/AiConversation.ts"],"names":[],"mappings":"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","sourcesContent":["import { RunConversationOperation } from \"./Agents/RunConversationOperation.js\";\r\nimport type { AiAgentActionRequest } from \"./Agents/AiAgentActionRequest.js\";\r\nimport type { AiAgentActionResponse } from \"./Agents/AiAgentActionResponse.js\";\r\nimport type { AiConversationCreationOptions } from \"./Agents/AiConversationCreationOptions.js\";\r\nimport type { ConversationResult } from \"./Agents/ConversationResult.js\";\r\nimport type { AiAnswer } from \"./AiAnswer.js\";\r\nimport type { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\n\r\nexport enum AiHandleErrorStrategy {\r\n    SendErrorsToModel = \"SendErrorsToModel\",\r\n    RaiseImmediately = \"RaiseImmediately\"\r\n}\r\n\r\nexport type ActionInvocation = (request: AiAgentActionRequest) => Promise<void>;\r\n\r\nexport class AiConversation {\r\n    private readonly _store: IDocumentStore;\r\n    private readonly _databaseName: string;\r\n    private readonly _agentId: string;\r\n    private _conversationId: string;\r\n    private readonly _options?: AiConversationCreationOptions;\r\n    private _actionRequests: AiAgentActionRequest[] | null = null;\r\n    private readonly _actionResponses: AiAgentActionResponse[] = [];\r\n    private _userPrompt?: string;\r\n    private readonly _invocations: Map<string, ActionInvocation> = new Map();\r\n\r\n    public constructor(store: IDocumentStore, databaseName: string, agentId: string, conversationId: string, options?: AiConversationCreationOptions, changeVector?: string) {\r\n        if (!store) throwError(\"InvalidArgumentException\", \"store is required\");\r\n        if (StringUtil.isNullOrEmpty(databaseName)) throwError(\"InvalidArgumentException\", \"databaseName is required\");\r\n        if (StringUtil.isNullOrEmpty(agentId)) throwError(\"InvalidArgumentException\", \"agentId is required\");\r\n        if (StringUtil.isNullOrEmpty(conversationId)) throwError(\"InvalidArgumentException\", \"conversationId is required\");\r\n\r\n        this._store = store;\r\n        this._databaseName = databaseName;\r\n        this._agentId = agentId;\r\n        this._conversationId = conversationId;\r\n        this._options = options;\r\n        this._changeVector = changeVector;\r\n    }\r\n\r\n    private _changeVector: string;\r\n\r\n    public get changeVector(): string {\r\n        return this._changeVector;\r\n    }\r\n\r\n    public get id(): string {\r\n        if (!this._conversationId || this._conversationId.endsWith(\"/\") || this._conversationId.endsWith(\"|\")) {\r\n            throwError(\"InvalidOperationException\", \"This is a new conversation, the ID wasn't set yet, you have to call run() first\");\r\n        }\r\n        return this._conversationId;\r\n    }\r\n\r\n    public requiredActions(): AiAgentActionRequest[] {\r\n        if (!this._actionRequests) {\r\n            throwError(\"InvalidOperationException\", \"You must call run() first.\");\r\n        }\r\n        return this._actionRequests;\r\n    }\r\n\r\n    public addActionResponse<TResponse>(toolId: string, actionResponse: TResponse | string): void {\r\n        if (!toolId) throwError(\"InvalidArgumentException\", \"toolId cannot be empty\");\r\n        if (actionResponse == null) throwError(\"InvalidArgumentException\", `Action response for '${toolId}' cannot be null.`);\r\n\r\n        if (typeof actionResponse === \"string\") {\r\n            this._actionResponses.push({toolId, content: actionResponse});\r\n            return;\r\n        }\r\n        this._actionResponses.push({toolId, content: JSON.stringify(actionResponse)});\r\n    }\r\n\r\n    public setUserPrompt(userPrompt: string): void {\r\n        if (!userPrompt) throwError(\"InvalidArgumentException\", \"userPrompt cannot be empty\");\r\n        this._userPrompt = userPrompt;\r\n    }\r\n\r\n    public handle<TArgs = any>(actionName: string, action: (request: AiAgentActionRequest, args: TArgs) => Promise<object> | object, aiHandleError: AiHandleErrorStrategy = AiHandleErrorStrategy.SendErrorsToModel): void {\r\n        this.receive<TArgs>(actionName, async (req, args) => {\r\n            const result = await action(req, args);\r\n            this.addActionResponse(req.toolId, result as any);\r\n        }, aiHandleError);\r\n    }\r\n\r\n    public receive<TArgs = any>(actionName: string, action: (request: AiAgentActionRequest, args: TArgs) => Promise<void> | void, aiHandleError: AiHandleErrorStrategy = AiHandleErrorStrategy.SendErrorsToModel): void {\r\n        if (this._invocations.has(actionName)) {\r\n            throwError(\"InvalidOperationException\", `Action '${actionName}' already exists.`);\r\n        }\r\n        const inv: ActionInvocation = async (request) => {\r\n            try {\r\n                const args = this._parseArgs<TArgs>(request.arguments);\r\n                await action(request, args);\r\n            } catch (e) {\r\n                if (aiHandleError === AiHandleErrorStrategy.SendErrorsToModel) {\r\n                    this.addActionResponse(request.toolId, this._createErrorMessageForLlm(e as Error));\r\n                } else {\r\n                    throw e;\r\n                }\r\n            }\r\n        };\r\n        this._invocations.set(actionName, inv);\r\n    }\r\n\r\n    public async run<TAnswer>(): Promise<AiAnswer<TAnswer>> {\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n            const r = await this._runInternal<TAnswer>();\r\n            if (r.status === \"Done\") {\r\n                return r;\r\n            }\r\n\r\n            if (!this._actionRequests || this._actionRequests.length === 0) {\r\n                throwError(\"InvalidOperationException\", `There are no action requests to process, but Status was ${r.status}, should not be possible.`);\r\n            }\r\n\r\n            for (const action of this._actionRequests) {\r\n                const invocation = this._invocations.get(action.name);\r\n                if (invocation) {\r\n                    await invocation(action);\r\n                }\r\n            }\r\n\r\n            if (this._actionResponses.length === 0) {\r\n                return r; // ActionsRequired, nothing to send back yet\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _runInternal<TAnswer>(): Promise<AiAnswer<TAnswer>> {\r\n        if (this._actionRequests != null && !this._userPrompt && this._actionResponses.length === 0) {\r\n            return {status: \"Done\" as const} as AiAnswer<TAnswer>;\r\n        }\r\n\r\n        const op = new RunConversationOperation<TAnswer>(\r\n            this._agentId,\r\n            this._conversationId,\r\n            this._userPrompt,\r\n            this._actionResponses,\r\n            this._options,\r\n            this._changeVector\r\n        );\r\n\r\n        try {\r\n            const res = await this._store.maintenance.forDatabase(this._databaseName).send(op) as unknown as ConversationResult<TAnswer>;\r\n            this._changeVector = res.changeVector;\r\n            this._conversationId = res.conversationId;\r\n            this._actionRequests = res.actionRequests ?? [];\r\n\r\n            return {\r\n                answer: res.response,\r\n                status: (this._actionRequests.length > 0) ? \"ActionRequired\" : \"Done\"\r\n            };\r\n        } finally {\r\n            // clear prompt and responses after running the conversation\r\n            this._userPrompt = undefined;\r\n            this._actionResponses.length = 0;\r\n        }\r\n    }\r\n\r\n    private _parseArgs<TArgs>(argsJson: string): TArgs {\r\n        // If TArgs is string, return as-is\r\n        try {\r\n            return JSON.parse(argsJson) as TArgs;\r\n        } catch {\r\n            // fall back to raw string when not a JSON\r\n            return argsJson as unknown as TArgs;\r\n        }\r\n    }\r\n\r\n    private _createErrorMessageForLlm(e: Error): string {\r\n        const lines: string[] = [];\r\n        let curr: any = e;\r\n        let indent = 0;\r\n        while (curr) {\r\n            const pad = \"  \".repeat(indent);\r\n            const name = curr?.name || curr?.constructor?.name || \"Error\";\r\n            const msg = curr?.message || String(curr);\r\n            lines.push(`${pad}${name}: ${msg}`);\r\n            curr = curr?.cause; // Node 20 supports error cause\r\n            indent++;\r\n        }\r\n        return lines.join(\"\\n\");\r\n    }\r\n}\r\n"]}