{"version":3,"file":"ToggleDatabasesStateOperation.js","sourceRoot":"","sources":["../../../../src/Documents/Operations/ToggleDatabasesStateOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IServerOperation, OperationResultType } from \"./OperationAbstractions.js\";\r\nimport { DisableDatabaseToggleResult } from \"./DisableDatabaseToggleResult.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class ToggleDatabasesStateOperation implements IServerOperation<DisableDatabaseToggleResult> {\r\n    private readonly _disable: boolean;\r\n    private readonly _parameters: ToggleDatabasesStateParameters;\r\n\r\n    public constructor(databaseName: string, disable: boolean)\r\n    public constructor(databaseNames: string[], disable: boolean)\r\n    public constructor(parameters: ToggleDatabasesStateParameters, disable: boolean)\r\n    public constructor(databaseOrParameters: string | string[] | ToggleDatabasesStateParameters, disable: boolean) {\r\n        this._disable = disable;\r\n\r\n        if (!databaseOrParameters) {\r\n            throwError(\"InvalidArgumentException\", \"Databases cannot be null\");\r\n        }\r\n\r\n        if (TypeUtil.isString(databaseOrParameters)) {\r\n            this._parameters = {\r\n                databaseNames: [databaseOrParameters]\r\n            };\r\n        } else if (TypeUtil.isArray<string>(databaseOrParameters)) {\r\n            this._parameters = {\r\n                databaseNames: databaseOrParameters\r\n            }\r\n        } else {\r\n            this._parameters = {\r\n                databaseNames: databaseOrParameters.databaseNames\r\n            }\r\n        }\r\n\r\n        if (!this._parameters.databaseNames || !this._parameters.databaseNames.length) {\r\n            throwError(\"InvalidArgumentException\", \"Please provide at least one database name\");\r\n        }\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<DisableDatabaseToggleResult> {\r\n        return new ToggleDatabaseStateCommand(this._parameters, this._disable);\r\n    }\r\n}\r\n\r\nclass ToggleDatabaseStateCommand extends RavenCommand<DisableDatabaseToggleResult> implements IRaftCommand {\r\n    private readonly _disable: boolean;\r\n    private readonly _parameters: ToggleDatabasesStateParameters;\r\n\r\n    public constructor(parameters: ToggleDatabasesStateParameters, disable: boolean) {\r\n        super();\r\n\r\n        if (!parameters) {\r\n            throwError(\"InvalidArgumentException\", \"Parameters cannot be null\");\r\n        }\r\n\r\n        this._disable = disable;\r\n        this._parameters = parameters;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const toggle = this._disable ? \"disable\" : \"enable\";\r\n\r\n        const uri = node.url + \"/admin/databases/\" + toggle;\r\n\r\n        const body = this._serializer.serialize(this._parameters);\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n\r\n        const status = results[\"status\"] as DisableDatabaseToggleResult[];\r\n        if (!TypeUtil.isArray(status)) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        this.result = status[0];\r\n\r\n        return body;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport interface ToggleDatabasesStateParameters {\r\n    databaseNames: string[];\r\n}"]}