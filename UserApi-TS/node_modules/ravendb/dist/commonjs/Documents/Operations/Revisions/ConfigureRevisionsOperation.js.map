{"version":3,"file":"ConfigureRevisionsOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Revisions/ConfigureRevisionsOperation.ts"],"names":[],"mappings":";;;AAEA,mEAA6D;AAM7D,4EAAsE;AACtE,2DAA0D;AAE1D,MAAa,2BAA2B;IACnB,cAAc,CAAyB;IAExD,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,YAAmB,aAAqC;QACpD,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;QAC3E,CAAC;QACD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,yBAAyB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9D,CAAC;CACJ;AAjBD,kEAiBC;AAED,MAAa,yBAA0B,SAAQ,8BAA+C;IACzE,cAAc,CAAyB;IAExD,YAAmB,aAAqC;QACpD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,yBAAyB,CAAC;QAEjF,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAC/E,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,IAAI;SACP,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aACrD,OAAO,CAAC,UAAU,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,iCAAiC,EAAE,EAAE,OAAO,CAAC,CAAC;QAC9E,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ;AAtCD,8DAsCC;AAED,MAAa,iCAAiC;IACnC,gBAAgB,CAAS;CACnC;AAFD,8EAEC","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { RevisionsConfiguration } from \"../RevisionsConfiguration.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\n\r\nexport class ConfigureRevisionsOperation implements IMaintenanceOperation<ConfigureRevisionsOperationResult> {\r\n    private readonly _configuration: RevisionsConfiguration;\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public constructor(configuration: RevisionsConfiguration) {\r\n        if (!configuration) {\r\n            throwError(\"InvalidArgumentException\", \"Configuration cannot be null\");\r\n        }\r\n        this._configuration = configuration;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<ConfigureRevisionsOperationResult> {\r\n        return new ConfigureRevisionsCommand(this._configuration);\r\n    }\r\n}\r\n\r\nexport class ConfigureRevisionsCommand extends RavenCommand<ConfigureRevisionsOperationResult> implements IRaftCommand {\r\n    private readonly _configuration: RevisionsConfiguration;\r\n\r\n    public constructor(configuration: RevisionsConfiguration) {\r\n        super();\r\n        this._configuration = configuration;\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return false;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/revisions/config\";\r\n\r\n        const body = JSON.stringify(this._configuration.toRemoteFieldNames(), null, 0);\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            body\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _)\r\n            .process(bodyStream);\r\n        this.result = Object.assign(new ConfigureRevisionsOperationResult(), results);\r\n        return body;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport class ConfigureRevisionsOperationResult {\r\n    public raftCommandIndex: number;\r\n}\r\n"]}