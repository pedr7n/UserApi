"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigureRevisionsOperationResult = exports.ConfigureRevisionsCommand = exports.ConfigureRevisionsOperation = void 0;
const RavenCommand_js_1 = require("../../../Http/RavenCommand.js");
const RaftIdGenerator_js_1 = require("../../../Utility/RaftIdGenerator.js");
const index_js_1 = require("../../../Exceptions/index.js");
class ConfigureRevisionsOperation {
    _configuration;
    get resultType() {
        return "CommandResult";
    }
    constructor(configuration) {
        if (!configuration) {
            (0, index_js_1.throwError)("InvalidArgumentException", "Configuration cannot be null");
        }
        this._configuration = configuration;
    }
    getCommand(conventions) {
        return new ConfigureRevisionsCommand(this._configuration);
    }
}
exports.ConfigureRevisionsOperation = ConfigureRevisionsOperation;
class ConfigureRevisionsCommand extends RavenCommand_js_1.RavenCommand {
    _configuration;
    constructor(configuration) {
        super();
        this._configuration = configuration;
    }
    get isReadRequest() {
        return false;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/admin/revisions/config";
        const body = JSON.stringify(this._configuration.toRemoteFieldNames(), null, 0);
        return {
            uri,
            method: "POST",
            body
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        let body = null;
        const results = await this._defaultPipeline(_ => body = _)
            .process(bodyStream);
        this.result = Object.assign(new ConfigureRevisionsOperationResult(), results);
        return body;
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator_js_1.RaftIdGenerator.newId();
    }
}
exports.ConfigureRevisionsCommand = ConfigureRevisionsCommand;
class ConfigureRevisionsOperationResult {
    raftCommandIndex;
}
exports.ConfigureRevisionsOperationResult = ConfigureRevisionsOperationResult;
//# sourceMappingURL=ConfigureRevisionsOperation.js.map