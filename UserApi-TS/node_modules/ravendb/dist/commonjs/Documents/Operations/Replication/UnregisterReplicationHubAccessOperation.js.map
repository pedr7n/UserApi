{"version":3,"file":"UnregisterReplicationHubAccessOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Replication/UnregisterReplicationHubAccessOperation.ts"],"names":[],"mappings":";;;AACA,kEAA4D;AAC5D,2DAA0D;AAE1D,mEAA6D;AAI7D,4EAAsE;AAEtE,MAAa,uCAAuC;IAC/B,QAAQ,CAAS;IACjB,WAAW,CAAS;IAErC,YAAmB,OAAe,EAAE,UAAkB;QAClD,IAAI,0BAAU,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC;YACpC,IAAA,qBAAU,EAAC,0BAA0B,EAAE,sCAAsC,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,0BAAU,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,CAAC;YACvC,IAAA,qBAAU,EAAC,0BAA0B,EAAE,0CAA0C,CAAC,CAAC;QACvF,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,qCAAqC,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACtF,CAAC;CACJ;AAxBD,0FAwBC;AAED,MAAM,qCAAsC,SAAQ,8BAAkB;IAEjD,QAAQ,CAAS;IACjB,WAAW,CAAS;IAErC,YAAmB,OAAe,EAAE,UAAkB;QAClD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IACjC,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC9C,gDAAgD,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;cACjF,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEzD,OAAO;YACH,GAAG;YACH,MAAM,EAAE,QAAQ;SACnB,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class UnregisterReplicationHubAccessOperation implements IMaintenanceOperation<void> {\r\n    private readonly _hubName: string;\r\n    private readonly _thumbprint: string;\r\n\r\n    public constructor(hubName: string, thumbprint: string) {\r\n        if (StringUtil.isNullOrEmpty(hubName)) {\r\n            throwError(\"InvalidArgumentException\", \"HubName cannot be null or whitespace\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrEmpty(thumbprint)) {\r\n            throwError(\"InvalidArgumentException\", \"Thumbprint cannot be null or whitespace.\");\r\n        }\r\n\r\n        this._hubName = hubName;\r\n        this._thumbprint = thumbprint;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new UnregisterReplicationHubAccessCommand(this._hubName, this._thumbprint);\r\n    }\r\n}\r\n\r\nclass UnregisterReplicationHubAccessCommand extends RavenCommand<void> implements IRaftCommand {\r\n\r\n    private readonly _hubName: string;\r\n    private readonly _thumbprint: string;\r\n\r\n    public constructor(hubName: string, thumbprint: string) {\r\n        super();\r\n\r\n        this._hubName = hubName;\r\n        this._thumbprint = thumbprint;\r\n        this._responseType = \"Empty\";\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database\r\n            + \"/admin/tasks/pull-replication/hub/access?name=\" + this._urlEncode(this._hubName)\r\n            + \"&thumbprint=\" + this._urlEncode(this._thumbprint);\r\n\r\n        return {\r\n            uri,\r\n            method: \"DELETE\"\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}"]}