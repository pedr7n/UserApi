"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PutPullReplicationAsHubOperation = void 0;
const StringUtil_js_1 = require("../../../Utility/StringUtil.js");
const index_js_1 = require("../../../Exceptions/index.js");
const TypeUtil_js_1 = require("../../../Utility/TypeUtil.js");
const RavenCommand_js_1 = require("../../../Http/RavenCommand.js");
const RaftIdGenerator_js_1 = require("../../../Utility/RaftIdGenerator.js");
class PutPullReplicationAsHubOperation {
    _pullReplicationDefinition;
    constructor(nameOrDefinition) {
        if (TypeUtil_js_1.TypeUtil.isString(nameOrDefinition)) {
            const name = nameOrDefinition;
            if (StringUtil_js_1.StringUtil.isNullOrEmpty(name)) {
                (0, index_js_1.throwError)("InvalidArgumentException", "Name cannot be null or empty");
            }
            this._pullReplicationDefinition = {
                name
            };
        }
        else {
            const pullReplicationDefinition = nameOrDefinition;
            if (StringUtil_js_1.StringUtil.isNullOrEmpty(pullReplicationDefinition.name)) {
                (0, index_js_1.throwError)("InvalidArgumentException", "Name cannot be null or empty");
            }
            this._pullReplicationDefinition = pullReplicationDefinition;
        }
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(conventions) {
        return new UpdatePullReplicationDefinitionCommand(this._pullReplicationDefinition);
    }
}
exports.PutPullReplicationAsHubOperation = PutPullReplicationAsHubOperation;
class UpdatePullReplicationDefinitionCommand extends RavenCommand_js_1.RavenCommand {
    _pullReplicationDefinition;
    constructor(pullReplicationDefinition) {
        super();
        this._pullReplicationDefinition = pullReplicationDefinition;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/admin/tasks/pull-replication/hub";
        const body = this._serializer.serialize(this._pullReplicationDefinition);
        return {
            method: "PUT",
            uri,
            headers: this._headers().typeAppJson().build(),
            body
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
    get isReadRequest() {
        return false;
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator_js_1.RaftIdGenerator.newId();
    }
}
//# sourceMappingURL=PutPullReplicationAsHubOperation.js.map