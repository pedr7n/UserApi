"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateExternalReplicationCommand = exports.UpdateExternalReplicationOperation = void 0;
const RavenCommand_js_1 = require("../../../Http/RavenCommand.js");
const RaftIdGenerator_js_1 = require("../../../Utility/RaftIdGenerator.js");
const index_js_1 = require("../../../Exceptions/index.js");
class UpdateExternalReplicationOperation {
    _newWatcher;
    constructor(newWatcher) {
        if (!newWatcher) {
            (0, index_js_1.throwError)("InvalidArgumentException", "NewWatcher cannot be null");
        }
        this._newWatcher = newWatcher;
    }
    getCommand(conventions) {
        return new UpdateExternalReplicationCommand(this._newWatcher);
    }
    get resultType() {
        return "CommandResult";
    }
}
exports.UpdateExternalReplicationOperation = UpdateExternalReplicationOperation;
class UpdateExternalReplicationCommand extends RavenCommand_js_1.RavenCommand {
    _newWatcher;
    constructor(newWatcher) {
        super();
        this._newWatcher = newWatcher;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/admin/tasks/external-replication";
        const headers = this._headers()
            .typeAppJson().build();
        const body = this._serializer.serialize({ watcher: this._newWatcher });
        return {
            method: "POST",
            uri,
            headers,
            body
        };
    }
    get isReadRequest() {
        return false;
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator_js_1.RaftIdGenerator.newId();
    }
}
exports.UpdateExternalReplicationCommand = UpdateExternalReplicationCommand;
//# sourceMappingURL=UpdateExternalReplicationOperation.js.map