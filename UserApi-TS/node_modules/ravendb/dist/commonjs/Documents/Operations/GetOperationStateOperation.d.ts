import { ServerNode } from "../../Http/ServerNode.js";
import { HttpRequestParameters } from "../../Primitives/Http.js";
import { RavenCommand, IRavenResponse } from "../../Http/RavenCommand.js";
import { IMaintenanceOperation, OperationResultType } from "./OperationAbstractions.js";
import { Stream } from "node:stream";
import { DocumentConventions } from "../Conventions/DocumentConventions.js";
export declare class GetOperationStateOperation implements IMaintenanceOperation<IRavenResponse> {
    private readonly _id;
    private readonly _nodeTag;
    constructor(id: number, nodeTag?: string);
    getCommand(conventions: DocumentConventions): RavenCommand<IRavenResponse>;
    get resultType(): OperationResultType;
}
export declare class GetOperationStateCommand extends RavenCommand<IRavenResponse> {
    get isReadRequest(): boolean;
    private readonly _id;
    constructor(id: number, nodeTag?: string);
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
}
//# sourceMappingURL=GetOperationStateOperation.d.ts.map