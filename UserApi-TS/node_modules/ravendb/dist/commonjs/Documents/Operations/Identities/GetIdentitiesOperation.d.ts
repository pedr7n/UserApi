import { HttpRequestParameters } from "../../../Primitives/Http.js";
import { OperationResultType, IMaintenanceOperation } from "../OperationAbstractions.js";
import { DocumentConventions } from "../../Conventions/DocumentConventions.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { ServerNode } from "../../../Http/ServerNode.js";
import { Stream } from "node:stream";
export interface IdentitiesCollection {
    [key: string]: number;
}
export declare class GetIdentitiesOperation implements IMaintenanceOperation<IdentitiesCollection> {
    get resultType(): OperationResultType;
    getCommand(conventions: DocumentConventions): RavenCommand<IdentitiesCollection>;
}
export declare class GetIdentitiesCommand extends RavenCommand<IdentitiesCollection> {
    constructor();
    get isReadRequest(): boolean;
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
}
//# sourceMappingURL=GetIdentitiesOperation.d.ts.map