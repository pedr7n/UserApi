{"version":3,"file":"GetIdentitiesOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Identities/GetIdentitiesOperation.ts"],"names":[],"mappings":";;;AAGA,mEAA6D;AAQ7D,MAAa,sBAAsB;IAE/B,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,oBAAoB,EAAE,CAAC;IACtC,CAAC;CACJ;AATD,wDASC;AAED,MAAa,oBAAqB,SAAQ,8BAAkC;IAExE;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,mBAAmB,CAAC;QAC3E,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAAwB;aACrD,aAAa,EAAE;aACf,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAC1B,OAAO,CAAC,UAAU,CAAC,CAAC;QACzB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAvBD,oDAuBC","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { OperationResultType, IMaintenanceOperation } from \"../OperationAbstractions.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport interface IdentitiesCollection {\r\n    [key: string]: number;\r\n}\r\n\r\nexport class GetIdentitiesOperation implements IMaintenanceOperation<IdentitiesCollection> {\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<IdentitiesCollection> {\r\n        return new GetIdentitiesCommand();\r\n    }\r\n}\r\n\r\nexport class GetIdentitiesCommand extends RavenCommand<IdentitiesCollection> {\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/debug/identities\";\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        let body: string = null;\r\n        this.result = await this._pipeline<IdentitiesCollection>()\r\n            .parseJsonSync()\r\n            .collectBody(b => body = b)\r\n            .process(bodyStream);\r\n        return body;\r\n    }\r\n}\r\n"]}