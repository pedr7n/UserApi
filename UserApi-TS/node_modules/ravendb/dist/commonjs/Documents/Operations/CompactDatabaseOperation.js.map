{"version":3,"file":"CompactDatabaseOperation.js","sourceRoot":"","sources":["../../../../src/Documents/Operations/CompactDatabaseOperation.ts"],"names":[],"mappings":";;;AAGA,wDAAuD;AACvD,gEAA0D;AAK1D,MAAa,wBAAwB;IAEhB,gBAAgB,CAAkB;IAEnD,YAAmB,eAAgC;QAC/C,IAAI,CAAC,eAAe,EAAE,CAAC;YACnB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,gCAAgC,CAAC,CAAC;QAC7E,CAAC;QAED,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;IAC5C,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,sBAAsB,CAAC,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC1E,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,aAAa,CAAC;IACzB,CAAC;CAEJ;AApBD,4DAoBC;AAED,MAAa,sBAAuB,SAAQ,8BAA+B;IACtD,gBAAgB,CAAkB;IAEnD,YAAmB,WAAgC,EAAE,eAAgC;QACjF,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,IAAA,qBAAU,EAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,eAAe,EAAE,CAAC;YACnB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,gCAAgC,CAAC,CAAC;QAC7E,CAAC;QAED,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;IAC5C,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,gBAAgB,CAAC;QACxC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAE/D,OAAO;YACH,MAAM,EAAE,MAAM;YACd,IAAI;YACJ,GAAG;YACH,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;SACjD,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAxCD,wDAwCC","sourcesContent":["import { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { IServerOperation, OperationIdResult, OperationResultType } from \"./OperationAbstractions.js\";\r\nimport { CompactSettings } from \"../../ServerWide/CompactSettings.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class CompactDatabaseOperation implements IServerOperation<OperationIdResult> {\r\n\r\n    private readonly _compactSettings: CompactSettings;\r\n\r\n    public constructor(compactSettings: CompactSettings) {\r\n        if (!compactSettings) {\r\n            throwError(\"InvalidArgumentException\", \"CompactSettings cannot be null\");\r\n        }\r\n\r\n        this._compactSettings = compactSettings;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<OperationIdResult> {\r\n        return new CompactDatabaseCommand(conventions, this._compactSettings);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"OperationId\";\r\n    }\r\n\r\n}\r\n\r\nexport class CompactDatabaseCommand extends RavenCommand<OperationIdResult> {\r\n    private readonly _compactSettings: CompactSettings;\r\n\r\n    public constructor(conventions: DocumentConventions, compactSettings: CompactSettings) {\r\n        super();\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n\r\n        if (!compactSettings) {\r\n            throwError(\"InvalidArgumentException\", \"CompactSettings cannot be null\");\r\n        }\r\n\r\n        this._compactSettings = compactSettings;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/compact\";\r\n        const body = this._serializer.serialize(this._compactSettings);\r\n\r\n        return {\r\n            method: \"POST\",\r\n            body,\r\n            uri,\r\n            headers: this._headers().typeAppJson().build()\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n}\r\n"]}