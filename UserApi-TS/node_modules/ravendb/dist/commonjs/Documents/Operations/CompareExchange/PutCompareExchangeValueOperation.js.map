{"version":3,"file":"PutCompareExchangeValueOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/CompareExchange/PutCompareExchangeValueOperation.ts"],"names":[],"mappings":";;;AAEA,yEAAkG;AAClG,mEAA6D;AAE7D,qFAA+E;AAE/E,2DAA0D;AAE1D,uEAAqE;AACrE,8DAAwD;AAIxD,4EAAsE;AACtE,wDAAoE;AACpE,qFAA+E;AAG/E,MAAa,gCAAgC;IAExB,IAAI,CAAS;IACb,MAAM,CAAI;IACV,MAAM,CAAS;IACf,SAAS,CAAsB;IAIhD,YAAmB,GAAW,EAAE,KAAQ,EAAE,KAAa,EAAE,QAA8B;QACnF,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,UAAU,CACb,KAAqB,EACrB,WAAgC,EAChC,KAAgB;QAChB,OAAO,IAAI,8BAA8B,CAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IACnH,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AA1BD,4EA0BC;AAED,MAAa,8BAAkC,SAAQ,8BAAsC;IACxE,IAAI,CAAS;IACb,MAAM,CAAI;IACV,MAAM,CAAS;IACf,YAAY,CAAsB;IAClC,SAAS,CAAsB;IAEhD,YACI,GAAW,EACX,KAAQ,EACR,KAAa,EACb,QAA6B,EAC7B,WAAgC;QAChC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,GAAG,EAAE,CAAC;YACP,IAAA,qBAAU,EAAC,0BAA0B,EAAE,kCAAkC,CAAC,CAAC;QAC/E,CAAC;QAED,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;YACZ,IAAA,qBAAU,EAAC,0BAA0B,EAAE,qCAAqC,CAAC,CAAC;QAClF,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,WAAW,IAAI,4CAAmB,CAAC,kBAAkB,CAAC;IAC9E,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,eAAe,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;QAEjI,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,KAAK,CAAC,+BAAgB,CAAC,iBAAiB,CAAC,GAAG,sBAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;YACzE,CAAC,CAAC,IAAI,CAAC,MAAM;YACb,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,8CAA8C,CAAC,IAAI,CAAC,MAAa,CAAC,CAAC;QAE3F,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,MAAM,QAAQ,GAAG,4DAA2B,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YACjH,KAAK,CAAC,wBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;QACvD,CAAC;QAED,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;YACH,IAAI,EAAE,8BAAc,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC;YAClD,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;SACjD,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,IAAI,GAAW,IAAI,CAAC;QAExB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAA+D;aAC7F,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAC1B,aAAa,EAAE;aACf,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzB,MAAM,IAAI,GAAG,CAAC,sBAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;YAC3C,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,yBAAyB,CAAC,IAAI,CAAC,MAAa,CAAyB;YACzF,CAAC,CAAC,IAAI,CAAC;QACX,MAAM,KAAK,GAAkC,sBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAW,CAAC,CAAC,CAAC,IAAI,CAAC;QACzF,IAAI,CAAC,MAAM,GAAG,gDAAqB,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAEtF,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ;AA3ED,wEA2EC","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { IOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { CompareExchangeResult, CompareExchangeResultResponse } from \"./CompareExchangeResult.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { JsonSerializer } from \"../../../Mapping/Json/Serializer.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { ObjectTypeDescriptor, CompareExchangeResultClass, ServerResponse, ServerCasing } from \"../../../Types/index.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { COMPARE_EXCHANGE, CONSTANTS } from \"../../../Constants.js\";\r\nimport { CompareExchangeSessionValue } from \"./CompareExchangeSessionValue.js\";\r\nimport { IMetadataDictionary } from \"../../Session/IMetadataDictionary.js\";\r\n\r\nexport class PutCompareExchangeValueOperation<T> implements IOperation<CompareExchangeResult<T>> {\r\n\r\n    private readonly _key: string;\r\n    private readonly _value: T;\r\n    private readonly _index: number;\r\n    private readonly _metadata: IMetadataDictionary;\r\n\r\n    public constructor(key: string, value: T, index: number)\r\n    public constructor(key: string, value: T, index: number, metadata: IMetadataDictionary)\r\n    public constructor(key: string, value: T, index: number, metadata?: IMetadataDictionary) {\r\n        this._key = key;\r\n        this._value = value;\r\n        this._index = index;\r\n        this._metadata = metadata;\r\n    }\r\n\r\n    public getCommand(\r\n        store: IDocumentStore,\r\n        conventions: DocumentConventions,\r\n        cache: HttpCache): RavenCommand<CompareExchangeResult<T>> {\r\n        return new PutCompareExchangeValueCommand<T>(this._key, this._value, this._index, this._metadata, conventions);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nexport class PutCompareExchangeValueCommand<T> extends RavenCommand<CompareExchangeResult<T>> implements IRaftCommand {\r\n    private readonly _key: string;\r\n    private readonly _value: T;\r\n    private readonly _index: number;\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _metadata: IMetadataDictionary;\r\n\r\n    public constructor(\r\n        key: string,\r\n        value: T,\r\n        index: number,\r\n        metadata: IMetadataDictionary,\r\n        conventions: DocumentConventions) {\r\n        super();\r\n\r\n        if (!key) {\r\n            throwError(\"InvalidArgumentException\", \"The key argument must have value\");\r\n        }\r\n\r\n        if (index < 0) {\r\n            throwError(\"InvalidArgumentException\", \"Index must be a non-negative number\");\r\n        }\r\n\r\n        this._key = key;\r\n        this._value = value;\r\n        this._index = index;\r\n        this._metadata = metadata;\r\n        this._conventions = conventions || DocumentConventions.defaultConventions;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/cmpxchg?key=\" + encodeURIComponent(this._key) + \"&index=\" + this._index;\r\n\r\n        const tuple = {};\r\n        tuple[COMPARE_EXCHANGE.OBJECT_FIELD_NAME] = TypeUtil.isPrimitive(this._value)\r\n            ? this._value\r\n            : this._conventions.transformObjectKeysToRemoteFieldNameConvention(this._value as any);\r\n\r\n        if (this._metadata) {\r\n            const metadata = CompareExchangeSessionValue.prepareMetadataForPut(this._key, this._metadata, this._conventions);\r\n            tuple[CONSTANTS.Documents.Metadata.KEY] = metadata;\r\n        }\r\n\r\n        return {\r\n            method: \"PUT\",\r\n            uri,\r\n            body: JsonSerializer.getDefault().serialize(tuple),\r\n            headers: this._headers().typeAppJson().build()\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        let body: string = null;\r\n\r\n        const resObj = await this._pipeline<ServerCasing<ServerResponse<CompareExchangeResultResponse>>>()\r\n            .collectBody(_ => body = _)\r\n            .parseJsonSync()\r\n            .process(bodyStream);\r\n\r\n        const type = !TypeUtil.isPrimitive(this._value)\r\n            ? this._conventions.getTypeDescriptorByEntity(this._value as any) as ObjectTypeDescriptor\r\n            : null;\r\n        const clazz: CompareExchangeResultClass<T> = TypeUtil.isClass(type) ? type as any : null;\r\n        this.result = CompareExchangeResult.parseFromObject(resObj, this._conventions, clazz);\r\n\r\n        return body;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}