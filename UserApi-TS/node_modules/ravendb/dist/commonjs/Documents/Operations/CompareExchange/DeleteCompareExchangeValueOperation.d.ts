import { HttpRequestParameters } from "../../../Primitives/Http.js";
import { IOperation, OperationResultType } from "../OperationAbstractions.js";
import { CompareExchangeResult } from "./CompareExchangeResult.js";
import { CompareExchangeResultClass } from "../../../Types/index.js";
import { IDocumentStore } from "../../IDocumentStore.js";
import { DocumentConventions } from "../../Conventions/DocumentConventions.js";
import { HttpCache } from "../../../Http/HttpCache.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { ServerNode } from "../../../Http/ServerNode.js";
import { Stream } from "node:stream";
import { IRaftCommand } from "../../../Http/IRaftCommand.js";
export declare class DeleteCompareExchangeValueOperation<T> implements IOperation<CompareExchangeResult<T>> {
    private readonly _key;
    private readonly _index;
    private readonly _clazz;
    constructor(key: string, index: number, clazz?: CompareExchangeResultClass<T>);
    getCommand(store: IDocumentStore, conventions: DocumentConventions, cache: HttpCache): RavenCommand<CompareExchangeResult<T>>;
    get resultType(): OperationResultType;
}
export declare class RemoveCompareExchangeCommand<T> extends RavenCommand<CompareExchangeResult<T>> implements IRaftCommand {
    private readonly _key;
    private readonly _index;
    private readonly _clazz;
    private readonly _conventions;
    constructor(key: string, index: number, conventions: DocumentConventions, clazz?: CompareExchangeResultClass<T>);
    get isReadRequest(): boolean;
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
    getRaftUniqueRequestId(): string;
}
//# sourceMappingURL=DeleteCompareExchangeValueOperation.d.ts.map