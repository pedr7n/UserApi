{"version":3,"file":"OperationCompletionAwaiter.js","sourceRoot":"","sources":["../../../../src/Documents/Operations/OperationCompletionAwaiter.ts"],"names":[],"mappings":";;;AAAA,mFAA2E;AAE3E,wDAAuD;AAEvD,wDAAgE;AAGhE,iEAAqD;AACrD,iFAA2E;AAI3E,MAAa,0BAA0B;IAE3B,gBAAgB,CAAkB;IACzB,YAAY,CAAsB;IAClC,GAAG,CAAS;IACrB,QAAQ,CAAS;IAEzB,IAAW,EAAE;QACT,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAED,YAAmB,eAAgC,EAAE,WAAgC,EAAE,EAAU,EAAE,OAAgB;QAC/G,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACxC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAEO,KAAK,CAAC,qBAAqB;QAC/B,MAAM,OAAO,GAAiC,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzH,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC7C,OAAO,OAAO,CAAC,MAAM,CAAC;IAC1B,CAAC;IAES,yBAAyB,CAAC,WAAgC,EAAE,EAAU,EAAE,OAAgB;QAC9F,OAAO,IAAI,wDAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IAED,IAAI,OAAO;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,IAAI,OAAO,CAAC,OAAe;QACvB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAEM,iBAAiB;QACpB,MAAM,sBAAsB,GAAG,GAAG,EAAE;YAChC,OAAO,OAAO,CAAC,OAAO,EAAE;iBACnB,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC;iBACxC,IAAI,CAAC,CAAC,qBAAqB,EAAE,EAAE;gBAC5B,MAAM,eAAe,GAAG,qBAAqB,CAAC,MAAyB,CAAC;gBACxE,QAAQ,eAAe,EAAE,CAAC;oBACtB,KAAK,WAAW,CAAC,CAAC,CAAC;wBACf,OAAO;oBACX,CAAC;oBACD,KAAK,UAAU,CAAC,CAAC,CAAC;wBACd,IAAA,qBAAU,EAAC,4BAA4B,EACnC,mBAAmB,IAAI,CAAC,GAAG,qBAAqB,CAAC,CAAC;wBACtD,MAAM;oBACV,CAAC;oBACD,KAAK,SAAS,CAAC,CAAC,CAAC;wBACb,MAAM,WAAW,GAA6B,qBAAqB,CAAC,MAAM,CAAC;wBAC3E,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAC,CAAC,CAAC;wBAC1F,MAAM,8BAAmB,CAAC,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;oBACvE,CAAC;gBACL,CAAC;gBAED,OAAO,IAAA,sBAAK,EAAC,GAAG,CAAC;qBACZ,IAAI,CAAC,GAAG,EAAE,CAAC,sBAAsB,EAAE,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;QACX,CAAC,CAAC;QAEF,OAAO,OAAO,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC,CAAC;IACrD,CAAC;IAES,wBAAwB,CAAC,EAAU,EAAE,OAAe;QAC1D,OAAO,IAAI,8CAAoB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAEM,KAAK,CAAC,IAAI;QACb,MAAM,OAAO,GAAG,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAEtE,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;CACJ;AA3ED,gEA2EC","sourcesContent":["import { GetOperationStateCommand } from \"./GetOperationStateOperation.js\";\r\nimport { RavenCommand, IRavenResponse } from \"../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { OperationExceptionResult } from \"./OperationAbstractions.js\";\r\nimport { ExceptionDispatcher } from \"../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { RequestExecutor } from \"../../Http/RequestExecutor.js\";\r\nimport { delay } from \"../../Utility/PromiseUtil.js\";\r\nimport { KillOperationCommand } from \"../Commands/KillOperationCommand.js\";\r\n\r\ntype OperationStatus = \"Completed\" | \"Canceled\" | \"Faulted\";\r\n\r\nexport class OperationCompletionAwaiter {\r\n\r\n    private _requestExecutor: RequestExecutor;\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _id: number;\r\n    private _nodeTag: string;\r\n\r\n    public get id(): number {\r\n        return this._id;\r\n    }\r\n\r\n    public constructor(requestExecutor: RequestExecutor, conventions: DocumentConventions, id: number, nodeTag?: string) {\r\n        this._requestExecutor = requestExecutor;\r\n        this._conventions = conventions;\r\n        this._id = id;\r\n        this._nodeTag = nodeTag;\r\n    }\r\n\r\n    private async _fetchOperationStatus(): Promise<IRavenResponse> {\r\n        const command: RavenCommand<IRavenResponse> = this._getOperationStateCommand(this._conventions, this._id, this._nodeTag);\r\n        await this._requestExecutor.execute(command);\r\n        return command.result;\r\n    }\r\n\r\n    protected _getOperationStateCommand(conventions: DocumentConventions, id: number, nodeTag?: string): RavenCommand<IRavenResponse> {\r\n        return new GetOperationStateCommand(this._id, nodeTag);\r\n    }\r\n\r\n    get nodeTag() {\r\n        return this._nodeTag;\r\n    }\r\n\r\n    set nodeTag(nodeTag: string) {\r\n        this._nodeTag = nodeTag;\r\n    }\r\n\r\n    public waitForCompletion(): Promise<void> {\r\n        const operationStatusPolling = () => {\r\n            return Promise.resolve()\r\n                .then(() => this._fetchOperationStatus())\r\n                .then((operationStatusResult) => {\r\n                    const operationStatus = operationStatusResult.status as OperationStatus;\r\n                    switch (operationStatus) {\r\n                        case \"Completed\": {\r\n                            return;\r\n                        }\r\n                        case \"Canceled\": {\r\n                            throwError(\"OperationCanceledException\",\r\n                                `Operation of ID ${this._id} has been canceled.`);\r\n                            break;\r\n                        }\r\n                        case \"Faulted\": {\r\n                            const faultResult: OperationExceptionResult = operationStatusResult.result;\r\n                            const errorSchema = Object.assign({}, faultResult, {url: this._requestExecutor.getUrl()});\r\n                            throw ExceptionDispatcher.get(errorSchema, faultResult.statusCode);\r\n                        }\r\n                    }\r\n\r\n                    return delay(500)\r\n                        .then(() => operationStatusPolling());\r\n                });\r\n        };\r\n\r\n        return Promise.resolve(operationStatusPolling());\r\n    }\r\n\r\n    protected _getKillOperationCommand(id: number, nodeTag: string): RavenCommand<void> {\r\n        return new KillOperationCommand(id, nodeTag);\r\n    }\r\n\r\n    public async kill() {\r\n        const command = this._getKillOperationCommand(this._id, this.nodeTag);\r\n\r\n        await this._requestExecutor.execute(command);\r\n    }\r\n}\r\n"]}