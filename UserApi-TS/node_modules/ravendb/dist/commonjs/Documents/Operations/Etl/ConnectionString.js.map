{"version":3,"file":"ConnectionString.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Etl/ConnectionString.ts"],"names":[],"mappings":";;;AAsBA,MAAsB,gBAAgB;IAC3B,IAAI,CAAS;CAEvB;AAHD,4CAGC;AAED,MAAa,qBAAsB,SAAQ,gBAAgB;IAChD,QAAQ,CAAS;IACjB,qBAAqB,CAAW;IAChC,IAAI,GAAyB,OAAO,CAAC;CAC/C;AAJD,sDAIC;AAED,MAAa,mBAAoB,SAAQ,gBAAgB;IAC9C,gBAAgB,CAAS;IACzB,WAAW,CAAS;IACpB,IAAI,GAAyB,KAAK,CAAC;CAC7C;AAJD,kDAIC;AAED,MAAa,oBAAqB,SAAQ,gBAAgB;IAC/C,aAAa,CAAgB;IAC7B,UAAU,CAAa;IACvB,aAAa,CAAgB;IAC7B,eAAe,CAAkB;IACjC,mBAAmB,CAAsB;IACzC,WAAW,CAAc;IAEzB,IAAI,GAAyB,MAAM,CAAC;CAC9C;AATD,oDASC;AAED,MAAa,6BAA8B,SAAQ,gBAAgB;IACxD,KAAK,CAAW;IAChB,cAAc,CAAkB;IAEvC;;OAEG;IACI,uBAAuB,CAAW;IAElC,IAAI,GAAyB,eAAe,CAAC;CACvD;AAVD,sEAUC;AAED,MAAa,cAAc;IAChB,MAAM,CAAuB;IAC7B,KAAK,CAAsB;IAC3B,WAAW,CAA4B;CACjD;AAJD,wCAIC;AAgBD,MAAa,qBAAsB,SAAQ,gBAAgB;IAChD,UAAU,CAAkB;IAC5B,uBAAuB,CAA0B;IACjD,0BAA0B,CAA6B;IAEvD,IAAI,GAAyB,OAAO,CAAC;CAC/C;AAND,sDAMC","sourcesContent":["import { LocalSettings } from \"../Backups/LocalSettings.js\";\r\nimport { S3Settings } from \"../Backups/S3Settings.js\";\r\nimport { AzureSettings } from \"../Backups/AzureSettings.js\";\r\nimport { GlacierSettings } from \"../Backups/GlacierSettings.js\";\r\nimport { GoogleCloudSettings } from \"../Backups/GoogleCloudSettings.js\";\r\nimport { FtpSettings } from \"../Backups/FtpSettings.js\";\r\nimport { KafkaConnectionSettings } from \"./Queue/KafkaConnectionSettings.js\";\r\nimport { RabbitMqConnectionSettings } from \"./Queue/RabbitMqConnectionSettings.js\";\r\n\r\nexport type ConnectionStringType =\r\n    \"None\"\r\n    | \"Raven\"\r\n    | \"Sql\"\r\n    | \"Olap\"\r\n    | \"ElasticSearch\"\r\n    | \"Queue\";\r\n\r\nexport type QueueBrokerType =\r\n    \"None\"\r\n    | \"Kafka\"\r\n    | \"RabbitMq\";\r\n\r\nexport abstract class ConnectionString {\r\n    public name: string;\r\n    public abstract type: ConnectionStringType;\r\n}\r\n\r\nexport class RavenConnectionString extends ConnectionString {\r\n    public database: string;\r\n    public topologyDiscoveryUrls: string[];\r\n    public type: ConnectionStringType = \"Raven\";\r\n}\r\n\r\nexport class SqlConnectionString extends ConnectionString {\r\n    public connectionString: string;\r\n    public factoryName: string;\r\n    public type: ConnectionStringType = \"Sql\";\r\n}\r\n\r\nexport class OlapConnectionString extends ConnectionString {\r\n    public localSettings: LocalSettings;\r\n    public s3Settings: S3Settings;\r\n    public azureSettings: AzureSettings;\r\n    public glacierSettings: GlacierSettings;\r\n    public googleCloudSettings: GoogleCloudSettings;\r\n    public ftpSettings: FtpSettings;\r\n\r\n    public type: ConnectionStringType = \"Olap\";\r\n}\r\n\r\nexport class ElasticSearchConnectionString extends ConnectionString {\r\n    public nodes: string[];\r\n    public authentication?: Authentication;\r\n\r\n    /**\r\n     * @deprecated Elasticsearch compatibility isn't required anymore to connect with Elasticsearch server v8.x.\r\n     */\r\n    public enableCompatibilityMode?: boolean;\r\n\r\n    public type: ConnectionStringType = \"ElasticSearch\";\r\n}\r\n\r\nexport class Authentication {\r\n    public apiKey: ApiKeyAuthentication;\r\n    public basic: BasicAuthentication;\r\n    public certificate: CertificateAuthentication;\r\n}\r\n\r\nexport interface ApiKeyAuthentication {\r\n    apiKeyId: string;\r\n    apiKey: string;\r\n}\r\n\r\nexport interface BasicAuthentication {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nexport interface CertificateAuthentication {\r\n    certificatesBase64: string[];\r\n}\r\n\r\nexport class QueueConnectionString extends ConnectionString {\r\n    public brokerType: QueueBrokerType;\r\n    public kafkaConnectionSettings: KafkaConnectionSettings;\r\n    public rabbitMqConnectionSettings: RabbitMqConnectionSettings;\r\n\r\n    public type: ConnectionStringType = \"Queue\";\r\n}\r\n\r\n\r\nexport type EtlType =\r\n    \"Raven\"\r\n    | \"Sql\"\r\n    | \"Olap\"\r\n    | \"ElasticSearch\"\r\n    | \"Queue\";\r\n"]}