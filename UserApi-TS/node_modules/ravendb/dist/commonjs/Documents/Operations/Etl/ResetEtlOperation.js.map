{"version":3,"file":"ResetEtlOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Etl/ResetEtlOperation.ts"],"names":[],"mappings":";;;AAGA,mEAA6D;AAG7D,4EAAsE;AACtE,2DAA0D;AAE1D,MAAa,iBAAiB;IACT,kBAAkB,CAAS;IAC3B,mBAAmB,CAAS;IAE7C,YAAmB,iBAAyB,EAAE,kBAA0B;QACpE,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACrB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,kCAAkC,CAAC,CAAC;QAC/E,CAAC;QAED,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACtB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,mCAAmC,CAAC,CAAC;QAChF,CAAC;QACD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;IAClD,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAClF,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAvBD,8CAuBC;AAED,MAAM,eAAgB,SAAQ,8BAAkB;IAC3B,kBAAkB,CAAS;IAC3B,mBAAmB,CAAS;IAE7C,YAAmB,iBAAyB,EAAE,kBAA0B;QACpE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;QAC9C,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IACjC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,+BAA+B;cAChF,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,CAAC;cAC3C,sBAAsB,GAAG,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAE5E,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QAEtD,OAAO;YACH,MAAM,EAAE,OAAO;YACf,OAAO;YACP,IAAI;YACJ,GAAG;SACN,CAAA;IACL,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\n\r\nexport class ResetEtlOperation implements IMaintenanceOperation<void> {\r\n    private readonly _configurationName: string;\r\n    private readonly _transformationName: string;\r\n\r\n    public constructor(configurationName: string, transformationName: string) {\r\n        if (!configurationName) {\r\n            throwError(\"InvalidArgumentException\", \"ConfigurationName cannot be null\");\r\n        }\r\n\r\n        if (!transformationName) {\r\n            throwError(\"InvalidArgumentException\", \"TransformationName cannot be null\");\r\n        }\r\n        this._configurationName = configurationName;\r\n        this._transformationName = transformationName;\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new ResetEtlCommand(this._configurationName, this._transformationName);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nclass ResetEtlCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _configurationName: string;\r\n    private readonly _transformationName: string;\r\n\r\n    public constructor(configurationName: string, transformationName: string) {\r\n        super();\r\n        this._configurationName = configurationName;\r\n        this._transformationName = transformationName;\r\n        this._responseType = \"Empty\";\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/etl?configurationName=\"\r\n            + encodeURIComponent(this._configurationName)\r\n            + \"&transformationName=\" + encodeURIComponent(this._transformationName);\r\n\r\n        const body = \"{}\";\r\n        const headers = this._headers().typeAppJson().build();\r\n\r\n        return {\r\n            method: \"RESET\",\r\n            headers,\r\n            body,\r\n            uri\r\n        }\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}"]}