import { LocalSettings } from "../Backups/LocalSettings.js";
import { S3Settings } from "../Backups/S3Settings.js";
import { AzureSettings } from "../Backups/AzureSettings.js";
import { GlacierSettings } from "../Backups/GlacierSettings.js";
import { GoogleCloudSettings } from "../Backups/GoogleCloudSettings.js";
import { FtpSettings } from "../Backups/FtpSettings.js";
import { KafkaConnectionSettings } from "./Queue/KafkaConnectionSettings.js";
import { RabbitMqConnectionSettings } from "./Queue/RabbitMqConnectionSettings.js";
export type ConnectionStringType = "None" | "Raven" | "Sql" | "Olap" | "ElasticSearch" | "Queue";
export type QueueBrokerType = "None" | "Kafka" | "RabbitMq";
export declare abstract class ConnectionString {
    name: string;
    abstract type: ConnectionStringType;
}
export declare class RavenConnectionString extends ConnectionString {
    database: string;
    topologyDiscoveryUrls: string[];
    type: ConnectionStringType;
}
export declare class SqlConnectionString extends ConnectionString {
    connectionString: string;
    factoryName: string;
    type: ConnectionStringType;
}
export declare class OlapConnectionString extends ConnectionString {
    localSettings: LocalSettings;
    s3Settings: S3Settings;
    azureSettings: AzureSettings;
    glacierSettings: GlacierSettings;
    googleCloudSettings: GoogleCloudSettings;
    ftpSettings: FtpSettings;
    type: ConnectionStringType;
}
export declare class ElasticSearchConnectionString extends ConnectionString {
    nodes: string[];
    authentication?: Authentication;
    /**
     * @deprecated Elasticsearch compatibility isn't required anymore to connect with Elasticsearch server v8.x.
     */
    enableCompatibilityMode?: boolean;
    type: ConnectionStringType;
}
export declare class Authentication {
    apiKey: ApiKeyAuthentication;
    basic: BasicAuthentication;
    certificate: CertificateAuthentication;
}
export interface ApiKeyAuthentication {
    apiKeyId: string;
    apiKey: string;
}
export interface BasicAuthentication {
    username: string;
    password: string;
}
export interface CertificateAuthentication {
    certificatesBase64: string[];
}
export declare class QueueConnectionString extends ConnectionString {
    brokerType: QueueBrokerType;
    kafkaConnectionSettings: KafkaConnectionSettings;
    rabbitMqConnectionSettings: RabbitMqConnectionSettings;
    type: ConnectionStringType;
}
export type EtlType = "Raven" | "Sql" | "Olap" | "ElasticSearch" | "Queue";
//# sourceMappingURL=ConnectionString.d.ts.map