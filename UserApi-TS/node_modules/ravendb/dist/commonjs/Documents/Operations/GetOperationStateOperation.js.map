{"version":3,"file":"GetOperationStateOperation.js","sourceRoot":"","sources":["../../../../src/Documents/Operations/GetOperationStateOperation.ts"],"names":[],"mappings":";;;AAEA,gEAA0E;AAK1E,MAAa,0BAA0B;IAElB,GAAG,CAAS;IACZ,QAAQ,CAAS;IAElC,YAAmB,EAAU,EAAE,OAAgB;QAC3C,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CAEJ;AAlBD,gEAkBC;AAED,MAAa,wBAAyB,SAAQ,8BAA4B;IAEtE,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEgB,GAAG,CAAS;IAE7B,YAAmB,EAAU,EAAE,OAAgB;QAC3C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC;QAEhC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,cAAc,IAAI,CAAC,QAAQ,wBAAwB,IAAI,CAAC,GAAG,EAAE,CAAC;QACrF,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO;QACX,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;CACJ;AA5BD,4DA4BC","sourcesContent":["import { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { RavenCommand, IRavenResponse } from \"../../Http/RavenCommand.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"./OperationAbstractions.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\n\r\nexport class GetOperationStateOperation implements IMaintenanceOperation<IRavenResponse> {\r\n\r\n    private readonly _id: number;\r\n    private readonly _nodeTag: string;\r\n\r\n    public constructor(id: number, nodeTag?: string) {\r\n        this._id = id;\r\n        this._nodeTag = nodeTag;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<IRavenResponse> {\r\n        return new GetOperationStateCommand(this._id, this._nodeTag);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n}\r\n\r\nexport class GetOperationStateCommand extends RavenCommand<IRavenResponse> {\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    private readonly _id: number;\r\n\r\n    public constructor(id: number, nodeTag?: string) {\r\n        super();\r\n        this._id = id;\r\n        this._selectedNodeTag = nodeTag;\r\n\r\n        this.timeout = 15_000;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = `${node.url}/databases/${node.database}/operations/state?id=${this._id}`;\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n}\r\n"]}