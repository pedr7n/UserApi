{"version":3,"file":"StartBackupOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Backups/StartBackupOperation.ts"],"names":[],"mappings":";;;AAKA,mEAA6D;AAG7D,MAAa,oBAAoB;IACZ,aAAa,CAAU;IACvB,OAAO,CAAS;IAEjC,YAAmB,YAAqB,EAAE,MAAc;QACpD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACpE,CAAC;CACJ;AAhBD,oDAgBC;AAED,MAAM,kBAAmB,SAAQ,8BAAwC;IACpD,aAAa,CAAU;IACvB,OAAO,CAAS;IAEjC,YAAmB,YAAqB,EAAE,MAAc;QACpD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC9C,sCAAsC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;cAChF,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;QAEhC,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;SACjB,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { StartBackupOperationResult } from \"./StartBackupOperationResult.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class StartBackupOperation implements IMaintenanceOperation<StartBackupOperationResult> {\r\n    private readonly _isFullBackup: boolean;\r\n    private readonly _taskId: number;\r\n\r\n    public constructor(isFullBackup: boolean, taskId: number) {\r\n        this._isFullBackup = isFullBackup;\r\n        this._taskId = taskId;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<StartBackupOperationResult> {\r\n        return new StartBackupCommand(this._isFullBackup, this._taskId);\r\n    }\r\n}\r\n\r\nclass StartBackupCommand extends RavenCommand<StartBackupOperationResult> {\r\n    private readonly _isFullBackup: boolean;\r\n    private readonly _taskId: number;\r\n\r\n    public constructor(isFullBackup: boolean, taskId: number) {\r\n        super();\r\n\r\n        this._isFullBackup = isFullBackup;\r\n        this._taskId = taskId;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database\r\n            + \"/admin/backup/database?isFullBackup=\" + (this._isFullBackup ? \"true\" : \"false\")\r\n            + \"&taskId=\" + this._taskId;\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\"\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n}"]}