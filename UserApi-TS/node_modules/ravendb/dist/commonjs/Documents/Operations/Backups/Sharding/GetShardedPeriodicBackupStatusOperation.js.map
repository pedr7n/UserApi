{"version":3,"file":"GetShardedPeriodicBackupStatusOperation.js","sourceRoot":"","sources":["../../../../../../src/Documents/Operations/Backups/Sharding/GetShardedPeriodicBackupStatusOperation.ts"],"names":[],"mappings":";;;AAIA,sEAAgE;AAKhE,gGAAoF;AAEpF,MAAa,uCAAuC;IAC/B,OAAO,CAAS;IAEjC,YAAY,MAAc;QACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,qCAAqC,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IAChF,CAAC;CACJ;AAdD,0FAcC;AAED,MAAM,qCAAsC,SAAQ,8BAA2D;IAC1F,OAAO,CAAS;IAChB,YAAY,CAAsB;IAEnD,YAAY,MAAc,EAAE,WAAgC;QACxD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,+BAA+B,GAAG,IAAI,CAAC,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;QACnG,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;SAChB,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAgE,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aACpH,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzB,IAAI,CAAC,MAAM,GAAG;YACV,GAAG,OAAO;YACV,QAAQ,EAAE,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC;SAC7C,CAAA;QAED,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,uHAAuH,CAAC,CAAC;QAC7I,CAAC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAMD,SAAS,cAAc,CAAC,QAA8D;IAClF,IAAI,CAAC,QAAQ,EAAE,CAAC;QACZ,OAAO,IAAI,CAAC;IAChB,CAAC;IACD,MAAM,MAAM,GAAG,EAA0C,CAAC;IAE1D,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACjC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAA,gEAA0B,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../../OperationAbstractions.js\";\r\nimport { AbstractGetPeriodicBackupStatusOperationResult } from \"../AbstractGetPeriodicBackupStatusOperationResult.js\";\r\nimport { PeriodicBackupStatus } from \"../PeriodicBackupStatus.js\";\r\nimport { DocumentConventions } from \"../../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { ServerResponse } from \"../../../../Types/index.js\";\r\nimport { revivePeriodicBackupStatus } from \"../GetPeriodicBackupStatusOperation.js\";\r\n\r\nexport class GetShardedPeriodicBackupStatusOperation implements IMaintenanceOperation<GetShardedPeriodicBackupStatusOperationResult> {\r\n    private readonly _taskId: number;\r\n\r\n    constructor(taskId: number) {\r\n        this._taskId = taskId;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<GetShardedPeriodicBackupStatusOperationResult> {\r\n        return new GetShardedPeriodicBackupStatusCommand(this._taskId, conventions);\r\n    }\r\n}\r\n\r\nclass GetShardedPeriodicBackupStatusCommand extends RavenCommand<GetShardedPeriodicBackupStatusOperationResult> {\r\n    private readonly _taskId: number;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    constructor(taskId: number, conventions: DocumentConventions) {\r\n        super();\r\n        this._taskId = taskId;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/periodic-backup/status?name=\" + node.database + \"&taskId=\" + this._taskId;\r\n        return {\r\n            uri,\r\n            method: \"GET\"\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline<ServerResponse<GetShardedPeriodicBackupStatusOperationResult>>(_ => body = _)\r\n            .process(bodyStream);\r\n\r\n        this.result = {\r\n            ...results,\r\n            statuses: reviveStatuses(results.statuses)\r\n        }\r\n\r\n        if (!this.result.isSharded) {\r\n            throw new Error(\"Database is sharded, can't use GetPeriodicBackupStatusOperation. Use GetShardedPeriodicBackupStatusOperation instead.\");\r\n        }\r\n        return body;\r\n    }\r\n}\r\n\r\nexport interface GetShardedPeriodicBackupStatusOperationResult extends AbstractGetPeriodicBackupStatusOperationResult {\r\n    statuses: Record<number, PeriodicBackupStatus>;\r\n}\r\n\r\nfunction reviveStatuses(statuses: Record<number, ServerResponse<PeriodicBackupStatus>>): Record<number, PeriodicBackupStatus> {\r\n    if (!statuses) {\r\n        return null;\r\n    }\r\n    const result = {} as Record<string, PeriodicBackupStatus>;\r\n\r\n    Object.entries(statuses).map(entry => {\r\n        result[entry[0]] = revivePeriodicBackupStatus(entry[1]);\r\n    });\r\n\r\n    return result;\r\n}"]}