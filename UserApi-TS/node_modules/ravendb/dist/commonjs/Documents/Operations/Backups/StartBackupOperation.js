"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartBackupOperation = void 0;
const RavenCommand_js_1 = require("../../../Http/RavenCommand.js");
class StartBackupOperation {
    _isFullBackup;
    _taskId;
    constructor(isFullBackup, taskId) {
        this._isFullBackup = isFullBackup;
        this._taskId = taskId;
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(conventions) {
        return new StartBackupCommand(this._isFullBackup, this._taskId);
    }
}
exports.StartBackupOperation = StartBackupOperation;
class StartBackupCommand extends RavenCommand_js_1.RavenCommand {
    _isFullBackup;
    _taskId;
    constructor(isFullBackup, taskId) {
        super();
        this._isFullBackup = isFullBackup;
        this._taskId = taskId;
    }
    get isReadRequest() {
        return true;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database
            + "/admin/backup/database?isFullBackup=" + (this._isFullBackup ? "true" : "false")
            + "&taskId=" + this._taskId;
        return {
            uri,
            method: "POST"
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
}
//# sourceMappingURL=StartBackupOperation.js.map