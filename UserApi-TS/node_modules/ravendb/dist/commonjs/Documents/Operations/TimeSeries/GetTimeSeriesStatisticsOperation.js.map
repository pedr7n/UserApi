{"version":3,"file":"GetTimeSeriesStatisticsOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/TimeSeries/GetTimeSeriesStatisticsOperation.ts"],"names":[],"mappings":";;;AAMA,mEAA6D;AAI7D,8DAAwD;AAExD,MAAa,gCAAgC;IACxB,WAAW,CAAS;IAErC;;;OAGG;IACH,YAAY,UAAkB;QAC1B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,KAAqB,EAAE,WAAgC,EAAE,SAAoB;QACpF,OAAO,IAAI,8BAA8B,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7E,CAAC;CACJ;AAlBD,4EAkBC;AAED,MAAM,8BAA+B,SAAQ,8BAAkC;IAC1D,YAAY,CAAsB;IAClC,WAAW,CAAS;IAErC,YAAmB,WAAgC,EAAE,UAAkB;QACnE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,0BAA0B,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEtH,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;SACN,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,IAAI,GAAW,IAAI,CAAC;QAExB,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,OAAO,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAuC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAErH,MAAM,EAAE,UAAU,EAAE,GAAG,SAAS,EAAE,GAAG,OAAO,CAAC;QAE7C,IAAI,CAAC,MAAM,GAAG;YACV,GAAG,SAAS;YACZ,UAAU,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBAC3B,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;gBACjC,OAAO;oBACH,GAAG,CAAC;oBACJ,SAAS,EAAE,sBAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;oBACxC,OAAO,EAAE,sBAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;iBACvC,CAAA;YACL,CAAC,CAAC;SACL,CAAA;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { IOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { TimeSeriesStatistics } from \"./TimeSeriesStatistics.js\";\r\nimport { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { ServerResponse } from \"../../../Types/index.js\";\r\nimport { DateUtil } from \"../../../Utility/DateUtil.js\";\r\n\r\nexport class GetTimeSeriesStatisticsOperation implements IOperation<TimeSeriesStatistics> {\r\n    private readonly _documentId: string;\r\n\r\n    /**\r\n     * Retrieve start, end and total number of entries for all time-series of a given document\r\n     * @param documentId Document id\r\n     */\r\n    constructor(documentId: string) {\r\n        this._documentId = documentId;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(store: IDocumentStore, conventions: DocumentConventions, httpCache: HttpCache): RavenCommand<TimeSeriesStatistics> {\r\n        return new GetTimeSeriesStatisticsCommand(conventions, this._documentId);\r\n    }\r\n}\r\n\r\nclass GetTimeSeriesStatisticsCommand extends RavenCommand<TimeSeriesStatistics> {\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _documentId: string;\r\n\r\n    public constructor(conventions: DocumentConventions, documentId: string) {\r\n        super();\r\n\r\n        this._conventions = conventions;\r\n        this._documentId = documentId;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/timeseries/stats?docId=\" + this._urlEncode(this._documentId);\r\n\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        let body: string = null;\r\n\r\n        if (!bodyStream) {\r\n            this.result = null;\r\n            return null;\r\n        }\r\n        const results = await this._defaultPipeline<ServerResponse<TimeSeriesStatistics>>(_ => body = _).process(bodyStream);\r\n\r\n        const { timeSeries, ...restProps } = results;\r\n\r\n        this.result = {\r\n            ...restProps,\r\n            timeSeries: timeSeries.map(t => {\r\n                const { startDate, endDate } = t;\r\n                return {\r\n                    ...t,\r\n                    startDate: DateUtil.utc.parse(startDate),\r\n                    endDate: DateUtil.utc.parse(endDate)\r\n                }\r\n            })\r\n        }\r\n\r\n        return body;\r\n    }\r\n}\r\n"]}