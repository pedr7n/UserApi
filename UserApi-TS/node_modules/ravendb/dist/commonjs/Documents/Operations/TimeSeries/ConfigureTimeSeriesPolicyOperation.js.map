{"version":3,"file":"ConfigureTimeSeriesPolicyOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/TimeSeries/ConfigureTimeSeriesPolicyOperation.ts"],"names":[],"mappings":";;;AAGA,2DAA0D;AAG1D,4EAAsE;AAEtE,mEAA6D;AAI7D,MAAa,kCAAkC;IAC1B,WAAW,CAAS;IACpB,OAAO,CAAmB;IAE3C,YAAmB,UAAkB,EAAE,MAAwB;QAC3D,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,gCAAgC,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAChF,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAhBD,gFAgBC;AAED,MAAM,gCAAiC,SAAQ,8BAAgD;IAC1E,cAAc,CAAmB;IACjC,WAAW,CAAS;IAErC,YAAmB,UAAkB,EAAE,aAA+B;QAClE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAA,qBAAU,EAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,sCAAsC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAElI,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC,CAAC;QAEzE,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;YACH,IAAI;YACJ,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;SACjD,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,sBAAsB;QAClB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { ConfigureTimeSeriesOperationResult } from \"./ConfigureTimeSeriesOperationResult.js\";\r\nimport { TimeSeriesPolicy } from \"./TimeSeriesPolicy.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class ConfigureTimeSeriesPolicyOperation implements IMaintenanceOperation<ConfigureTimeSeriesOperationResult> {\r\n    private readonly _collection: string;\r\n    private readonly _config: TimeSeriesPolicy;\r\n\r\n    public constructor(collection: string, config: TimeSeriesPolicy) {\r\n        this._collection = collection;\r\n        this._config = config;\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ConfigureTimeSeriesOperationResult> {\r\n        return new ConfigureTimeSeriesPolicyCommand(this._collection, this._config);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nclass ConfigureTimeSeriesPolicyCommand extends RavenCommand<ConfigureTimeSeriesOperationResult> implements IRaftCommand {\r\n    private readonly _configuration: TimeSeriesPolicy;\r\n    private readonly _collection: string;\r\n\r\n    public constructor(collection: string, configuration: TimeSeriesPolicy) {\r\n        super();\r\n\r\n        if (!configuration) {\r\n            throwError(\"InvalidArgumentException\", \"Configuration cannot be null\");\r\n        }\r\n\r\n        if (!collection) {\r\n            throwError(\"InvalidArgumentException\", \"Collection cannot be null\");\r\n        }\r\n\r\n        this._configuration = configuration;\r\n        this._collection = collection;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/timeseries/policy?collection=\" + this._urlEncode(this._collection);\r\n\r\n        const body = this._serializer.serialize(this._configuration.serialize());\r\n\r\n        return {\r\n            method: \"PUT\",\r\n            uri,\r\n            body,\r\n            headers: this._headers().typeAppJson().build()\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}