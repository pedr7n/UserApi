{"version":3,"file":"RemoveTimeSeriesPolicyOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/TimeSeries/RemoveTimeSeriesPolicyOperation.ts"],"names":[],"mappings":";;;AAEA,2DAA0D;AAG1D,4EAAsE;AAEtE,mEAA6D;AAI7D,MAAa,+BAA+B;IACvB,WAAW,CAAS;IACpB,KAAK,CAAS;IAE/B,YAAmB,UAAkB,EAAE,IAAY;QAC/C,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAA,qBAAU,EAAC,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,IAAA,qBAAU,EAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAGD,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,6BAA6B,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3E,CAAC;CACJ;AAzBD,0EAyBC;AAED,MAAM,6BAA8B,SAAQ,8BAAgD;IACvE,WAAW,CAAS;IACpB,KAAK,CAAS;IAE/B,YAAmB,UAAkB,EAAE,IAAY;QAC/C,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC9C,sCAAsC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC;cAC1E,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE7C,OAAO;YACH,MAAM,EAAE,QAAQ;YAChB,GAAG;SACN,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,sBAAsB;QAClB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { ConfigureTimeSeriesOperationResult } from \"./ConfigureTimeSeriesOperationResult.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class RemoveTimeSeriesPolicyOperation implements IMaintenanceOperation<ConfigureTimeSeriesOperationResult> {\r\n    private readonly _collection: string;\r\n    private readonly _name: string;\r\n\r\n    public constructor(collection: string, name: string) {\r\n        if (!collection) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null\");\r\n        }\r\n\r\n        if (!name) {\r\n            throwError(\"InvalidArgumentException\", \"Collection cannot be null\");\r\n        }\r\n\r\n        this._collection = collection;\r\n        this._name = name;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ConfigureTimeSeriesOperationResult> {\r\n        return new RemoveTimeSeriesPolicyCommand(this._collection, this._name);\r\n    }\r\n}\r\n\r\nclass RemoveTimeSeriesPolicyCommand extends RavenCommand<ConfigureTimeSeriesOperationResult> implements IRaftCommand {\r\n    private readonly _collection: string;\r\n    private readonly _name: string;\r\n\r\n    public constructor(collection: string, name: string) {\r\n        super();\r\n\r\n        this._collection = collection;\r\n        this._name = name;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database\r\n            + \"/admin/timeseries/policy?collection=\" + this._urlEncode(this._collection)\r\n            + \"&name=\" + this._urlEncode(this._name);\r\n\r\n        return {\r\n            method: \"DELETE\",\r\n            uri\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}