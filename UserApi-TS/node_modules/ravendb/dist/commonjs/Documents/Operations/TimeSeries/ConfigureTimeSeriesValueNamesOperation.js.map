{"version":3,"file":"ConfigureTimeSeriesValueNamesOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/TimeSeries/ConfigureTimeSeriesValueNamesOperation.ts"],"names":[],"mappings":";;;AAEA,2DAA0D;AAG1D,4EAAsE;AACtE,kEAA4D;AAE5D,mEAA6D;AAI7D,MAAa,sCAAsC;IAC9B,WAAW,CAA0C;IAEtE,YAAmB,UAAmD;QAClE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAA,qBAAU,EAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAE9B,IAAI,0BAAU,CAAC,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;YAClD,IAAA,qBAAU,EAAC,0BAA0B,EAAE,oCAAoC,CAAC,CAAC;QACjF,CAAC;QAED,IAAI,0BAAU,CAAC,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;YAClD,IAAA,qBAAU,EAAC,0BAA0B,EAAE,oCAAoC,CAAC,CAAC;QACjF,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;YAC1D,IAAA,qBAAU,EAAC,0BAA0B,EAAE,oCAAoC,CAAC,CAAC;QACjF,CAAC;IACL,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,oCAAoC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACtE,CAAC;CACJ;AA9BD,wFA8BC;AAED,MAAM,oCAAqC,SAAQ,8BAAgD;IAC9E,WAAW,CAA0C;IAEtE,YAAmB,UAAmD;QAClE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,0BAA0B,CAAC;QAElF,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE1D,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAC;IACN,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,sBAAsB;QAClB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { ConfigureTimeSeriesOperationResult } from \"./ConfigureTimeSeriesOperationResult.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class ConfigureTimeSeriesValueNamesOperation implements IMaintenanceOperation<ConfigureTimeSeriesOperationResult> {\r\n    private readonly _parameters: ConfigureTimeSeriesValueNamesParameters;\r\n\r\n    public constructor(parameters: ConfigureTimeSeriesValueNamesParameters) {\r\n        if (!parameters) {\r\n            throwError(\"InvalidArgumentException\", \"Parameters cannot be null\");\r\n        }\r\n\r\n        this._parameters = parameters;\r\n\r\n        if (StringUtil.isNullOrEmpty(parameters.collection)) {\r\n            throwError(\"InvalidArgumentException\", \"Collection cannot be null or empty\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrEmpty(parameters.timeSeries)) {\r\n            throwError(\"InvalidArgumentException\", \"TimeSeries cannot be null or empty\");\r\n        }\r\n\r\n        if (!parameters.valueNames || !parameters.valueNames.length) {\r\n            throwError(\"InvalidArgumentException\", \"ValueNames cannot be null or empty\");\r\n        }\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ConfigureTimeSeriesOperationResult> {\r\n        return new ConfigureTimeSeriesValueNamesCommand(this._parameters);\r\n    }\r\n}\r\n\r\nclass ConfigureTimeSeriesValueNamesCommand extends RavenCommand<ConfigureTimeSeriesOperationResult> implements IRaftCommand {\r\n    private readonly _parameters: ConfigureTimeSeriesValueNamesParameters;\r\n\r\n    public constructor(parameters: ConfigureTimeSeriesValueNamesParameters) {\r\n        super();\r\n\r\n        this._parameters = parameters;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/timeseries/names/config\";\r\n\r\n        const body = this._serializer.serialize(this._parameters);\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        };\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport interface ConfigureTimeSeriesValueNamesParameters {\r\n    collection: string;\r\n    timeSeries: string;\r\n    valueNames: string[];\r\n    update?: boolean;\r\n}"]}