"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigureTimeSeriesValueNamesOperation = void 0;
const index_js_1 = require("../../../Exceptions/index.js");
const RaftIdGenerator_js_1 = require("../../../Utility/RaftIdGenerator.js");
const StringUtil_js_1 = require("../../../Utility/StringUtil.js");
const RavenCommand_js_1 = require("../../../Http/RavenCommand.js");
class ConfigureTimeSeriesValueNamesOperation {
    _parameters;
    constructor(parameters) {
        if (!parameters) {
            (0, index_js_1.throwError)("InvalidArgumentException", "Parameters cannot be null");
        }
        this._parameters = parameters;
        if (StringUtil_js_1.StringUtil.isNullOrEmpty(parameters.collection)) {
            (0, index_js_1.throwError)("InvalidArgumentException", "Collection cannot be null or empty");
        }
        if (StringUtil_js_1.StringUtil.isNullOrEmpty(parameters.timeSeries)) {
            (0, index_js_1.throwError)("InvalidArgumentException", "TimeSeries cannot be null or empty");
        }
        if (!parameters.valueNames || !parameters.valueNames.length) {
            (0, index_js_1.throwError)("InvalidArgumentException", "ValueNames cannot be null or empty");
        }
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(conventions) {
        return new ConfigureTimeSeriesValueNamesCommand(this._parameters);
    }
}
exports.ConfigureTimeSeriesValueNamesOperation = ConfigureTimeSeriesValueNamesOperation;
class ConfigureTimeSeriesValueNamesCommand extends RavenCommand_js_1.RavenCommand {
    _parameters;
    constructor(parameters) {
        super();
        this._parameters = parameters;
    }
    get isReadRequest() {
        return false;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/timeseries/names/config";
        const body = this._serializer.serialize(this._parameters);
        return {
            uri,
            method: "POST",
            headers: this._headers().typeAppJson().build(),
            body
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator_js_1.RaftIdGenerator.newId();
    }
}
//# sourceMappingURL=ConfigureTimeSeriesValueNamesOperation.js.map