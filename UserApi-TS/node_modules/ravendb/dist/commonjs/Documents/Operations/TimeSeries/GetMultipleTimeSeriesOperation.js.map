{"version":3,"file":"GetMultipleTimeSeriesOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/TimeSeries/GetMultipleTimeSeriesOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { TimeSeriesDetails } from \"./TimeSeriesDetails.js\";\r\nimport { TimeSeriesRange } from \"./TimeSeriesRange.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { DateUtil } from \"../../../Utility/DateUtil.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { CaseInsensitiveKeysMap } from \"../../../Primitives/CaseInsensitiveKeysMap.js\";\r\nimport { GetTimeSeriesCommand, reviveTimeSeriesRangeResult } from \"./GetTimeSeriesOperation.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { StringBuilder } from \"../../../Utility/StringBuilder.js\";\r\nimport { ITimeSeriesIncludeBuilder } from \"../../Session/Loaders/ITimeSeriesIncludeBuilder.js\";\r\n\r\nexport class GetMultipleTimeSeriesOperation implements IOperation<TimeSeriesDetails> {\r\n    private readonly _docId: string;\r\n    private _ranges: TimeSeriesRange[];\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n    private readonly _includes: (includeBuilder: ITimeSeriesIncludeBuilder) => void;\r\n    private readonly _returnFullResults: boolean;\r\n\r\n    public constructor(docId: string, ranges: TimeSeriesRange[])\r\n    public constructor(docId: string, ranges: TimeSeriesRange[], start: number, pageSize: number)\r\n    public constructor(docId: string, ranges: TimeSeriesRange[], start: number, pageSize: number, includes: (includeBuilder: ITimeSeriesIncludeBuilder) => void)\r\n    public constructor(docId: string, ranges: TimeSeriesRange[], start?: number, pageSize?: number, includes?: (includeBuilder: ITimeSeriesIncludeBuilder) => void, returnFullResults?: boolean)\r\n    public constructor(docId: string, ranges: TimeSeriesRange[], start?: number, pageSize?: number, includes?: (includeBuilder: ITimeSeriesIncludeBuilder) => void, returnFullResults?: boolean) {\r\n        if (!ranges) {\r\n            throwError(\"InvalidArgumentException\", \"Ranges cannot be null\");\r\n        }\r\n        if (StringUtil.isNullOrEmpty(docId)) {\r\n            throwError(\"InvalidArgumentException\", \"DocId cannot be null or empty\")\r\n        }\r\n        this._docId = docId;\r\n        this._start = start ?? 0;\r\n        this._pageSize = pageSize ?? TypeUtil.MAX_INT32;\r\n        this._ranges = ranges;\r\n        this._includes = includes;\r\n        this._returnFullResults = returnFullResults;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(store: IDocumentStore, conventions: DocumentConventions, httpCache: HttpCache): RavenCommand<TimeSeriesDetails> {\r\n        return new GetMultipleTimeSeriesCommand(conventions, this._docId, this._ranges, this._start, this._pageSize, this._includes, this._returnFullResults);\r\n    }\r\n}\r\n\r\nexport class GetMultipleTimeSeriesCommand extends RavenCommand<TimeSeriesDetails> {\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _docId: string;\r\n    private readonly _ranges: TimeSeriesRange[];\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n    private readonly _includes: (includeBuilder: ITimeSeriesIncludeBuilder) => void;\r\n    private readonly _returnFullResults: boolean;\r\n\r\n    constructor(\r\n        conventions: DocumentConventions,\r\n        docId: string,\r\n        ranges: TimeSeriesRange[],\r\n        start: number,\r\n        pageSize: number,\r\n        includes?: (includeBuilder: ITimeSeriesIncludeBuilder) => void,\r\n        returnFullResults?: boolean) {\r\n        super();\r\n\r\n        if (!docId) {\r\n            throwError(\"InvalidArgumentException\", \"DocId cannot be null\");\r\n        }\r\n\r\n        this._conventions = conventions;\r\n        this._docId = docId;\r\n        this._ranges = ranges;\r\n        this._start = start;\r\n        this._pageSize = pageSize;\r\n        this._includes = includes;\r\n        this._returnFullResults = returnFullResults;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const pathBuilder = new StringBuilder(node.url);\r\n\r\n        pathBuilder\r\n            .append(\"/databases/\")\r\n            .append(node.database)\r\n            .append(\"/timeseries/ranges\")\r\n            .append(\"?docId=\")\r\n            .append(this._urlEncode(this._docId));\r\n\r\n        if (this._start > 0) {\r\n            pathBuilder\r\n                .append(\"&start=\")\r\n                .append(this._start.toString());\r\n        }\r\n\r\n        if (this._pageSize < TypeUtil.MAX_INT32) {\r\n            pathBuilder\r\n                .append(\"&pageSize=\")\r\n                .append(this._pageSize.toString());\r\n        }\r\n\r\n        if (this._returnFullResults) {\r\n            pathBuilder\r\n                .append(\"&full=true\");\r\n        }\r\n\r\n        if (!this._ranges.length) {\r\n            throwError(\"InvalidArgumentException\", \"Ranges cannot be null or empty\");\r\n        }\r\n\r\n        for (const range of this._ranges) {\r\n            if (StringUtil.isNullOrEmpty(range.name)) {\r\n                throwError(\"InvalidArgumentException\", \"Missing name argument in TimeSeriesRange. Name cannot be null or empty\");\r\n            }\r\n\r\n            pathBuilder\r\n                .append(\"&name=\")\r\n                .append(range.name || \"\")\r\n                .append(\"&from=\")\r\n                .append(range.from ? DateUtil.utc.stringify(range.from) : \"\")\r\n                .append(\"&to=\")\r\n                .append(range.to ? DateUtil.utc.stringify(range.to) : \"\")\r\n        }\r\n\r\n        if (this._includes) {\r\n            GetTimeSeriesCommand.addIncludesToRequest(pathBuilder, this._includes);\r\n        }\r\n\r\n        const uri = pathBuilder.toString();\r\n\r\n        return {\r\n            uri,\r\n            method: \"GET\"\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._pipeline<any>()\r\n            .parseJsonSync()\r\n            .collectBody(b => body = b)\r\n            .process(bodyStream);\r\n\r\n        this.result = new TimeSeriesDetails();\r\n        this.result.id = results.Id;\r\n        this.result.values = CaseInsensitiveKeysMap.create();\r\n\r\n        for (const [key, value] of Object.entries(results.Values)) {\r\n            const mapped = (value as any).map(x => reviveTimeSeriesRangeResult(GetTimeSeriesCommand.mapToLocalObject(x)));\r\n            this.result.values.set(key, mapped);\r\n        }\r\n\r\n        return body;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}