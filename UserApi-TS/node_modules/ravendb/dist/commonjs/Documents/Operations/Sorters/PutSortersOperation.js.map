{"version":3,"file":"PutSortersOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Sorters/PutSortersOperation.ts"],"names":[],"mappings":";;;AAEA,2DAA0D;AAC1D,mEAA6D;AAK7D,4EAAsE;AAEtE,MAAa,mBAAmB;IACX,aAAa,CAAqB;IAEnD,YAAmB,GAAG,YAAgC;QAClD,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YACxC,IAAA,qBAAU,EAAC,0BAA0B,EAAE,sCAAsC,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAClE,CAAC;CACJ;AAlBD,kDAkBC;AAED,MAAM,iBAAkB,SAAQ,8BAAkB;IAC7B,aAAa,CAAqB;IAEnD,YAAmB,WAAgC,EAAE,YAAgC;QACjF,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,IAAA,qBAAU,EAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAG,CAAC;YAC9B,IAAA,qBAAU,EAAC,0BAA0B,EAAE,uBAAuB,CAAC,CAAC;QACpE,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC;QAExE,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;YACpC,OAAO,EAAE,IAAI,CAAC,aAAa;SAC9B,CAAC,CAAC;QAEH,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { SorterDefinition } from \"../../Queries/Sorting/SorterDefinition.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class PutSortersOperation implements IMaintenanceOperation<void> {\r\n    private readonly _sortersToAdd: SorterDefinition[];\r\n\r\n    public constructor(...sortersToAdd: SorterDefinition[]) {\r\n        if (!sortersToAdd || !sortersToAdd.length) {\r\n            throwError(\"InvalidArgumentException\", \"SortersToAdd cannot be null or empty\");\r\n        }\r\n\r\n        this._sortersToAdd = sortersToAdd;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new PutSortersCommand(conventions, this._sortersToAdd);\r\n    }\r\n}\r\n\r\nclass PutSortersCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _sortersToAdd: SorterDefinition[];\r\n\r\n    public constructor(conventions: DocumentConventions, sortersToAdd: SorterDefinition[]) {\r\n        super();\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n\r\n        if (!sortersToAdd) {\r\n            throwError(\"InvalidArgumentException\", \"SortersToAdd cannot be null\");\r\n        }\r\n\r\n        if (sortersToAdd.some(x => !x) ) {\r\n            throwError(\"InvalidArgumentException\", \"Sorter cannot be null\");\r\n        }\r\n\r\n        this._sortersToAdd = sortersToAdd;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/sorters\";\r\n\r\n        const body = this._serializer.serialize({\r\n            sorters: this._sortersToAdd\r\n        });\r\n\r\n        return {\r\n            uri,\r\n            method: \"PUT\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}