{"version":3,"file":"GetIndexErrorsOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/GetIndexErrorsOperation.ts"],"names":[],"mappings":";;;AAEA,mEAA6D;AAM7D,MAAa,uBAAuB;IAEf,WAAW,CAAW;IAIvC,YAAmB,aAAuB,IAAI;QAC1C,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACpE,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CAEJ;AAlBD,0DAkBC;AAED,MAAa,qBAAsB,SAAQ,8BAA2B;IACjD,WAAW,CAAW;IACtB,YAAY,CAAsB;IAEnD,YAAmB,UAAoB,EAAE,WAAgC;QACrE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC;QAEvE,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;YAC9C,GAAG,IAAI,GAAG,CAAC;YAEX,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;gBACvC,GAAG,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YACjD,CAAC;QACL,CAAC;QAED,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,MAAM,QAAQ,GAAG;YACb,WAAW,EAAE;gBACT,8BAA8B,EAAE,MAAM;aACzC;SACJ,CAAC;QAEF,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/E,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;QACvF,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA5CD,sDA4CC","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { IndexErrors } from \"../../Indexes/Errors.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class GetIndexErrorsOperation implements IMaintenanceOperation<IndexErrors[]> {\r\n\r\n    private readonly _indexNames: string[];\r\n\r\n    public constructor();\r\n    public constructor(indexNames: string[]);\r\n    public constructor(indexNames: string[] = null) {\r\n        this._indexNames = indexNames;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<IndexErrors[]> {\r\n        return new GetIndexErrorsCommand(this._indexNames, conventions);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n}\r\n\r\nexport class GetIndexErrorsCommand extends RavenCommand<IndexErrors[]> {\r\n    private readonly _indexNames: string[];\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(indexNames: string[], conventions: DocumentConventions) {\r\n        super();\r\n        this._indexNames = indexNames;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/databases/\" + node.database + \"/indexes/errors\";\r\n\r\n        if (this._indexNames && this._indexNames.length) {\r\n            uri += \"?\";\r\n\r\n            for (const indexName of this._indexNames) {\r\n                uri += \"&name=\" + this._urlEncode(indexName);\r\n            }\r\n        }\r\n\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        const typeInfo = {\r\n            nestedTypes: {\r\n                \"results[].errors[].timestamp\": \"date\"\r\n            }\r\n        };\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n        this.result = this._reviveResultTypes(results, this._conventions, typeInfo)[\"results\"];\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}