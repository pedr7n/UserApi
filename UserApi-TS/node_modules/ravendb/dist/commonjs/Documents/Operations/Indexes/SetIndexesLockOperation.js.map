{"version":3,"file":"SetIndexesLockOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/SetIndexesLockOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { IndexLockMode } from \"../../Indexes/Enums.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class SetIndexesLockOperation implements IMaintenanceOperation<void> {\r\n\r\n    private readonly _parameters: SetIndexesLockOperationParameters;\r\n\r\n    public constructor(indexName: string, mode: IndexLockMode);\r\n    public constructor(parameters: SetIndexesLockOperationParameters);\r\n    public constructor(paramsOrIndexName: string | SetIndexesLockOperationParameters, mode?: IndexLockMode) {\r\n        if (TypeUtil.isString(paramsOrIndexName)) {\r\n            const indexName = paramsOrIndexName as string;\r\n            if (!indexName) {\r\n                throwError(\"InvalidArgumentException\", \"IndexName cannot be null.\");\r\n            }\r\n\r\n            this._parameters = {\r\n                indexNames: [indexName],\r\n                mode\r\n            };\r\n        } else {\r\n            const parameters = paramsOrIndexName as SetIndexesLockOperationParameters;\r\n            if (!parameters) {\r\n                throwError(\"InvalidArgumentException\", \"Parameters cannot be null.\");\r\n            }\r\n\r\n            if (!parameters.indexNames || !parameters.indexNames.length) {\r\n                throwError(\"InvalidArgumentException\", \"IndexNames cannot be null or empty.\");\r\n            }\r\n\r\n            this._parameters = parameters;\r\n        }\r\n\r\n        this._filterAutoIndexes();\r\n    }\r\n\r\n    private _filterAutoIndexes() {\r\n        // Check for auto-indexes - we do not set lock for auto-indexes\r\n        if (this._parameters.indexNames.some(x => x.toLocaleLowerCase().startsWith(\"auto/\"))) {\r\n            throwError(\"InvalidArgumentException\", \"Indexes list contains Auto-Indexes. \" +\r\n                \"Lock Mode is not set for Auto-Indexes.\");\r\n        }\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new SetIndexLockCommand(conventions, this._parameters);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nexport class SetIndexLockCommand extends RavenCommand<void> implements IRaftCommand {\r\n\r\n    private readonly _parameters: object;\r\n\r\n    public constructor(conventions: DocumentConventions, parameters: SetIndexesLockOperationParameters) {\r\n        super();\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n\r\n        if (!parameters) {\r\n            throwError(\"InvalidArgumentException\", \"Parameters cannot be null\");\r\n        }\r\n\r\n        this._responseType = \"Empty\";\r\n        this._parameters = conventions.objectMapper.toObjectLiteral(parameters);\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/indexes/set-lock\";\r\n        const body = this._serializer.serialize(this._parameters);\r\n        const headers = this._headers()\r\n            .typeAppJson().build();\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            body,\r\n            headers\r\n        };\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport interface SetIndexesLockOperationParameters {\r\n    indexNames: string[];\r\n    mode: IndexLockMode;\r\n}\r\n"]}