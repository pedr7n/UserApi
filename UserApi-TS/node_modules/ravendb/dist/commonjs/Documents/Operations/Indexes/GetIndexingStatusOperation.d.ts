import { IMaintenanceOperation, OperationResultType } from "../OperationAbstractions.js";
import { DocumentConventions } from "../../Conventions/DocumentConventions.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { HttpRequestParameters } from "../../../Primitives/Http.js";
import { ServerNode } from "../../../Http/ServerNode.js";
import { IndexingStatus } from "../../Indexes/IndexingStatus.js";
import { Stream } from "node:stream";
export declare class GetIndexingStatusOperation implements IMaintenanceOperation<IndexingStatus> {
    get resultType(): OperationResultType;
    getCommand(conventions: DocumentConventions): RavenCommand<IndexingStatus>;
}
export declare class GetIndexingStatusCommand extends RavenCommand<IndexingStatus> {
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
    get isReadRequest(): boolean;
}
//# sourceMappingURL=GetIndexingStatusOperation.d.ts.map