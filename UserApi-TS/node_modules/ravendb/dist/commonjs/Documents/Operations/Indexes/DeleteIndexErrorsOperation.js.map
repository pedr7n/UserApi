{"version":3,"file":"DeleteIndexErrorsOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/DeleteIndexErrorsOperation.ts"],"names":[],"mappings":";;;AAGA,mEAA6D;AAG7D,MAAa,0BAA0B;IAClB,WAAW,CAAW;IAIvC,YAAmB,UAAqB;QACpC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC1D,CAAC;CACJ;AAhBD,gEAgBC;AAED,MAAM,wBAAyB,SAAQ,8BAAkB;IAEpC,WAAW,CAAW;IAEvC,YAAmB,UAAoB;QACnC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAGD,aAAa,CAAC,IAAgB;QAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC;QAEvE,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;YAC9C,GAAG,IAAI,GAAG,CAAC;YAEX,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;gBACvC,GAAG,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YACjD,CAAC;QACL,CAAC;QAED,OAAO;YACH,GAAG;YACH,MAAM,EAAE,QAAQ;SACnB,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class DeleteIndexErrorsOperation implements IMaintenanceOperation<void> {\r\n    private readonly _indexNames: string[];\r\n\r\n    public constructor()\r\n    public constructor(indexNames: string[])\r\n    public constructor(indexNames?: string[]) {\r\n        this._indexNames = indexNames;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new DeleteIndexErrorsCommand(this._indexNames);\r\n    }\r\n}\r\n\r\nclass DeleteIndexErrorsCommand extends RavenCommand<void> {\r\n\r\n    private readonly _indexNames: string[];\r\n\r\n    public constructor(indexNames: string[]) {\r\n        super();\r\n\r\n        this._indexNames = indexNames;\r\n    }\r\n\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/databases/\" + node.database + \"/indexes/errors\";\r\n\r\n        if (this._indexNames && this._indexNames.length) {\r\n            uri += \"?\";\r\n\r\n            for (const indexName of this._indexNames) {\r\n                uri += \"&name=\" + this._urlEncode(indexName);\r\n            }\r\n        }\r\n\r\n        return {\r\n            uri,\r\n            method: \"DELETE\"\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n}\r\n"]}