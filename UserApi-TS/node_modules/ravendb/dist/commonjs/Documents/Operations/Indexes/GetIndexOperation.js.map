{"version":3,"file":"GetIndexOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/GetIndexOperation.ts"],"names":[],"mappings":";;;AACA,yEAAmE;AACnE,2DAA0D;AAC1D,mEAA6D;AAK7D,kEAA4D;AAE5D,MAAa,iBAAiB;IAET,UAAU,CAAS;IAEpC,YAAmB,SAAiB;QAChC,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,IAAA,qBAAU,EAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAC7D,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAnBD,8CAmBC;AAED,MAAa,eAAgB,SAAQ,8BAA6B;IAE7C,UAAU,CAAS;IACnB,YAAY,CAAsB;IAEnD,YAAmB,SAAiB,EAAE,WAAgC;QAClE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,IAAA,qBAAU,EAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,gBAAgB;cACjE,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE1C,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO;QACX,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAAU;aACxC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAC1B,aAAa,EAAE;aACf,mBAAmB,CAAC;YACjB,gBAAgB,EAAE,0BAAU,CAAC,KAAK;YAClC,WAAW,EAAE,CAAC,iBAAiB,EAAC,kBAAkB,CAAC;SACtD,CAAC;aACD,OAAO,CAAC,UAAU,CAAC,CAAC;QACzB,MAAM,gBAAgB,GAAG;YACrB,WAAW,EAAE;gBACT,WAAW,EAAE,iBAAiB;gBAC9B,gBAAgB,EAAE,KAAK;aAC1B;SACJ,CAAC;QACF,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,oCAAe,CAAC,IAAI,EAAE,oCAAe,CAAC,CAAC,CAAC,CAAC;QACtE,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,gBAAgB,EAAE,UAAU,CAAC,CAAC;QACpG,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;QAE/C,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AApDD,0CAoDC","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { IndexDefinition } from \"../../Indexes/IndexDefinition.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { ObjectUtil } from \"../../../Utility/ObjectUtil.js\";\r\n\r\nexport class GetIndexOperation implements IMaintenanceOperation<IndexDefinition> {\r\n\r\n    private readonly _indexName: string;\r\n\r\n    public constructor(indexName: string) {\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"IndexName cannot be null.\");\r\n        }\r\n\r\n        this._indexName = indexName;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<IndexDefinition> {\r\n        return new GetIndexCommand(this._indexName, conventions);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nexport class GetIndexCommand extends RavenCommand<IndexDefinition> {\r\n\r\n    private readonly _indexName: string;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(indexName: string, conventions: DocumentConventions) {\r\n        super();\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"IndexName cannot be null.\");\r\n        }\r\n\r\n        this._indexName = indexName;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/indexes?name=\"\r\n            + encodeURIComponent(this._indexName);\r\n\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n        const result = await this._pipeline<object>()\r\n            .collectBody(b => body = b)\r\n            .parseJsonSync()\r\n            .objectKeysTransform({\r\n                defaultTransform: ObjectUtil.camel,\r\n                ignorePaths: [/fields\\.[^.]+$/i,/configuration\\./i]\r\n            })\r\n            .process(bodyStream);\r\n        const indexDefTypeInfo = {\r\n            nestedTypes: {\r\n                \"results[]\": \"IndexDefinition\",\r\n                \"results[].maps\": \"Set\"\r\n            },\r\n        };\r\n        const knownTypes = new Map([[IndexDefinition.name, IndexDefinition]]);\r\n        const allResults = this._reviveResultTypes(result, this._conventions, indexDefTypeInfo, knownTypes);\r\n        this.result = allResults[\"results\"][0] || null;\r\n\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}