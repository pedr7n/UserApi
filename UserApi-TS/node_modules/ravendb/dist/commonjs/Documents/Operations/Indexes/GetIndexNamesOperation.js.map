{"version":3,"file":"GetIndexNamesOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/GetIndexNamesOperation.ts"],"names":[],"mappings":";;;AACA,mEAA6D;AAM7D,MAAa,sBAAsB;IAE/B,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEgB,MAAM,CAAS;IACf,SAAS,CAAS;IAEnC,YAAmB,KAAa,EAAE,QAAgB;QAC9C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACjE,CAAC;CACJ;AAjBD,wDAiBC;AAED,MAAa,oBAAqB,SAAQ,8BAAsB;IAC3C,MAAM,CAAS;IACf,SAAS,CAAS;IAEnC,YAAmB,KAAa,EAAE,QAAgB;QAC9C,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC9C,iBAAiB,GAAG,IAAI,CAAC,MAAM,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,GAAG,iBAAiB,CAAC;QAC1F,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/E,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA/BD,oDA+BC","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class GetIndexNamesOperation implements IMaintenanceOperation<string[]> {\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n\r\n    public constructor(start: number, pageSize: number) {\r\n        this._start = start;\r\n        this._pageSize = pageSize;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<string[]> {\r\n        return new GetIndexNamesCommand(this._start, this._pageSize);\r\n    }\r\n}\r\n\r\nexport class GetIndexNamesCommand extends RavenCommand<string[]> {\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n\r\n    public constructor(start: number, pageSize: number) {\r\n        super();\r\n\r\n        this._start = start;\r\n        this._pageSize = pageSize;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database\r\n            + \"/indexes?start=\" + this._start + \"&pageSize=\" + this._pageSize + \"&namesOnly=true\";\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n        this.result = results[\"results\"];\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}