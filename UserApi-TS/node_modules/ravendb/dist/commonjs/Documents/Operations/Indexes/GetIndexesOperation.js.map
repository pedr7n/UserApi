{"version":3,"file":"GetIndexesOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/GetIndexesOperation.ts"],"names":[],"mappings":";;;AAEA,mEAA6D;AAC7D,yEAAmE;AAInE,kEAA4D;AAE5D,MAAa,mBAAmB;IAEX,MAAM,CAAS;IACf,SAAS,CAAS;IAEnC,YAAmB,KAAa,EAAE,QAAgB;QAC9C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAC3E,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CAEJ;AAlBD,kDAkBC;AAED,MAAM,gBAAgB,GAAG;IACrB,WAAW,EAAE;QACT,WAAW,EAAE,iBAAiB;QAC9B,gBAAgB,EAAE,KAAK;KAC1B;CACJ,CAAC;AACF,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,oCAAe,CAAC,IAAI,EAAE,oCAAe,CAAC,CAAC,CAAC,CAAC;AAEtE,MAAa,iBAAkB,SAAQ,8BAA+B;IACjD,MAAM,CAAS;IACf,SAAS,CAAS;IAClB,YAAY,CAAsB;IAEnD,YAAmB,KAAa,EAAE,QAAgB,EAAE,WAAgC;QAChF,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC9C,iBAAiB,GAAG,IAAI,CAAC,MAAM,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;QACtE,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAAU;aACxC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAC1B,aAAa,EAAE;aACf,mBAAmB,CAAC;YACjB,gBAAgB,EAAE,0BAAU,CAAC,KAAK;YAClC,WAAW,EAAE,CAAC,iBAAiB,EAAE,gCAAgC,CAAC;SACrE,CAAC;aACD,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CACjC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,gBAAgB,EAAE,UAAU,CAAC,CAAC,SAAS,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAzCD,8CAyCC","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IndexDefinition } from \"../../Indexes/IndexDefinition.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { ObjectUtil } from \"../../../Utility/ObjectUtil.js\";\r\n\r\nexport class GetIndexesOperation implements IMaintenanceOperation<IndexDefinition[]> {\r\n\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n\r\n    public constructor(start: number, pageSize: number) {\r\n        this._start = start;\r\n        this._pageSize = pageSize;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<IndexDefinition[]> {\r\n        return new GetIndexesCommand(this._start, this._pageSize, conventions);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n}\r\n\r\nconst indexDefTypeInfo = {\r\n    nestedTypes: {\r\n        \"results[]\": \"IndexDefinition\",\r\n        \"results[].maps\": \"Set\"\r\n    },\r\n};\r\nconst knownTypes = new Map([[IndexDefinition.name, IndexDefinition]]);\r\n\r\nexport class GetIndexesCommand extends RavenCommand<IndexDefinition[]> {\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(start: number, pageSize: number, conventions: DocumentConventions) {\r\n        super();\r\n        this._start = start;\r\n        this._pageSize = pageSize;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database\r\n            + \"/indexes?start=\" + this._start + \"&pageSize=\" + this._pageSize;\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const result = await this._pipeline<object>()\r\n            .collectBody(b => body = b)\r\n            .parseJsonSync()\r\n            .objectKeysTransform({\r\n                defaultTransform: ObjectUtil.camel,\r\n                ignorePaths: [/fields\\.[^.]+$/i, /results\\.\\[]\\.configuration\\./i]\r\n            })\r\n            .process(bodyStream);\r\n\r\n        this.result = this._reviveResultTypes(\r\n            result, this._conventions, indexDefTypeInfo, knownTypes)[\"results\"];\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}