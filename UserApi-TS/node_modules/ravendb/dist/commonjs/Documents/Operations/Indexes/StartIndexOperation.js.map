{"version":3,"file":"StartIndexOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/StartIndexOperation.ts"],"names":[],"mappings":";;;AACA,2DAA0D;AAC1D,mEAA6D;AAK7D,MAAa,mBAAmB;IAEX,UAAU,CAAS;IAEpC,YAAmB,SAAiB;QAChC,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,IAAA,qBAAU,EAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAClD,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CAEJ;AApBD,kDAoBC;AAED,MAAa,iBAAkB,SAAQ,8BAAkB;IAEpC,UAAU,CAAS;IAEpC,YAAmB,SAAiB;QAChC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,IAAA,qBAAU,EAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,4BAA4B;cAC7E,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1C,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;IACnC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAvBD,8CAuBC","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class StartIndexOperation implements IMaintenanceOperation<void> {\r\n\r\n    private readonly _indexName: string;\r\n\r\n    public constructor(indexName: string) {\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"Index name cannot be null\");\r\n        }\r\n\r\n        this._indexName = indexName;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new StartIndexCommand(this._indexName);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n}\r\n\r\nexport class StartIndexCommand extends RavenCommand<void> {\r\n\r\n    private readonly _indexName: string;\r\n\r\n    public constructor(indexName: string) {\r\n        super();\r\n\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"Index name cannot be null\");\r\n        }\r\n\r\n        this._indexName = indexName;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/indexes/start?name=\"\r\n            + encodeURIComponent(this._indexName);\r\n        return { method: \"POST\", uri };\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return false;\r\n    }\r\n}\r\n"]}