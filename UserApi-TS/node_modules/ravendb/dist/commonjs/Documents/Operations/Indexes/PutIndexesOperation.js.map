{"version":3,"file":"PutIndexesOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/PutIndexesOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsonSerializer } from \"../../../Mapping/Json/Serializer.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { IndexDefinition } from \"../../Indexes/IndexDefinition.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { HeadersBuilder } from \"../../../Utility/HttpUtil.js\";\r\nimport { IndexTypeExtensions } from \"../../Indexes/IndexTypeExtensions.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { ObjectUtil } from \"../../../Utility/ObjectUtil.js\";\r\n\r\nexport interface PutIndexResult {\r\n    index: string;\r\n    raftCommandIndex: number;\r\n}\r\n\r\nexport class PutIndexesOperation implements IMaintenanceOperation<PutIndexResult[]> {\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    private readonly _indexToAdd: IndexDefinition[];\r\n\r\n    public constructor(...indexToAdd: IndexDefinition[]) {\r\n        if (!indexToAdd || !indexToAdd.length) {\r\n            throwError(\"InvalidArgumentException\", \"indexToAdd cannot be null\");\r\n        }\r\n        this._indexToAdd = indexToAdd;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<PutIndexResult[]> {\r\n        return new PutIndexesCommand(conventions, this._indexToAdd);\r\n    }\r\n}\r\n\r\nexport class PutIndexesCommand extends RavenCommand<PutIndexResult[]> implements IRaftCommand {\r\n\r\n    private readonly _indexToAdd: object[];\r\n    private _allJavaScriptIndexes: boolean;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(conventions: DocumentConventions, indexesToAdd: IndexDefinition[]) {\r\n        super();\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"conventions cannot be null or undefined.\");\r\n        }\r\n\r\n        if (!indexesToAdd) {\r\n            throwError(\"InvalidArgumentException\", \"indexesToAdd cannot be null or undefined.\");\r\n        }\r\n\r\n        this._conventions = conventions;\r\n        this._allJavaScriptIndexes = true;\r\n        this._indexToAdd = indexesToAdd.reduce((result, next) => {\r\n            // We validate on the server that it is indeed a javascript index.\r\n            if (!IndexTypeExtensions.isJavaScript(next.type)) {\r\n                this._allJavaScriptIndexes = false;\r\n            }\r\n\r\n            if (!next.name) {\r\n                throwError(\"InvalidArgumentException\", \"Index name cannot be null.\");\r\n            }\r\n\r\n            result.push(this._conventions.objectMapper.toObjectLiteral(next));\r\n\r\n            return result;\r\n        }, []);\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database \r\n            + (this._allJavaScriptIndexes ? \"/indexes\" : \"/admin/indexes\");\r\n\r\n        const INDEX_DEF_FIELDS_REGEX = /^Indexes\\.\\[]\\.Fields$/;\r\n\r\n        const bodyJson = ObjectUtil.transformObjectKeys({\r\n            Indexes: this._indexToAdd\r\n        }, {\r\n            recursive: true,\r\n            defaultTransform: ObjectUtil.pascal,\r\n            paths: [\r\n                {\r\n                    path: INDEX_DEF_FIELDS_REGEX,\r\n                    transform: x => x\r\n                }\r\n            ]\r\n        });\r\n\r\n        const body = JsonSerializer.getDefault()\r\n            .serialize(bodyJson);\r\n\r\n        const headers = HeadersBuilder\r\n            .create()\r\n            .typeAppJson()\r\n            .build();\r\n        return {\r\n            method: \"PUT\",\r\n            uri,\r\n            body,\r\n            headers\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(x => body = x)\r\n            .process(bodyStream);\r\n        this.result = results[\"results\"];\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}