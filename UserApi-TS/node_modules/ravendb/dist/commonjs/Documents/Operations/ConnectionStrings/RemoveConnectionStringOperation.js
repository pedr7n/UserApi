"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveConnectionStringCommand = exports.RemoveConnectionStringOperation = void 0;
const RavenCommand_js_1 = require("../../../Http/RavenCommand.js");
const RaftIdGenerator_js_1 = require("../../../Utility/RaftIdGenerator.js");
class RemoveConnectionStringOperation {
    _connectionString;
    constructor(connectionString) {
        this._connectionString = connectionString;
    }
    getCommand(conventions) {
        return new RemoveConnectionStringCommand(this._connectionString);
    }
    get resultType() {
        return "CommandResult";
    }
}
exports.RemoveConnectionStringOperation = RemoveConnectionStringOperation;
class RemoveConnectionStringCommand extends RavenCommand_js_1.RavenCommand {
    _connectionString;
    constructor(connectionString) {
        super();
        this._connectionString = connectionString;
    }
    get isReadRequest() {
        return false;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/admin/connection-strings?connectionString="
            + encodeURIComponent(this._connectionString.name) + "&type=" + this._connectionString.type;
        return {
            method: "DELETE",
            uri
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator_js_1.RaftIdGenerator.newId();
    }
}
exports.RemoveConnectionStringCommand = RemoveConnectionStringCommand;
//# sourceMappingURL=RemoveConnectionStringOperation.js.map