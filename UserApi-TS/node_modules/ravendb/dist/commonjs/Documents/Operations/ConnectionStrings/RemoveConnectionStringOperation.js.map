{"version":3,"file":"RemoveConnectionStringOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/ConnectionStrings/RemoveConnectionStringOperation.ts"],"names":[],"mappings":";;;AAEA,mEAA6D;AAM7D,4EAAsE;AAEtE,MAAa,+BAA+B;IAEvB,iBAAiB,CAAI;IAEtC,YAAmB,gBAAmB;QAClC,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC9C,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,6BAA6B,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACrE,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAfD,0EAeC;AAED,MAAa,6BACT,SAAQ,8BAA0C;IAEjC,iBAAiB,CAAI;IAEtC,YAAmB,gBAAmB;QAClC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC9C,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,6CAA6C;cAC9F,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;QAE/F,OAAO;YACH,MAAM,EAAE,QAAQ;YAChB,GAAG;SACN,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ;AApCD,sEAoCC","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { ConnectionString } from \"../Etl/ConnectionString.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class RemoveConnectionStringOperation<T extends ConnectionString>\r\n    implements IMaintenanceOperation<RemoveConnectionStringResult> {\r\n    private readonly _connectionString: T;\r\n\r\n    public constructor(connectionString: T) {\r\n        this._connectionString = connectionString;\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<RemoveConnectionStringResult> {\r\n        return new RemoveConnectionStringCommand(this._connectionString);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nexport class RemoveConnectionStringCommand<T extends ConnectionString>\r\n    extends RavenCommand<RemoveConnectionStringResult>\r\n    implements IRaftCommand {\r\n    private readonly _connectionString: T;\r\n\r\n    public constructor(connectionString: T) {\r\n        super();\r\n\r\n        this._connectionString = connectionString;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/connection-strings?connectionString=\"\r\n            + encodeURIComponent(this._connectionString.name) + \"&type=\" + this._connectionString.type;\r\n\r\n        return {\r\n            method: \"DELETE\",\r\n            uri\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport interface RemoveConnectionStringResult {\r\n    raftCommandIndex: number;\r\n}\r\n"]}