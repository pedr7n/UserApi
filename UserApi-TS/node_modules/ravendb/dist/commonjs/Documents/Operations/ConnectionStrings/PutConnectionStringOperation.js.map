{"version":3,"file":"PutConnectionStringOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/ConnectionStrings/PutConnectionStringOperation.ts"],"names":[],"mappings":";;;AAIA,mEAA6D;AAI7D,4EAAsE;AACtE,2DAA0D;AAM1D,MAAa,4BAA4B;IAGpB,iBAAiB,CAAI;IAEtC,YAAmB,gBAAmB;QAClC,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC9C,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,0BAA0B,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAClE,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAhBD,oEAgBC;AAED,MAAa,0BACT,SAAQ,8BAAuC;IAE9B,iBAAiB,CAAI;IAEtC,YAAmB,gBAAmB;QAClC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACpB,IAAA,qBAAU,EAAC,0BAA0B,EAAE,iCAAiC,CAAC,CAAC;QAC9E,CAAC;QACD,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC9C,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,2BAA2B,CAAC;QAEnF,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE;aAC1B,WAAW,EAAE;aACb,KAAK,EAAE,CAAC;QACb,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAChE,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;YACH,OAAO;YACP,IAAI;SACP,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ;AA3CD,gEA2CC","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ConnectionString } from \"../Etl/ConnectionString.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\n\r\nexport interface PutConnectionStringResult {\r\n    raftCommandIndex: number;\r\n}\r\n\r\nexport class PutConnectionStringOperation<T extends ConnectionString>\r\n    implements IMaintenanceOperation<PutConnectionStringResult> {\r\n\r\n    private readonly _connectionString: T;\r\n\r\n    public constructor(connectionString: T) {\r\n        this._connectionString = connectionString;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<PutConnectionStringResult> {\r\n        return new PutConnectionStringCommand(this._connectionString);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nexport class PutConnectionStringCommand<T extends ConnectionString>\r\n    extends RavenCommand<PutConnectionStringResult> implements IRaftCommand {\r\n\r\n    private readonly _connectionString: T;\r\n\r\n    public constructor(connectionString: T) {\r\n        super();\r\n        if (!connectionString) {\r\n            throwError(\"InvalidArgumentException\", \"ConnectionString cannot be null\");\r\n        }\r\n        this._connectionString = connectionString;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/connection-strings\";\r\n\r\n        const headers = this._headers()\r\n            .typeAppJson()\r\n            .build();\r\n        const body = this._serializer.serialize(this._connectionString);\r\n        return {\r\n            method: \"PUT\",\r\n            uri,\r\n            headers,\r\n            body\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}