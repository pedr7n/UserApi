import { HttpRequestParameters } from "../../../Primitives/Http.js";
import { Stream } from "node:stream";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { DocumentConventions } from "../../Conventions/DocumentConventions.js";
import { IMaintenanceOperation, OperationResultType } from "../OperationAbstractions.js";
import { ConnectionString } from "../Etl/ConnectionString.js";
import { ServerNode } from "../../../Http/ServerNode.js";
import { IRaftCommand } from "../../../Http/IRaftCommand.js";
export declare class RemoveConnectionStringOperation<T extends ConnectionString> implements IMaintenanceOperation<RemoveConnectionStringResult> {
    private readonly _connectionString;
    constructor(connectionString: T);
    getCommand(conventions: DocumentConventions): RavenCommand<RemoveConnectionStringResult>;
    get resultType(): OperationResultType;
}
export declare class RemoveConnectionStringCommand<T extends ConnectionString> extends RavenCommand<RemoveConnectionStringResult> implements IRaftCommand {
    private readonly _connectionString;
    constructor(connectionString: T);
    get isReadRequest(): boolean;
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
    getRaftUniqueRequestId(): string;
}
export interface RemoveConnectionStringResult {
    raftCommandIndex: number;
}
//# sourceMappingURL=RemoveConnectionStringOperation.d.ts.map