{"version":3,"file":"GetConnectionStringsOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/ConnectionStrings/GetConnectionStringsOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport {\r\n    ConnectionStringType,\r\n    SqlConnectionString,\r\n    RavenConnectionString,\r\n    OlapConnectionString, ElasticSearchConnectionString, QueueConnectionString\r\n} from \"../Etl/ConnectionString.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { OperationResultType, IMaintenanceOperation } from \"../OperationAbstractions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport interface GetConnectionStringsResult {\r\n    ravenConnectionStrings: Record<string, RavenConnectionString>;\r\n    sqlConnectionStrings: Record<string, SqlConnectionString>;\r\n    olapConnectionStrings: Record<string, OlapConnectionString>;\r\n    elasticSearchConnectionStrings: Record<string, ElasticSearchConnectionString>;\r\n    queueConnectionStrings: Record<string, QueueConnectionString>;\r\n}\r\n\r\nexport class GetConnectionStringsOperation implements IMaintenanceOperation<GetConnectionStringsResult> {\r\n    private readonly _connectionStringName: string;\r\n    private readonly _type: ConnectionStringType;\r\n\r\n    public constructor()\r\n    public constructor(connectionStringName: string, type: ConnectionStringType)\r\n    public constructor(connectionStringName?: string, type?: ConnectionStringType) {\r\n        this._connectionStringName = connectionStringName;\r\n        this._type = type;\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<GetConnectionStringsResult> {\r\n        return new GetConnectionStringCommand(this._connectionStringName, this._type);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nexport class GetConnectionStringCommand extends RavenCommand<GetConnectionStringsResult> {\r\n    private readonly _connectionStringName: string;\r\n    private readonly _type: ConnectionStringType;\r\n\r\n    public constructor(connectionStringName: string, type: ConnectionStringType) {\r\n        super();\r\n        this._connectionStringName = connectionStringName;\r\n        this._type = type;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/databases/\" + node.database + \"/admin/connection-strings\";\r\n\r\n        if (this._connectionStringName) {\r\n            uri += \"?connectionStringName=\" + encodeURIComponent(this._connectionStringName) + \"&type=\" + this._type;\r\n        }\r\n\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        let body = \"\";\r\n        this.result = await this._defaultPipeline(_ => body += _).process(bodyStream);\r\n\r\n        if (this.result.ravenConnectionStrings) {\r\n            this.result.ravenConnectionStrings = Object.entries(this.result.ravenConnectionStrings)\r\n                .reduce(((previousValue, currentValue) => {\r\n                    previousValue[currentValue[0]] = Object.assign(new RavenConnectionString(), currentValue[1]);\r\n                    return previousValue;\r\n                }), {} as Record<string, RavenConnectionString>);\r\n        }\r\n\r\n        if (this.result.sqlConnectionStrings) {\r\n            this.result.sqlConnectionStrings = Object.entries(this.result.sqlConnectionStrings)\r\n                .reduce(((previousValue, currentValue) => {\r\n                    previousValue[currentValue[0]] = Object.assign(new SqlConnectionString(), currentValue[1]);\r\n                    return previousValue;\r\n                }), {} as Record<string, SqlConnectionString>);\r\n        }\r\n\r\n        if (this.result.elasticSearchConnectionStrings) {\r\n            this.result.elasticSearchConnectionStrings = Object.entries(this.result.elasticSearchConnectionStrings)\r\n                .reduce(((previousValue, currentValue) => {\r\n                    previousValue[currentValue[0]] = Object.assign(new ElasticSearchConnectionString(), currentValue[1]);\r\n                    return previousValue;\r\n                }), {} as Record<string, ElasticSearchConnectionString>);\r\n        }\r\n\r\n        if (this.result.queueConnectionStrings) {\r\n            this.result.queueConnectionStrings = Object.entries(this.result.queueConnectionStrings)\r\n                .reduce(((previousValue, currentValue) => {\r\n                    previousValue[currentValue[0]] = Object.assign(new QueueConnectionString(), currentValue[1]);\r\n                    return previousValue;\r\n                }), {} as Record<string, QueueConnectionString>);\r\n        }\r\n\r\n        if (this.result.olapConnectionStrings) {\r\n            this.result.olapConnectionStrings = Object.entries(this.result.olapConnectionStrings)\r\n                .reduce(((previousValue, currentValue) => {\r\n                    previousValue[currentValue[0]] = Object.assign(new OlapConnectionString(), currentValue[1]);\r\n                    return previousValue;\r\n                }), {} as Record<string, OlapConnectionString>);\r\n        }\r\n\r\n        return body;\r\n    }\r\n}\r\n"]}