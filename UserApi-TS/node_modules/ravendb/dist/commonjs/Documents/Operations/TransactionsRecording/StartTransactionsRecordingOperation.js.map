{"version":3,"file":"StartTransactionsRecordingOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/TransactionsRecording/StartTransactionsRecordingOperation.ts"],"names":[],"mappings":";;;AAIA,mEAA6D;AAE7D,2DAA0D;AAE1D,MAAa,mCAAmC;IAC3B,SAAS,CAAS;IAEnC,YAAmB,QAAgB;QAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,IAAA,qBAAU,EAAC,0BAA0B,EAAE,yBAAyB,CAAC,CAAC;QACtE,CAAC;QACD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,iCAAiC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACjE,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAjBD,kFAiBC;AAED,MAAM,iCAAkC,SAAQ,8BAAkB;IAC7C,SAAS,CAAS;IAEnC,YAAmB,QAAgB;QAC/B,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,qCAAqC,CAAC;QAE7F,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;YACpC,IAAI,EAAE,IAAI,CAAC,SAAS;SACvB,CAAC,CAAC;QAEH,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\n\r\nexport class StartTransactionsRecordingOperation implements IMaintenanceOperation<void> {\r\n    private readonly _filePath: string;\r\n\r\n    public constructor(filePath: string) {\r\n        if (!filePath) {\r\n            throwError(\"InvalidArgumentException\", \"FilePath cannot be null\");\r\n        }\r\n        this._filePath = filePath;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new StartTransactionsRecordingCommand(this._filePath);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nclass StartTransactionsRecordingCommand extends RavenCommand<void> {\r\n    private readonly _filePath: string;\r\n\r\n    public constructor(filePath: string) {\r\n        super();\r\n\r\n        this._filePath = filePath;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/transactions/start-recording\";\r\n\r\n        const body = this._serializer.serialize({\r\n            File: this._filePath\r\n        });\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n}"]}