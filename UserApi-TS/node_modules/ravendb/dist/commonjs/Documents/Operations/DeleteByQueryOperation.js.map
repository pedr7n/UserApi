{"version":3,"file":"DeleteByQueryOperation.js","sourceRoot":"","sources":["../../../../src/Documents/Operations/DeleteByQueryOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { IOperation, OperationIdResult, OperationResultType } from \"./OperationAbstractions.js\";\r\nimport { IndexQuery, writeIndexQuery } from \"../Queries/IndexQuery.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { HttpCache } from \"../../Http/HttpCache.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { IDocumentStore } from \"../IDocumentStore.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { QueryOperationOptions } from \"../Queries/QueryOperationOptions.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { StringBuilder } from \"../../Utility/StringBuilder.js\";\r\n\r\nexport class DeleteByQueryOperation implements IOperation<OperationIdResult> {\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"OperationId\";\r\n    }\r\n\r\n    protected _queryToDelete: IndexQuery;\r\n\r\n    private readonly _options: QueryOperationOptions;\r\n\r\n    public constructor(queryToDelete: string);\r\n    public constructor(queryToDelete: IndexQuery);\r\n    public constructor(queryToDelete: IndexQuery, options: QueryOperationOptions);\r\n    public constructor(queryToDelete: IndexQuery | string, options?: QueryOperationOptions) {\r\n        if (!queryToDelete) {\r\n            throwError(\"InvalidArgumentException\", \"QueryToDelete cannot be null\");\r\n        }\r\n\r\n        this._queryToDelete = TypeUtil.isString(queryToDelete) ? new IndexQuery(queryToDelete) : queryToDelete;\r\n        this._options = options;\r\n    }\r\n\r\n    public getCommand(\r\n        store: IDocumentStore,\r\n        conventions: DocumentConventions,\r\n        cache: HttpCache): RavenCommand<OperationIdResult> {\r\n        return new DeleteByIndexCommand(conventions, this._queryToDelete, this._options);\r\n    }\r\n\r\n}\r\n\r\nexport class DeleteByIndexCommand extends RavenCommand<OperationIdResult> {\r\n\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _queryToDelete: IndexQuery;\r\n    private _options: QueryOperationOptions;\r\n\r\n    public constructor(\r\n        conventions: DocumentConventions, queryToDelete: IndexQuery, options: QueryOperationOptions) {\r\n        super();\r\n        this._conventions = conventions;\r\n        this._queryToDelete = queryToDelete;\r\n        this._options = options || {} as QueryOperationOptions;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const path = new StringBuilder(node.url)\r\n            .append(\"/databases/\")\r\n            .append(node.database)\r\n            .append(\"/queries\")\r\n            .append(\"?allowStale=\")\r\n            .append(this._options.allowStale || \"\");\r\n\r\n        if (!TypeUtil.isNullOrUndefined(this._options.maxOpsPerSecond)) {\r\n            path.append(\"&maxOpsPerSec=\")\r\n                .append(this._options.maxOpsPerSecond);\r\n        }\r\n\r\n        path\r\n            .append(\"&details=\")\r\n            .append(this._options.retrieveDetails || \"\");\r\n\r\n        if (this._options.staleTimeout) {\r\n            path.append(\"&staleTimeout=\")\r\n                .append(this._options.staleTimeout);\r\n        }\r\n\r\n        const body = writeIndexQuery(this._conventions, this._queryToDelete);\r\n\r\n        const headers = this._headers().typeAppJson().build();\r\n        const uri = path.toString();\r\n        return {\r\n            uri,\r\n            body,\r\n            method: \"DELETE\",\r\n            headers\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n}\r\n"]}