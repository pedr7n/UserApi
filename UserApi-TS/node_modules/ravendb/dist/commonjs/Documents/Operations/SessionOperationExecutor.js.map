{"version":3,"file":"SessionOperationExecutor.js","sourceRoot":"","sources":["../../../../src/Documents/Operations/SessionOperationExecutor.ts"],"names":[],"mappings":";;;AAAA,iEAA2D;AAE3D,wDAAuD;AAEvD;;GAEG;AACH,MAAa,wBAAyB,SAAQ,wCAAiB;IAC1C,QAAQ,CAAoC;IAE9D;;OAEG;IACH,YAAmB,OAA0C;QACzD,KAAK,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;QACnD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAEM,WAAW,CAAC,YAAoB;QACnC,OAAO,IAAA,qBAAU,EAAC,2BAA2B,EAAE,8BAA8B,CAAC,CAAC;IACnF,CAAC;CACH;AAdD,4DAcC","sourcesContent":["import { OperationExecutor } from \"./OperationExecutor.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"../Session/InMemoryDocumentSessionOperations.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\n\r\n/**\r\n * For internal session use only\r\n */\r\nexport class SessionOperationExecutor extends OperationExecutor {\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n\r\n   /**\r\n    * This constructor should not be used\r\n    */\r\n   public constructor(session: InMemoryDocumentSessionOperations) {\r\n       super(session.documentStore, session.databaseName);\r\n       this._session = session;\r\n   }\r\n\r\n   public forDatabase(databaseName: string): never {\r\n       return throwError(\"InvalidOperationException\", \"The method is not supported.\");\r\n   }\r\n}\r\n"]}