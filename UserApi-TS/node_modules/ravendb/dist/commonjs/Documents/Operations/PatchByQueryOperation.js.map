{"version":3,"file":"PatchByQueryOperation.js","sourceRoot":"","sources":["../../../../src/Documents/Operations/PatchByQueryOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { IOperation, OperationIdResult, OperationResultType } from \"./OperationAbstractions.js\";\r\nimport { IndexQuery, writeIndexQuery } from \"../Queries/IndexQuery.js\";\r\nimport { QueryOperationOptions } from \"../Queries/QueryOperationOptions.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { IDocumentStore } from \"../IDocumentStore.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { HttpCache } from \"../../Http/HttpCache.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class PatchByQueryOperation implements IOperation<OperationIdResult> {\r\n\r\n    protected static DUMMY_QUERY = new IndexQuery();\r\n\r\n    private readonly _queryToUpdate: IndexQuery;\r\n    private readonly _options: QueryOperationOptions;\r\n\r\n    public constructor(queryToUpdate: IndexQuery);\r\n    public constructor(queryToUpdate: string);\r\n    public constructor(queryToUpdate: IndexQuery, options?: QueryOperationOptions);\r\n    public constructor(queryToUpdate: IndexQuery | string, options?: QueryOperationOptions) {\r\n        if (TypeUtil.isString(queryToUpdate)) {\r\n            queryToUpdate = new IndexQuery(queryToUpdate as string);\r\n        }\r\n\r\n        if (!queryToUpdate) {\r\n            throwError(\"InvalidArgumentException\", \"QueryToUpdate cannot be null\");\r\n        }\r\n\r\n        this._queryToUpdate = queryToUpdate as IndexQuery;\r\n        this._options = options;\r\n    }\r\n\r\n    public getCommand(\r\n        store: IDocumentStore, conventions: DocumentConventions, cache: HttpCache): RavenCommand<OperationIdResult> {\r\n        return new PatchByQueryCommand(conventions, this._queryToUpdate, this._options);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"OperationId\";\r\n    }\r\n\r\n}\r\n\r\nexport class PatchByQueryCommand extends RavenCommand<OperationIdResult> {\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _queryToUpdate: IndexQuery;\r\n    private _options: QueryOperationOptions;\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public constructor(\r\n        conventions: DocumentConventions, queryToUpdate: IndexQuery, options: QueryOperationOptions) {\r\n        super();\r\n        this._conventions = conventions;\r\n        this._queryToUpdate = queryToUpdate;\r\n        this._options = options || {} as QueryOperationOptions;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        let path = node.url + \"/databases/\" + node.database + \"/queries?allowStale=\"\r\n            + !!this._options.allowStale;\r\n        if (!TypeUtil.isNullOrUndefined(this._options.maxOpsPerSecond)) {\r\n            path += \"&maxOpsPerSec=\" + this._options.maxOpsPerSecond;\r\n        }\r\n\r\n        path += \"&details=\" + !!this._options.retrieveDetails;\r\n\r\n        if (!TypeUtil.isNullOrUndefined(this._options.staleTimeout)) {\r\n            path += \"&staleTimeout=\" + this._options.staleTimeout;\r\n        }\r\n\r\n        if (this._options.ignoreMaxStepsForScript) {\r\n            path += \"&ignoreMaxStepsForScript=true\";\r\n        }\r\n\r\n        const body = `{ \"Query\": ${writeIndexQuery(this._conventions, this._queryToUpdate)} }`;\r\n\r\n        return {\r\n            method: \"PATCH\",\r\n            uri: path,\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n}\r\n"]}