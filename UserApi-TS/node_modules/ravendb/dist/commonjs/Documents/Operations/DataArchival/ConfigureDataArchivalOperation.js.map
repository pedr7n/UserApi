{"version":3,"file":"ConfigureDataArchivalOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/DataArchival/ConfigureDataArchivalOperation.ts"],"names":[],"mappings":";;;AAIA,mEAA6D;AAI7D,4EAAsE;AAEtE,MAAa,8BAA8B;IACtB,cAAc,CAA4B;IAE3D,YAAY,aAAwC;QAChD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,4BAA4B,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9E,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAdD,wEAcC;AAED,MAAM,4BAA6B,SAAQ,8BAAkD;IACxE,YAAY,CAAsB;IAClC,cAAc,CAA4B;IAG3D,YAAY,WAAgC,EAAE,aAAwC;QAClF,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,6BAA6B,CAAC;QAErF,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE;aAC1B,WAAW,EAAE;aACb,KAAK,EAAE,CAAC;QAEb,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE7D,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG;YACH,OAAO;YACP,IAAI;SACP,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAEM,sBAAsB;QACzB,OAAO,oCAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { ConfigureDataArchivalOperationResult } from \"./ConfigureDataArchivalOperationResult.js\";\r\nimport { DataArchivalConfiguration } from \"./DataArchivalConfiguration.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class ConfigureDataArchivalOperation implements IMaintenanceOperation<ConfigureDataArchivalOperationResult> {\r\n    private readonly _configuration: DataArchivalConfiguration;\r\n\r\n    constructor(configuration: DataArchivalConfiguration) {\r\n        this._configuration = configuration;\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ConfigureDataArchivalOperationResult> {\r\n        return new ConfigureDataArchivalCommand(conventions, this._configuration);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nclass ConfigureDataArchivalCommand extends RavenCommand<ConfigureDataArchivalOperationResult> {\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _configuration: DataArchivalConfiguration;\r\n\r\n\r\n    constructor(conventions: DocumentConventions, configuration: DataArchivalConfiguration) {\r\n        super();\r\n        this._conventions = conventions;\r\n        this._configuration = configuration;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/data-archival/config\";\r\n\r\n        const headers = this._headers()\r\n            .typeAppJson()\r\n            .build();\r\n\r\n        const body = this._serializer.serialize(this._configuration);\r\n\r\n        return {\r\n            method: \"POST\",\r\n            uri,\r\n            headers,\r\n            body\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}