{"version":3,"file":"Semaphore.js","sourceRoot":"","sources":["../../../src/Utility/Semaphore.ts"],"names":[],"mappings":";;;AACA,MAAM,QAAQ,GAAG,UAAU,EAAO;IAC9B,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AACtB,CAAC,CAAA;AAED,MAAa,SAAS;IAClB,QAAQ,GAAG,CAAC,CAAC;IACb,OAAO,GAAG,CAAC,CAAC;IACZ,KAAK,GAAG,EAAE,CAAC;IACX,SAAS,GAAG,KAAK,CAAC;IAElB,YAAY,QAAQ,GAAG,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,IAAI,CAAC,IAAgB;QACjB,IAAI,OAAe,CAAC;QACpB,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,OAAO,GAAG,CAAC,CAAC;QAChB,CAAC;aAAM,CAAC;YACJ,OAAO,GAAG,CAAC,CAAC;QAChB,CAAC;QACD,MAAM,IAAI,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAElC,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClD,IAAI,OAAO,KAAK,CAAC,EAAE,CAAC;gBAChB,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YAC3B,CAAC;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC;QACjC,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,OAAO,KAAK,CAAC,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,CAAC;IAEL,CAAC;IAED,KAAK,CAAC,IAAY,CAAC;QACf,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC;QAElB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YACrB,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE,CAAC;gBACnB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;YACpD,CAAC;YAED,OAAO;QACX,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAE3B,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxC,OAAO;QACX,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;QAEvB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAED,SAAS,CAAC,IAAY,CAAC;QACnB,OAAO,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC;IAC7C,CAAC;CACJ;AA/DD,8BA+DC","sourcesContent":["\r\nconst nextTick = function (fn: any) {\r\n    setTimeout(fn, 0);\r\n}\r\n\r\nexport class Semaphore {\r\n    capacity = 1;\r\n    current = 0;\r\n    queue = [];\r\n    firstHere = false;\r\n\r\n    constructor(capacity = 1) {\r\n        this.capacity = capacity;\r\n    }\r\n\r\n    take(func: () => void) {\r\n        let isFirst: number;\r\n        if (this.firstHere === false) {\r\n            this.current++;\r\n            this.firstHere = true;\r\n            isFirst = 1;\r\n        } else {\r\n            isFirst = 0;\r\n        }\r\n        const item = { n: 1, task: func };\r\n\r\n        if (this.current + item.n - isFirst > this.capacity) {\r\n            if (isFirst === 1) {\r\n                this.current--;\r\n                this.firstHere = false;\r\n            }\r\n            return this.queue.push(item);\r\n        }\r\n\r\n        this.current += item.n - isFirst;\r\n        item.task();\r\n        if (isFirst === 1) {\r\n            this.firstHere = false;\r\n        }\r\n\r\n    }\r\n\r\n    leave(n: number = 1) {\r\n        this.current -= n;\r\n\r\n        if (!this.queue.length) {\r\n            if (this.current < 0) {\r\n                throw new Error('leave called too many times.');\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        const item = this.queue[0];\r\n\r\n        if (item.n + this.current > this.capacity) {\r\n            return;\r\n        }\r\n\r\n        this.queue.shift();\r\n        this.current += item.n;\r\n\r\n        nextTick(item.task);\r\n    }\r\n\r\n    available(n: number = 1) {\r\n        return this.current + n <= this.capacity;\r\n    }\r\n}\r\n"]}