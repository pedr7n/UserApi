{"version":3,"file":"StringUtil.js","sourceRoot":"","sources":["../../../src/Utility/StringUtil.ts"],"names":[],"mappings":";;;AAAA,+CAAyC;AACzC,qDAAoD;AAGpD,MAAa,UAAU;IACX,MAAM,CAAU,QAAQ,GAAW,SAAS,CAAC;IAC7C,MAAM,CAAU,OAAO,GAAW,IAAI,CAAC;IAExC,MAAM,CAAC,OAAO,CAAC,CAAS,EAAE,MAAc,EAAE,IAAY;QACzD,MAAM,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,WAAW,KAAK,MAAM,EAAE,CAAC;YACzB,sBAAsB;YACtB,OAAO,CAAC,CAAC;QACb,CAAC;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IAEM,MAAM,CAAC,oBAAoB,CAAC,CAAS,EAAE,MAAc;QACxD,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;IAC5D,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,GAAW;QACrC,OAAO,GAAG;aACL,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC;aAC7B,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAEM,MAAM,CAAC,MAAM,CAAC,CAAS,EAAE,IAAmB,EAAE,GAAG,SAAgB;QACpE,IAAI,sBAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YAC1B,OAAO,CAAC,CAAC,OAAO,CACZ,iBAAiB,EACjB,CAAC,KAAa,EAAE,WAAmB,EAAU,EAAE,CAC3C,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAClE,CAAC;QACN,CAAC;QAED,MAAM,SAAS,GAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAElD,OAAO,CAAC,CAAC,OAAO,CACZ,cAAc,EACd,CAAC,KAAa,EAAE,WAAmB,EAAU,EAAE;YAC3C,MAAM,KAAK,GAAQ,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;YAE/D,OAAO,CAAC,sBAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;QACvE,CAAC,CAAC,CAAC;IACX,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,MAAe;QACxC,IAAI,sBAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YAChD,IAAA,qBAAU,EAAC,2BAA2B,EAAE,yBAAyB,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACrC,IAAA,qBAAU,EAAC,2BAA2B,EAAE,+DAA+D,CAAC,CAAC;QAC7G,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,iBAAiB,CAAC,KAAa;QACzC,IAAI,CAAC,KAAK,EAAE,CAAC;YACT,OAAO,KAAK,CAAC;QACjB,CAAC;QAED,IAAI,MAAM,GAAY,KAAK,CAAC;QAE5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,MAAM,CAAC,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;YAE3B,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBACV,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC/C,MAAM,GAAG,IAAI,CAAC;oBACd,MAAM;gBACV,CAAC;gBAED,SAAS;YACb,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;gBACrE,MAAM,GAAG,IAAI,CAAC;gBACd,MAAM;YACV,CAAC;QACL,CAAC;QAED,IAAI,MAAM,EAAE,CAAC;YACT,OAAO,IAAI,KAAK,GAAG,CAAC;QACxB,CAAC;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,CAAS;QAC9B,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,CAAS;QAChC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,SAAiB;QACvC,OAAO,SAAS,IAAI,CAAC,CAAC,KAAK,SAAS,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,SAAiB;QACnC,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;eAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAEM,MAAM,CAAC,QAAQ,CAAC,SAAiB;QACpC,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;eAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,SAAiB;QAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;eACxB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAEM,MAAM,CAAC,aAAa,CAAC,CAAU;QAClC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;IAC7B,CAAC;IAEM,MAAM,CAAC,kBAAkB,CAAC,CAAU;QACvC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;IACpC,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAAC,EAAU,EAAE,EAAU;QACjD,MAAM,MAAM,GAAG,OAAO,EAAE,CAAC;QACzB,MAAM,MAAM,GAAG,OAAO,EAAE,CAAC;QACzB,OAAO,MAAM,KAAK,MAAM;eACjB,MAAM,KAAK,WAAW;eACtB,MAAM,KAAK,WAAW;eACtB,EAAE,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC,WAAW,EAAE,CAAC;IACjD,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,OAAsB,EAAE,KAAa;QAC5D,IAAI,UAAU,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;YACvC,OAAO;QACX,CAAC;QAED,UAAU,CAAC,qBAAqB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACrD,CAAC;IAEO,MAAM,CAAC,qBAAqB,CAAC,OAAsB,EAAE,KAAa;QACtE,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAEpC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAA,IAAI,CAAC,CAAC;QAEhD,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEM,MAAM,CAAC,MAAM,CAAC,KAAa,EAAE,KAAa,EAAE,QAAgB,EAAE,SAAiB;QAClF,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvF,CAAC;;AAnJL,gCAoJC","sourcesContent":["import { TypeUtil } from \"./TypeUtil.js\";\r\nimport { throwError } from \"../Exceptions/index.js\";\r\nimport { StringBuilder } from \"./StringBuilder.js\";\r\n\r\nexport class StringUtil {\r\n    private static readonly letterRe: RegExp = /^\\p{L}/u;\r\n    private static readonly digitRe: RegExp = /\\d/;\r\n\r\n    public static leftPad(s: string, length: number, char: string) {\r\n        const inputLength = s ? s.length : 0;\r\n        if (inputLength === length) {\r\n            // no need for padding\r\n            return s;\r\n        }\r\n        return char.repeat(length - inputLength) + s;\r\n    }\r\n\r\n    public static startsWithIgnoreCase(s: string, prefix: string) {\r\n        return s.toLowerCase().startsWith(prefix.toLowerCase());\r\n    }\r\n\r\n    public static toWebSocketPath(url: string) {\r\n        return url\r\n            .replace(\"https://\", \"wss://\")\r\n            .replace(\"http://\", \"ws://\");\r\n    }\r\n\r\n    public static format(s: string, vars?: object | any, ...varsArray: any[]): string {\r\n        if (TypeUtil.isObject(vars)) {\r\n            return s.replace(\r\n                /\\{([\\w\\d-]+)\\}/g,\r\n                (match: string, placeholder: string): string =>\r\n                    ((placeholder in vars) ? vars[placeholder] : \"\").toString()\r\n            );\r\n        }\r\n\r\n        const inputVars: any[] = [vars].concat(varsArray);\r\n\r\n        return s.replace(\r\n            /\\{([\\d]+)\\}/g,\r\n            (match: string, placeholder: string): string => {\r\n                const value: any = inputVars[Number.parseInt(placeholder, 10)];\r\n\r\n                return (TypeUtil.isNullOrUndefined(value) ? \"\" : value).toString();\r\n            });\r\n    }\r\n\r\n    public static validateDBName(dbName?: string): void {\r\n        if (TypeUtil.isNullOrUndefined(dbName) || !dbName) {\r\n            throwError(\"InvalidOperationException\", \"Empty name is not valid\");\r\n        }\r\n\r\n        if (!/^[A-Za-z0-9_\\-.]+$/.test(dbName)) {\r\n            throwError(\"InvalidOperationException\", `Database name can only contain only A-Z, a-z, \"_\", \".\" or \"-\"`);\r\n        }\r\n    }\r\n\r\n    public static escapeIfNecessary(field: string): string {\r\n        if (!field) {\r\n            return field;\r\n        }\r\n\r\n        let escape: boolean = false;\r\n\r\n        for (let i = 0; i < field.length; i++) {\r\n            const c: string = field[i];\r\n\r\n            if (i === 0) {\r\n                if (!this.isLetter(c) && ![\"_\", \"@\"].includes(c)) {\r\n                    escape = true;\r\n                    break;\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            if (!this.isLetterOrDigit(c) && ![\"_\", \"@\", \".\", \"[\", \"]\"].includes(c)) {\r\n                escape = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (escape) {\r\n            return `'${field}'`;\r\n        }\r\n\r\n        return field;\r\n    }\r\n\r\n    public static capitalize(s: string): string {\r\n        return s.charAt(0).toUpperCase() + s.slice(1);\r\n    }\r\n\r\n    public static uncapitalize(s: string): string {\r\n        return s.charAt(0).toLowerCase() + s.slice(1);\r\n    }\r\n\r\n    public static isCharacter(character: string): boolean {\r\n        return character && (1 === character.length);\r\n    }\r\n\r\n    public static isDigit(character: string): boolean {\r\n        return this.isCharacter(character)\r\n            && this.digitRe.test(character);\r\n    }\r\n\r\n    public static isLetter(character: string): boolean {\r\n        return this.isCharacter(character)\r\n            && this.letterRe.test(character);\r\n    }\r\n\r\n    public static isLetterOrDigit(character: string): boolean {\r\n        return this.isLetter(character)\r\n            || this.isDigit(character);\r\n    }\r\n\r\n    public static isNullOrEmpty(s?: string): boolean {\r\n        return !(s || \"\").length;\r\n    }\r\n\r\n    public static isNullOrWhitespace(s?: string): boolean {\r\n        return !(s || \"\").trim().length;\r\n    }\r\n\r\n    public static equalsIgnoreCase(s1: string, s2: string) {\r\n        const s1Type = typeof s1;\r\n        const s2Type = typeof s2;\r\n        return s1Type === s2Type\r\n            && s1Type !== \"undefined\"\r\n            && s2Type !== \"undefined\"\r\n            && s1.toLowerCase() === s2.toLowerCase();\r\n    }\r\n\r\n    public static escapeString(builder: StringBuilder, value: string) {\r\n        if (StringUtil.isNullOrWhitespace(value)) {\r\n            return;\r\n        }\r\n\r\n        StringUtil._escapeStringInternal(builder, value);\r\n    }\r\n\r\n    private static _escapeStringInternal(builder: StringBuilder, value: string) {\r\n        let escaped = JSON.stringify(value);\r\n\r\n        escaped = escaped.replace(/'/g, String.raw`\\'`);\r\n\r\n        builder.append(escaped.substring(1, escaped.length - 1));\r\n    }\r\n\r\n    public static splice(input: string, start: number, delCount: number, newSubStr: string) {\r\n        return input.slice(0, start) + newSubStr + input.slice(start + Math.abs(delCount));\r\n    }\r\n}\r\n"]}