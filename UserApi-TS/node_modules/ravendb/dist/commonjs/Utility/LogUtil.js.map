{"version":3,"file":"LogUtil.js","sourceRoot":"","sources":["../../../src/Utility/LogUtil.ts"],"names":[],"mappings":";;AAYA,8BAeC;AA3BD,yCAAqC;AAErC,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC;AAUtD,SAAgB,SAAS,CAAC,EAAE,IAAI,GAAG,SAAS,EAAE,MAAM,GAAG,EAAE,EAAE;IACvD,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACpD,IAAI,CAAC,OAAO,EAAE,CAAC;QACX,gEAAgE;QAChE,MAAM,IAAI,GAAG,CAAC,GAAW,EAAE,EAAE;YACzB,QAAQ;QACZ,CAAC,CAAC;QACF,OAAO;YACH,KAAK,EAAE,IAAI;YACX,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI;SACb,CAAC;IACN,CAAC;IAED,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;AAC/B,CAAC;AAED,MAAM,MAAM;IAES,SAAS,CAAwB;IAElD,YAAY,IAAY;QACpB,IAAI,CAAC,SAAS,GAAG,IAAA,oBAAQ,EAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAEM,KAAK,CAAC,QAAwB,EAAE,aAAsB;QACzD,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAEM,IAAI,CAAC,QAAwB,EAAE,aAAsB;QACxD,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC;IACxD,CAAC;IAEM,IAAI,CAAC,GAAG;QACX,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;IAChC,CAAC;IAEO,aAAa,CAAC,GAAmB,EAAE,aAAqB,EAAE,KAAK;QACnE,IAAI,GAAG,GAAW,GAAG,EAAE,QAAQ,EAAE,CAAC;QAClC,IAAI,aAAa,EAAE,CAAC;YAChB,GAAG,GAAG,GAAG,aAAa,IAAI,GAAG,EAAE,CAAC;QACpC,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;IAE/B,CAAC;IAEO,IAAI,CAAC,GAAG,EAAE,KAAK,GAAG,MAAM;QAC5B,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,UAAU,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,IAAI,GAAG,CAAC,QAAQ,EAAE,IAAI,GAAG,CAAC,OAAO,EAAE,EAAE;cACtE,IAAI,GAAG,CAAC,QAAQ,EAAE,IAAI,GAAG,CAAC,UAAU,EAAE,IAAI,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC;QACnE,IAAI,CAAC,SAAS,CAAC,GAAG,UAAU,IAAI,KAAK,KAAK,GAAG,EAAE,CAAC,CAAC;IACrD,CAAC;CACJ","sourcesContent":["import { debuglog } from \"node:util\";\r\n\r\nconst isDebug = process.env.NODE_ENV !== \"production\";\r\n\r\nexport interface ILogger {\r\n    info(msg: string);\r\n\r\n    error(errOrMsg: string | Error, additionalMsg?: string);\r\n\r\n    warn(errOrMsg: string | Error, additionalMsg?: string);\r\n}\r\n\r\nexport function getLogger({ name = \"ravendb\", module = \"\" }): ILogger {\r\n    const logName = module ? `${name}-${module}` : name;\r\n    if (!isDebug) {\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        const noop = (msg: string) => {\r\n            // empty\r\n        };\r\n        return {\r\n            error: noop,\r\n            info: noop,\r\n            warn: noop\r\n        };\r\n    }\r\n\r\n    return new Logger(logName);\r\n}\r\n\r\nclass Logger {\r\n\r\n    private readonly _logdebug: (msg: string) => void;\r\n\r\n    constructor(name: string) {\r\n        this._logdebug = debuglog(name);\r\n    }\r\n\r\n    public error(errOrMsg: string | Error, additionalMsg?: string) {\r\n        this._logWithError(errOrMsg, additionalMsg, \"ERROR\");\r\n    }\r\n\r\n    public warn(errOrMsg: string | Error, additionalMsg?: string) {\r\n        this._logWithError(errOrMsg, additionalMsg, \"WARN\");\r\n    }\r\n\r\n    public info(msg) {\r\n        this._log(`${msg}`, \"INFO\");\r\n    }\r\n\r\n    private _logWithError(err: string | Error, additionalMsg: string, level) {\r\n        let msg: string = err?.toString();\r\n        if (additionalMsg) {\r\n            msg = `${additionalMsg} ${msg}`;\r\n        }\r\n\r\n        this._log(`${msg}`, level);\r\n\r\n    }\r\n\r\n    private _log(msg, level = \"INFO\") {\r\n        const now = new Date();\r\n        const dateString = `${now.getFullYear()}-${now.getMonth()}-${now.getDate()}`\r\n            + ` ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;\r\n        this._logdebug(`${dateString}|${level}: ${msg}`);\r\n    }\r\n}\r\n"]}