{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/Exceptions/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { closeHttpResponse } from \"../Utility/HttpUtil.js\";\r\nimport { StatusCodes } from \"../Http/StatusCode.js\";\r\nimport { HttpResponse } from \"../Primitives/Http.js\";\r\nimport { JsonSerializer } from \"../Mapping/Json/Serializer.js\";\r\nimport { EOL } from \"../Utility/OsUtil.js\";\r\n\r\nexport function throwError(errName: RavenErrorType): never;\r\nexport function throwError(errName: RavenErrorType, message: string): never;\r\nexport function throwError(errName: RavenErrorType, message: string, errCause?: Error): never;\r\nexport function throwError(\r\n    errName: RavenErrorType, message: string, errCause?: Error, info?: { [key: string]: any }): never;\r\nexport function throwError(\r\n    errName: RavenErrorType | string = \"RavenException\",\r\n    message?: string,\r\n    errCause?: Error,\r\n    info?: { [key: string]: any }): never {\r\n    throw getError(errName, message, errCause, info);\r\n}\r\n\r\nfunction buildMessageWithInner(error: any) {\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    if (!error.cause) {\r\n        return error.message;\r\n    }\r\n\r\n    const inner = buildMessageWithInner(error.cause);\r\n    return inner ? error.message + \": \" + inner : error.message;\r\n}\r\n\r\n\r\nexport function getError(errName: RavenErrorType, message: string): Error;\r\nexport function getError(\r\n    errName: string,\r\n    message: string,\r\n    errCause?: Error,\r\n    info?: { [key: string]: any }): Error;\r\nexport function getError(\r\n    errName: string,\r\n    message: string,\r\n    errCause?: Error): Error;\r\nexport function getError(\r\n    errName: RavenErrorType | string = \"RavenException\",\r\n    message: string = \"\",\r\n    errCause?: Error,\r\n    info?: { [key: string]: any }): Error {\r\n    const innerMessage = buildMessageWithInner(errCause);\r\n    const error = new Error(message + (innerMessage ? \": \" + innerMessage : \"\"), { cause: errCause });\r\n    error.name = errName;\r\n\r\n    if (info) {\r\n        for (const value of Object.entries(info)) {\r\n            error[value[0]] = value[1];\r\n        }\r\n    }\r\n\r\n    return error;\r\n}\r\n\r\nexport type RavenErrorType = \"RavenException\"\r\n    | \"RavenTimeoutException\"\r\n    | \"NotSupportedException\"\r\n    | \"IndexCompactionInProgressException\"\r\n    | \"InvalidQueryException\"\r\n    | \"InvalidOperationException\"\r\n    | \"InvalidArgumentException\"\r\n    | \"ErrorResponseException\"\r\n    | \"DocumentDoesNotExistsException\"\r\n    | \"NonUniqueObjectException\"\r\n    | \"ConcurrencyException\"\r\n    | \"ClusterTransactionConcurrencyException\"\r\n    | \"InvalidNetworkTopologyException\"\r\n    | \"ArgumentNullException\"\r\n    | \"ArgumentOutOfRangeException\"\r\n    | \"DatabaseDoesNotExistException\"\r\n    | \"ClientVersionMismatchException\"\r\n    | \"AuthorizationException\"\r\n    | \"IndexDoesNotExistException\"\r\n    | \"DatabaseLoadTimeoutException\"\r\n    | \"AuthenticationException\"\r\n    | \"BadRequestException\"\r\n    | \"BulkInsertAbortedException\"\r\n    | \"BulkInsertProtocolViolationException\"\r\n    | \"IndexCompilationException\"\r\n    | \"TransformerCompilationException\"\r\n    | \"DocumentConflictException\"\r\n    | \"DocumentDoesNotExistException\"\r\n    | \"DocumentCollectionMismatchException\"\r\n    | \"DocumentParseException\"\r\n    | \"IndexInvalidException\"\r\n    | \"IndexOrTransformerAlreadyExistException\"\r\n    | \"JavaScriptException\"\r\n    | \"JavaScriptParseException\"\r\n    | \"SubscriptionClosedException\"\r\n    | \"DocumentUnderActiveMigrationException\"\r\n    | \"CompareExchangeKeyTooBigException\"\r\n    | \"SubscriptionDoesNotBelongToNodeException\"\r\n    | \"SubscriptionChangeVectorUpdateConcurrencyException\"\r\n    | \"SubscriptionDoesNotExistException\"\r\n    | \"SubscriptionConnectionDownException\"\r\n    | \"SubscriptionInvalidStateException\"\r\n    | \"SubscriptionMessageTypeException\"\r\n    | \"SubscriptionException\"\r\n    | \"SubscriberErrorException\"\r\n    | \"SubscriptionInUseException\"\r\n    | \"ShardedPatchBehaviorViolationException\"\r\n    | \"ShardedBatchBehaviorViolationException\"\r\n    | \"ShardMismatchException\"\r\n    | \"SubscriptionCreationException\"\r\n    | \"NotSupportedInShardingException\"\r\n    | \"TransformerDoesNotExistException\"\r\n    | \"VersioningDisabledException\"\r\n    | \"TopologyNodeDownException\"\r\n    | \"AllTopologyNodesDownException\"\r\n    | \"BadResponseException\"\r\n    | \"ChangeProcessingException\"\r\n    | \"CommandExecutionException\"\r\n    | \"NoLeaderException\"\r\n    | \"CompilationException\"\r\n    | \"ConflictException\"\r\n    | \"DatabaseConcurrentLoadTimeoutException\"\r\n    | \"DatabaseDisabledException\"\r\n    | \"AnalyzerDoesNotExistException\"\r\n    | \"AnalyzerCompilationException\"\r\n    | \"DatabaseLoadFailureException\"\r\n    | \"DatabaseNotFoundException\"\r\n    | \"NotSupportedOsException\"\r\n    | \"SecurityException\"\r\n    | \"ServerLoadFailureException\"\r\n    | \"UnsuccessfulRequestException\"\r\n    | \"CriticalIndexingException\"\r\n    | \"IndexAnalyzerException\"\r\n    | \"IndexCorruptionException\"\r\n    | \"IndexOpenException\"\r\n    | \"IndexWriteException\"\r\n    | \"IndexWriterCreationException\"\r\n    | \"StorageException\"\r\n    | \"StreamDisposedException\"\r\n    | \"LowMemoryException\"\r\n    | \"IncorrectDllException\"\r\n    | \"DiskFullException\"\r\n    | \"InvalidJournalFlushRequestException\"\r\n    | \"QuotaException\"\r\n    | \"VoronUnrecoverableErrorException\"\r\n    | \"NonDurableFileSystemException\"\r\n    | \"TimeoutException\"\r\n    | \"AggregateException\"\r\n    | \"OperationCanceledException\"\r\n    | \"MappingError\"\r\n    | \"UrlScrappingError\"\r\n    | \"TestDriverTearDownError\"\r\n    | \"FileNotFoundException\"\r\n    | \"NotImplementedException\"\r\n    | \"NodeIsPassiveException\"\r\n    | \"ConfigurationException\"\r\n    | \"CertificateNameMismatchException\"\r\n    | \"BulkInsertStreamError\"\r\n    | \"DatabaseSchemaErrorException\"\r\n    | \"AttachmentDoesNotExistException\"\r\n    | \"CounterOverflowException\"\r\n    | \"SorterCompilationException\"\r\n    | \"RequestedNodeUnavailableException\"\r\n    | \"DatabaseIdleException\"\r\n    | \"DatabaseRestoringException\"\r\n    | \"PendingRollingIndexException\"\r\n    | \"ReplicationHubNotFoundException\"\r\n    | \"SubscriptionNameException\"\r\n    | \"SorterDoesNotExistException\"\r\n    | \"LicenseActivationException\"\r\n    | \"NotSupportedInCoraxException\"\r\n    | \"NotImplementedInCoraxException\"\r\n    | \"CompareExchangeInvalidKeyException\"\r\n    | \"BulkInsertInvalidOperationException\"\r\n    | \"BulkInsertClientException\";\r\n\r\nexport interface ExceptionSchema {\r\n    url: string;\r\n    type: string;\r\n    message: string;\r\n    error: string;\r\n}\r\n\r\nexport interface ExceptionDispatcherArgs {\r\n    message: string;\r\n    url: string;\r\n    error?: string;\r\n    type?: string;\r\n}\r\n\r\nexport class ExceptionDispatcher {\r\n\r\n    private static _jsonSerializer: JsonSerializer = JsonSerializer.getDefaultForCommandPayload();\r\n\r\n    public static get(schema: ExceptionDispatcherArgs, code: number, inner?: Error): Error {\r\n        const message = schema.message;\r\n        const typeAsString = schema.type;\r\n        if (code === StatusCodes.Conflict) {\r\n            if (typeAsString.includes(\"DocumentConflictException\")) {\r\n                return getError(\"DocumentConflictException\", message, inner);\r\n            }\r\n\r\n            return getError(\"ConcurrencyException\", schema.error, inner);\r\n        }\r\n\r\n        const error =\r\n            schema.error + EOL\r\n            + \"The server at \" + schema.url + \" responded with status code: \" + code;\r\n\r\n        const determinedType = this._getType(typeAsString) as RavenErrorType;\r\n        return getError(determinedType || \"RavenException\", error, inner);\r\n    }\r\n\r\n    public static throwException(response: HttpResponse, body: string): void | never {\r\n        if (!response) {\r\n            throw getError(\"InvalidArgumentException\", \"Response cannot be null\");\r\n        }\r\n\r\n        let errorToThrow: Error;\r\n        try {\r\n            const json: string = body;\r\n            const schema: ExceptionSchema = ExceptionDispatcher._jsonSerializer.deserialize(json);\r\n\r\n            if (response.status === StatusCodes.Conflict) {\r\n                errorToThrow = this._getConflictError(schema, json);\r\n            } else {\r\n                const determinedType = this._getType(schema.type) as RavenErrorType;\r\n                errorToThrow = getError(determinedType || \"RavenException\", schema.error);\r\n            }\r\n\r\n            ExceptionDispatcher._fillException(errorToThrow, schema);\r\n        } catch (errThrowing) {\r\n            errorToThrow = getError(\"RavenException\", errThrowing.message, errThrowing);\r\n        } finally {\r\n            closeHttpResponse(response);\r\n        }\r\n\r\n        throw errorToThrow;\r\n    }\r\n\r\n    private static _fillException(exception: Error, json: any) {\r\n        if (exception.name === \"RavenTimeoutException\") {\r\n            (exception as any).failImmediately = !!json.FailImmediately;\r\n        }\r\n    }\r\n\r\n    private static _getConflictError(schema: ExceptionSchema, json: string) {\r\n        if (schema.type.includes(\"DocumentConflictException\")) {\r\n            return getError(\"DocumentConflictException\", schema.message, null, { json });\r\n        }\r\n\r\n        if (schema.type.includes(\"ClusterTransactionConcurrencyException\")) {\r\n            return getError(\"ClusterTransactionConcurrencyException\", schema.message, null, { json });\r\n        }\r\n\r\n        return getError(\"ConcurrencyException\", schema.message);\r\n    }\r\n\r\n    private static _getType(typeAsString: string): string {\r\n        if (\"System.TimeoutException\" === typeAsString) {\r\n            return \"TimeoutException\";\r\n        }\r\n        const prefix = \"Raven.Client.Exceptions.\";\r\n        if (typeAsString && typeAsString.startsWith(prefix)) {\r\n            const exceptionName = typeAsString.substring(prefix.length);\r\n            if (exceptionName.includes(\".\")) {\r\n                const tokens = exceptionName.split(\".\");\r\n                return tokens.at(-1) as RavenErrorType;\r\n            }\r\n\r\n            return exceptionName;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n"]}