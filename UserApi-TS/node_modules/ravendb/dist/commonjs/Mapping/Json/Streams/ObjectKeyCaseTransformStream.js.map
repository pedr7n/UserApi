{"version":3,"file":"ObjectKeyCaseTransformStream.js","sourceRoot":"","sources":["../../../../../src/Mapping/Json/Streams/ObjectKeyCaseTransformStream.ts"],"names":[],"mappings":";;;AAAA,6CAAwC;AACxC,kEAGwC;AACxC,8DAAwD;AAMxD,MAAM,sCAAsC,GAAG;IAC3C,cAAc,EAAE,IAAI;IACpB,SAAS,EAAE,IAAI;CAClB,CAAC;AAGF,MAAa,4BAA6B,SAAQ,uBAAS;IAEnC;IAApB,YAAoB,KAA0C;QAC1D,KAAK,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QADZ,UAAK,GAAL,KAAK,CAAqC;QAG1D,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,sCAAsC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACvF,CAAC;IAEM,UAAU,CAAC,KAAU,EAAE,GAAW,EAAE,QAAQ;QAC/C,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,sBAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,sBAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE,CAAC;YACnE,OAAO,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACjC,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,CAAC;QAExD,KAAK,GAAG,0BAAU,CAAC,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACpD,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC1B,CAAC;CACJ;AArBD,oEAqBC","sourcesContent":["import { Transform } from \"node:stream\";\r\nimport {\r\n    ObjectUtil,\r\n    ObjectChangeCaseOptions\r\n} from \"../../../Utility/ObjectUtil.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\n\r\nexport interface ObjectKeyCaseTransformStreamOptions\r\n    extends ObjectChangeCaseOptions {\r\n}\r\n\r\nconst DEFAULT_OBJECT_KEY_CASE_TRANSFORM_OPTS = {\r\n    arrayRecursive: true,\r\n    recursive: true\r\n};\r\n\r\n\r\nexport class ObjectKeyCaseTransformStream extends Transform {\r\n\r\n    constructor(private _opts: ObjectKeyCaseTransformStreamOptions) {\r\n        super({ objectMode: true });\r\n\r\n        this._opts = Object.assign({}, DEFAULT_OBJECT_KEY_CASE_TRANSFORM_OPTS, this._opts);\r\n    }\r\n\r\n    public _transform(chunk: any, enc: string, callback) {\r\n        let entry = chunk;\r\n        const key = chunk[\"key\"];\r\n        if (TypeUtil.isPrimitive(entry) || TypeUtil.isNullOrUndefined(entry)) {\r\n            return callback(null, chunk);\r\n        }\r\n\r\n        const opts = Object.assign({}, this._opts);\r\n        opts.ignorePaths = [...new Set(opts.ignorePaths || [])];\r\n\r\n        entry = ObjectUtil.transformObjectKeys(entry, opts);\r\n        callback(null, entry);\r\n    }\r\n}\r\n"]}