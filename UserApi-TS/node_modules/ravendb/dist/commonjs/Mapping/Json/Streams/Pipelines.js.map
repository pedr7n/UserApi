{"version":3,"file":"Pipelines.js","sourceRoot":"","sources":["../../../../../src/Mapping/Json/Streams/Pipelines.ts"],"names":[],"mappings":";;AAMA,kEAyBC;AAED,gGAUC;AAED,0DAYC;AAzDD,6CAA0D;AAC1D,mGAA6F;AAE7F,kEAA4D;AAC5D,4EAA2E;AAE3E,SAAgB,2BAA2B,CACvC,WAAgC,EAChC,WAAoB;IAEpB,MAAM,QAAQ,GAAG,8DAA4B,CAAC,MAAM,EAAY,CAAC;IAEjE,MAAM,aAAa,GAAG,IAAI,uBAAS,CAAC;QAChC,UAAU,EAAE,IAAI;QAChB,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ;YAC/B,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,KAAK,EAAE,CAAC;gBACT,OAAO,QAAQ,EAAE,CAAC;YACtB,CAAC;YAED,IAAI,WAAW,EAAE,CAAC;gBACd,KAAK,GAAG,0BAAU,CAAC,qBAAqB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YACjE,CAAC;YAED,QAAQ,CAAC,IAAI,EAAE,EAAC,GAAG,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;QACtC,CAAC;KACJ,CAAC,CAAC;IAEH,OAAO,QAAQ,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QACnE,UAAU,EAAE,CAAC,aAAa,CAAC;KAC9B,CAAC,CAAC;AACP,CAAC;AAEM,KAAK,UAAU,0CAA0C,CAC5D,WAAgC;IAEhC,MAAM,QAAQ,GAAG,8DAA4B,CAAC,MAAM,EAAY,CAAC;IAEjE,OAAO,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;QACxC,UAAU,EAAE;YACR,IAAI,2BAAa,CAAC,EAAE,QAAQ,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;SACpF;KACJ,CAAC,CAAC;AACX,CAAC;AAEM,KAAK,UAAU,uBAAuB,CACzC,UAAkB,EAClB,WAAgC,EAChC,QAAkB;IAClB,MAAM,QAAQ,GAAG,MAAM,0CAA0C,CAAC,WAAW,CAAC,CAAC;IAE/E,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACzC,QAAQ;aACH,MAAM,CAAC,UAAU,EAAE,QAAQ,EAAE,CAAC,GAAG,EAAE,EAAE;YAClC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAClC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import { Stream, Transform, Writable } from \"node:stream\";\r\nimport { RavenCommandResponsePipeline } from \"../../../Http/RavenCommandResponsePipeline.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { ObjectUtil } from \"../../../Utility/ObjectUtil.js\";\r\nimport { JsonlStringer } from \"../../../ext/stream-json/jsonl/Stringer.js\";\r\n\r\nexport function getDocumentResultsAsObjects(\r\n    conventions: DocumentConventions,\r\n    queryStream: boolean\r\n): RavenCommandResponsePipeline<object[]> {\r\n    const pipeline = RavenCommandResponsePipeline.create<object[]>();\r\n\r\n    const keysTransform = new Transform({\r\n        objectMode: true,\r\n        transform(chunk, encoding, callback) {\r\n            let value = chunk[\"value\"];\r\n            if (!value) {\r\n                return callback();\r\n            }\r\n\r\n            if (conventions) {\r\n                value = ObjectUtil.transformDocumentKeys(value, conventions);\r\n            }\r\n\r\n            callback(null, {...chunk, value});\r\n        }\r\n    });\r\n\r\n    return pipeline.parseJsonlAsync(queryStream ? x => x[\"Item\"] : x => x, {\r\n        transforms: [keysTransform]\r\n    });\r\n}\r\n\r\nexport async function getDocumentStreamResultsIntoStreamPipeline(\r\n    conventions: DocumentConventions\r\n): Promise<RavenCommandResponsePipeline<object[]>> {\r\n    const pipeline = RavenCommandResponsePipeline.create<object[]>();\r\n\r\n    return pipeline.parseJsonlAsync(x => x[\"Item\"], {\r\n            transforms: [\r\n                new JsonlStringer({ replacer: (key, value) => key === '' ? value.value : value }),\r\n            ]\r\n        });\r\n}\r\n\r\nexport async function streamResultsIntoStream(\r\n    bodyStream: Stream,\r\n    conventions: DocumentConventions,\r\n    writable: Writable): Promise<void> {\r\n    const pipeline = await getDocumentStreamResultsIntoStreamPipeline(conventions);\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n        pipeline\r\n            .stream(bodyStream, writable, (err) => {\r\n                err ? reject(err) : resolve();\r\n            });\r\n    });\r\n}\r\n"]}