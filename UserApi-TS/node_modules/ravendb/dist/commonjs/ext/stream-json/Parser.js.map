{"version":3,"file":"Parser.js","sourceRoot":"","sources":["../../../../src/ext/stream-json/Parser.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-useless-escape */\r\nimport { Utf8Stream } from \"./utils/Utf8Stream.js\";\r\n\r\nconst patterns: any = {\r\n    value1: /^(?:[\\\"\\{\\[\\]\\-\\d]|true\\b|false\\b|null\\b|\\s{1,256})/,\r\n    string: /^(?:[^\\\"\\\\]{1,256}|\\\\[bfnrt\\\"\\\\\\/]|\\\\u[\\da-fA-F]{4}|\\\")/,\r\n    key1: /^(?:[\\\"\\}]|\\s{1,256})/,\r\n    colon: /^(?:\\:|\\s{1,256})/,\r\n    comma: /^(?:[\\,\\]\\}]|\\s{1,256})/,\r\n    ws: /^\\s{1,256}/,\r\n    numberStart: /^\\d/,\r\n    numberDigit: /^\\d{0,256}/,\r\n    numberFraction: /^[\\.eE]/,\r\n    numberExponent: /^[eE]/,\r\n    numberExpSign: /^[-+]/\r\n};\r\nconst MAX_PATTERN_SIZE = 16;\r\n\r\nlet noSticky = true;\r\ntry {\r\n    new RegExp('.', 'y');\r\n    noSticky = false;\r\n} catch (e) {\r\n    // suppress\r\n}\r\n\r\n!noSticky &&\r\nObject.keys(patterns).forEach(key => {\r\n    let src = patterns[key].source.slice(1); // lop off ^\r\n    if (src.slice(0, 3) === '(?:' && src.slice(-1) === ')') {\r\n        src = src.slice(3, -1);\r\n    }\r\n    patterns[key] = new RegExp(src, 'y');\r\n});\r\n\r\npatterns.numberFracStart = patterns.numberExpStart = patterns.numberStart;\r\npatterns.numberFracDigit = patterns.numberExpDigit = patterns.numberDigit;\r\n\r\nconst values = {true: true, false: false, null: null},\r\n    expected = {object: 'objectStop', array: 'arrayStop', '': 'done'};\r\n\r\n// long hexadecimal codes: \\uXXXX\r\nconst fromHex = s => String.fromCharCode(parseInt(s.slice(2), 16));\r\n\r\n// short codes: \\b \\f \\n \\r \\t \\\" \\\\ \\/\r\nconst codes = {b: '\\b', f: '\\f', n: '\\n', r: '\\r', t: '\\t', '\"': '\"', '\\\\': '\\\\', '/': '/'};\r\n\r\nexport class Parser extends Utf8Stream {\r\n    static make(options) {\r\n        return new Parser(options);\r\n    }\r\n\r\n    static parser = Parser.make;\r\n\r\n    _packKeys: boolean;\r\n    _packStrings: boolean;\r\n    _packNumbers: boolean;\r\n    _streamKeys: boolean;\r\n    _streamStrings: boolean;\r\n    _streamNumbers: boolean;\r\n    _jsonStreaming: boolean;\r\n    _done: boolean;\r\n    _expect: any;\r\n    _stack: any;\r\n    _parent: any;\r\n    _open_number: any;\r\n    _accumulator: any;\r\n\r\n    constructor(options = undefined) {\r\n        super(Object.assign({}, options, {readableObjectMode: true}));\r\n\r\n        this._packKeys = this._packStrings = this._packNumbers = this._streamKeys = this._streamStrings = this._streamNumbers = true;\r\n        if (options) {\r\n            'packValues' in options && (this._packKeys = this._packStrings = this._packNumbers = options.packValues);\r\n            'packKeys' in options && (this._packKeys = options.packKeys);\r\n            'packStrings' in options && (this._packStrings = options.packStrings);\r\n            'packNumbers' in options && (this._packNumbers = options.packNumbers);\r\n            'streamValues' in options && (this._streamKeys = this._streamStrings = this._streamNumbers = options.streamValues);\r\n            'streamKeys' in options && (this._streamKeys = options.streamKeys);\r\n            'streamStrings' in options && (this._streamStrings = options.streamStrings);\r\n            'streamNumbers' in options && (this._streamNumbers = options.streamNumbers);\r\n            this._jsonStreaming = options.jsonStreaming;\r\n        }\r\n        !this._packKeys && (this._streamKeys = true);\r\n        !this._packStrings && (this._streamStrings = true);\r\n        !this._packNumbers && (this._streamNumbers = true);\r\n\r\n        this._done = false;\r\n        this._expect = this._jsonStreaming ? 'done' : 'value';\r\n        this._stack = [];\r\n        this._parent = '';\r\n        this._open_number = false;\r\n        this._accumulator = '';\r\n    }\r\n\r\n    _flush(callback) {\r\n        this._done = true;\r\n        super._flush(error => {\r\n            if (error) return callback(error);\r\n            if (this._open_number) {\r\n                if (this._streamNumbers) {\r\n                    this.push({name: 'endNumber'});\r\n                }\r\n                this._open_number = false;\r\n                if (this._packNumbers) {\r\n                    this.push({name: 'numberValue', value: this._accumulator});\r\n                    this._accumulator = '';\r\n                }\r\n            }\r\n            callback(null);\r\n        });\r\n    }\r\n\r\n    _processBuffer(callback) {\r\n        let match,\r\n            value,\r\n            index = 0;\r\n        main: for (;;) {\r\n            switch (this._expect) {\r\n                case 'value1':\r\n                case 'value':\r\n                    patterns.value1.lastIndex = index;\r\n                    match = patterns.value1.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (this._done || index + MAX_PATTERN_SIZE < this._buffer.length) {\r\n                            if (index < this._buffer.length) return callback(new Error('Parser cannot parse input: expected a value'));\r\n                            return callback(new Error('Parser has expected a value'));\r\n                        }\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    switch (value) {\r\n                        case '\"':\r\n                            this._streamStrings && this.push({name: 'startString'});\r\n                            this._expect = 'string';\r\n                            break;\r\n                        case '{':\r\n                            this.push({name: 'startObject'});\r\n                            this._stack.push(this._parent);\r\n                            this._parent = 'object';\r\n                            this._expect = 'key1';\r\n                            break;\r\n                        case '[':\r\n                            this.push({name: 'startArray'});\r\n                            this._stack.push(this._parent);\r\n                            this._parent = 'array';\r\n                            this._expect = 'value1';\r\n                            break;\r\n                        case ']':\r\n                            if (this._expect !== 'value1') return callback(new Error(\"Parser cannot parse input: unexpected token ']'\"));\r\n                            if (this._open_number) {\r\n                                this._streamNumbers && this.push({name: 'endNumber'});\r\n                                this._open_number = false;\r\n                                if (this._packNumbers) {\r\n                                    this.push({name: 'numberValue', value: this._accumulator});\r\n                                    this._accumulator = '';\r\n                                }\r\n                            }\r\n                            this.push({name: 'endArray'});\r\n                            this._parent = this._stack.pop();\r\n                            this._expect = expected[this._parent];\r\n                            break;\r\n                        case '-':\r\n                            this._open_number = true;\r\n                            if (this._streamNumbers) {\r\n                                this.push({name: 'startNumber'});\r\n                                this.push({name: 'numberChunk', value: '-'});\r\n                            }\r\n                            this._packNumbers && (this._accumulator = '-');\r\n                            this._expect = 'numberStart';\r\n                            break;\r\n                        case '0':\r\n                            this._open_number = true;\r\n                            if (this._streamNumbers) {\r\n                                this.push({name: 'startNumber'});\r\n                                this.push({name: 'numberChunk', value: '0'});\r\n                            }\r\n                            this._packNumbers && (this._accumulator = '0');\r\n                            this._expect = 'numberFraction';\r\n                            break;\r\n                        case '1':\r\n                        case '2':\r\n                        case '3':\r\n                        case '4':\r\n                        case '5':\r\n                        case '6':\r\n                        case '7':\r\n                        case '8':\r\n                        case '9':\r\n                            this._open_number = true;\r\n                            if (this._streamNumbers) {\r\n                                this.push({name: 'startNumber'});\r\n                                this.push({name: 'numberChunk', value: value});\r\n                            }\r\n                            this._packNumbers && (this._accumulator = value);\r\n                            this._expect = 'numberDigit';\r\n                            break;\r\n                        case 'true':\r\n                        case 'false':\r\n                        case 'null':\r\n                            if (this._buffer.length - index === value.length && !this._done) break main; // wait for more input\r\n                            this.push({name: value + 'Value', value: values[value]});\r\n                            this._expect = expected[this._parent];\r\n                            break;\r\n                        // default: // ws\r\n                    }\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n                case 'keyVal':\r\n                case 'string':\r\n                    patterns.string.lastIndex = index;\r\n                    match = patterns.string.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length && (this._done || this._buffer.length - index >= 6))\r\n                            return callback(new Error('Parser cannot parse input: escaped characters'));\r\n                        if (this._done) return callback(new Error('Parser has expected a string value'));\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    if (value === '\"') {\r\n                        if (this._expect === 'keyVal') {\r\n                            this._streamKeys && this.push({name: 'endKey'});\r\n                            if (this._packKeys) {\r\n                                this.push({name: 'keyValue', value: this._accumulator});\r\n                                this._accumulator = '';\r\n                            }\r\n                            this._expect = 'colon';\r\n                        } else {\r\n                            this._streamStrings && this.push({name: 'endString'});\r\n                            if (this._packStrings) {\r\n                                this.push({name: 'stringValue', value: this._accumulator});\r\n                                this._accumulator = '';\r\n                            }\r\n                            this._expect = expected[this._parent];\r\n                        }\r\n                    } else if (value.length > 1 && value.charAt(0) === '\\\\') {\r\n                        const t = value.length == 2 ? codes[value.charAt(1)] : fromHex(value);\r\n                        if (this._expect === 'keyVal' ? this._streamKeys : this._streamStrings) {\r\n                            this.push({name: 'stringChunk', value: t});\r\n                        }\r\n                        if (this._expect === 'keyVal' ? this._packKeys : this._packStrings) {\r\n                            this._accumulator += t;\r\n                        }\r\n                    } else {\r\n                        if (this._expect === 'keyVal' ? this._streamKeys : this._streamStrings) {\r\n                            this.push({name: 'stringChunk', value: value});\r\n                        }\r\n                        if (this._expect === 'keyVal' ? this._packKeys : this._packStrings) {\r\n                            this._accumulator += value;\r\n                        }\r\n                    }\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n                case 'key1':\r\n                case 'key':\r\n                    patterns.key1.lastIndex = index;\r\n                    match = patterns.key1.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length || this._done) return callback(new Error('Parser cannot parse input: expected an object key'));\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    if (value === '\"') {\r\n                        this._streamKeys && this.push({name: 'startKey'});\r\n                        this._expect = 'keyVal';\r\n                    } else if (value === '}') {\r\n                        if (this._expect !== 'key1') return callback(new Error(\"Parser cannot parse input: unexpected token '}'\"));\r\n                        this.push({name: 'endObject'});\r\n                        this._parent = this._stack.pop();\r\n                        this._expect = expected[this._parent];\r\n                    }\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n                case 'colon':\r\n                    patterns.colon.lastIndex = index;\r\n                    match = patterns.colon.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length || this._done) return callback(new Error(\"Parser cannot parse input: expected ':'\"));\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    value === ':' && (this._expect = 'value');\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n                case 'arrayStop':\r\n                case 'objectStop':\r\n                    patterns.comma.lastIndex = index;\r\n                    match = patterns.comma.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length || this._done) return callback(new Error(\"Parser cannot parse input: expected ','\"));\r\n                        break main; // wait for more input\r\n                    }\r\n                    if (this._open_number) {\r\n                        this._streamNumbers && this.push({name: 'endNumber'});\r\n                        this._open_number = false;\r\n                        if (this._packNumbers) {\r\n                            this.push({name: 'numberValue', value: this._accumulator});\r\n                            this._accumulator = '';\r\n                        }\r\n                    }\r\n                    value = match[0];\r\n                    if (value === ',') {\r\n                        this._expect = this._expect === 'arrayStop' ? 'value' : 'key';\r\n                    } else if (value === '}' || value === ']') {\r\n                        if (value === '}' ? this._expect === 'arrayStop' : this._expect !== 'arrayStop') {\r\n                            return callback(new Error(\"Parser cannot parse input: expected '\" + (this._expect === 'arrayStop' ? ']' : '}') + \"'\"));\r\n                        }\r\n                        this.push({name: value === '}' ? 'endObject' : 'endArray'});\r\n                        this._parent = this._stack.pop();\r\n                        this._expect = expected[this._parent];\r\n                    }\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n                // number chunks\r\n                case 'numberStart': // [0-9]\r\n                    patterns.numberStart.lastIndex = index;\r\n                    match = patterns.numberStart.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length || this._done) return callback(new Error('Parser cannot parse input: expected a starting digit'));\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    this._streamNumbers && this.push({name: 'numberChunk', value: value});\r\n                    this._packNumbers && (this._accumulator += value);\r\n                    this._expect = value === '0' ? 'numberFraction' : 'numberDigit';\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n                case 'numberDigit': // [0-9]*\r\n                    patterns.numberDigit.lastIndex = index;\r\n                    match = patterns.numberDigit.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length || this._done) return callback(new Error('Parser cannot parse input: expected a digit'));\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    if (value) {\r\n                        this._streamNumbers && this.push({name: 'numberChunk', value: value});\r\n                        this._packNumbers && (this._accumulator += value);\r\n                        if (noSticky) {\r\n                            this._buffer = this._buffer.slice(value.length);\r\n                        } else {\r\n                            index += value.length;\r\n                        }\r\n                    } else {\r\n                        if (index < this._buffer.length) {\r\n                            this._expect = 'numberFraction';\r\n                            break;\r\n                        }\r\n                        if (this._done) {\r\n                            this._expect = expected[this._parent];\r\n                            break;\r\n                        }\r\n                        break main; // wait for more input\r\n                    }\r\n                    break;\r\n                case 'numberFraction': // [\\.eE]?\r\n                    patterns.numberFraction.lastIndex = index;\r\n                    match = patterns.numberFraction.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length || this._done) {\r\n                            this._expect = expected[this._parent];\r\n                            break;\r\n                        }\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    this._streamNumbers && this.push({name: 'numberChunk', value: value});\r\n                    this._packNumbers && (this._accumulator += value);\r\n                    this._expect = value === '.' ? 'numberFracStart' : 'numberExpSign';\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n                case 'numberFracStart': // [0-9]\r\n                    patterns.numberFracStart.lastIndex = index;\r\n                    match = patterns.numberFracStart.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length || this._done) return callback(new Error('Parser cannot parse input: expected a fractional part of a number'));\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    this._streamNumbers && this.push({name: 'numberChunk', value: value});\r\n                    this._packNumbers && (this._accumulator += value);\r\n                    this._expect = 'numberFracDigit';\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n                case 'numberFracDigit': // [0-9]*\r\n                    patterns.numberFracDigit.lastIndex = index;\r\n                    match = patterns.numberFracDigit.exec(this._buffer);\r\n                    value = match[0];\r\n                    if (value) {\r\n                        this._streamNumbers && this.push({name: 'numberChunk', value: value});\r\n                        this._packNumbers && (this._accumulator += value);\r\n                        if (noSticky) {\r\n                            this._buffer = this._buffer.slice(value.length);\r\n                        } else {\r\n                            index += value.length;\r\n                        }\r\n                    } else {\r\n                        if (index < this._buffer.length) {\r\n                            this._expect = 'numberExponent';\r\n                            break;\r\n                        }\r\n                        if (this._done) {\r\n                            this._expect = expected[this._parent];\r\n                            break;\r\n                        }\r\n                        break main; // wait for more input\r\n                    }\r\n                    break;\r\n                case 'numberExponent': // [eE]?\r\n                    patterns.numberExponent.lastIndex = index;\r\n                    match = patterns.numberExponent.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length) {\r\n                            this._expect = expected[this._parent];\r\n                            break;\r\n                        }\r\n                        if (this._done) {\r\n                            this._expect = 'done';\r\n                            break;\r\n                        }\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    this._streamNumbers && this.push({name: 'numberChunk', value: value});\r\n                    this._packNumbers && (this._accumulator += value);\r\n                    this._expect = 'numberExpSign';\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n                case 'numberExpSign': // [-+]?\r\n                    patterns.numberExpSign.lastIndex = index;\r\n                    match = patterns.numberExpSign.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length) {\r\n                            this._expect = 'numberExpStart';\r\n                            break;\r\n                        }\r\n                        if (this._done) return callback(new Error('Parser has expected an exponent value of a number'));\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    this._streamNumbers && this.push({name: 'numberChunk', value: value});\r\n                    this._packNumbers && (this._accumulator += value);\r\n                    this._expect = 'numberExpStart';\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n                case 'numberExpStart': // [0-9]\r\n                    patterns.numberExpStart.lastIndex = index;\r\n                    match = patterns.numberExpStart.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length || this._done) return callback(new Error('Parser cannot parse input: expected an exponent part of a number'));\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    this._streamNumbers && this.push({name: 'numberChunk', value: value});\r\n                    this._packNumbers && (this._accumulator += value);\r\n                    this._expect = 'numberExpDigit';\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n                case 'numberExpDigit': // [0-9]*\r\n                    patterns.numberExpDigit.lastIndex = index;\r\n                    match = patterns.numberExpDigit.exec(this._buffer);\r\n                    value = match[0];\r\n                    if (value) {\r\n                        this._streamNumbers && this.push({name: 'numberChunk', value: value});\r\n                        this._packNumbers && (this._accumulator += value);\r\n                        if (noSticky) {\r\n                            this._buffer = this._buffer.slice(value.length);\r\n                        } else {\r\n                            index += value.length;\r\n                        }\r\n                    } else {\r\n                        if (index < this._buffer.length || this._done) {\r\n                            this._expect = expected[this._parent];\r\n                            break;\r\n                        }\r\n                        break main; // wait for more input\r\n                    }\r\n                    break;\r\n                case 'done':\r\n                    patterns.ws.lastIndex = index;\r\n                    match = patterns.ws.exec(this._buffer);\r\n                    if (!match) {\r\n                        if (index < this._buffer.length) {\r\n                            if (this._jsonStreaming) {\r\n                                this._expect = 'value';\r\n                                break;\r\n                            }\r\n                            return callback(new Error('Parser cannot parse input: unexpected characters'));\r\n                        }\r\n                        break main; // wait for more input\r\n                    }\r\n                    value = match[0];\r\n                    if (this._open_number) {\r\n                        this._streamNumbers && this.push({name: 'endNumber'});\r\n                        this._open_number = false;\r\n                        if (this._packNumbers) {\r\n                            this.push({name: 'numberValue', value: this._accumulator});\r\n                            this._accumulator = '';\r\n                        }\r\n                    }\r\n                    if (noSticky) {\r\n                        this._buffer = this._buffer.slice(value.length);\r\n                    } else {\r\n                        index += value.length;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        !noSticky && (this._buffer = this._buffer.slice(index));\r\n        callback(null);\r\n    }\r\n}\r\n\r\n"]}