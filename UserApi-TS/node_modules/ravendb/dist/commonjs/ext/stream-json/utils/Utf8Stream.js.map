{"version":3,"file":"Utf8Stream.js","sourceRoot":"","sources":["../../../../../src/ext/stream-json/utils/Utf8Stream.ts"],"names":[],"mappings":";;;AAAA,6CAAwC;AACxC,6DAAoD;AAEpD,MAAa,UAAW,SAAQ,uBAAS;IACrC,OAAO,CAAM;IACb,cAAc,CAAM;IAEpB,YAAY,OAAO;QACf,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE,EAAC,kBAAkB,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ;QAChC,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE,CAAC;YAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC5C,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,cAAc,GAAG,IAAI,mCAAa,EAAE,CAAC;YAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC5C,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAED,gBAAgB,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ;QAC/B,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,gBAAgB,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ;QAC/B,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;QACjC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,cAAc,CAAC,QAAQ;QACnB,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAChC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QACtB,CAAC;QACD,QAAQ,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC;IAED,WAAW;QACP,mCAAmC;QACnC,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;QAC9C,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ;QACX,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;CACJ;AAhDD,gCAgDC","sourcesContent":["import { Transform } from \"node:stream\";\r\nimport { StringDecoder } from \"node:string_decoder\";\r\n\r\nexport class Utf8Stream extends Transform {\r\n    _buffer: any;\r\n    _stringDecoder: any;\r\n\r\n    constructor(options) {\r\n        super(Object.assign({}, options, {writableObjectMode: false}));\r\n        this._buffer = '';\r\n    }\r\n\r\n    _transform(chunk, encoding, callback) {\r\n        if (typeof chunk == 'string') {\r\n            this._transform = this._transformString;\r\n        } else {\r\n            this._stringDecoder = new StringDecoder();\r\n            this._transform = this._transformBuffer;\r\n        }\r\n        this._transform(chunk, encoding, callback);\r\n    }\r\n\r\n    _transformBuffer(chunk, _, callback) {\r\n        this._buffer += this._stringDecoder.write(chunk);\r\n        this._processBuffer(callback);\r\n    }\r\n\r\n    _transformString(chunk, _, callback) {\r\n        this._buffer += chunk.toString();\r\n        this._processBuffer(callback);\r\n    }\r\n\r\n    _processBuffer(callback) {\r\n        if (this._buffer) {\r\n            this.push(this._buffer, 'utf8');\r\n            this._buffer = '';\r\n        }\r\n        callback(null);\r\n    }\r\n\r\n    _flushInput() {\r\n        // meant to be called from _flush()\r\n        if (this._stringDecoder) {\r\n            this._buffer += this._stringDecoder.end();\r\n        }\r\n    }\r\n\r\n    _flush(callback) {\r\n        this._flushInput();\r\n        this._processBuffer(callback);\r\n    }\r\n}"]}