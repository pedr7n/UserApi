{"version":3,"file":"DatesComparator.js","sourceRoot":"","sources":["../../../src/Primitives/DatesComparator.ts"],"names":[],"mappings":";;;AA+BA,4BAKC;AAKD,8BAKC;AAED,kCASC;AAzDD,qDAAoD;AASpD,MAAa,eAAe;IACjB,MAAM,CAAC,OAAO,CAAC,GAAoB,EAAE,GAAoB;QAC5D,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACvB,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACnD,CAAC;QAED,kDAAkD;QAClD,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI;YACtB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE;YACpB,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAEnF,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI;YACvB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE;YACpB,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAEnF,OAAO,SAAS,GAAG,UAAU,CAAC;IAClC,CAAC;CACJ;AAjBD,0CAiBC;AAED;;GAEG;AACH,SAAgB,QAAQ,CAAC,IAAU;IAC/B,OAAO;QACH,IAAI;QACJ,OAAO,EAAE,MAAM;KAClB,CAAA;AACL,CAAC;AAED;;GAEG;AACH,SAAgB,SAAS,CAAC,IAAU;IAChC,OAAO;QACH,IAAI;QACJ,OAAO,EAAE,IAAI;KAChB,CAAA;AACL,CAAC;AAED,SAAgB,WAAW,CAAC,IAAU;IAClC,IAAI,CAAC,IAAI,EAAE,CAAC;QACR,IAAA,qBAAU,EAAC,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;IAClE,CAAC;IAED,OAAO;QACH,IAAI;QACJ,OAAO,EAAE,IAAI;KAChB,CAAA;AACL,CAAC","sourcesContent":["import { throwError } from \"../Exceptions/index.js\";\r\n\r\nexport type DateContext = \"From\" | \"To\";\r\n\r\nexport interface DateWithContext {\r\n    date: Date;\r\n    context: DateContext;\r\n}\r\n\r\nexport class DatesComparator {\r\n    public static compare(lhs: DateWithContext, rhs: DateWithContext): number {\r\n        if (lhs.date && rhs.date) {\r\n            return lhs.date.getTime() - rhs.date.getTime();\r\n        }\r\n\r\n        // lhr or rhs is null - unify values using context\r\n        const leftValue = lhs.date\r\n            ? lhs.date.getTime()\r\n            : (lhs.context === \"From\" ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);\r\n\r\n        const rightValue = rhs.date\r\n            ? rhs.date.getTime()\r\n            : (rhs.context === \"From\" ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);\r\n\r\n        return leftValue - rightValue;\r\n    }\r\n}\r\n\r\n/**\r\n * Date or MinDate if null\r\n */\r\nexport function leftDate(date: Date): DateWithContext {\r\n    return {\r\n        date,\r\n        context: \"From\"\r\n    }\r\n}\r\n\r\n/**\r\n * Date or MaxDate if null\r\n */\r\nexport function rightDate(date: Date): DateWithContext {\r\n    return {\r\n        date,\r\n        context: \"To\"\r\n    }\r\n}\r\n\r\nexport function definedDate(date: Date): DateWithContext {\r\n    if (!date) {\r\n        throwError(\"InvalidArgumentException\", \"Date cannot be null\");\r\n    }\r\n\r\n    return {\r\n        date,\r\n        context: \"To\"\r\n    }\r\n}\r\n"]}