{"version":3,"file":"CaseInsensitiveStringSet.js","sourceRoot":"","sources":["../../../src/Primitives/CaseInsensitiveStringSet.ts"],"names":[],"mappings":";;;AAAA,+EAAyE;AAEzE,SAAS,WAAW,CAAC,GAAG;IACpB,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC;QAC5B,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC7C,CAAC;AACL,CAAC;AAED,MAAa,wBAAwB;IAC1B,MAAM,CAAC,MAAM;QAChB,MAAM,MAAM,GAAG,IAAI,GAAG,EAAU,CAAC;QACjC,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;QAC3B,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;QAC3B,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC;QAEjC,MAAM,iBAAiB,GAAG,IAAI,sDAAwB,EAAE,CAAC;QACzD,MAAM,CAAC,GAAG,GAAG,UAAU,GAAG,IAAI;YAC1B,MAAM,CAAE,GAAG,EAAE,GAAG,IAAI,CAAE,GAAG,IAAI,CAAC;YAC9B,WAAW,CAAC,GAAG,CAAC,CAAC;YACjB,MAAM,QAAQ,GAAG,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC/C,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC;QAEF,MAAM,CAAC,GAAG,GAAG,UAAU,GAAG,IAAI;YAC1B,MAAM,CAAE,GAAG,EAAE,GAAG,IAAI,CAAE,GAAG,IAAI,CAAC;YAC9B,MAAM,QAAQ,GAAG,iBAAiB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YACrD,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC;QAEF,MAAM,CAAC,MAAM,GAAG,UAAU,GAAG,IAAI;YAC7B,MAAM,CAAE,GAAG,EAAE,GAAG,IAAI,CAAE,GAAG,IAAI,CAAC;YAC9B,MAAM,QAAQ,GAAG,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAClD,OAAO,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;QACtD,CAAC,CAAC;QAEF,MAAM,CAAC,OAAO,GAAG,GAAG,EAAE,CAClB,CAAC,GAAG,iBAAiB,CAAC,OAAO,EAAE,CAAC;aAC/B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAqB,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QAE7D,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,GAAG,EAAE,CAC3B,CAAC,GAAG,iBAAiB,CAAC,OAAO,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QAExD,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AApCD,4DAoCC","sourcesContent":["import { CaseInsensitiveKeysStore } from \"./CaseInsensitiveKeysStore.js\";\r\n\r\nfunction validateKey(key) {\r\n    if (!(key && key.toLowerCase)) {\r\n        throw new Error(\"Key must be a string.\");\r\n    }\r\n}\r\n\r\nexport class CaseInsensitiveStringSet {\r\n    public static create(): Set<string> {\r\n        const result = new Set<string>();\r\n        const origAdd = result.add;\r\n        const origHas = result.has;\r\n        const origDelete = result.delete;\r\n\r\n        const originalKeysStore = new CaseInsensitiveKeysStore();\r\n        result.add = function (...args) {\r\n            const [ key, ...rest ] = args;\r\n            validateKey(key);\r\n            const lowerKey = originalKeysStore.setKey(key);\r\n            return origAdd.call(result, lowerKey, ...rest);\r\n        };\r\n\r\n        result.has = function (...args) {\r\n            const [ key, ...rest ] = args;\r\n            const lowerKey = originalKeysStore.normalizeKey(key);\r\n            return origHas.call(result, lowerKey, ...rest);\r\n        };\r\n\r\n        result.delete = function (...args) {\r\n            const [ key, ...rest ] = args;\r\n            const lowerKey = originalKeysStore.deleteKey(key);\r\n            return origDelete.call(result, lowerKey, ...rest);\r\n        };\r\n\r\n        result.entries = () => \r\n            [...originalKeysStore.getKeys()]\r\n            .map(x => [x, x] as [string, string])[Symbol.iterator](); \r\n\r\n        result[Symbol.iterator] = () => \r\n            [...originalKeysStore.getKeys()][Symbol.iterator](); \r\n\r\n        return result;\r\n    }\r\n}\r\n"]}