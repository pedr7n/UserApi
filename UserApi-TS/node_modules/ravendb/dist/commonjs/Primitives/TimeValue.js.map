{"version":3,"file":"TimeValue.js","sourceRoot":"","sources":["../../../src/Primitives/TimeValue.ts"],"names":[],"mappings":"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","sourcesContent":["import { TimeValueUnit } from \"./TimeValueUnit.js\";\r\nimport { throwError } from \"../Exceptions/index.js\";\r\nimport { TypeUtil } from \"../Utility/TypeUtil.js\";\r\nimport { TimeValueRaw } from \"../Documents/Operations/TimeSeries/RawTimeSeriesTypes.js\";\r\nimport { StringBuilder } from \"../Utility/StringBuilder.js\";\r\n\r\nexport class TimeValue {\r\n\r\n    private static readonly SECONDS_PER_DAY = 86_400;\r\n    private static readonly SECONDS_IN_28_DAYS = 28 * TimeValue.SECONDS_PER_DAY; // lower-bound of seconds in month\r\n    private static readonly SECONDS_IN_31_DAYS = 31 * TimeValue.SECONDS_PER_DAY; // upper-bound of seconds in month\r\n    private static readonly SECONDS_IN_365_DAYS = 365 * TimeValue.SECONDS_PER_DAY; // lower-bound of seconds in a year\r\n    private static readonly SECONDS_IN_366_DAYS = 366 * TimeValue.SECONDS_PER_DAY; // upper-bound of seconds in a year\r\n\r\n    public static readonly ZERO = new TimeValue(0, \"None\");\r\n    public static readonly MAX_VALUE = new TimeValue(TypeUtil.MAX_INT32, \"None\");\r\n    public static readonly MIN_VALUE = new TimeValue(TypeUtil.MIN_INT32, \"None\");\r\n\r\n    private _value: number;\r\n    private _unit: TimeValueUnit;\r\n\r\n    public get value() {\r\n        return this._value;\r\n    }\r\n\r\n    public get unit() {\r\n        return this._unit;\r\n    }\r\n\r\n    public constructor(value: number, unit: TimeValueUnit) {\r\n        this._value = value;\r\n        this._unit = unit;\r\n    }\r\n\r\n    public static ofSeconds(seconds: number) {\r\n        return new TimeValue(seconds, \"Second\");\r\n    }\r\n\r\n    public static ofMinutes(minutes: number) {\r\n        return new TimeValue(minutes * 60, \"Second\");\r\n    }\r\n\r\n    public static ofHours(hours: number) {\r\n        return new TimeValue(hours * 3600, \"Second\");\r\n    }\r\n\r\n    public static ofDays(days: number) {\r\n        return new TimeValue(days * TimeValue.SECONDS_PER_DAY, \"Second\");\r\n    }\r\n\r\n    public static ofMonths(months: number) {\r\n        return new TimeValue(months, \"Month\");\r\n    }\r\n\r\n    public static ofYears(years: number) {\r\n        return new TimeValue(years * 12, \"Month\");\r\n    }\r\n\r\n    private _append(builder: StringBuilder, value: number, singular: string) {\r\n        if (value <= 0) {\r\n            return;\r\n        }\r\n\r\n        builder\r\n            .append(value.toString())\r\n            .append(\" \")\r\n            .append(singular);\r\n\r\n        if (value === 1) {\r\n            builder\r\n                .append(\" \");\r\n            return;\r\n        }\r\n\r\n        builder\r\n            .append(\"s \"); // lucky me, no special rules here\r\n    }\r\n\r\n    public toString() {\r\n        if (this._value === TypeUtil.MAX_INT32) {\r\n            return \"MaxValue\";\r\n        }\r\n\r\n        if (this._value === TypeUtil.MIN_INT32) {\r\n            return \"MinValue\";\r\n        }\r\n\r\n        if (this._value === 0) {\r\n            return \"Zero\";\r\n        }\r\n\r\n        if (this._unit === \"None\") {\r\n            return \"Unknown time unit\";\r\n        }\r\n\r\n        const str = new StringBuilder();\r\n\r\n        switch (this._unit) {\r\n            case \"Second\": {\r\n                let remainingSeconds = this._value;\r\n\r\n                if (remainingSeconds > TimeValue.SECONDS_PER_DAY) {\r\n                    const days = Math.floor(this._value / TimeValue.SECONDS_PER_DAY);\r\n                    this._append(str, days, \"day\");\r\n                    remainingSeconds -= days * TimeValue.SECONDS_PER_DAY;\r\n                }\r\n\r\n                if (remainingSeconds > 3_600) {\r\n                    const hours = Math.floor(remainingSeconds / 3_600);\r\n                    this._append(str, hours, \"hour\");\r\n                    remainingSeconds -= hours * 3_600;\r\n                }\r\n\r\n                if (remainingSeconds > 60) {\r\n                    const minutes = remainingSeconds / 60;\r\n                    this._append(str, minutes, \"minute\");\r\n                    remainingSeconds -= minutes * 60;\r\n                }\r\n\r\n                if (remainingSeconds > 0) {\r\n                    this._append(str, remainingSeconds, \"second\");\r\n                }\r\n                break;\r\n            }\r\n            case \"Month\": {\r\n                if (this._value >= 12) {\r\n                    this._append(str, Math.floor(this._value / 12), \"year\");\r\n                }\r\n                if (this._value % 12 > 0) {\r\n                    this._append(str, this._value % 12, \"month\");\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                throwError(\"InvalidArgumentException\", \"Not supported unit: \" + this._unit);\r\n            }\r\n        }\r\n\r\n        return str.toString().trim();\r\n    }\r\n\r\n    private _assertSeconds() {\r\n        if (this._unit !== \"Second\") {\r\n            throwError(\"InvalidArgumentException\", \"The value must be seconds\");\r\n        }\r\n    }\r\n\r\n    private static _assertValidUnit(unit: TimeValueUnit) {\r\n        if (unit === \"Month\" || unit === \"Second\") {\r\n            return;\r\n        }\r\n\r\n        throwError(\"InvalidArgumentException\", \"Invalid time unit: \" + unit);\r\n    }\r\n\r\n    private static _assertSameUnits(a: TimeValue, b: TimeValue) {\r\n        if (a.unit !== b.unit) {\r\n            throwError(\"InvalidArgumentException\", \"Unit isn't the same \" + a.unit + \" != \" + b.unit);\r\n        }\r\n    }\r\n\r\n    public compareTo(other: TimeValue): number {\r\n        if (!this._value || !other._value) {\r\n            return this._value - other._value;\r\n        }\r\n\r\n        let result: number;\r\n        if (TimeValue._isSpecialCompare(this, other, x => result = x)) {\r\n            return result;\r\n        }\r\n\r\n        if (this._unit === other._unit) {\r\n            return TimeValue._trimCompareResult(this._value - other._value);\r\n        }\r\n\r\n        const myBounds = TimeValue._getBoundsInSeconds(this);\r\n        const otherBounds = TimeValue._getBoundsInSeconds(this);\r\n\r\n        if (otherBounds[1] < myBounds[0]) {\r\n            return 1;\r\n        }\r\n\r\n        if (otherBounds[0] > myBounds[1]) {\r\n            return -1;\r\n        }\r\n\r\n        throwError(\"InvalidOperationException\", \"Unable to compare \" + this + \" with \" + other + \", since a month might have different number of days.\");\r\n    }\r\n\r\n    private static _getBoundsInSeconds(time: TimeValue): [number, number] {\r\n        switch (time._unit) {\r\n            case \"Second\": {\r\n                return [time._value, time._value];\r\n            }\r\n            case \"Month\": {\r\n                const years = Math.floor(time._value / 12);\r\n                let upperBound = years * TimeValue.SECONDS_IN_366_DAYS;\r\n                let lowerBound = years * TimeValue.SECONDS_IN_365_DAYS;\r\n\r\n                const remainingMonths = time._value % 12;\r\n\r\n                upperBound += remainingMonths * TimeValue.SECONDS_IN_31_DAYS;\r\n                lowerBound += remainingMonths * TimeValue.SECONDS_IN_28_DAYS;\r\n\r\n                return [lowerBound, upperBound];\r\n            }\r\n            default: {\r\n                throwError(\"InvalidArgumentException\", \"Not supported time value unit: \" + time._unit);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _isSpecialCompare(current: TimeValue, other: TimeValue, resultSetter: (x: number) => void): boolean {\r\n        resultSetter(0);\r\n\r\n        if (TimeValue._isMax(current)) {\r\n            resultSetter(TimeValue._isMax(other) ? 0 : 1);\r\n            return true;\r\n        }\r\n\r\n        if (TimeValue._isMax(other)) {\r\n            resultSetter(TimeValue._isMax(current) ? 0 : -1);\r\n            return true;\r\n        }\r\n\r\n        if (TimeValue._isMin(current)) {\r\n            resultSetter(TimeValue._isMax(other) ? 0 : -1);\r\n            return true;\r\n        }\r\n\r\n        if (TimeValue._isMin(other)) {\r\n            resultSetter(TimeValue._isMax(current) ? 0 : 1);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private static _isMax(time: TimeValue): boolean {\r\n        return time._unit === \"None\" && time._value >= TypeUtil.MAX_INT32;\r\n    }\r\n\r\n    private static _isMin(time: TimeValue): boolean {\r\n        return time._unit === \"None\" && time._value <= TypeUtil.MIN_INT32;\r\n    }\r\n\r\n    private static _trimCompareResult(result: number) {\r\n        if (result > TypeUtil.MAX_INT32) {\r\n            return TypeUtil.MAX_INT32;\r\n        }\r\n\r\n        if (result < TypeUtil.MIN_INT32) {\r\n            return TypeUtil.MIN_INT32;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public serialize(): TimeValueRaw {\r\n        return {\r\n            Value: this.value,\r\n            Unit: this.unit\r\n        }\r\n    }\r\n\r\n    public static parse(raw: TimeValueRaw) {\r\n        return new TimeValue(raw.Value, raw.Unit);\r\n    }\r\n}\r\n"]}