{"version":3,"file":"RequestExecutor.js","sourceRoot":"","sources":["../../../src/Http/RequestExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Readable } from \"node:stream\";\r\nimport { acquireSemaphore, SemaphoreAcquisitionContext } from \"../Utility/SemaphoreUtil.js\";\r\nimport { getLogger, ILogger } from \"../Utility/LogUtil.js\";\r\nimport { Timer } from \"../Primitives/Timer.js\";\r\nimport { ServerNode } from \"./ServerNode.js\";\r\nimport { RavenCommand, ResponseDisposeHandling } from \"./RavenCommand.js\";\r\nimport { Topology } from \"./Topology.js\";\r\nimport { GetDatabaseTopologyCommand } from \"../ServerWide/Commands/GetDatabaseTopologyCommand.js\";\r\nimport { StatusCodes } from \"./StatusCode.js\";\r\nimport { NodeSelector } from \"./NodeSelector.js\";\r\nimport { IDisposable } from \"../Types/Contracts.js\";\r\nimport { IRequestAuthOptions, IAuthOptions } from \"../Auth/AuthOptions.js\";\r\nimport { Certificate, ICertificate } from \"../Auth/Certificate.js\";\r\nimport { HttpCache, CachedItemMetadata, ReleaseCacheItem } from \"./HttpCache.js\";\r\nimport { AggressiveCacheOptions } from \"./AggressiveCacheOptions.js\";\r\nimport { throwError, RavenErrorType, ExceptionDispatcher, ExceptionSchema, getError } from \"../Exceptions/index.js\";\r\nimport {\r\n    GetClientConfigurationCommand,\r\n} from \"../Documents/Operations/Configuration/GetClientConfigurationOperation.js\";\r\nimport CurrentIndexAndNode from \"./CurrentIndexAndNode.js\";\r\nimport { HEADERS, QUERY_STRING } from \"../Constants.js\";\r\nimport { HttpRequestParameters, HttpResponse, HttpRequestParametersWithoutUri } from \"../Primitives/Http.js\";\r\nimport { raceToResolution } from \"../Utility/PromiseUtil.js\";\r\nimport { GetStatisticsOperation } from \"../Documents/Operations/GetStatisticsOperation.js\";\r\nimport { DocumentConventions } from \"../Documents/Conventions/DocumentConventions.js\";\r\nimport { TypeUtil } from \"../Utility/TypeUtil.js\";\r\nimport { SessionInfo } from \"../Documents/Session/IDocumentSession.js\";\r\nimport { JsonSerializer } from \"../Mapping/Json/Serializer.js\";\r\nimport { validateUri } from \"../Utility/UriUtil.js\";\r\nimport { readToEnd } from \"../Utility/StreamUtil.js\";\r\nimport { closeHttpResponse, getEtagHeader } from \"../Utility/HttpUtil.js\";\r\nimport { PromiseStatusTracker } from \"../Utility/PromiseUtil.js\";\r\nimport { IBroadcast } from \"./IBroadcast.js\";\r\nimport { StringUtil } from \"../Utility/StringUtil.js\";\r\nimport { IRaftCommand } from \"./IRaftCommand.js\";\r\nimport { EventEmitter } from \"node:events\";\r\nimport {\r\n    BeforeRequestEventArgs,\r\n    FailedRequestEventArgs,\r\n    SucceedRequestEventArgs,\r\n    TopologyUpdatedEventArgs\r\n} from \"../Documents/Session/SessionEvents.js\";\r\nimport { TimeUtil } from \"../Utility/TimeUtil.js\";\r\nimport { UpdateTopologyParameters } from \"./UpdateTopologyParameters.js\";\r\nimport { randomUUID } from \"node:crypto\";\r\nimport { DatabaseHealthCheckOperation } from \"../Documents/Operations/DatabaseHealthCheckOperation.js\";\r\nimport { GetNodeInfoCommand } from \"../ServerWide/Commands/GetNodeInfoCommand.js\";\r\nimport { Semaphore } from \"../Utility/Semaphore.js\";\r\nimport { Dispatcher, Agent } from \"undici-types\";\r\nimport { EOL } from \"../Utility/OsUtil.js\";\r\nimport { importFix } from \"../Utility/ImportUtil.js\";\r\n\r\nconst DEFAULT_REQUEST_OPTIONS = {};\r\n\r\nconst log = getLogger({ module: \"RequestExecutor\" });\r\n\r\nexport interface ExecuteOptions<TResult> {\r\n    chosenNode: ServerNode;\r\n    nodeIndex: number;\r\n    shouldRetry: boolean;\r\n    abortRef?: (controller: AbortController) => void;\r\n}\r\n\r\nexport interface ITopologyUpdateEvent {\r\n    topologyJson: object;\r\n    serverNodeUrl: string;\r\n    requestedDatabase?: string;\r\n    forceUpdate?: boolean;\r\n    wasUpdated?: boolean;\r\n}\r\n\r\nexport interface IRequestExecutorOptions {\r\n    authOptions?: IRequestAuthOptions;\r\n    documentConventions?: DocumentConventions;\r\n}\r\n\r\nclass IndexAndResponse {\r\n    public readonly index: number;\r\n    public readonly response: HttpResponse;\r\n    public readonly bodyStream: Readable\r\n\r\n    public constructor(index: number, response: HttpResponse, bodyStream: Readable) {\r\n        this.index = index;\r\n        this.response = response;\r\n        this.bodyStream = bodyStream;\r\n    }\r\n}\r\n\r\nexport class NodeStatus implements IDisposable {\r\n\r\n    private _nodeStatusCallback: (nodeStatus: NodeStatus) => Promise<void>;\r\n    private _timerPeriodInMs: number;\r\n    public readonly node: ServerNode;\r\n    public readonly requestExecutor: RequestExecutor;\r\n    private _timer: Timer;\r\n\r\n    public constructor(\r\n        node: ServerNode,\r\n        requestExecutor: RequestExecutor,\r\n        nodeStatusCallback: (nodeStatus: NodeStatus) => Promise<void>) {\r\n        this.node = node;\r\n        this.requestExecutor = requestExecutor;\r\n        this._timerPeriodInMs = 100;\r\n        this._nodeStatusCallback = nodeStatusCallback;\r\n    }\r\n\r\n    private _nextTimerPeriod(): number {\r\n        if (this._timerPeriodInMs <= 5000) {\r\n            return 5000;\r\n        }\r\n\r\n        this._timerPeriodInMs = this._timerPeriodInMs + 100;\r\n\r\n        return this._timerPeriodInMs;\r\n    }\r\n\r\n    public startTimer(): void {\r\n        this._timer = new Timer(() => {\r\n            if (this.requestExecutor.disposed) {\r\n                this.dispose();\r\n                return;\r\n            }\r\n\r\n            return this._nodeStatusCallback(this);\r\n        }, this._timerPeriodInMs);\r\n    }\r\n\r\n    public updateTimer(): void {\r\n        this._timer.change(this._nextTimerPeriod());\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._timer.dispose();\r\n    }\r\n}\r\n\r\nexport class RequestExecutor implements IDisposable {\r\n    private _emitter = new EventEmitter();\r\n\r\n    /*\r\n      we don't initialize this here due to issue with cloudflare\r\n      see: https://github.com/cloudflare/miniflare/issues/292\r\n     */\r\n    private static GLOBAL_APPLICATION_IDENTIFIER: string = null;\r\n\r\n    private static readonly INITIAL_TOPOLOGY_ETAG = -2;\r\n\r\n    private _log: ILogger;\r\n\r\n    public static readonly CLIENT_VERSION = \"7.1.0\";\r\n\r\n    private _updateDatabaseTopologySemaphore = new Semaphore();\r\n    private _updateClientConfigurationSemaphore = new Semaphore();\r\n\r\n    private static _backwardCompatibilityFailureCheckOperation = new GetStatisticsOperation(\"failure=check\");\r\n    private static readonly _failureCheckOperation = new DatabaseHealthCheckOperation();\r\n    private static readonly _useOldFailureCheckOperation = new Set<string>();\r\n\r\n    private _failedNodesTimers: Map<ServerNode, NodeStatus> = new Map();\r\n    protected _databaseName: string;\r\n    protected _certificate: ICertificate = null;\r\n\r\n    private _lastReturnedResponse: Date;\r\n\r\n    private readonly _cache: HttpCache;\r\n\r\n    private _topologyTakenFromNode: ServerNode;\r\n\r\n    public aggressiveCaching: AggressiveCacheOptions = null;\r\n\r\n    private _updateTopologyTimer: Timer;\r\n\r\n    protected _nodeSelector: NodeSelector;\r\n\r\n    private _defaultTimeout: number | null;\r\n\r\n    public numberOfServerRequests: number = 0;\r\n\r\n    protected _disposed: boolean;\r\n\r\n    protected _firstTopologyUpdatePromiseInternal;\r\n\r\n    private _httpAgent: Dispatcher;\r\n\r\n    /*\r\n      we don't initialize this here due to issue with cloudflare\r\n      see: https://github.com/cloudflare/miniflare/issues/292\r\n    */\r\n    private static KEEP_ALIVE_HTTP_AGENT: Dispatcher = null;\r\n\r\n    private static readonly HTTPS_AGENT_CACHE = new Map<string, Dispatcher>();\r\n\r\n    protected get firstTopologyUpdatePromise(): Promise<void> {\r\n        return this._firstTopologyUpdatePromiseInternal;\r\n    }\r\n\r\n    protected set firstTopologyUpdatePromise(value: Promise<void>) {\r\n        this._firstTopologyUpdatePromiseInternal = value;\r\n\r\n        if (value) {\r\n            this._firstTopologyUpdateStatus = PromiseStatusTracker.track(value);\r\n        }\r\n    }\r\n\r\n    protected _firstTopologyUpdateStatus: PromiseStatusTracker<void>;\r\n\r\n    protected _lastKnownUrls: string[];\r\n\r\n    protected _clientConfigurationEtag: string = \"0\";\r\n\r\n    protected _topologyEtag: number = 0;\r\n\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    private readonly _authOptions: IAuthOptions;\r\n\r\n    protected _disableTopologyUpdates: boolean;\r\n\r\n    protected _disableClientConfigurationUpdates: boolean;\r\n\r\n    protected _topologyHeaderName: string = HEADERS.TOPOLOGY_ETAG;\r\n\r\n    protected _lastServerVersion: string;\r\n\r\n    protected _customHttpRequestOptions: HttpRequestParametersWithoutUri;\r\n\r\n    protected _defaultRequestOptions: HttpRequestParametersWithoutUri;\r\n\r\n    public static requestPostProcessor: (req: HttpRequestParameters) => void = null;\r\n\r\n    public get customHttpRequestOptions(): HttpRequestParametersWithoutUri {\r\n        return this._customHttpRequestOptions;\r\n    }\r\n\r\n    public set customHttpRequestOptions(value: HttpRequestParametersWithoutUri) {\r\n        this._customHttpRequestOptions = value;\r\n        this._setDefaultRequestOptions();\r\n    }\r\n\r\n    public getAuthOptions(): IAuthOptions {\r\n        return this._authOptions;\r\n    }\r\n\r\n    public getTopologyEtag() {\r\n        return this._topologyEtag;\r\n    }\r\n\r\n    public get lastServerVersion() {\r\n        return this._lastServerVersion;\r\n    }\r\n\r\n    public get defaultTimeout() {\r\n        return this._defaultTimeout;\r\n    }\r\n\r\n    public set defaultTimeout(timeout: number) {\r\n        this._defaultTimeout = timeout;\r\n    }\r\n\r\n    private _secondBroadcastAttemptTimeout: number;\r\n\r\n    public get secondBroadcastAttemptTimeout() {\r\n        return this._secondBroadcastAttemptTimeout;\r\n    }\r\n\r\n    public set secondBroadcastAttemptTimeout(timeout: number) {\r\n        this._secondBroadcastAttemptTimeout = timeout;\r\n    }\r\n\r\n    private _firstBroadcastAttemptTimeout: number;\r\n\r\n    public get firstBroadcastAttemptTimeout() {\r\n        return this._firstBroadcastAttemptTimeout;\r\n    }\r\n\r\n    public set firstBroadcastAttemptTimeout(timeout: number) {\r\n        this._firstBroadcastAttemptTimeout = timeout;\r\n    }\r\n\r\n    public on(event: \"topologyUpdated\", handler: (value: TopologyUpdatedEventArgs) => void): this;\r\n    public on(event: \"failedRequest\", handler: (value: FailedRequestEventArgs) => void): this;\r\n    public on(event: \"beforeRequest\", handler: (value: BeforeRequestEventArgs) => void): this;\r\n    public on(event: \"succeedRequest\", handler: (value: SucceedRequestEventArgs) => void): this;\r\n    public on(event: string, handler: (value: any) => void): this {\r\n        this._emitter.on(event, handler);\r\n        return this;\r\n    }\r\n\r\n    public off(event: \"topologyUpdated\", handler: (value: TopologyUpdatedEventArgs) => void): this;\r\n    public off(event: \"failedRequest\", handler: (value: FailedRequestEventArgs) => void): this;\r\n    public off(event: \"beforeRequest\", handler: (value: BeforeRequestEventArgs) => void): this;\r\n    public off(event: \"succeedRequest\", handler: (value: SucceedRequestEventArgs) => void): this;\r\n    public off(event: string, handler: (value: any) => void): this {\r\n        this._emitter.off(event, handler);\r\n        return this;\r\n    }\r\n\r\n    private _onFailedRequestInvoke(url: string, e: Error, req?: HttpRequestParameters, response?: HttpResponse) {\r\n        const args = new FailedRequestEventArgs(this._databaseName, url, e, req, response);\r\n        this._emitter.emit(\"failedRequest\", args);\r\n    }\r\n\r\n    public get conventions() {\r\n        return this._conventions;\r\n    }\r\n\r\n    public getClientConfigurationEtag() {\r\n        return this._clientConfigurationEtag;\r\n    }\r\n\r\n    public get cache() {\r\n        return this._cache;\r\n    }\r\n\r\n    public get disposed() {\r\n        return this._disposed;\r\n    }\r\n\r\n    public getUrl(): string {\r\n        if (!this._nodeSelector) {\r\n            return null;\r\n        }\r\n\r\n        const preferredNode = this._nodeSelector.getPreferredNode();\r\n\r\n        return preferredNode\r\n            ? preferredNode.currentNode.url\r\n            : null;\r\n    }\r\n\r\n    public getTopology(): Topology {\r\n        return this._nodeSelector\r\n            ? this._nodeSelector.getTopology()\r\n            : null;\r\n    }\r\n\r\n    public async getHttpAgent(): Promise<Dispatcher> {\r\n        if (this.conventions.customFetch) {\r\n            return null;\r\n        }\r\n\r\n        if (this._httpAgent) {\r\n            return this._httpAgent;\r\n        }\r\n\r\n        return this._httpAgent = await this._createHttpAgent();\r\n    }\r\n\r\n    private async _createHttpAgent(): Promise<Dispatcher> {\r\n        if (this._certificate) {\r\n            const agentOptions = this._certificate.toAgentOptions();\r\n            const cacheKey = JSON.stringify(agentOptions, null, 0);\r\n            if (RequestExecutor.HTTPS_AGENT_CACHE.has(cacheKey)) {\r\n                return RequestExecutor.HTTPS_AGENT_CACHE.get(cacheKey);\r\n            } else {\r\n                const agent = await RequestExecutor.createAgent(agentOptions);\r\n\r\n                RequestExecutor.HTTPS_AGENT_CACHE.set(cacheKey, agent);\r\n                return agent;\r\n            }\r\n        } else {\r\n            return RequestExecutor.KEEP_ALIVE_HTTP_AGENT ??= await RequestExecutor.createAgent({\r\n                pipelining: 0\r\n            });\r\n        }\r\n    }\r\n\r\n    private compressionHeaders(params: HttpRequestParameters) {\r\n        if (this._conventions.useHttpDecompression) {\r\n            // do nothing - node.js sends 'accept-encoding: gzip, deflate' by default\r\n        } else {\r\n            // disable response compression\r\n            let { headers} = params;\r\n            if (!headers) {\r\n                params.headers = headers = {};\r\n            }\r\n            headers[\"Accept-Encoding\"] = \"identity\";\r\n        }\r\n    }\r\n\r\n    private static async createAgent(options: Agent.Options) {\r\n        try {\r\n            let UndiciAgent;\r\n\r\n            try {\r\n                const undiciModule = await import(importFix(\"undici\"));\r\n                UndiciAgent = undiciModule.Agent;\r\n            } catch (err) {\r\n                const undiciModule = await import(\"undici\");\r\n                UndiciAgent = undiciModule.Agent;\r\n            }\r\n\r\n            if (!UndiciAgent) {\r\n                throw new Error(\"Agent not found in undici module\");\r\n            }\r\n\r\n            return new UndiciAgent(options);\r\n        } catch (err) {\r\n            // If we can't import undici - we might be in cloudflare env - simply return no-agent.\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public getTopologyNodes(): ServerNode[] {\r\n        const topology = this.getTopology();\r\n        return topology\r\n            ? [...topology.nodes]\r\n            : null;\r\n    }\r\n\r\n    protected constructor(\r\n        database: string,\r\n        authOptions: IRequestAuthOptions,\r\n        conventions: DocumentConventions) {\r\n\r\n        this._log = getLogger({\r\n            module: `${this.constructor.name}-${ Math.floor(Math.random() * 10000) }`\r\n        });\r\n\r\n        this._cache = new HttpCache(conventions.maxHttpCacheSize);\r\n        this._databaseName = database;\r\n        this._lastReturnedResponse = new Date();\r\n        this._conventions = conventions.clone();\r\n        this._authOptions = authOptions;\r\n        this._certificate = Certificate.createFromOptions(this._authOptions);\r\n        this._setDefaultRequestOptions();\r\n\r\n        this._defaultTimeout = conventions.requestTimeout;\r\n        this._secondBroadcastAttemptTimeout = conventions.secondBroadcastAttemptTimeout;\r\n        this._firstBroadcastAttemptTimeout = conventions.firstBroadcastAttemptTimeout;\r\n    }\r\n\r\n    public static create(\r\n        initialUrls: string[],\r\n        database: string): RequestExecutor;\r\n    public static create(\r\n        initialUrls: string[],\r\n        database: string,\r\n        opts?: IRequestExecutorOptions): RequestExecutor;\r\n    public static create(\r\n        initialUrls: string[],\r\n        database: string,\r\n        opts?: IRequestExecutorOptions): RequestExecutor {\r\n        const { authOptions, documentConventions } = opts || {} as IRequestExecutorOptions;\r\n        const executor = new RequestExecutor(database, authOptions, documentConventions);\r\n\r\n        executor.firstTopologyUpdatePromise = executor._firstTopologyUpdate(initialUrls, RequestExecutor.getGlobalApplicationIdentifier());\r\n\r\n        // this is just to get rid of unhandled rejection, we're handling it later on\r\n        executor.firstTopologyUpdatePromise.catch(TypeUtil.NOOP);\r\n\r\n        return executor;\r\n    }\r\n\r\n    private static getGlobalApplicationIdentifier() {\r\n        // due to cloudflare constraints we can't init GLOBAL_APPLICATION_IDENTIFIER in static\r\n\r\n        if (!this.GLOBAL_APPLICATION_IDENTIFIER) {\r\n            this.GLOBAL_APPLICATION_IDENTIFIER = randomUUID();\r\n        }\r\n\r\n        return this.GLOBAL_APPLICATION_IDENTIFIER;\r\n    }\r\n\r\n    public static createForSingleNodeWithConfigurationUpdates(\r\n        url: string, database: string, opts: IRequestExecutorOptions): RequestExecutor {\r\n        const executor =\r\n            this.createForSingleNodeWithoutConfigurationUpdates(\r\n                url, database, opts);\r\n        executor._disableClientConfigurationUpdates = false;\r\n        return executor;\r\n    }\r\n\r\n    public static createForSingleNodeWithoutConfigurationUpdates(\r\n        url: string, database: string, opts: IRequestExecutorOptions) {\r\n\r\n        const { authOptions, documentConventions } = opts;\r\n        const initialUrls: string[] = RequestExecutor.validateUrls([url], authOptions);\r\n\r\n        const executor = new RequestExecutor(database, authOptions, documentConventions);\r\n        const topology: Topology = new Topology();\r\n        topology.etag = -1;\r\n\r\n        const serverNode = new ServerNode({\r\n            url: initialUrls[0],\r\n            database,\r\n            serverRole: \"Member\"\r\n        });\r\n\r\n        topology.nodes = [serverNode];\r\n\r\n        executor._nodeSelector = new NodeSelector(topology);\r\n        executor._topologyEtag = RequestExecutor.INITIAL_TOPOLOGY_ETAG;\r\n        executor._disableTopologyUpdates = true;\r\n        executor._disableClientConfigurationUpdates = true;\r\n        executor.firstTopologyUpdatePromise = executor._singleTopologyUpdateAsync(initialUrls, this.GLOBAL_APPLICATION_IDENTIFIER);\r\n\r\n        return executor;\r\n    }\r\n\r\n    protected async _updateClientConfiguration(serverNode: ServerNode): Promise<void> {\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n\r\n        let semAcquiredContext: SemaphoreAcquisitionContext;\r\n\r\n        try {\r\n            semAcquiredContext = acquireSemaphore(this._updateClientConfigurationSemaphore);\r\n            await semAcquiredContext.promise;\r\n            await this._updateClientConfigurationInternal(serverNode);\r\n        } finally {\r\n            if (semAcquiredContext) {\r\n                semAcquiredContext.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _updateClientConfigurationInternal(serverNode: ServerNode): Promise<void> {\r\n        const oldDisableClientConfigurationUpdates = this._disableClientConfigurationUpdates;\r\n        this._disableClientConfigurationUpdates = true;\r\n\r\n        try {\r\n            if (this._disposed) {\r\n                return;\r\n            }\r\n\r\n            const command = new GetClientConfigurationCommand();\r\n            await this.execute(command, null, {\r\n                chosenNode: serverNode,\r\n                nodeIndex: null,\r\n                shouldRetry: false\r\n            });\r\n\r\n            const clientConfigOpResult = command.result;\r\n            if (!clientConfigOpResult) {\r\n                return;\r\n            }\r\n\r\n            this._conventions.updateFrom(clientConfigOpResult.configuration);\r\n            this._clientConfigurationEtag = clientConfigOpResult.etag;\r\n        } catch (err) {\r\n            this._log.error(err, \"Error getting client configuration.\");\r\n        } finally {\r\n            this._disableClientConfigurationUpdates = oldDisableClientConfigurationUpdates;\r\n        }\r\n    }\r\n\r\n    public async updateTopology(parameters: UpdateTopologyParameters): Promise<boolean> {\r\n        if (this._disableTopologyUpdates) {\r\n            return false;\r\n        }\r\n\r\n        if (this._disposed) {\r\n            return false;\r\n        }\r\n\r\n        const acquiredSemContext = acquireSemaphore(this._updateDatabaseTopologySemaphore, { timeout: parameters.timeoutInMs });\r\n\r\n        try {\r\n            await acquiredSemContext.promise;\r\n\r\n            if (this._disposed) {\r\n                return false;\r\n            }\r\n\r\n            this._log.info(`Update topology from ${parameters.node.url}.`);\r\n\r\n            const getTopology = new GetDatabaseTopologyCommand(parameters.debugTag, this.conventions.sendApplicationIdentifier ? parameters.applicationIdentifier : null);\r\n\r\n            if (this._defaultTimeout != null && this._defaultTimeout > getTopology.timeout) {\r\n                getTopology.timeout = this._defaultTimeout;\r\n            }\r\n\r\n            await this.execute(getTopology, null, {\r\n                chosenNode: parameters.node,\r\n                nodeIndex: null,\r\n                shouldRetry: false,\r\n            });\r\n\r\n            const topology = getTopology.result;\r\n            if (!this._nodeSelector) {\r\n                this._nodeSelector = new NodeSelector(topology);\r\n\r\n                if (this.conventions.readBalanceBehavior === \"FastestNode\") {\r\n                    this._nodeSelector.scheduleSpeedTest();\r\n                }\r\n\r\n            } else if (this._nodeSelector.onUpdateTopology(topology, parameters.forceUpdate)) {\r\n                this._disposeAllFailedNodesTimers();\r\n\r\n                if (this.conventions.readBalanceBehavior === \"FastestNode\" && this._nodeSelector.inSpeedTestPhase()) {\r\n                    this._nodeSelector.scheduleSpeedTest();\r\n                }\r\n            }\r\n\r\n            this._topologyEtag = this._nodeSelector.getTopology().etag;\r\n\r\n            this._onTopologyUpdatedInvoke(topology, parameters.debugTag);\r\n\r\n            return true;\r\n        } catch (reason) {\r\n            if (reason.name === \"TimeoutError\") {\r\n                return false;\r\n            }\r\n\r\n            throw reason;\r\n        } finally {\r\n            acquiredSemContext.dispose();\r\n        }\r\n    }\r\n\r\n    protected _updateNodeSelector(topology: Topology, forceUpdate: boolean) {\r\n        if (!this._nodeSelector) {\r\n            this._nodeSelector = new NodeSelector(topology);\r\n\r\n            if (this.conventions.readBalanceBehavior === \"FastestNode\") {\r\n                this._nodeSelector.scheduleSpeedTest();\r\n            }\r\n        } else if (this._nodeSelector.onUpdateTopology(topology, forceUpdate)) {\r\n            this._disposeAllFailedNodesTimers();\r\n\r\n            if (this.conventions.readBalanceBehavior === \"FastestNode\") {\r\n                this._nodeSelector.scheduleSpeedTest();\r\n            }\r\n        }\r\n\r\n        this._topologyEtag = this._nodeSelector.getTopology().etag;\r\n    }\r\n\r\n    protected _disposeAllFailedNodesTimers(): void {\r\n        for (const item of this._failedNodesTimers) {\r\n            item[1].dispose();\r\n        }\r\n\r\n        this._failedNodesTimers.clear();\r\n    }\r\n\r\n    public execute<TResult>(command: RavenCommand<TResult>): Promise<void>;\r\n    public execute<TResult>(command: RavenCommand<TResult>, sessionInfo?: SessionInfo): Promise<void>;\r\n    public execute<TResult>(\r\n        command: RavenCommand<TResult>, sessionInfo?: SessionInfo, options?: ExecuteOptions<TResult>): Promise<void>;\r\n    public execute<TResult>(\r\n        command: RavenCommand<TResult>,\r\n        sessionInfo?: SessionInfo,\r\n        options?: ExecuteOptions<TResult>): Promise<void> {\r\n\r\n        if (options) {\r\n            return this._executeOnSpecificNode(command, sessionInfo, options);\r\n        }\r\n\r\n        this._log.info(`Execute command ${command.constructor.name}`);\r\n\r\n        const topologyUpdate = this.firstTopologyUpdatePromise;\r\n        const topologyUpdateStatus = this._firstTopologyUpdateStatus;\r\n        if ((topologyUpdate && topologyUpdateStatus.isResolved())) {\r\n            const currentIndexAndNode: CurrentIndexAndNode = this.chooseNodeForRequest(command, sessionInfo);\r\n            return this._executeOnSpecificNode(command, sessionInfo, {\r\n                chosenNode: currentIndexAndNode.currentNode,\r\n                nodeIndex: currentIndexAndNode.currentIndex,\r\n                shouldRetry: true\r\n            });\r\n        } else {\r\n            return this._unlikelyExecute(command, topologyUpdate, sessionInfo);\r\n        }\r\n    }\r\n\r\n    public chooseNodeForRequest<TResult>(cmd: RavenCommand<TResult>, sessionInfo: SessionInfo): CurrentIndexAndNode {\r\n        if (!StringUtil.isNullOrWhitespace(cmd.selectedNodeTag)) {\r\n\r\n            const promotables = this._nodeSelector.getTopology().promotables;\r\n            for (const node of promotables) {\r\n                if (node.clusterTag === cmd.selectedNodeTag) {\r\n                    return new CurrentIndexAndNode(null, node);\r\n                }\r\n            }\r\n\r\n            return this._nodeSelector.getRequestedNode(cmd.selectedNodeTag);\r\n        }\r\n\r\n        if (this.conventions.loadBalanceBehavior === \"UseSessionContext\") {\r\n            if (sessionInfo && sessionInfo.canUseLoadBalanceBehavior()) {\r\n                return this._nodeSelector.getNodeBySessionId(sessionInfo.getSessionId());\r\n            }\r\n        }\r\n\r\n        if (!cmd.isReadRequest) {\r\n            return this._nodeSelector.getPreferredNode();\r\n        }\r\n\r\n        switch (this.conventions.readBalanceBehavior) {\r\n            case \"None\": {\r\n                return this._nodeSelector.getPreferredNode();\r\n            }\r\n            case \"RoundRobin\": {\r\n                return this._nodeSelector.getNodeBySessionId(sessionInfo ? sessionInfo.getSessionId() : 0);\r\n            }\r\n            case \"FastestNode\": {\r\n                return this._nodeSelector.getFastestNode();\r\n            }\r\n            default: {\r\n                throwError(\"NotSupportedException\", `Invalid read balance behavior: ${this.conventions.readBalanceBehavior}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _unlikelyExecute<TResult>(\r\n        command: RavenCommand<TResult>,\r\n        topologyUpdate: Promise<void>,\r\n        sessionInfo: SessionInfo): Promise<void> {\r\n\r\n        await this._waitForTopologyUpdate(topologyUpdate);\r\n\r\n        const currentIndexAndNode: CurrentIndexAndNode = this.chooseNodeForRequest(command, sessionInfo);\r\n        return this._executeOnSpecificNode(command, sessionInfo, {\r\n            chosenNode: currentIndexAndNode.currentNode,\r\n            nodeIndex: currentIndexAndNode.currentIndex,\r\n            shouldRetry: true\r\n        });\r\n    }\r\n\r\n    private async _waitForTopologyUpdate(topologyUpdate: Promise<void>) {\r\n        try {\r\n            if (!this.firstTopologyUpdatePromise) {\r\n                if (!this._lastKnownUrls) {\r\n                    // shouldn't happen\r\n                    throwError(\"InvalidOperationException\",\r\n                        \"No known topology and no previously known one, cannot proceed, likely a bug\");\r\n                }\r\n\r\n                if (!this._disableTopologyUpdates) {\r\n                    topologyUpdate = this._firstTopologyUpdate(this._lastKnownUrls, null);\r\n                } else {\r\n                    topologyUpdate = this._singleTopologyUpdateAsync(this._lastKnownUrls, null);\r\n                }\r\n            }\r\n\r\n            await topologyUpdate;\r\n\r\n        } catch (reason) {\r\n            if (this.firstTopologyUpdatePromise === topologyUpdate) {\r\n                this.firstTopologyUpdatePromise = null; // next request will raise it\r\n            }\r\n\r\n            this._log.warn(reason, \"Error doing topology update.\");\r\n\r\n            throw reason;\r\n        }\r\n    }\r\n\r\n    private _updateTopologyCallback(): Promise<void> {\r\n        const time = new Date();\r\n        const fiveMinutes = 5 * 60 * 1000;\r\n        if (time.valueOf() - this._lastReturnedResponse.valueOf() <= fiveMinutes) {\r\n            return;\r\n        }\r\n\r\n        let serverNode: ServerNode;\r\n\r\n        try {\r\n            const selector = this._nodeSelector;\r\n            if (!selector) {\r\n                return;\r\n            }\r\n            const preferredNode: CurrentIndexAndNode = selector.getPreferredNode();\r\n            serverNode = preferredNode.currentNode;\r\n        } catch (err) {\r\n            this._log.warn(err, \"Couldn't get preferred node Topology from _updateTopologyTimer\");\r\n            return;\r\n        }\r\n\r\n        const updateParameters = new UpdateTopologyParameters(serverNode);\r\n        updateParameters.timeoutInMs = 0;\r\n        updateParameters.debugTag = \"timer-callback\";\r\n\r\n        return this.updateTopology(updateParameters)\r\n            .catch(err => {\r\n                this._log.error(err, \"Couldn't update topology from _updateTopologyTimer\");\r\n                return null;\r\n            });\r\n    }\r\n\r\n    protected async _singleTopologyUpdateAsync(initialUrls: string[], applicationIdentifier: string): Promise<void> {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        // fetch tag for each of the urls\r\n        const topology = new Topology(this._topologyEtag, []);\r\n\r\n        for (const url of initialUrls) {\r\n            const serverNode = new ServerNode({\r\n                url,\r\n                database: this._databaseName\r\n            });\r\n\r\n            try {\r\n                const command = new GetNodeInfoCommand();\r\n                await this.execute(command, null, {\r\n                    chosenNode: serverNode,\r\n                    shouldRetry: false,\r\n                    nodeIndex: null\r\n                });\r\n\r\n                serverNode.clusterTag = command.result.nodeTag;\r\n                serverNode.serverRole = command.result.serverRole;\r\n            } catch (e) {\r\n                if (e.name === \"AuthorizationException\") {\r\n                    // auth exceptions will always happen, on all nodes\r\n                    // so errors immediately\r\n                    this._lastKnownUrls = initialUrls;\r\n                    throw e;\r\n                } else if (e.name === \"DatabaseDoesNotExistException\") {\r\n                    // Will happen on all node in the cluster,\r\n                    // so errors immediately\r\n\r\n                    this._lastKnownUrls = initialUrls;\r\n                    throw e;\r\n                } else {\r\n                    serverNode.clusterTag = \"!\";\r\n                }\r\n            }\r\n\r\n            topology.nodes.push(serverNode);\r\n            this._updateNodeSelector(topology, true);\r\n        }\r\n\r\n        this._lastKnownUrls = initialUrls;\r\n    }\r\n\r\n\r\n    protected async _firstTopologyUpdate(inputUrls: string[], applicationIdentifier?: string): Promise<void> {\r\n        const initialUrls: string[] = RequestExecutor.validateUrls(inputUrls, this._authOptions);\r\n\r\n        const topologyUpdateErrors: { url: string, error: Error | string }[] = [];\r\n\r\n        const tryUpdateTopology = async (url: string, database: string): Promise<boolean> => {\r\n            const serverNode = new ServerNode({ url, database, serverRole: \"Member\" });\r\n            try {\r\n                const updateParameters = new UpdateTopologyParameters(serverNode);\r\n                updateParameters.timeoutInMs = TypeUtil.MAX_INT32;\r\n                updateParameters.debugTag = \"first-topology-update\";\r\n                updateParameters.applicationIdentifier = applicationIdentifier;\r\n\r\n                await this.updateTopology(updateParameters);\r\n                this._initializeUpdateTopologyTimer();\r\n                this._topologyTakenFromNode = serverNode;\r\n                return true;\r\n            } catch (error) {\r\n                if ((error.name as RavenErrorType) === \"AuthorizationException\") {\r\n                    this._lastKnownUrls = initialUrls;\r\n                    throw error;\r\n                }\r\n\r\n                if ((error.name as RavenErrorType) === \"DatabaseDoesNotExistException\") {\r\n                    this._lastKnownUrls = initialUrls;\r\n                    throw error;\r\n                }\r\n\r\n                topologyUpdateErrors.push({ url, error });\r\n                return false;\r\n            }\r\n        };\r\n\r\n        const tryUpdateTopologyOnAllNodes = async () => {\r\n            for (const url of initialUrls) {\r\n                if (await tryUpdateTopology(url, this._databaseName)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        await tryUpdateTopologyOnAllNodes();\r\n        const topology = new Topology();\r\n        topology.etag = this._topologyEtag;\r\n\r\n        let topologyNodes = this.getTopologyNodes();\r\n        if (!topologyNodes) {\r\n            topologyNodes = initialUrls.map(url => {\r\n                const serverNode = new ServerNode({\r\n                    url,\r\n                    database: this._databaseName\r\n                });\r\n                serverNode.clusterTag = \"!\";\r\n                return serverNode;\r\n            });\r\n        }\r\n\r\n        topology.nodes = topologyNodes;\r\n\r\n        this._nodeSelector?.dispose();\r\n        this._nodeSelector = new NodeSelector(topology);\r\n\r\n        if (initialUrls && initialUrls.length > 0) {\r\n            this._initializeUpdateTopologyTimer();\r\n            return;\r\n        }\r\n\r\n        this._lastKnownUrls = initialUrls;\r\n        const details: string = topologyUpdateErrors\r\n            .map(x => `${x.url} -> ${x.error && (x.error as Error).stack ? (x.error as Error).stack : x.error}`)\r\n            .join(\", \");\r\n\r\n        this._throwExceptions(details);\r\n    }\r\n\r\n    protected _throwExceptions(details: string): void {\r\n        throwError(\"InvalidOperationException\",\r\n            \"Failed to retrieve database topology from all known nodes\"\r\n            + EOL + details);\r\n    }\r\n\r\n    public static validateUrls(initialUrls: string[], authOptions: IAuthOptions) {\r\n        const cleanUrls = new Array(initialUrls.length);\r\n        let requireHttps = !!authOptions?.certificate;\r\n        for (let index = 0; index < initialUrls.length; index++) {\r\n            const url = initialUrls[index];\r\n            validateUri(url);\r\n            cleanUrls[index] = url.replace(/\\/$/, \"\");\r\n            requireHttps = requireHttps || url.startsWith(\"https://\");\r\n        }\r\n\r\n        if (!requireHttps) {\r\n            return cleanUrls;\r\n        }\r\n\r\n        for (const url of initialUrls) {\r\n            if (!url.startsWith(\"http://\")) {\r\n                continue;\r\n            }\r\n\r\n            if (authOptions && authOptions.certificate) {\r\n                throwError(\"InvalidOperationException\",\r\n                    \"The url \" + url + \" is using HTTP, but a certificate is specified, which require us to use HTTPS\");\r\n            }\r\n\r\n            throwError(\"InvalidOperationException\",\r\n                \"The url \" + url\r\n                + \" is using HTTP, but other urls are using HTTPS, and mixing of HTTP and HTTPS is not allowed.\");\r\n        }\r\n\r\n        return cleanUrls;\r\n    }\r\n\r\n    private _initializeUpdateTopologyTimer(): void {\r\n        if (this._updateTopologyTimer || this._disposed) {\r\n            return;\r\n        }\r\n\r\n        this._log.info(\"Initialize update topology timer.\");\r\n\r\n        const minInMs = 60 * 1000;\r\n        this._updateTopologyTimer =\r\n            new Timer(() => this._updateTopologyCallback(), minInMs, minInMs);\r\n    }\r\n\r\n    private async _executeOnSpecificNode<TResult>( // this method is called `execute` in c# and java code\r\n        command: RavenCommand<TResult>,\r\n        sessionInfo: SessionInfo = null,\r\n        options: ExecuteOptions<TResult> = null): Promise<void> {\r\n\r\n        if (command.failoverTopologyEtag === RequestExecutor.INITIAL_TOPOLOGY_ETAG) {\r\n            command.failoverTopologyEtag = RequestExecutor.INITIAL_TOPOLOGY_ETAG;\r\n\r\n            if (this._nodeSelector && this._nodeSelector.getTopology()) {\r\n                const topology = this._nodeSelector.getTopology();\r\n                if (topology.etag) {\r\n                    command.failoverTopologyEtag = topology.etag;\r\n                }\r\n            }\r\n        }\r\n\r\n        const { chosenNode, nodeIndex, shouldRetry } = options;\r\n\r\n        this._log.info(`Actual execute ${command.constructor.name} on ${chosenNode.url}`\r\n            + ` ${ shouldRetry ? \"with\" : \"without\" } retry.`);\r\n\r\n        let url: string;\r\n        const req = this._createRequest(chosenNode, command, u => url = u);\r\n\r\n        const controller = new AbortController();\r\n\r\n        if (options?.abortRef) {\r\n            options.abortRef(controller);\r\n        }\r\n\r\n        req.signal = controller.signal;\r\n\r\n        const noCaching = sessionInfo ? sessionInfo.noCaching : false;\r\n\r\n        let cachedChangeVector: string;\r\n        let cachedValue: string;\r\n        const cachedItem = this._getFromCache(\r\n            command, !noCaching, req.uri.toString(), (cachedItemMetadata) => {\r\n                cachedChangeVector = cachedItemMetadata.changeVector;\r\n                cachedValue = cachedItemMetadata.response;\r\n            });\r\n\r\n\r\n        if (cachedChangeVector) {\r\n            if (await this._tryGetFromCache(command, cachedItem, cachedValue)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._setRequestHeaders(sessionInfo, cachedChangeVector, req);\r\n\r\n        command.numberOfAttempts++;\r\n        const attemptNum = command.numberOfAttempts;\r\n        this._emitter.emit(\"beforeRequest\", new BeforeRequestEventArgs(this._databaseName, url, req, attemptNum));\r\n\r\n        const responseAndStream = await this._sendRequestToServer(chosenNode, nodeIndex, command, shouldRetry, sessionInfo, req, url, controller);\r\n\r\n        if (!responseAndStream) {\r\n            return;\r\n        }\r\n\r\n\r\n        const response = responseAndStream.response;\r\n        const bodyStream = responseAndStream.bodyStream;\r\n        const refreshTask = this._refreshIfNeeded(chosenNode, response);\r\n\r\n        command.statusCode = response.status;\r\n\r\n        if (response.status < 400 || command.statusCode === 304) {\r\n            command.etag = getEtagHeader(response) ?? cachedChangeVector;\r\n        }\r\n\r\n        let responseDispose: ResponseDisposeHandling = \"Automatic\";\r\n\r\n        try {\r\n\r\n            if (response.status === StatusCodes.NotModified) {\r\n                this._emitter.emit(\"succeedRequest\", new SucceedRequestEventArgs(this._databaseName, url, response, req, attemptNum));\r\n\r\n                cachedItem.notModified();\r\n\r\n                await command.responseBehavior.handleNotModified(command, response, cachedValue);\r\n\r\n                return;\r\n            }\r\n\r\n            if (response.status >= 400) {\r\n                const unsuccessfulResponseHandled = await this._handleUnsuccessfulResponse(\r\n                    chosenNode,\r\n                    nodeIndex,\r\n                    command,\r\n                    req,\r\n                    response,\r\n                    bodyStream,\r\n                    req.uri as string,\r\n                    sessionInfo,\r\n                    shouldRetry);\r\n\r\n                if (!unsuccessfulResponseHandled) {\r\n\r\n                    const dbMissingHeader = response.headers.get(HEADERS.DATABASE_MISSING);\r\n                    if (dbMissingHeader) {\r\n                        throwError(\"DatabaseDoesNotExistException\", dbMissingHeader as string);\r\n                    }\r\n\r\n                    this._throwFailedToContactAllNodes(command, req);\r\n                }\r\n\r\n                return; // we either handled this already in the unsuccessful response or we are throwing\r\n            }\r\n\r\n            this._emitter.emit(\"succeedRequest\", new SucceedRequestEventArgs(this._databaseName, url, response, req, attemptNum));\r\n\r\n            responseDispose = await command.processResponse(this._cache, response, bodyStream, req.uri as string);\r\n            this._lastReturnedResponse = new Date();\r\n        } finally {\r\n            if (responseDispose === \"Automatic\") {\r\n                closeHttpResponse(response);\r\n            }\r\n\r\n            await refreshTask;\r\n        }\r\n    }\r\n\r\n    private async _refreshIfNeeded(chosenNode: ServerNode, response: HttpResponse) {\r\n        const refreshTopology = response\r\n            && response.headers\r\n            && response.headers.get(HEADERS.REFRESH_TOPOLOGY);\r\n\r\n        const refreshClientConfiguration = response\r\n            && response.headers\r\n            && response.headers.get(HEADERS.REFRESH_CLIENT_CONFIGURATION);\r\n\r\n        const tasks: Promise<any>[] = [];\r\n\r\n        if (refreshTopology) {\r\n            const updateParameters = new UpdateTopologyParameters(chosenNode);\r\n            updateParameters.timeoutInMs = 0;\r\n            updateParameters.debugTag = \"refresh-topology-header\";\r\n            tasks.push(this.updateTopology(updateParameters));\r\n        }\r\n\r\n        if (refreshClientConfiguration) {\r\n            tasks.push(this._updateClientConfiguration(chosenNode));\r\n        }\r\n\r\n        await Promise.all(tasks);\r\n    }\r\n\r\n    private async _sendRequestToServer<TResult>(chosenNode: ServerNode,\r\n                                                nodeIndex: number,\r\n                                                command: RavenCommand<TResult>,\r\n                                                shouldRetry: boolean,\r\n                                                sessionInfo: SessionInfo,\r\n                                                request: HttpRequestParameters,\r\n                                                url: string,\r\n                                                abortController: AbortController) {\r\n        try {\r\n            this.numberOfServerRequests++;\r\n\r\n            const timeout = command.timeout || this._defaultTimeout;\r\n\r\n            if (!TypeUtil.isNullOrUndefined(timeout)) {\r\n                const cancelTask = setTimeout(() => abortController.abort(), timeout);\r\n\r\n                try {\r\n                    return await this._send(chosenNode, command, sessionInfo, request);\r\n                } catch (error) {\r\n                    if (error.name === \"AbortError\") {\r\n                        const timeoutException = getError(\"TimeoutException\", \"The request for \" + request.uri + \" failed with timeout after \" + TimeUtil.millisToTimeSpan(timeout), error);\r\n                        if (!shouldRetry) {\r\n                            if (!command.failedNodes) {\r\n                                command.failedNodes = new Map<ServerNode, Error>();\r\n                            }\r\n\r\n                            command.failedNodes.set(chosenNode, timeoutException);\r\n                            throw timeoutException;\r\n                        }\r\n\r\n                        if (!await this._handleServerDown(url, chosenNode, nodeIndex, command, request, null,  \"\", timeoutException, sessionInfo, shouldRetry)) {\r\n                            this._throwFailedToContactAllNodes(command, request);\r\n                        }\r\n                        return null;\r\n                    }\r\n                    throw error;\r\n                } finally {\r\n                    clearTimeout(cancelTask);\r\n                }\r\n            } else {\r\n                return await this._send(chosenNode, command, sessionInfo, request);\r\n            }\r\n        } catch (e) {\r\n            if (e.name === \"AllTopologyNodesDownException\") {\r\n                throw e;\r\n            }\r\n\r\n            if (e?.cause?.code === \"UNABLE_TO_VERIFY_LEAF_SIGNATURE\") {\r\n                if (chosenNode.url.startsWith(\"https://\") && !this.getAuthOptions()?.certificate) {\r\n                    throwError(\"AuthorizationException\", \"This server requires client certificate for authentication, but none was provided by the client.\", e);\r\n                }\r\n            }\r\n\r\n            // node.js fetch doesn't even send request to server is expected protocol is different from actual,\r\n            // so we need handle this case differently\r\n            // https://github.com/nodejs/node/blob/d8c4e375f21b8475d3b717d1d1120ad4eabf8f63/lib/_http_client.js#L157\r\n\r\n            if (e.code === \"ERR_INVALID_PROTOCOL\") {\r\n                if (chosenNode.url.startsWith(\"https://\") && !this.getAuthOptions()?.certificate) {\r\n                    throwError(\"AuthorizationException\", \"This server requires client certificate for authentication, but none was provided by the client.\", e);\r\n                }\r\n\r\n                throwError(\"AuthorizationException\", \"Invalid protocol\", e);\r\n            }\r\n\r\n            if (!shouldRetry) {\r\n                throw e;\r\n            }\r\n\r\n            if (!await this._handleServerDown(url, chosenNode, nodeIndex, command, request, null, \"\", e, sessionInfo, shouldRetry)) {\r\n                this._throwFailedToContactAllNodes(command, request);\r\n            }\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private async _send<TResult>(chosenNode: ServerNode, command: RavenCommand<TResult>, sessionInfo: SessionInfo, request: HttpRequestParameters): Promise<{ response: HttpResponse, bodyStream: Readable }> {\r\n        let responseAndStream: { response: HttpResponse, bodyStream: Readable };\r\n\r\n        if (this._shouldExecuteOnAll(chosenNode, command)) {\r\n            responseAndStream = await this._executeOnAllToFigureOutTheFastest(chosenNode, command);\r\n        } else {\r\n            this.compressionHeaders(request);\r\n            responseAndStream = await command.send(await this.getHttpAgent(), request);\r\n        }\r\n\r\n        // PERF: The reason to avoid rechecking every time is that servers wont change so rapidly\r\n        //       and therefore we dimish its cost by orders of magnitude just doing it\r\n        //       once in a while. We dont care also about the potential race conditions that may happen\r\n        //       here mainly because the idea is to have a lax mechanism to recheck that is at least\r\n        //       orders of magnitude faster than currently.\r\n        if (chosenNode.shouldUpdateServerVersion()) {\r\n            const serverVersion = RequestExecutor._tryGetServerVersion(responseAndStream.response);\r\n            if (serverVersion) {\r\n                chosenNode.updateServerVersion(serverVersion);\r\n            }\r\n        }\r\n\r\n        this._lastServerVersion = chosenNode.lastServerVersion;\r\n\r\n        if (sessionInfo && sessionInfo.lastClusterTransactionIndex) {\r\n            // if we reach here it means that sometime a cluster transaction has occurred against this database.\r\n            // Since the current executed command can be dependent on that,\r\n            // we have to wait for the cluster transaction.\r\n            // But we can't do that if the server is an old one.\r\n\r\n            if (this._lastServerVersion && \"4.1\".localeCompare(this._lastServerVersion) > 0) {\r\n                throwError(\r\n                    \"ClientVersionMismatchException\",\r\n                    \"The server on \" + chosenNode.url + \" has an old version and can't perform \"\r\n                    + \"the command since this command dependent on a cluster transaction \"\r\n                    + \" which this node doesn't support.\");\r\n            }\r\n        }\r\n\r\n        return responseAndStream;\r\n    }\r\n\r\n\r\n    private _setRequestHeaders(sessionInfo: SessionInfo, cachedChangeVector: string, req: HttpRequestParameters) {\r\n        if (cachedChangeVector) {\r\n            req.headers[HEADERS.IF_NONE_MATCH] = `\"${cachedChangeVector}\"`;\r\n        }\r\n\r\n        if (!this._disableClientConfigurationUpdates) {\r\n            req.headers[HEADERS.CLIENT_CONFIGURATION_ETAG] = this._clientConfigurationEtag;\r\n        }\r\n        if (sessionInfo && sessionInfo.lastClusterTransactionIndex) {\r\n            req.headers[HEADERS.LAST_KNOWN_CLUSTER_TRANSACTION_INDEX] =\r\n                sessionInfo.lastClusterTransactionIndex;\r\n        }\r\n\r\n        if (!this._disableTopologyUpdates) {\r\n            req.headers[this._topologyHeaderName] = `\"${this._topologyEtag}\"`;\r\n        }\r\n\r\n        if (!req.headers[HEADERS.CLIENT_VERSION]) {\r\n            req.headers[HEADERS.CLIENT_VERSION] = RequestExecutor.CLIENT_VERSION;\r\n        }\r\n    }\r\n\r\n    private async _tryGetFromCache<TResult>(command: RavenCommand<TResult>, cachedItem: ReleaseCacheItem, cachedValue: string): Promise<boolean> {\r\n        const aggressiveCacheOptions = this.aggressiveCaching;\r\n        if (aggressiveCacheOptions\r\n            && cachedItem.age < aggressiveCacheOptions.duration\r\n            && !cachedItem.mightHaveBeenModified\r\n            && command.canCacheAggressively) {\r\n            if (cachedItem.item.flags === \"NotFound\") {\r\n                // if this is a cached delete, we only respect it if it _came_ from an aggressively cached\r\n                // block, otherwise, we'll run the request again\r\n\r\n                return false;\r\n            } else {\r\n                await command.setResponseFromCache(cachedValue);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private static _tryGetServerVersion(response: HttpResponse) {\r\n        return response.headers.get(HEADERS.SERVER_VERSION);\r\n    }\r\n\r\n    private _throwFailedToContactAllNodes<TResult>(\r\n        command: RavenCommand<TResult>,\r\n        req: HttpRequestParameters) {\r\n\r\n        if (!command.failedNodes || !command.failedNodes.size) { //precaution, should never happen at this point\r\n            throwError(\"InvalidOperationException\", \"Received unsuccessful response and couldn't recover from it. \" +\r\n                \"Also, no record of exceptions per failed nodes. This is weird and should not happen.\");\r\n        }\r\n\r\n        if (command.failedNodes.size === 1) {\r\n            throw Array.from(command.failedNodes.values())[0];\r\n        }\r\n\r\n        let message: string = \"Tried to send \"\r\n            + command.constructor.name\r\n            + \" request via \"\r\n            + (req.method || \"GET\") + \" \"\r\n            + req.uri + \" to all configured nodes in the topology, \"\r\n            + \"none of the attempt succeeded.\" + EOL;\r\n\r\n        if (this._topologyTakenFromNode) {\r\n            message += \"I was able to fetch \" + this._topologyTakenFromNode.database\r\n                + \" topology from \" + this._topologyTakenFromNode.url + \".\" + EOL;\r\n        }\r\n\r\n        let nodes: ServerNode[];\r\n        if (this._nodeSelector && this._nodeSelector.getTopology()) {\r\n            nodes = this._nodeSelector.getTopology().nodes;\r\n        }\r\n\r\n        if (!nodes) {\r\n            message += \"Topology is empty.\";\r\n        } else {\r\n            message += \"Topology: \";\r\n\r\n            for (const node of nodes) {\r\n                const error = command.failedNodes.get(node);\r\n\r\n                message += EOL +\r\n                    \"[Url: \" + node.url + \", \" +\r\n                    \"ClusterTag: \" + node.clusterTag + \", \" +\r\n                    \"ServerRole: \" + node.serverRole + \", \" +\r\n                    \"Exception: \" + (error ? error.message : \"No exception\") + \"]\";\r\n            }\r\n        }\r\n\r\n        throwError(\"AllTopologyNodesDownException\", message);\r\n    }\r\n\r\n    public inSpeedTestPhase() {\r\n        return this._nodeSelector\r\n            && this._nodeSelector.inSpeedTestPhase();\r\n    }\r\n\r\n    private _shouldExecuteOnAll<TResult>(chosenNode: ServerNode, command: RavenCommand<TResult>): boolean {\r\n        return this.conventions.readBalanceBehavior === \"FastestNode\" &&\r\n            this._nodeSelector &&\r\n            this._nodeSelector.inSpeedTestPhase() &&\r\n            this._nodeSelectorHasMultipleNodes() &&\r\n            command.isReadRequest &&\r\n            command.responseType === \"Object\" &&\r\n            !!chosenNode &&\r\n            !(command[\"prepareToBroadcast\"]); // duck typing: !(command instanceof IBroadcast)\r\n    }\r\n\r\n    private async _executeOnAllToFigureOutTheFastest<TResult>(\r\n        chosenNode: ServerNode,\r\n        command: RavenCommand<TResult>): Promise<{ response: HttpResponse, bodyStream: Readable }> {\r\n        let preferredTask: Promise<IndexAndResponse> = null;\r\n\r\n        const nodes = this._nodeSelector.getTopology().nodes;\r\n        const tasks: Promise<IndexAndResponse>[] = nodes.map(x => null);\r\n\r\n        let task: Promise<IndexAndResponse>;\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const taskNumber = i;\r\n            this.numberOfServerRequests++;\r\n\r\n            const agent = await this.getHttpAgent();\r\n\r\n            task = Promise.resolve()\r\n                .then(() => {\r\n                    const req = this._createRequest(nodes[taskNumber], command, TypeUtil.NOOP);\r\n                    if (!req) {\r\n                        return;\r\n                    }\r\n                    this._setRequestHeaders(null, null, req);\r\n                    this.compressionHeaders(req);\r\n                    return command.send(agent, req);\r\n                })\r\n                .then(commandResult => new IndexAndResponse(taskNumber, commandResult.response, commandResult.bodyStream))\r\n                .catch(err => {\r\n                    tasks[taskNumber] = null;\r\n                    throw err;\r\n                });\r\n\r\n            if (nodes[i].clusterTag === chosenNode.clusterTag) {\r\n                preferredTask = task;\r\n            }\r\n\r\n            tasks[i] = task;\r\n        }\r\n\r\n        const result = raceToResolution(tasks)\r\n            .then(fastest => {\r\n                this._nodeSelector.recordFastest(fastest.index, nodes[fastest.index]);\r\n            })\r\n            .catch((err) => {\r\n                this._log.warn(err, \"Error executing on all to find fastest node.\");\r\n            })\r\n            .then(() => preferredTask);\r\n\r\n        return Promise.resolve(result);\r\n    }\r\n\r\n    private _getFromCache<TResult>(\r\n        command: RavenCommand<TResult>,\r\n        useCache: boolean,\r\n        url: string,\r\n        cachedItemMetadataCallback: (data: CachedItemMetadata) => void) {\r\n\r\n        if (useCache\r\n            && command.canCache\r\n            && command.isReadRequest\r\n            && command.responseType === \"Object\") {\r\n            return this._cache.get(url, cachedItemMetadataCallback);\r\n        }\r\n\r\n        cachedItemMetadataCallback({\r\n            changeVector: null,\r\n            response: null\r\n        });\r\n\r\n        return new ReleaseCacheItem(null);\r\n    }\r\n\r\n\r\n    private _nodeSelectorHasMultipleNodes() {\r\n        const selector = this._nodeSelector;\r\n        if (!selector) {\r\n            return false;\r\n        }\r\n        const topology = selector.getTopology();\r\n        return topology && topology.nodes && topology.nodes.length > 1;\r\n    }\r\n\r\n\r\n    private _createRequest<TResult>(node: ServerNode, command: RavenCommand<TResult>, urlRef: (value: string) => void): HttpRequestParameters {\r\n        const request = command.createRequest(node);\r\n\r\n        if (!request) {\r\n            return null;\r\n        }\r\n\r\n        if (this.conventions.customFetch) {\r\n            request.fetcher = this.conventions.customFetch;\r\n        }\r\n\r\n        const req = Object.assign(request, this._defaultRequestOptions);\r\n        urlRef(req.uri);\r\n        req.headers = req.headers || {};\r\n\r\n        let builder = new URL(req.uri);\r\n\r\n        if (RequestExecutor.requestPostProcessor) {\r\n            RequestExecutor.requestPostProcessor(req);\r\n        }\r\n\r\n        if (command[\"getRaftUniqueRequestId\"]) {\r\n            const raftCommand = command as unknown as IRaftCommand;\r\n            builder = RequestExecutor.appendToQuery(builder, \"raft-request-id\", raftCommand.getRaftUniqueRequestId());\r\n        }\r\n\r\n        if (command.selectedNodeTag) {\r\n            builder = RequestExecutor.appendToQuery(builder, QUERY_STRING.NODE_TAG, command.selectedNodeTag);\r\n        }\r\n\r\n        if (!TypeUtil.isNullOrUndefined(command.selectedShardNumber)) {\r\n            builder = RequestExecutor.appendToQuery(builder, QUERY_STRING.SHARD_NUMBER, command.selectedShardNumber);\r\n        }\r\n\r\n        if (this._shouldBroadcast(command)) {\r\n            command.timeout = command.timeout ?? this.firstBroadcastAttemptTimeout;\r\n        }\r\n\r\n        req.uri = builder.toString();\r\n\r\n        return req;\r\n    }\r\n\r\n    private static appendToQuery(builder: URL, key: string, value: string | number): URL {\r\n        const joinCharacter = builder.search ? \"&\" : \"?\";\r\n\r\n        return new URL(builder.toString() + joinCharacter + key + \"=\" + encodeURIComponent(value));\r\n    }\r\n\r\n    private async _handleUnsuccessfulResponse<TResult>(\r\n        chosenNode: ServerNode,\r\n        nodeIndex: number,\r\n        command: RavenCommand<TResult>,\r\n        req: HttpRequestParameters,\r\n        response: HttpResponse,\r\n        responseBodyStream: Readable,\r\n        url: string,\r\n        sessionInfo: SessionInfo,\r\n        shouldRetry: boolean): Promise<boolean> {\r\n        responseBodyStream.resume();\r\n        const readBody = () => readToEnd(responseBodyStream);\r\n        switch (response.status) {\r\n            case StatusCodes.NotFound: {\r\n                this._cache.setNotFound(url);\r\n\r\n                return command.responseBehavior.tryHandleNotFound(command, response);\r\n            }\r\n\r\n            case StatusCodes.Forbidden: {\r\n                const msg = await readBody();\r\n                throwError(\"AuthorizationException\",\r\n                    `Forbidden access to ${chosenNode.database}@${chosenNode.url}`\r\n                    + `, ${req.method || \"GET\"} ${req.uri}` + EOL + msg);\r\n                break;\r\n            }\r\n            case StatusCodes.Gone: {\r\n                // request not relevant for the chosen node - the database has been moved to a different one\r\n                if (!shouldRetry) {\r\n                    return false;\r\n                }\r\n\r\n                if (nodeIndex != null) {\r\n                    this._nodeSelector.onFailedRequest(nodeIndex);\r\n                }\r\n\r\n                if (!command.failedNodes) {\r\n                    command.failedNodes = new Map();\r\n                }\r\n\r\n                if (command.isFailedWithNode(chosenNode)) {\r\n                    command.failedNodes.set(chosenNode, getError(\"UnsuccessfulRequestException\",\r\n                        \"Request to \" + url + \"(\" + req.method + \") is not relevant for this node anymore.\"));\r\n                }\r\n\r\n                let indexAndNode = this.chooseNodeForRequest(command, sessionInfo);\r\n\r\n                if (command.failedNodes.has(indexAndNode.currentNode)) {\r\n                    // we tried all the nodes, let's try to update topology and retry one more time\r\n                    const updateParameters = new UpdateTopologyParameters(chosenNode);\r\n                    updateParameters.timeoutInMs = 60_000;\r\n                    updateParameters.debugTag = \"handle-unsuccessful-response\";\r\n                    const success = await this.updateTopology(updateParameters);\r\n                    if (!success) {\r\n                        return false;\r\n                    }\r\n\r\n                    command.failedNodes.clear(); // we just update the topology\r\n                    indexAndNode = this.chooseNodeForRequest(command, sessionInfo);\r\n\r\n                    await this._executeOnSpecificNode(command, sessionInfo, {\r\n                        chosenNode: indexAndNode.currentNode,\r\n                        nodeIndex: indexAndNode.currentIndex,\r\n                        shouldRetry: false\r\n                    });\r\n                    return true;\r\n                }\r\n\r\n                await this._executeOnSpecificNode(command, sessionInfo, {\r\n                    chosenNode: indexAndNode.currentNode,\r\n                    nodeIndex: indexAndNode.currentIndex,\r\n                    shouldRetry: false\r\n                });\r\n                return true;\r\n            }\r\n            case StatusCodes.GatewayTimeout:\r\n            case StatusCodes.RequestTimeout:\r\n            case StatusCodes.BadGateway:\r\n            case StatusCodes.ServiceUnavailable: {\r\n                return this._handleServerDown(\r\n                    url, chosenNode, nodeIndex, command, req, response, await readBody(), null, sessionInfo, shouldRetry);\r\n            }\r\n            case StatusCodes.Conflict: {\r\n                return command.responseBehavior.tryHandleConflict(response, await readBody());\r\n            }\r\n            case StatusCodes.TooEarly: {\r\n                if (!shouldRetry) {\r\n                    return false;\r\n                }\r\n\r\n                if (!TypeUtil.isNullOrUndefined(nodeIndex)) {\r\n                    this._nodeSelector.onFailedRequest(nodeIndex);\r\n                }\r\n\r\n                command.failedNodes ??= new Map<ServerNode, Error>();\r\n\r\n                if (!command.isFailedWithNode(chosenNode)) {\r\n                    command.failedNodes.set(chosenNode, getError(\"UnsuccessfulRequestException\", \"Request to '\" + req.uri + \"' (\" + req.method + \") is processing and not yet available on that node.\"));\r\n                }\r\n\r\n                const nextNode = this.chooseNodeForRequest(command, sessionInfo);\r\n\r\n                await this._executeOnSpecificNode(command, sessionInfo, {\r\n                    chosenNode: nextNode.currentNode,\r\n                    nodeIndex: nextNode.currentIndex,\r\n                    shouldRetry: true\r\n                });\r\n\r\n                this._nodeSelector.restoreNodeIndex(chosenNode);\r\n\r\n                return true;\r\n            }\r\n            default: {\r\n                return command.responseBehavior.tryHandleUnsuccessfulResponse(command, response, await readBody());\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _handleServerDown<TResult>(\r\n        url: string,\r\n        chosenNode: ServerNode,\r\n        nodeIndex: number,\r\n        command: RavenCommand<TResult>,\r\n        req: HttpRequestParameters,\r\n        response: HttpResponse,\r\n        body: string,\r\n        error: any,\r\n        sessionInfo: SessionInfo,\r\n        shouldRetry: boolean): Promise<boolean> {\r\n\r\n        if (!command.failedNodes) {\r\n            command.failedNodes = new Map();\r\n        }\r\n\r\n        const exception = RequestExecutor._readExceptionFromServer(req, response, body, error);\r\n        if (exception.name === \"RavenTimeoutException\" && (exception as any).failImmediately) {\r\n            throw exception;\r\n        }\r\n        command.failedNodes.set(chosenNode, exception);\r\n\r\n        if (nodeIndex === null) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._nodeSelector) {\r\n            this._spawnHealthChecks(chosenNode);\r\n            return false;\r\n        }\r\n\r\n        // As the server is down, we discard the server version to ensure we update when it goes up.\r\n        chosenNode.discardServerVersion();\r\n\r\n        this._nodeSelector.onFailedRequest(nodeIndex);\r\n\r\n        if (this._shouldBroadcast(command)) {\r\n            command.result = await this._broadcast(command, sessionInfo);\r\n            return true;\r\n        }\r\n\r\n        this._spawnHealthChecks(chosenNode);\r\n\r\n\r\n        const currentIndexAndNode = this.chooseNodeForRequest(command, sessionInfo);\r\n        const topologyEtag = this._nodeSelector.getTopology()?.etag ?? -2;\r\n\r\n        if (command.failoverTopologyEtag !== this._topologyEtag) {\r\n            command.failedNodes.clear();\r\n            command.failoverTopologyEtag = this._topologyEtag;\r\n        }\r\n\r\n        if (command.failedNodes.has(currentIndexAndNode.currentNode)) {\r\n            return false;\r\n        }\r\n\r\n        this._onFailedRequestInvoke(url, error, req, response);\r\n\r\n        await this._executeOnSpecificNode(command, sessionInfo, {\r\n            chosenNode: currentIndexAndNode.currentNode,\r\n            nodeIndex: currentIndexAndNode.currentIndex,\r\n            shouldRetry\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    private _shouldBroadcast<TResult>(command: RavenCommand<TResult>) {\r\n        if (!command[\"prepareToBroadcast\"]) {\r\n            return false;\r\n        }\r\n\r\n        const topologyNodes = this.getTopologyNodes();\r\n        if (!topologyNodes || topologyNodes.length < 2) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private async _broadcast<TResult>(command: RavenCommand<TResult>, sessionInfo: SessionInfo) {\r\n        if (!command[\"prepareToBroadcast\"]) {\r\n            throwError(\"InvalidOperationException\", \"You can broadcast only commands that implement 'IBroadcast'.\");\r\n        }\r\n\r\n        const broadcastCommand = command as unknown as IBroadcast;\r\n        const failedNodes = command.failedNodes;\r\n\r\n        command.failedNodes = new Map<ServerNode, Error>(); // clean the current failures\r\n\r\n        const broadcastTasks = new Map<Promise<number>, BroadcastState<TResult>>();\r\n\r\n        try {\r\n            this._sendToAllNodes(broadcastTasks, sessionInfo, broadcastCommand);\r\n\r\n            return this._waitForBroadcastResult(command, broadcastTasks);\r\n        } finally {\r\n            for (const broadcastState of Array.from(broadcastTasks.entries())) {\r\n                const task = broadcastState[0];\r\n                if (task) {\r\n                    task.catch(throwable => {\r\n                        const index = broadcastState[1].index;\r\n                        const node = this._nodeSelector.getTopology().nodes[index];\r\n                        if (failedNodes.has(node)) {\r\n                            // if other node succeed in broadcast we need to send health checks to the original failed node\r\n                            this._spawnHealthChecks(node);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _waitForBroadcastResult<TResult>(command: RavenCommand<TResult>, tasks: Map<Promise<number>, BroadcastState<TResult>>): Promise<TResult> {\r\n        while (tasks.size) {\r\n            let error: Error;\r\n            try {\r\n                const completed = await Promise.race(Array.from(tasks.keys()));\r\n\r\n                for (const state of Array.from(tasks.values())) {\r\n                    state.abort?.abort();\r\n                }\r\n\r\n                const completedItem = Array.from(tasks.values()).find(x => x.index === completed);\r\n\r\n                this._nodeSelector.restoreNodeIndex(completedItem.node);\r\n                return completedItem.command.result;\r\n            } catch (e) {\r\n                error = e.error;\r\n                const failedIndex = e.index;\r\n\r\n                const failedPair = Array.from(tasks.entries())\r\n                    .find(x => x[1].index === failedIndex);\r\n                const node = this._nodeSelector.getTopology().nodes[failedIndex];\r\n\r\n                command.failedNodes.set(node, error);\r\n\r\n                this._nodeSelector.onFailedRequest(failedIndex);\r\n                this._spawnHealthChecks(node);\r\n\r\n                tasks.delete(failedPair[0]);\r\n            }\r\n        }\r\n\r\n        const exceptions = Array.from(command.failedNodes\r\n            .entries())\r\n            .map(x => x[0].url + \": \" + x[1].message)\r\n            .join(\", \");\r\n\r\n        throwError(\"AllTopologyNodesDownException\", \"Broadcasting \" + command.constructor.name + \" failed: \" + exceptions);\r\n    }\r\n\r\n    private _sendToAllNodes<TResult>(tasks: Map<Promise<number>, BroadcastState<TResult>>, sessionInfo: SessionInfo, command: IBroadcast) {\r\n        for (let index = 0; index < this._nodeSelector.getTopology().nodes.length; index++) {\r\n            const state = new BroadcastState<TResult>();\r\n            state.command = command.prepareToBroadcast(this.conventions) as unknown as RavenCommand<TResult>;\r\n            state.index = index;\r\n            state.node = this._nodeSelector.getTopology().nodes[index];\r\n\r\n            state.command.timeout = this.secondBroadcastAttemptTimeout;\r\n\r\n            let abortController: AbortController;\r\n            const task: Promise<number> = this.execute(state.command, sessionInfo, {\r\n                chosenNode: state.node,\r\n                nodeIndex: null,\r\n                shouldRetry: false,\r\n                abortRef: a => abortController = a\r\n            })\r\n                .then(() => index)\r\n                .catch(e => {\r\n                    throw {\r\n                        index,\r\n                        error: e\r\n                    };\r\n                })\r\n\r\n            state.abort = abortController;\r\n            tasks.set(task, state);\r\n        }\r\n    }\r\n\r\n    public async handleServerNotResponsive(url: string, chosenNode: ServerNode, nodeIndex: number, e: Error) {\r\n        this._spawnHealthChecks(chosenNode);\r\n        if (this._nodeSelector) {\r\n            this._nodeSelector.onFailedRequest(nodeIndex);\r\n        }\r\n\r\n        const preferredNode = await this.getPreferredNode();\r\n\r\n        if (this._disableTopologyUpdates) {\r\n            await this._performHealthCheck(chosenNode, nodeIndex);\r\n        } else {\r\n            const updateParameters = new UpdateTopologyParameters(preferredNode.currentNode);\r\n            updateParameters.timeoutInMs = 0;\r\n            updateParameters.forceUpdate = true;\r\n            updateParameters.debugTag = \"handle-server-not-responsive\";\r\n\r\n            await this.updateTopology(updateParameters);\r\n        }\r\n\r\n        this._onFailedRequestInvoke(url, e);\r\n\r\n        return preferredNode.currentNode;\r\n    }\r\n\r\n    private _spawnHealthChecks(chosenNode: ServerNode): void {\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n\r\n        if (this._nodeSelector && this._nodeSelector.getTopology().nodes.length < 2) {\r\n            return;\r\n        }\r\n\r\n        if (this._failedNodesTimers.has(chosenNode)) {\r\n            return;\r\n        }\r\n\r\n        this._log.info(`Spawn health checks for node ${chosenNode.url}.`);\r\n\r\n        const nodeStatus: NodeStatus = new NodeStatus(\r\n            chosenNode,\r\n            this,\r\n            (nStatus: NodeStatus) => this._checkNodeStatusCallback(nStatus));\r\n        this._failedNodesTimers.set(chosenNode, nodeStatus);\r\n        nodeStatus.startTimer();\r\n    }\r\n\r\n    private _checkNodeStatusCallback(nodeStatus: NodeStatus): Promise<void> {\r\n        // In some cases, race conditions may occur with a recently changed topology and a failed node.\r\n        // We still should check the node's health, and if healthy, remove its timer and restore its index.\r\n\r\n        let nodeIndex: number;\r\n        let serverNode: ServerNode;\r\n        let status: NodeStatus;\r\n\r\n        try {\r\n            const nodeIndexAndServerNode = this._nodeSelector.getRequestedNode(nodeStatus.node.clusterTag)\r\n            nodeIndex = nodeIndexAndServerNode.currentIndex;\r\n            serverNode = nodeIndexAndServerNode.currentNode;\r\n        } catch (e) {\r\n            // There are no nodes in the topology or could not find requested node. Nothing we can do here\r\n            if (e.name === \"DatabaseDoesNotExistException\" || e.name === \"RequestedNodeUnavailableException\") {\r\n                status = this._failedNodesTimers.get(nodeStatus.node);\r\n                if (status) {\r\n                    status.dispose();\r\n                }\r\n\r\n                return;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        if (!serverNode || TypeUtil.isNullOrUndefined(nodeIndex)) {\r\n            return;\r\n        }\r\n\r\n        return Promise.resolve()\r\n            .then(() => {\r\n                return Promise.resolve(this._performHealthCheck(serverNode, nodeIndex))\r\n                    .then(() => {\r\n                            status = this._failedNodesTimers[nodeIndex];\r\n                            if (status) {\r\n                                this._failedNodesTimers.delete(nodeStatus.node);\r\n                                status.dispose();\r\n                            }\r\n\r\n                            if (this._nodeSelector) {\r\n                                this._nodeSelector.restoreNodeIndex(serverNode);\r\n                            }\r\n                        },\r\n                        err => {\r\n                            this._log.error(err, `${serverNode.clusterTag} is still down`);\r\n\r\n                            status = this._failedNodesTimers.get(nodeStatus.node);\r\n                            if (status) {\r\n                                nodeStatus.updateTimer();\r\n                            }\r\n                        });\r\n            })\r\n            .catch(err => {\r\n                this._log.error(\r\n                    err, \"Failed to check node topology, will ignore this node until next topology update.\");\r\n            });\r\n    }\r\n\r\n    protected async _performHealthCheck(serverNode: ServerNode, nodeIndex: number): Promise<void> {\r\n        try {\r\n            if (!RequestExecutor._useOldFailureCheckOperation.has(serverNode.url)) {\r\n                await this._executeOnSpecificNode(\r\n                    RequestExecutor._failureCheckOperation.getCommand(this._conventions),\r\n                    null,\r\n                    {\r\n                        chosenNode: serverNode,\r\n                        nodeIndex,\r\n                        shouldRetry: false,\r\n                    });\r\n            } else {\r\n                await this._executeOldHealthCheck(serverNode, nodeIndex);\r\n            }\r\n        } catch (e) {\r\n            if (e.message.includes(\"RouteNotFoundException\")) {\r\n                RequestExecutor._useOldFailureCheckOperation.add(serverNode.url);\r\n                await this._executeOldHealthCheck(serverNode, nodeIndex);\r\n                return ;\r\n            }\r\n\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    private _executeOldHealthCheck(serverNode: ServerNode, nodeIndex: number) {\r\n        return this._executeOnSpecificNode(\r\n            RequestExecutor._backwardCompatibilityFailureCheckOperation.getCommand(this._conventions),\r\n            null,\r\n            {\r\n                chosenNode: serverNode,\r\n                nodeIndex,\r\n                shouldRetry: false,\r\n            });\r\n    }\r\n\r\n    private static _readExceptionFromServer<TResult>(\r\n        req: HttpRequestParameters,\r\n        response: HttpResponse,\r\n        body: string,\r\n        e: Error): Error {\r\n\r\n        if (response && body) {\r\n            const responseJson: string = body;\r\n            try {\r\n                const resExceptionSchema = JsonSerializer\r\n                    .getDefaultForCommandPayload()\r\n                    .deserialize<ExceptionSchema>(responseJson);\r\n                return ExceptionDispatcher.get(resExceptionSchema, response.status, e);\r\n            } catch (__) {\r\n                log.warn(__, \"Error parsing server error.\");\r\n                const unrecognizedErrSchema = {\r\n                    url: req.uri as string,\r\n                    message: \"Unrecognized response from the server\",\r\n                    error: responseJson,\r\n                    type: \"Unparsable Server Response\"\r\n                };\r\n\r\n                return ExceptionDispatcher.get(unrecognizedErrSchema, response.status, e);\r\n            }\r\n        }\r\n\r\n        const exceptionSchema = {\r\n            url: req.uri.toString(),\r\n            message: e.message,\r\n            error: `An exception occurred while contacting ${ req.uri }: ${ e.message }`,\r\n            type: e.name\r\n        };\r\n\r\n        return ExceptionDispatcher.get(exceptionSchema, StatusCodes.ServiceUnavailable, e);\r\n    }\r\n\r\n\r\n    private _setDefaultRequestOptions(): void {\r\n        this._defaultRequestOptions = Object.assign(\r\n            DEFAULT_REQUEST_OPTIONS,\r\n            this._customHttpRequestOptions);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._log.info(\"Dispose.\");\r\n\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n\r\n        this._disposed = true;\r\n\r\n        this._updateClientConfigurationSemaphore.take(TypeUtil.NOOP);\r\n\r\n        this._updateDatabaseTopologySemaphore.take(TypeUtil.NOOP);\r\n\r\n        this._cache.dispose();\r\n\r\n        if (this._updateTopologyTimer) {\r\n            this._updateTopologyTimer.dispose();\r\n        }\r\n        this._nodeSelector?.dispose();\r\n\r\n        this._disposeAllFailedNodesTimers();\r\n    }\r\n\r\n    public async getRequestedNode(nodeTag: string, throwIfContainsFailures = false): Promise<CurrentIndexAndNode> {\r\n        await this._ensureNodeSelector();\r\n\r\n        const currentIndexAndNode = this._nodeSelector.getRequestedNode(nodeTag);\r\n\r\n        if (throwIfContainsFailures && !this._nodeSelector.nodeIsAvailable(currentIndexAndNode.currentIndex)) {\r\n            throwError(\"RequestedNodeUnavailableException\", \"Requested node \" + nodeTag + \" currently unavailable, please try again later.\");\r\n        }\r\n\r\n        return currentIndexAndNode;\r\n    }\r\n\r\n    public async getPreferredNode(): Promise<CurrentIndexAndNode> {\r\n        await this._ensureNodeSelector();\r\n        return this._nodeSelector.getPreferredNode();\r\n    }\r\n\r\n    public async getNodeBySessionId(sessionId: number): Promise<CurrentIndexAndNode> {\r\n        await this._ensureNodeSelector();\r\n        return this._nodeSelector.getNodeBySessionId(sessionId);\r\n    }\r\n\r\n    public async getFastestNode(): Promise<CurrentIndexAndNode> {\r\n        await this._ensureNodeSelector();\r\n        return this._nodeSelector.getFastestNode();\r\n    }\r\n\r\n    private async _ensureNodeSelector(): Promise<void> {\r\n        if (!this._disableTopologyUpdates) {\r\n            await this._waitForTopologyUpdate(this.firstTopologyUpdatePromise);\r\n        }\r\n\r\n        if (!this._nodeSelector) {\r\n            const topology = new Topology(this._topologyEtag, this.getTopologyNodes().slice());\r\n            this._nodeSelector = new NodeSelector(topology);\r\n        }\r\n    }\r\n\r\n    protected _onTopologyUpdatedInvoke(newTopology: Topology, reason: string) {\r\n        this._emitter.emit(\"topologyUpdated\", new TopologyUpdatedEventArgs(newTopology, reason));\r\n    }\r\n}\r\n\r\nclass BroadcastState<TResult> {\r\n    public command: RavenCommand<TResult>;\r\n    public index: number;\r\n    public node: ServerNode;\r\n    public abort: AbortController;\r\n}\r\n"]}