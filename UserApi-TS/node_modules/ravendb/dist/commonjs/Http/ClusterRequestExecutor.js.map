{"version":3,"file":"ClusterRequestExecutor.js","sourceRoot":"","sources":["../../../src/Http/ClusterRequestExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import { GetClusterTopologyCommand } from \"../ServerWide/Commands/GetClusterTopologyCommand.js\";\r\nimport { NodeSelector } from \"./NodeSelector.js\";\r\nimport { getLogger } from \"../Utility/LogUtil.js\";\r\nimport { RequestExecutor, IRequestExecutorOptions } from \"./RequestExecutor.js\";\r\nimport { throwError } from \"../Exceptions/index.js\";\r\nimport { ServerNode } from \"./ServerNode.js\";\r\nimport { Topology } from \"./Topology.js\";\r\nimport { GetTcpInfoCommand } from \"../ServerWide/Commands/GetTcpInfoCommand.js\";\r\nimport { IAuthOptions } from \"../Auth/AuthOptions.js\";\r\nimport { acquireSemaphore } from \"../Utility/SemaphoreUtil.js\";\r\nimport { DocumentConventions } from \"../Documents/Conventions/DocumentConventions.js\";\r\nimport { UpdateTopologyParameters } from \"./UpdateTopologyParameters.js\";\r\nimport { HEADERS } from \"../Constants.js\";\r\nimport { Semaphore } from \"../Utility/Semaphore.js\";\r\nimport { EOL } from \"../Utility/OsUtil.js\";\r\n\r\nconst log = getLogger({ module: \"ClusterRequestExecutor\" });\r\n\r\nexport class ClusterRequestExecutor extends RequestExecutor {\r\n\r\n    private _clusterTopologySemaphore = new Semaphore();\r\n\r\n    protected constructor(authOptions: IAuthOptions, conventions: DocumentConventions) {\r\n        super(null, authOptions, conventions);\r\n    }\r\n\r\n    public static createForSingleNodeWithConfigurationUpdates(\r\n        url: string, databaseName: string, opts: IRequestExecutorOptions)\r\n        : ClusterRequestExecutor {\r\n        return throwError(\"NotSupportedException\");\r\n    }\r\n\r\n    public static createForSingleNodeWithoutConfigurationUpdates(\r\n        url: string, databaseName: string, opts: IRequestExecutorOptions)\r\n        : ClusterRequestExecutor {\r\n        return throwError(\"NotSupportedException\");\r\n    }\r\n\r\n    public static createForSingleNode(\r\n        url: string, opts: IRequestExecutorOptions): ClusterRequestExecutor {\r\n        const initialUrls = [url];\r\n\r\n        const { authOptions, documentConventions } = opts;\r\n        const urls = this.validateUrls(initialUrls, authOptions);\r\n\r\n        const executor = new ClusterRequestExecutor(\r\n            authOptions, documentConventions || DocumentConventions.defaultConventions);\r\n\r\n        const serverNode = new ServerNode({ url: urls[0], serverRole: \"Member\" });\r\n\r\n        const topology = new Topology(-1, [serverNode]);\r\n\r\n        const nodeSelector = new NodeSelector(topology);\r\n\r\n        executor._nodeSelector = nodeSelector;\r\n        executor._topologyEtag = -2;\r\n        executor._disableClientConfigurationUpdates = true;\r\n        executor._disableTopologyUpdates = true;\r\n        executor._topologyHeaderName = HEADERS.CLUSTER_TOPOLOGY_ETAG;\r\n\r\n        executor.firstTopologyUpdatePromise = executor._singleTopologyUpdateAsync(urls, null);\r\n\r\n        return executor;\r\n    }\r\n\r\n    public static create(\r\n        initialUrls: string[],\r\n        database: string,\r\n        opts?: IRequestExecutorOptions): ClusterRequestExecutor;\r\n    public static create(\r\n        initialUrls: string[], opts?: IRequestExecutorOptions): ClusterRequestExecutor;\r\n    public static create(\r\n        initialUrls: string[],\r\n        databaseOrOpts?: string | IRequestExecutorOptions,\r\n        opts?: IRequestExecutorOptions): ClusterRequestExecutor {\r\n\r\n        if (typeof (databaseOrOpts) === \"string\") {\r\n            return throwError(\"NotSupportedException\");\r\n        }\r\n\r\n        const { authOptions, documentConventions } = (opts || databaseOrOpts) || {} as IRequestExecutorOptions;\r\n\r\n        const executor = new ClusterRequestExecutor(\r\n            authOptions,\r\n            documentConventions ?? DocumentConventions.defaultConventions);\r\n\r\n        executor._disableClientConfigurationUpdates = true;\r\n        executor.firstTopologyUpdatePromise = executor._firstTopologyUpdate(initialUrls, null);\r\n        executor._topologyHeaderName = HEADERS.CLUSTER_TOPOLOGY_ETAG;\r\n        return executor;\r\n    }\r\n\r\n    protected _performHealthCheck(serverNode: ServerNode, nodeIndex: number): Promise<void> {\r\n        return this.execute(new GetTcpInfoCommand(\"health-check\"), null, {\r\n            chosenNode: serverNode,\r\n            nodeIndex,\r\n            shouldRetry: false\r\n        });\r\n    }\r\n\r\n    public async updateTopology(parameters: UpdateTopologyParameters): Promise<boolean> {\r\n        if (this._disposed) {\r\n            return false;\r\n        }\r\n\r\n        if (this._disableTopologyUpdates) {\r\n            return false;\r\n        }\r\n\r\n        const acquiredSemContext = acquireSemaphore(this._clusterTopologySemaphore, { timeout: parameters.timeoutInMs });\r\n        try {\r\n            await acquiredSemContext.promise;\r\n\r\n            if (this._disposed) {\r\n                return false;\r\n            }\r\n\r\n            const command = new GetClusterTopologyCommand(parameters.debugTag);\r\n            await this.execute(command, null, {\r\n                chosenNode: parameters.node,\r\n                nodeIndex: null,\r\n                shouldRetry: false\r\n            });\r\n\r\n            const results = command.result;\r\n            const newTopology = ServerNode.createFrom(results.topology, results.etag);\r\n\r\n            this._updateNodeSelector(newTopology, parameters.forceUpdate);\r\n\r\n            this._onTopologyUpdatedInvoke(newTopology, parameters.debugTag);\r\n\r\n            return true;\r\n        } catch (reason) {\r\n            if (reason.name === \"TimeoutError\") {\r\n                return false;\r\n            }\r\n\r\n            throw reason;\r\n        } finally {\r\n            acquiredSemContext.dispose();\r\n        }\r\n    }\r\n\r\n    protected _updateClientConfigurationAsync(serverNode: ServerNode): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected _throwExceptions(details: string): void {\r\n        throwError(\"InvalidOperationException\",\r\n            \"Failed to retrieve cluster topology from all known nodes\" + EOL + details);\r\n    }\r\n\r\n    public dispose(): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this._clusterTopologySemaphore.take(() => {\r\n            // empty\r\n        });\r\n        super.dispose();\r\n    }\r\n}\r\n"]}