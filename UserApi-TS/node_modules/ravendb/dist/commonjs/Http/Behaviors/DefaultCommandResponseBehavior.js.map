{"version":3,"file":"DefaultCommandResponseBehavior.js","sourceRoot":"","sources":["../../../../src/Http/Behaviors/DefaultCommandResponseBehavior.ts"],"names":[],"mappings":";;;AAAA,6FAAuF;AAEvF,wDAAgE;AAGhE,MAAa,8BAA+B,SAAQ,oEAA+B;IACxE,MAAM,CAAU,QAAQ,GAAG,IAAI,8BAA8B,EAAE,CAAC;IAEvE;QACI,KAAK,EAAE,CAAC;QAER,QAAQ;IACZ,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAU,OAA8B,EAAE,QAAkB,EAAE,WAAmB;QACpG,IAAI,OAAO,CAAC,YAAY,KAAK,QAAQ,EAAE,CAAC;YACpC,MAAM,OAAO,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QACpD,CAAC;IACL,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAU,OAA8B,EAAE,QAAkB;QAC/E,QAAQ,OAAO,CAAC,YAAY,EAAE,CAAC;YAC3B,KAAK,OAAO,CAAC,CAAC,CAAC;gBACX,OAAO,IAAI,CAAC;YAChB,CAAC;YACD,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACZ,MAAM,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;gBAC3C,OAAO,IAAI,CAAC;YAChB,CAAC;YACD,OAAO,CAAC,CAAC,CAAC;gBACN,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBACvC,MAAM;YACV,CAAC;QACL,CAAC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,iBAAiB,CAAU,QAAsB,EAAE,IAAY;QAC3D,8BAAmB,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACnD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,6BAA6B,CAAU,OAA8B,EAAE,QAAkB,EAAE,IAAY;QACnG,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACpC,8BAAmB,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAEnD,OAAO,KAAK,CAAC;IACjB,CAAC;;AA1CL,wEA2CC","sourcesContent":["import { AbstractCommandResponseBehavior } from \"./AbstractCommandResponseBehavior.js\";\r\nimport { RavenCommand } from \"../RavenCommand.js\";\r\nimport { ExceptionDispatcher } from \"../../Exceptions/index.js\";\r\nimport { HttpResponse } from \"../../Primitives/Http.js\";\r\n\r\nexport class DefaultCommandResponseBehavior extends AbstractCommandResponseBehavior {\r\n    public static readonly INSTANCE = new DefaultCommandResponseBehavior();\r\n\r\n    private constructor() {\r\n        super();\r\n\r\n        // empty\r\n    }\r\n\r\n    async handleNotModified<TResult>(command: RavenCommand<TResult>, response: Response, cachedValue: string) {\r\n        if (command.responseType === \"Object\") {\r\n            await command.setResponseFromCache(cachedValue);\r\n        }\r\n    }\r\n\r\n    async tryHandleNotFound<TResult>(command: RavenCommand<TResult>, response: Response): Promise<boolean> {\r\n        switch (command.responseType) {\r\n            case \"Empty\": {\r\n                return true;\r\n            }\r\n            case \"Object\": {\r\n                await command.setResponseAsync(null, false)\r\n                return true;\r\n            }\r\n            default: {\r\n                command.setResponseRaw(response, null);\r\n                break;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    tryHandleConflict<TResult>(response: HttpResponse, body: string): boolean {\r\n        ExceptionDispatcher.throwException(response, body);\r\n        return false;\r\n    }\r\n\r\n    tryHandleUnsuccessfulResponse<TResult>(command: RavenCommand<TResult>, response: Response, body: string): boolean {\r\n        command.onResponseFailure(response);\r\n        ExceptionDispatcher.throwException(response, body);\r\n\r\n        return false;\r\n    }\r\n}\r\n"]}