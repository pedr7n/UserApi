{"version":3,"file":"ClusterTopology.js","sourceRoot":"","sources":["../../../src/Http/ClusterTopology.ts"],"names":[],"mappings":";;;AAAA,MAAa,eAAe;IAEjB,UAAU,CAAS;IACnB,UAAU,CAAS;IACnB,IAAI,CAAS;IAEb,OAAO,CAA4B;IACnC,WAAW,CAA4B;IACvC,QAAQ,CAA4B;IAEpC,QAAQ,CAAC,IAAY;QACxB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YACrC,OAAO,IAAI,CAAC;QAChB,CAAC;QACD,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;YAC7C,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAEM,aAAa,CAAC,GAAW;QAC5B,IAAI,CAAC,GAAG,EAAE,CAAC;YACP,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;YACpC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC;QAED,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC;YAC5C,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,WAAW;QACd,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5E,CAAC;CACJ;AA5CD,0CA4CC","sourcesContent":["export class ClusterTopology {\r\n\r\n    public lastNodeId: string;\r\n    public topologyId: string;\r\n    public etag: number;\r\n\r\n    public members: { [key: string]: string };\r\n    public promotables: { [key: string]: string };\r\n    public watchers: { [key: string]: string };\r\n\r\n    public contains(node: string) {\r\n        if (this.members && this.members[node]) {\r\n            return true;\r\n        }\r\n        if (this.promotables && this.promotables[node]) {\r\n            return true;\r\n        }\r\n\r\n        return this.watchers && this.watchers[node];\r\n    }\r\n\r\n    public getUrlFromTag(tag: string): string {\r\n        if (!tag) {\r\n            return null;\r\n        }\r\n\r\n        if (this.members && this.members[tag]) {\r\n            return this.members[tag];\r\n        }\r\n\r\n        if (this.promotables && this.promotables[tag]) {\r\n            return this.promotables[tag];\r\n        }\r\n\r\n        if (this.watchers && this.watchers[tag]) {\r\n            return this.watchers[tag];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getAllNodes(): { [tag: string]: string } {\r\n        return Object.assign({}, this.members, this.promotables, this.watchers);\r\n    }\r\n}\r\n"]}