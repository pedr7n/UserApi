import { HEADERS } from "../Constants.js";
import { throwError } from "../Exceptions/index.js";
export function getRequiredEtagHeader(response) {
    let etagHeader = response.headers.get(HEADERS.ETAG);
    if (!etagHeader) {
        throwError("InvalidOperationException", "Response did't had an ETag header");
    }
    if (Array.isArray(etagHeader)) {
        etagHeader = etagHeader[0];
    }
    return etagHeaderToChangeVector(etagHeader);
}
export function getEtagHeader(responseOrHeaders) {
    let etagHeaders;
    if ("headers" in responseOrHeaders) {
        etagHeaders = responseOrHeaders.headers.get(HEADERS.ETAG);
    }
    else if (HEADERS.ETAG in responseOrHeaders) {
        etagHeaders = responseOrHeaders[HEADERS.ETAG];
    }
    else {
        etagHeaders = null;
    }
    const singleHeader = Array.isArray(etagHeaders) ? etagHeaders[0] : (etagHeaders || null);
    return singleHeader ? etagHeaderToChangeVector(singleHeader) : null;
}
export function etagHeaderToChangeVector(responseHeader) {
    if (!responseHeader) {
        throwError("InvalidOperationException", "Response did't had an ETag header");
    }
    if (responseHeader.startsWith(`"`)) {
        return responseHeader.substring(1, responseHeader.length - 1);
    }
    return responseHeader;
}
export function getBooleanHeader(response, header) {
    const headers = response.headers;
    let headerVal = headers.get(header);
    if (headerVal && Array.isArray(headerVal)) {
        headerVal = (headerVal[0] || null);
    }
    return headerVal
        ? headerVal.toLowerCase() === "true"
        : null;
}
export function getHeaders() {
    return HeadersBuilder.create();
}
export function closeHttpResponse(response) {
    // node-fetch closes response for us - no action is required
}
export class HeadersBuilder {
    _result = {};
    static create() {
        return new HeadersBuilder();
    }
    typeAppJson() {
        this._result["content-type"] = "application/json";
        return this;
    }
    with(name, val) {
        this._result[name] = val;
        return this;
    }
    build() {
        return this._result;
    }
}
//# sourceMappingURL=HttpUtil.js.map