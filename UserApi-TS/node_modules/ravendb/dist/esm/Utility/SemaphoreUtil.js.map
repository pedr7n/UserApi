{"version":3,"file":"SemaphoreUtil.js","sourceRoot":"","sources":["../../../src/Utility/SemaphoreUtil.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAYlD,MAAM,oBAAoB;IAEd,SAAS,CAAU;IACnB,SAAS,GAAY,KAAK,CAAC;IAC3B,QAAQ,CAAgB;IAExB,IAAI,CAAY;IAChB,QAAQ,CAAgB;IAEhC,IAAW,OAAO;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAEO,WAAW;QACf,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;IACnD,CAAC;IAED,YAAmB,GAAc,EAAE,OAAiC;QAChE,MAAM,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;QAEvD,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,EAAE,CAAC;YACrC,MAAM,cAAc,GAAG,WAAW,CAAC,CAAC,CAAC,gBAAgB,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;YAC1E,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QACtE,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAEhB,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAEO,WAAW;QACf,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,MAAM,WAAW,GACb,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAClC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE;gBAEV,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;oBACvC,qDAAqD;oBACrD,4BAA4B;oBAC5B,GAAG,CAAC,KAAK,EAAE,CAAC;oBACZ,MAAM,CAAC,QAAQ,CACX,2BAA2B,EAC3B,8CAA8C,CAAC,CAAC,CAAC;oBACrD,OAAO;gBACX,CAAC;gBAED,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,OAAO,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEP,IAAI,aAAa,GAAG,WAAW,CAAC;QAEhC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC;gBACzB,WAAW;gBACX,IAAI,CAAC,QAAQ,CAAC,OAAO;aACxB,CAAC;iBACD,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QACxC,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC;IAClC,CAAC;IAEM,OAAO;QACV,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,OAAO;QACX,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAC3B,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAClB,OAAO;QACX,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAElB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAC3B,CAAC;CAEJ;AAED,MAAM,UAAU,gBAAgB,CAC5B,GAAc,EAAE,OAAiC;IAEjD,OAAO,IAAI,oBAAoB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAClD,CAAC","sourcesContent":["import { IDisposable } from \"../Types/Contracts.js\";\r\nimport { AsyncTimeout } from \"./PromiseUtil.js\";\r\nimport { getError } from \"../Exceptions/index.js\";\r\nimport { Semaphore } from \"./Semaphore.js\";\r\n\r\nexport interface AcquireSemaphoreOptions {\r\n    timeout?: number;\r\n    contextName?: string;\r\n}\r\n\r\nexport interface SemaphoreAcquisitionContext extends IDisposable {\r\n    promise: Promise<void>;\r\n}\r\n\r\nclass SemaphoreAcquisition implements SemaphoreAcquisitionContext {\r\n\r\n    private _acquired: boolean;\r\n    private _disposed: boolean = false;\r\n    private _timeout?: AsyncTimeout;\r\n\r\n    private _sem: Semaphore;\r\n    private _promise: Promise<void>;\r\n\r\n    public get promise() {\r\n        return this._promise;\r\n    }\r\n\r\n    private _isTimedOut() {\r\n        return this._timeout && this._timeout.timedOut;\r\n    }\r\n\r\n    public constructor(sem: Semaphore, semOpts?: AcquireSemaphoreOptions) {\r\n        const contextName = semOpts ? semOpts.contextName : \"\";\r\n\r\n        if (semOpts && semOpts.timeout != null) {\r\n            const timedOutOpName = contextName ? `WAIT_FOR_SEM_${contextName}` : null;\r\n            this._timeout = new AsyncTimeout(semOpts.timeout, timedOutOpName);\r\n        }\r\n\r\n        this._acquired = false;\r\n        this._sem = sem;\r\n\r\n        this._initialize();\r\n    }\r\n\r\n    private _initialize() {\r\n        const sem = this._sem;\r\n        const semAcquired =\r\n            new Promise<void>((resolve, reject) => {\r\n                sem.take(() => {\r\n\r\n                    if (this._disposed || this._isTimedOut()) {\r\n                        // when we finally got here after timeout or disposal\r\n                        // need to release it anyway\r\n                        sem.leave();\r\n                        reject(getError(\r\n                            \"InvalidOperationException\",\r\n                            \"Semaphore acquire timed out or was disposed.\"));\r\n                        return;\r\n                    }\r\n\r\n                    this._acquired = true;\r\n                    resolve();\r\n                });\r\n            });\r\n\r\n        let resultPromise = semAcquired;\r\n\r\n        if (this._timeout) {\r\n            resultPromise = Promise.race([\r\n                semAcquired,\r\n                this._timeout.promise\r\n            ])\r\n            .then(() => this._timeout.cancel());\r\n        }\r\n\r\n        this._promise = resultPromise;\r\n    }\r\n\r\n    public dispose() {\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n\r\n        this._disposed = true;\r\n\r\n        if (this._timeout) {\r\n            this._timeout.cancel();\r\n        }\r\n\r\n        if (!this._acquired) {\r\n            return;\r\n        }\r\n\r\n        this._sem.leave();\r\n\r\n        this._acquired = false;\r\n    }\r\n\r\n}\r\n\r\nexport function acquireSemaphore(\r\n    sem: Semaphore, semOpts?: AcquireSemaphoreOptions)\r\n    : SemaphoreAcquisitionContext {\r\n    return new SemaphoreAcquisition(sem, semOpts);\r\n}\r\n"]}