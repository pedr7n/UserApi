{"version":3,"file":"PromiseUtil.js","sourceRoot":"","sources":["../../../src/Utility/PromiseUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { getError } from \"../Exceptions/index.js\";\r\n\r\nexport interface IDefer<TResult> {\r\n    resolve: (value: TResult) => void;\r\n    reject: (error: any) => void;\r\n    isFulfilled: boolean;\r\n    promise: Promise<TResult>;\r\n}\r\n\r\nexport async function raceToResolution<TResult>(\r\n    promises: Promise<TResult>[],\r\n    onErrorCallback?: (err) => void): Promise<TResult> {\r\n\r\n    // There is no way to know which promise is rejected.\r\n    // So we map it to a new promise to return the index when it fails\r\n    const indexPromises = promises.map((p, index) =>\r\n        p.catch(() => {\r\n            throw index;\r\n        }));\r\n\r\n    try {\r\n        return await Promise.race(indexPromises);\r\n    } catch (index) {\r\n        // The promise has rejected, remove it from the list of promises and just continue the race.\r\n        const p = promises.splice(index, 1)[0];\r\n        p.catch(err => {\r\n            if (onErrorCallback) {\r\n                onErrorCallback(err);\r\n            }\r\n        });\r\n        return raceToResolution(promises);\r\n    }\r\n}\r\n\r\nexport function defer<T>(): IDefer<T> {\r\n    let resolve: (value: T) => void;\r\n    let reject: (error: any) => void;\r\n    let isFulfilled = false;\r\n    const promise = new Promise<T>(function (res, rej) {\r\n        resolve = v => {\r\n            isFulfilled = true;\r\n            res(v);\r\n        }\r\n        reject = rej;\r\n    });\r\n    return {\r\n        resolve,\r\n        reject,\r\n        promise,\r\n        isFulfilled\r\n    };\r\n}\r\n\r\nexport async function delay(ms: number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport async function wrapWithTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\r\n    let timeoutHandle: ReturnType<typeof setTimeout>;\r\n\r\n    const error = getError(\"TimeoutException\", `Timeout after ${ms} ms.`);\r\n\r\n    const timeoutPromise = new Promise<Error>((resolve) => {\r\n        timeoutHandle = setTimeout(() => {\r\n            resolve(error)\r\n        }, ms);\r\n    })\r\n\r\n    try {\r\n        const raceWinner = await Promise.race([promise, timeoutPromise]);\r\n        if (raceWinner === error) {\r\n            // timeout win\r\n            throw raceWinner;\r\n        } else {\r\n            // cancel existing timeout\r\n            clearTimeout(timeoutHandle);\r\n            return raceWinner as T;\r\n        }\r\n    } catch (e) {\r\n        clearTimeout(timeoutHandle);\r\n        throw e;\r\n    }\r\n\r\n}\r\n\r\nexport class AsyncTimeout {\r\n    public get promise() {\r\n        return this._promise;\r\n    }\r\n\r\n    public get timedOut() {\r\n        return this._timedOut;\r\n    }\r\n\r\n    private _timedOut: boolean = false;\r\n\r\n    private _timer: ReturnType<typeof setInterval>;\r\n\r\n    private _promise: Promise<void>;\r\n\r\n    private _op: string;\r\n\r\n    private _resolve: () => void;\r\n\r\n    private _reject: (err: Error) => void;\r\n\r\n    public constructor(ms: number, op?: string) {\r\n        this._op = op;\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n        });\r\n\r\n        this._timer = setTimeout(() => {\r\n            this._timedOut = true;\r\n            this._reject(this._getTimeoutError(ms));\r\n        }, ms);\r\n    }\r\n\r\n    private _getTimeoutError(ms) {\r\n        const opText = this._op ? `Operation '${this._op}'` : `Operation`;\r\n        const timeoutError = getError(\"TimeoutError\", `${opText} timed out after ${ms} ms.`);\r\n        return timeoutError;\r\n    }\r\n\r\n    public cancel() {\r\n        if (this._timer) {\r\n            clearTimeout(this._timer);\r\n        }\r\n\r\n        this._resolve();\r\n    }\r\n}\r\n\r\nexport type PromiseStatus = \"PENDING\" | \"RESOLVED\" | \"REJECTED\";\r\nexport class PromiseStatusTracker<T> {\r\n    private _status: PromiseStatus;\r\n    private _promise: Promise<T>;\r\n\r\n    public constructor(promise: Promise<T>) {\r\n        if (!promise) {\r\n            throw new Error(\"Promise to track cannot be null.\");\r\n        }\r\n\r\n        this._status = \"PENDING\";\r\n        this._promise = promise;\r\n\r\n        this._promise\r\n            .then(() => this._status = \"RESOLVED\")\r\n            .catch(() => this._status = \"REJECTED\");\r\n    }\r\n\r\n    public static track<T>(promise: Promise<T>): PromiseStatusTracker<T> {\r\n        return new PromiseStatusTracker(promise);\r\n    }\r\n\r\n    public isFullfilled() {\r\n        return this._status === \"REJECTED\" || this._status === \"RESOLVED\";\r\n    }\r\n\r\n    public isResolved() {\r\n        return this._status === \"RESOLVED\";\r\n    }\r\n\r\n    public isRejected() {\r\n        return this._status === \"REJECTED\";\r\n    }\r\n}\r\n"]}