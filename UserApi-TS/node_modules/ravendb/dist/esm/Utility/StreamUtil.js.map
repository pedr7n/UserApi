{"version":3,"file":"StreamUtil.js","sourceRoot":"","sources":["../../../src/Utility/StreamUtil.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAU,QAAQ,EAAE,MAAM,aAAa,CAAC;AACnE,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACtC,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAErC,MAAM,CAAC,MAAM,aAAa,GACtB,SAAS,CAAC,QAAQ,CAAC,CAAC;AACxB,MAAM,CAAC,MAAM,aAAa,GACtB,SAAS,CAAC,QAAQ,CAAQ,CAAC;AAG/B,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,MAAc;IAC7C,MAAM,MAAM,GAAiB,EAAE,CAAC;IAChC,MAAM;SACD,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAE3C,MAAM,aAAa,CAAC,MAAM,CAAC,CAAC;IAE5B,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACjC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,QAA2B;IACvD,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAEjD,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC9B,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAClD,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,CAAS;IACtC,MAAM,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACf,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClB,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,CAAS;IACtC,MAAM,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACf,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClB,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["import { finished, pipeline, Stream, Readable } from \"node:stream\";\r\nimport { promisify } from \"node:util\";\r\nimport { Buffer } from \"node:buffer\";\r\n\r\nexport const finishedAsync: (src: any) => Promise<any> =\r\n    promisify(finished);\r\nexport const pipelineAsync: (...src: Stream[]) => Promise<any> =\r\n    promisify(pipeline) as any;\r\n\r\n\r\nexport async function readToBuffer(stream: Stream): Promise<Buffer> {\r\n    const chunks: Uint8Array[] = [];\r\n    stream\r\n        .on(\"data\", data => chunks.push(data));\r\n\r\n    await finishedAsync(stream);\r\n\r\n    return Buffer.concat(chunks);\r\n}\r\n\r\nexport async function readToEnd(readable: Readable | Stream): Promise<string> {\r\n    const chunks = [];\r\n    readable.on(\"data\", chunk => chunks.push(chunk));\r\n\r\n    await finishedAsync(readable);\r\n    return Buffer.concat(chunks).toString(\"utf8\");\r\n}\r\n\r\nexport function bufferToReadable(b: Buffer) {\r\n    const result = new Readable();\r\n    result.push(b);\r\n    result.push(null);\r\n    return result;\r\n}\r\n\r\nexport function stringToReadable(s: string) {\r\n    const result = new Readable();\r\n    result.push(s);\r\n    result.push(null);\r\n    return result;\r\n}\r\n"]}