{"version":3,"file":"NodeSelector.js","sourceRoot":"","sources":["../../../src/Http/NodeSelector.ts"],"names":[],"mappings":"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","sourcesContent":["import { ArrayUtil } from \"../Utility/ArrayUtil.js\";\r\nimport { ServerNode } from \"./ServerNode.js\";\r\nimport CurrentIndexAndNode from \"../Http/CurrentIndexAndNode.js\";\r\nimport { Topology } from \"./Topology.js\";\r\nimport { Timer } from \"../Primitives/Timer.js\";\r\nimport { throwError } from \"../Exceptions/index.js\";\r\n\r\nclass NodeSelectorState {\r\n    public topology: Topology;\r\n    public failures: number[];\r\n    public fastestRecords: number[];\r\n    public fastest: number = 0;\r\n    public speedTestMode = 1;\r\n    public unlikelyEveryoneFaultedChoiceIndex: number;\r\n\r\n    constructor(topology: Topology, prevState?: NodeSelectorState) {\r\n        this.topology = topology;\r\n        this.failures = ArrayUtil.range(topology.nodes.length, () => 0);\r\n        this.fastestRecords = ArrayUtil.range(topology.nodes.length, () => 0);\r\n        this.unlikelyEveryoneFaultedChoiceIndex = 0;\r\n\r\n        if (prevState) {\r\n            if (prevState.fastest < 0 || prevState.fastest >= prevState.nodes.length) {\r\n                return;\r\n            }\r\n\r\n            const fastestNode = prevState.nodes[prevState.fastest];\r\n            let index = 0;\r\n            for (const node of topology.nodes) {\r\n                if (node.clusterTag === fastestNode.clusterTag) {\r\n                    this.fastest = index;\r\n                    break;\r\n                }\r\n                index++;\r\n            }\r\n\r\n            // fastest node was not found in the new topology. enable speed tests\r\n            if (index >= topology.nodes.length) {\r\n                this.speedTestMode = 2;\r\n            } else {\r\n                // we might be in the process of finding fastest node when we reorder the nodes, we don't want the tests to stop until we reach 10\r\n                // otherwise, we want to stop the tests and they may be scheduled later on relevant topology change\r\n\r\n                if (this.fastest < prevState.fastestRecords.length && prevState.fastestRecords[this.fastest] < 10) {\r\n                    this.speedTestMode = prevState.speedTestMode;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get nodes() {\r\n        return this.topology.nodes;\r\n    }\r\n\r\n    public getNodeWhenEveryoneMarkedAsFaulted(): CurrentIndexAndNode {\r\n        const index = this.unlikelyEveryoneFaultedChoiceIndex;\r\n        this.unlikelyEveryoneFaultedChoiceIndex = (this.unlikelyEveryoneFaultedChoiceIndex + 1) % this.nodes.length;\r\n\r\n\r\n        return new CurrentIndexAndNode(index, this.nodes[index]);\r\n    }\r\n}\r\n\r\nexport class NodeSelector {\r\n\r\n    private _updateFastestNodeTimer: Timer;\r\n    protected _state: NodeSelectorState;\r\n\r\n    constructor(topology: Topology) {\r\n        this._state = new NodeSelectorState(topology);\r\n    }\r\n\r\n    public getTopology(): Topology {\r\n        return this._state.topology;\r\n    }\r\n\r\n    public onFailedRequest(nodeIndex: number): void {\r\n        const state: NodeSelectorState = this._state;\r\n        if (nodeIndex < 0 || nodeIndex >= state.failures.length) {\r\n            return; // probably already changed\r\n        }\r\n\r\n        state.failures[nodeIndex]++;\r\n    }\r\n\r\n    public onUpdateTopology(topology: Topology, forceUpdate: boolean = false): boolean {\r\n        if (!topology) {\r\n            return false;\r\n        }\r\n\r\n        const stateEtag: number = this._state.topology.etag || 0;\r\n        const topologyEtag: number = topology.etag || 0;\r\n\r\n        if (stateEtag >= topologyEtag && !forceUpdate) {\r\n            return false;\r\n        }\r\n\r\n        this._state = new NodeSelectorState(topology, this._state);\r\n\r\n        return true;\r\n    }\r\n\r\n    public getNodeBySessionId(sessionId: number): CurrentIndexAndNode {\r\n        const state = this._state;\r\n\r\n        if (state.topology.nodes.length === 0) {\r\n            throwError(\"DatabaseDoesNotExistException\", \"There are no nodes in the topology at all\");\r\n        }\r\n\r\n        const index = Math.abs(sessionId % state.topology.nodes.length);\r\n\r\n        for (let i = index; i < state.failures.length; i++) {\r\n            if (state.failures[i] === 0\r\n                && state.nodes[i].serverRole === \"Member\") {\r\n                return new CurrentIndexAndNode(i, state.nodes[i]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < index; i++) {\r\n            if (state.failures[i] === 0\r\n                && state.nodes[i].serverRole === \"Member\") {\r\n                return new CurrentIndexAndNode(i, state.nodes[i]);\r\n            }\r\n        }\r\n\r\n        return this.getPreferredNode();\r\n    }\r\n\r\n    public getRequestedNode(nodeTag: string): CurrentIndexAndNode {\r\n        const state = this._state;\r\n        const serverNodes = state.nodes;\r\n\r\n        for (let i = 0; i < serverNodes.length; i++) {\r\n            if (serverNodes[i].clusterTag === nodeTag) {\r\n                return new CurrentIndexAndNode(i, serverNodes[i]);\r\n            }\r\n        }\r\n\r\n        if (!state.nodes.length) {\r\n            throwError(\"AllTopologyNodesDownException\", \"There are no nodes in the topology at all.\");\r\n        }\r\n\r\n        throwError(\"RequestedNodeUnavailableException\", \"Could not find requested node \" + nodeTag);\r\n    }\r\n\r\n    public nodeIsAvailable(index: number) {\r\n        return this._state.failures[index] === 0;\r\n    }\r\n\r\n    public getPreferredNode(): CurrentIndexAndNode {\r\n        const state = this._state;\r\n        return NodeSelector.getPreferredNodeInternal(state);\r\n    }\r\n\r\n    public static getPreferredNodeInternal(state: NodeSelectorState): CurrentIndexAndNode {\r\n        const stateFailures = state.failures;\r\n        const serverNodes = state.nodes;\r\n        const len = Math.min(serverNodes.length, stateFailures.length);\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            if (stateFailures[i] === 0 && \"Member\" === serverNodes[i].serverRole) {\r\n                return new CurrentIndexAndNode(i, serverNodes[i]);\r\n            }\r\n        }\r\n\r\n        return NodeSelector._unlikelyEveryoneFaultedChoice(state);\r\n    }\r\n\r\n    public getNodeSelectorFailures() {\r\n        return this._state.failures;\r\n    }\r\n\r\n    private static _unlikelyEveryoneFaultedChoice(state: NodeSelectorState): CurrentIndexAndNode {\r\n        // if there are all marked as failed, we'll choose the next (the one in CurrentNodeIndex)\r\n        // one so the user will get an error (or recover :-) );\r\n        if (state.nodes.length === 0) {\r\n            throwError(\"DatabaseDoesNotExistException\", \"There are no nodes in the topology at all.\");\r\n        }\r\n\r\n        const stateFailures = state.failures;\r\n        const serverNodes = state.nodes;\r\n\r\n        const len = Math.min(serverNodes.length, stateFailures.length);\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            if (stateFailures[i] === 0) {\r\n                return new CurrentIndexAndNode(i, serverNodes[i]);\r\n            }\r\n        }\r\n\r\n        return state.getNodeWhenEveryoneMarkedAsFaulted();\r\n    }\r\n\r\n    public getFastestNode(): CurrentIndexAndNode {\r\n        const state = this._state;\r\n        if (state.failures[state.fastest] === 0\r\n            && state.nodes[state.fastest].serverRole === \"Member\") {\r\n            return new CurrentIndexAndNode(state.fastest, state.nodes[state.fastest]);\r\n        }\r\n\r\n        // until new fastest node is selected, we'll just use the server preferred node or failover as usual\r\n\r\n        this.scheduleSpeedTest();\r\n        return this.getPreferredNode();\r\n    }\r\n\r\n    public restoreNodeIndex(node: ServerNode): void {\r\n        const state = this._state;\r\n        const nodeIndex = state.nodes.indexOf(node);\r\n        if (nodeIndex === -1) {\r\n            return;\r\n        }\r\n\r\n        state.failures[nodeIndex] = 0;\r\n    }\r\n\r\n    private _switchToSpeedTestPhase(): void {\r\n        const state = this._state;\r\n\r\n        if (state.speedTestMode === 0) {\r\n            state.speedTestMode = 1;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        state.fastestRecords.fill(0);\r\n        state.speedTestMode++;\r\n    }\r\n\r\n    public inSpeedTestPhase(): boolean {\r\n        return this._state.speedTestMode > 1;\r\n    }\r\n\r\n    public recordFastest(index: number, node: ServerNode): void {\r\n        const state = this._state;\r\n        const stateFastest = state.fastestRecords;\r\n\r\n        // the following two checks are to verify that things didn't move\r\n        // while we were computing the fastest node, we verify that the index\r\n        // of the fastest node and the identity of the node didn't change during\r\n        // our check\r\n        if (index < 0 || index >= stateFastest.length) {\r\n            return;\r\n        }\r\n\r\n        if (node !== state.nodes[index]) {\r\n            return;\r\n        }\r\n\r\n        if (++stateFastest[index] >= 10) {\r\n            this._selectFastest(state, index);\r\n            return;\r\n        }\r\n\r\n        if (++state.speedTestMode <= state.nodes.length * 10) {\r\n            return;\r\n        }\r\n\r\n        // too many concurrent speed tests are happening\r\n        const maxIndex: number = NodeSelector._findMaxIndex(state);\r\n        this._selectFastest(state, maxIndex);\r\n    }\r\n\r\n    private static _findMaxIndex(state: NodeSelectorState): number {\r\n        const stateFastest = state.fastestRecords;\r\n        let maxIndex = 0;\r\n        let maxValue = 0;\r\n\r\n        for (let i = 0; i < stateFastest.length; i++) {\r\n            if (maxValue >= stateFastest[i]) {\r\n                continue;\r\n            }\r\n\r\n            maxIndex = i;\r\n            maxValue = stateFastest[i];\r\n        }\r\n\r\n        return maxIndex;\r\n    }\r\n\r\n    private _selectFastest(state: NodeSelectorState, index: number): void {\r\n        state.fastest = index;\r\n        state.speedTestMode = 0;\r\n\r\n        this.scheduleSpeedTest();\r\n    }\r\n\r\n    public scheduleSpeedTest(): void {\r\n        if (this._updateFastestNodeTimer) {\r\n            return;\r\n        }\r\n        this._switchToSpeedTestPhase();\r\n\r\n        const minuteMs = 60_000;\r\n        this._updateFastestNodeTimer = new Timer(async () => this._switchToSpeedTestPhase(), minuteMs, minuteMs);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._updateFastestNodeTimer?.dispose();\r\n    }\r\n}\r\n"]}