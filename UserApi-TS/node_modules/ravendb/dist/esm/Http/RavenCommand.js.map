{"version":3,"file":"RavenCommand.js","sourceRoot":"","sources":["../../../src/Http/RavenCommand.ts"],"names":[],"mappings":"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","sourcesContent":["import { ServerNode } from \"./ServerNode.js\";\r\nimport { HttpCache } from \"./HttpCache.js\";\r\nimport { StatusCodes } from \"./StatusCode.js\";\r\nimport { Stream, Readable, PassThrough } from \"node:stream\";\r\nimport { HttpRequestParameters, HttpResponse } from \"../Primitives/Http.js\";\r\nimport { getLogger } from \"../Utility/LogUtil.js\";\r\nimport { throwError } from \"../Exceptions/index.js\";\r\nimport { IRavenObject } from \"../Types/IRavenObject.js\";\r\nimport { getEtagHeader, HeadersBuilder, closeHttpResponse } from \"../Utility/HttpUtil.js\";\r\nimport { TypeInfo } from \"../Mapping/ObjectMapper.js\";\r\nimport { JsonSerializer } from \"../Mapping/Json/Serializer.js\";\r\nimport { RavenCommandResponsePipeline } from \"./RavenCommandResponsePipeline.js\";\r\nimport { DocumentConventions } from \"../Documents/Conventions/DocumentConventions.js\";\r\nimport { ObjectTypeDescriptor } from \"../Types/index.js\";\r\nimport { ObjectUtil } from \"../Utility/ObjectUtil.js\";\r\nimport { Dispatcher } from \"undici-types\";\r\nimport { RequestInit } from \"undici\";\r\nimport { HEADERS } from \"../Constants.js\";\r\nimport { DefaultCommandResponseBehavior } from \"./Behaviors/DefaultCommandResponseBehavior.js\";\r\n\r\nconst log = getLogger({ module: \"RavenCommand\" });\r\n\r\nexport type RavenCommandResponse = string | Response;\r\n\r\nexport type RavenCommandResponseType = \"Empty\" | \"Object\" | \"Raw\";\r\n\r\nexport type ResponseDisposeHandling = \"Automatic\" | \"Manually\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface IRavenResponse extends IRavenObject {\r\n}\r\n\r\nexport abstract class RavenCommand<TResult> {\r\n\r\n    // protected final Class<TResult> resultClass;\r\n    public result: TResult;\r\n    public statusCode: number;\r\n    public failedNodes: Map<ServerNode, Error>;\r\n    protected _responseType: RavenCommandResponseType;\r\n    public timeout: number | undefined;\r\n    protected _canCache: boolean;\r\n    protected _canCacheAggressively: boolean;\r\n    protected _canReadFromCache: boolean = true;\r\n    protected _selectedNodeTag: string;\r\n    private _selectedShardNumber: number;\r\n    protected _numberOfAttempts: number;\r\n\r\n    public failoverTopologyEtag = -2;\r\n\r\n    protected _etag: string;\r\n\r\n    public get responseBehavior() {\r\n        return DefaultCommandResponseBehavior.INSTANCE;\r\n    }\r\n\r\n    public abstract get isReadRequest(): boolean;\r\n\r\n    public get responseType() {\r\n        return this._responseType;\r\n    }\r\n\r\n    public set etag(value: string) {\r\n        this._etag = value;\r\n    }\r\n\r\n    public get canCache(): boolean {\r\n        return this._canCache;\r\n    }\r\n\r\n    public get canCacheAggressively(): boolean {\r\n        return this._canCacheAggressively;\r\n    }\r\n\r\n    public get selectedNodeTag(): string {\r\n        return this._selectedNodeTag;\r\n    }\r\n\r\n    public set selectedNodeTag(nodeTag: string) {\r\n        this._selectedNodeTag = nodeTag;\r\n    }\r\n\r\n    get selectedShardNumber(): number {\r\n        return this._selectedShardNumber;\r\n    }\r\n\r\n    set selectedShardNumber(value: number) {\r\n        this._selectedShardNumber = value;\r\n    }\r\n\r\n    public get numberOfAttempts(): number {\r\n        return this._numberOfAttempts;\r\n    }\r\n\r\n    public set numberOfAttempts(value: number) {\r\n        this._numberOfAttempts = value;\r\n    }\r\n\r\n    constructor(copy?: RavenCommand<TResult>) {\r\n        if (copy instanceof RavenCommand) {\r\n            this._canCache = copy._canCache;\r\n            this._canReadFromCache = copy._canReadFromCache;\r\n            this._canCacheAggressively = copy._canCacheAggressively;\r\n            this._selectedNodeTag = copy._selectedNodeTag;\r\n            this._selectedShardNumber = copy.selectedShardNumber;\r\n            this._responseType = copy._responseType;\r\n        } else {\r\n            this._responseType = \"Object\";\r\n            this._canCache = true;\r\n            this._canCacheAggressively = true;\r\n        }\r\n    }\r\n\r\n    public abstract createRequest(node: ServerNode): HttpRequestParameters;\r\n\r\n    protected get _serializer(): JsonSerializer {\r\n        return JsonSerializer.getDefaultForCommandPayload();\r\n    }\r\n\r\n    public async setResponseFromCache(cachedValue: string): Promise<void> {\r\n        if (!cachedValue) {\r\n            this.result = null;\r\n            return;\r\n        }\r\n        const readable = new Readable();\r\n        readable.push(cachedValue);\r\n        readable.push(null);\r\n        await this.setResponseAsync(readable, true);\r\n    }\r\n\r\n    protected _defaultPipeline<T = TResult>(\r\n        bodyCallback?: (body: string) => void): RavenCommandResponsePipeline<T> {\r\n        return this._pipeline<T>()\r\n            .parseJsonSync()\r\n            .collectBody(bodyCallback)\r\n            .objectKeysTransform(ObjectUtil.camel);\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (this._responseType === \"Empty\" || this._responseType === \"Raw\") {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return throwError(\"NotSupportedException\",\r\n            this.constructor.name +\r\n            \" command must override the setResponseAsync()\" +\r\n            \" method which expects response with the following type: \" +\r\n            this._responseType);\r\n    }\r\n\r\n    public async send(agent: Dispatcher,\r\n        requestOptions: HttpRequestParameters): Promise<{ response: HttpResponse, bodyStream: Readable }> {\r\n\r\n        const { body, uri, fetcher, ...restOptions } = requestOptions;\r\n\r\n        log.info(`Send command ${this.constructor.name} to ${uri}${body ? \" with body \" + body : \"\"}.`);\r\n\r\n        if (requestOptions.dispatcher) { // support for fiddler\r\n            agent = requestOptions.dispatcher;\r\n        }\r\n\r\n        const bodyToUse = fetcher ? RavenCommand.maybeWrapBody(body) : body;\r\n\r\n        const optionsToUse = { body: bodyToUse, ...restOptions, dispatcher: agent } as RequestInit;\r\n\r\n        const passthrough = new PassThrough();\r\n        passthrough.pause();\r\n\r\n        const fetchFn = fetcher ?? fetch; // support for custom fetcher\r\n        const response = await fetchFn(uri, optionsToUse);\r\n\r\n        const effectiveStream: Stream =\r\n            response.body\r\n                ? Readable.fromWeb(response.body)\r\n                : new Stream();\r\n\r\n        effectiveStream\r\n            .pipe(passthrough);\r\n\r\n        return {\r\n            response,\r\n            bodyStream: passthrough\r\n        };\r\n    }\r\n\r\n    private static maybeWrapBody(body: any) {\r\n        if (body instanceof Readable) {\r\n            throw new Error(\"Requests using stream.Readable as payload are not yet supported!\");\r\n        }\r\n\r\n        return body;\r\n    }\r\n\r\n    public setResponseRaw(response: HttpResponse, body: string): void {\r\n        throwError(\"NotSupportedException\",\r\n            \"When _responseType is set to RAW then please override this method to handle the response.\");\r\n    }\r\n\r\n    protected _urlEncode(value: string | number | boolean): string {\r\n        return encodeURIComponent(value);\r\n    }\r\n\r\n    public static ensureIsNotNullOrEmpty(value: string, name: string): void {\r\n        if (!value) {\r\n            throwError(\"InvalidArgumentException\", name + \" cannot be null or empty\");\r\n        }\r\n    }\r\n\r\n    public isFailedWithNode(node: ServerNode): boolean {\r\n        return this.failedNodes\r\n            && !!this.failedNodes.get(node);\r\n    }\r\n\r\n    public async processResponse(\r\n        cache: HttpCache,\r\n        response: HttpResponse,\r\n        bodyStream: Readable,\r\n        url: string): Promise<ResponseDisposeHandling> {\r\n        if (!response) {\r\n            return \"Automatic\";\r\n        }\r\n\r\n        if (this._responseType === \"Empty\" ||\r\n            response.status === StatusCodes.NoContent) {\r\n            return \"Automatic\";\r\n        }\r\n\r\n        try {\r\n            if (this._responseType === \"Object\") {\r\n                const contentLength: number = Number.parseInt(response.headers.get(\"content-length\"), 10);\r\n                if (contentLength === 0) {\r\n                    closeHttpResponse(response);\r\n                    return \"Automatic\";\r\n                }\r\n\r\n                const bodyPromise = this.setResponseAsync(bodyStream, false);\r\n                bodyStream.resume();\r\n                const body = await bodyPromise;\r\n\r\n                if (cache) {\r\n                    this._cacheResponse(cache, url, response, body);\r\n                }\r\n\r\n                return \"Automatic\";\r\n            } else {\r\n                const bodyPromise = this.setResponseAsync(bodyStream, false);\r\n                bodyStream.resume();\r\n                await bodyPromise;\r\n            }\r\n\r\n            return \"Automatic\";\r\n        } catch (err) {\r\n            log.error(err, `Error processing command ${this.constructor.name} response.`);\r\n            throwError(\"RavenException\",\r\n                `Error processing command ${this.constructor.name} response: ${err.stack}`, err);\r\n        } finally {\r\n            closeHttpResponse(response);\r\n            // response.destroy();\r\n            // since we're calling same hosts and port a lot, we might not want to destroy sockets explicitly\r\n            // they're going to get back to Agent's pool and reused\r\n        }\r\n\r\n        return \"Automatic\";\r\n    }\r\n\r\n    protected _cacheResponse(cache: HttpCache, url: string, response: HttpResponse, responseJson: string): void {\r\n        if (!this.canCache) {\r\n            return;\r\n        }\r\n\r\n        const changeVector = getEtagHeader(response);\r\n        if (!changeVector) {\r\n            return;\r\n        }\r\n\r\n        cache.set(url, changeVector, responseJson);\r\n    }\r\n\r\n    protected _addChangeVectorIfNotNull(changeVector: string, req: HttpRequestParameters): void {\r\n        if (changeVector) {\r\n            req.headers[HEADERS.IF_MATCH] = `\"${changeVector}\"`;\r\n        }\r\n    }\r\n\r\n    protected _reviveResultTypes<TResponse extends object>(\r\n        raw: object,\r\n        conventions: DocumentConventions,\r\n        typeInfo?: TypeInfo,\r\n        knownTypes?: Map<string, ObjectTypeDescriptor>) {\r\n        return conventions.objectMapper.fromObjectLiteral<TResponse>(raw, typeInfo, knownTypes);\r\n    }\r\n\r\n    protected async _parseResponseDefaultAsync(bodyStream: Stream): Promise<string> {\r\n        let body: string = null;\r\n        this.result = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n        return body;\r\n    }\r\n\r\n    protected _headers() {\r\n        return HeadersBuilder.create();\r\n    }\r\n\r\n    protected _throwInvalidResponse(): void {\r\n        throwError(\"InvalidOperationException\", \"Response is invalid\");\r\n    }\r\n\r\n    protected static _throwInvalidResponse(cause: Error): void {\r\n        throwError(\"InvalidOperationException\", \"Response is invalid: \" + cause, (cause as any).message, cause);\r\n    }\r\n\r\n    public onResponseFailure(response: HttpResponse): void {\r\n        // empty\r\n    }\r\n\r\n    protected _pipeline<TPipelineResult>() {\r\n        return RavenCommandResponsePipeline.create<TPipelineResult>();\r\n    }\r\n}\r\n"]}