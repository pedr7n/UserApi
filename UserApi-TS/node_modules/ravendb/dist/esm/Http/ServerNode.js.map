{"version":3,"file":"ServerNode.js","sourceRoot":"","sources":["../../../src/Http/ServerNode.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRavenObject } from \"../Types/IRavenObject.js\";\r\nimport { UriUtility } from \"./UriUtility.js\";\r\nimport { ClusterTopology } from \"./ClusterTopology.js\";\r\nimport { Topology } from \"./Topology.js\";\r\n\r\nexport type ServerNodeRole = \"None\" | \"Promotable\" | \"Member\" | \"Rehab\";\r\n\r\nexport class ServerNode {\r\n    public database: string;\r\n    public url: string;\r\n    public clusterTag?: string = null;\r\n    public serverRole: ServerNodeRole;\r\n    public supportsAtomicClusterWrites: boolean;\r\n\r\n    private _lastServerVersionCheck: number = 0;\r\n    private _lastServerVersion: string;\r\n\r\n    public constructor(opts?: { database?: string, url?: string, clusterTag?: string, serverRole?: ServerNodeRole }) {\r\n        if (opts) {\r\n            this.database = opts.database;\r\n            this.url = opts.url;\r\n            this.clusterTag = opts.clusterTag;\r\n        }\r\n    }\r\n\r\n    public shouldUpdateServerVersion(): boolean {\r\n        if (!this._lastServerVersion || this._lastServerVersionCheck > 100) {\r\n            return true;\r\n        }\r\n\r\n        this._lastServerVersionCheck++;\r\n        return false;\r\n    }\r\n\r\n    public updateServerVersion(serverVersion: string): void {\r\n        this._lastServerVersion = serverVersion;\r\n        this._lastServerVersionCheck = 0;\r\n\r\n        this.supportsAtomicClusterWrites = false;\r\n\r\n        if (serverVersion) {\r\n            const tokens = serverVersion.split(\".\");\r\n            try {\r\n                const major = Number.parseInt(tokens[0], 10);\r\n                const minor = Number.parseInt(tokens[1], 10);\r\n\r\n                if (major > 5 || (major === 5 && minor >= 2)) {\r\n                    this.supportsAtomicClusterWrites = true;\r\n                }\r\n            } catch {\r\n                // ignore\r\n            }\r\n        }\r\n    }\r\n\r\n    public discardServerVersion(): void {\r\n        this._lastServerVersion = null;\r\n        this._lastServerVersionCheck = 0;\r\n    }\r\n\r\n    public static createFrom(topology: ClusterTopology, etag: number): Topology {\r\n        const newTopology = new Topology();\r\n        newTopology.etag = etag;\r\n        newTopology.nodes = [];\r\n        newTopology.promotables = [];\r\n\r\n        if (!topology) {\r\n            return newTopology;\r\n        }\r\n\r\n        for (const node of Object.keys(topology.members)) {\r\n            const member = topology.members[node];\r\n\r\n            newTopology.nodes.push(new ServerNode({\r\n                url: member,\r\n                clusterTag: node,\r\n                serverRole: \"Member\"\r\n            }));\r\n        }\r\n\r\n        for (const node of Object.keys(topology.watchers)) {\r\n            const watcher = topology.watchers[node];\r\n\r\n            newTopology.nodes.push(new ServerNode({\r\n                url: watcher,\r\n                clusterTag: node,\r\n                serverRole: \"Member\"\r\n            }));\r\n        }\r\n\r\n        return newTopology;\r\n    }\r\n\r\n    public get lastServerVersion() {\r\n        return this._lastServerVersion;\r\n    }\r\n\r\n    public get isSecure(): boolean {\r\n        return UriUtility.isSecure(this.url);\r\n    }\r\n\r\n    public fromJson(json: object): void {\r\n        const from: IRavenObject = json as IRavenObject;\r\n\r\n        this.url = from.Url;\r\n        this.database = from.Database || null;\r\n        this.clusterTag = from.ClusterTag || null;\r\n    }\r\n\r\n    public static fromJson(json: object): ServerNode {\r\n        const node = new ServerNode({\r\n            database: \"\",\r\n            url: \"\"\r\n        });\r\n\r\n        node.fromJson(json);\r\n        return node;\r\n    }\r\n}\r\n"]}