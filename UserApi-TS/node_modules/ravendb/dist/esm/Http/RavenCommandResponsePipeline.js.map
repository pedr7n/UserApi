{"version":3,"file":"RavenCommandResponsePipeline.js","sourceRoot":"","sources":["../../../src/Http/RavenCommandResponsePipeline.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAC3C,OAAO,EAEH,4BAA4B,EAC/B,MAAM,yDAAyD,CAAC;AACjE,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AACzD,OAAO,EAAU,SAAS,EAAsB,QAAQ,EAAE,MAAM,aAAa,CAAC;AAC9E,OAAO,EACH,mBAAmB,GACtB,MAAM,gDAAgD,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElD,OAAO,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;AAE5D,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AACrC,OAAO,EAAE,WAAW,EAAE,MAAM,oCAAoC,CAAC;AAWjE,MAAM,OAAO,4BAA4C,SAAQ,YAAY;IAExD,KAAK,CAAsC;IACpD,KAAK,GAAkB,IAAI,aAAa,EAAE,CAAC;IAEnD;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,EAAyC,CAAC;IAC3D,CAAC;IAEM,MAAM,CAAC,MAAM;QAChB,OAAO,IAAI,4BAA4B,EAAE,CAAC;IAC9C,CAAC;IAEM,aAAa;QAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC3B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,eAAe,CAAC,cAAiC,EAAE,UAAwC,EAAE;QAChG,MAAM,UAAU,GAAG,OAAO,EAAE,UAAU,IAAI,EAAE,CAAC;QAC7C,MAAM,oBAAoB,GAAG,IAAI,SAAS,CAAC;YACvC,UAAU,EAAE,IAAI;YAChB,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ;gBAC/B,MAAM,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC7C,IAAI,CAAC,KAAK,EAAE,CAAC;oBACT,OAAO,QAAQ,EAAE,CAAC;gBACtB,CAAC;gBAED,QAAQ,CAAC,IAAI,EAAE,EAAC,GAAG,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;YACtC,CAAC;SACJ,CAAC,CAAC;QAEH,UAAU,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAEzC,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG;YACpB,UAAU;SACb,CAAC;QAEF,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,WAAW,CAAC,QAAiC;QAChD,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,QAAQ,IAAI,IAAI,CAAC;QAC1C,OAAO,IAAI,CAAC;IAChB,CAAC;IAIM,mBAAmB,CACtB,eAA0E;QAC1E,IAAI,CAAC,KAAK,CAAC,sBAAsB,GAAG,CAAC,eAAe,IAAI,OAAO,eAAe,KAAK,UAAU;YACzF,CAAC,CAAC,EAAE,gBAAgB,EAAE,eAAsC,EAAE;YAC9D,CAAC,CAAC,eAAe,CAAC;QAEtB,OAAO,IAAI,CAAC;IAChB,CAAC;IAIM,MAAM,CAAC,GAAW,EAAE,GAAc,EAAE,QAAmC;QAC1E,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,GAAG,EAAE,CAAC;YACN,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtB,CAAC;QAED,OAAQ,QAAgB,CAAC,GAAG,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;IAEO,WAAW,CAAC,CAAkB;QAClC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;IACpC,CAAC;IAEO,QAAQ,CAAC,GAAW;QACxB,IAAI,CAAC,GAAG,EAAE,CAAC;YACP,UAAU,CAAC,cAAc,EAAE,6BAA6B,CAAC,CAAC;QAC9D,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,MAAM,OAAO,GAAa,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAsB,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,OAAO,CAAC,IAAI,CAAC,IAAI,WAAW,EAAE,CAAC,CAAC;YAEhC,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;gBAC7B,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAChD,CAAC;QACL,CAAC;aAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACvB,MAAM,WAAW,GAAG,EAAE,CAAC;YACvB,MAAM,sBAAsB,GAAG,IAAI,SAAS,CAAC;gBACzC,kBAAkB,EAAE,IAAI;gBACxB,SAAS,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ;oBAC1B,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACxB,QAAQ,EAAE,CAAC;gBACf,CAAC;gBACD,KAAK,CAAC,QAAQ;oBACV,IAAI,GAAG,GAAG,IAAI,CAAC;oBACf,IAAI,CAAC;wBACD,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACtD,CAAC;oBAAC,OAAM,GAAG,EAAC,CAAC;wBACT,QAAQ,CACJ,QAAQ,CAAC,sBAAsB,EAAE,2CAA2C,EAAE,GAAG,CAAC,CAAC,CAAC;wBACxF,OAAO;oBACX,CAAC;oBACD,IAAI,CAAC;wBACD,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;oBACpC,CAAC;oBAAC,OAAO,GAAG,EAAE,CAAC;wBACX,QAAQ,CACJ,QAAQ,CAAC,2BAA2B,EAAE,4BAA4B,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;oBACzF,CAAC;gBACL,CAAC;aACJ,CAAC,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACzC,CAAC;QAED,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC9B,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;YAC1F,OAAO,CAAC,IAAI,CAAC,IAAI,4BAA4B,CAAC,WAAW,CAAC,CAAC,CAAC;QAChE,CAAC;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,GAAW;QAC5B,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACnC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QAExB,MAAM,aAAa,GAAG,IAAI,mBAAmB,EAAiB,CAAC;QAC/D,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5B,MAAM,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC;QAE5C,MAAM,aAAa,CAAC,GAAG,OAAO,CAAC,CAAC;QAEhC,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC;QAEnC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACnC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACxB,IAAI,OAAO,IAAI,CAAC,WAAW,KAAK,UAAU,EAAE,CAAC;gBACzC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC3B,CAAC;QACL,CAAC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ","sourcesContent":["import { EventEmitter } from \"node:events\";\r\nimport {\r\n    ObjectKeyCaseTransformStreamOptions,\r\n    ObjectKeyCaseTransformStream\r\n} from \"../Mapping/Json/Streams/ObjectKeyCaseTransformStream.js\";\r\nimport { pipelineAsync } from \"../Utility/StreamUtil.js\";\r\nimport { Stream, Transform, Readable, Writable, pipeline } from \"node:stream\";\r\nimport {\r\n    CollectResultStream,\r\n} from \"../Mapping/Json/Streams/CollectResultStream.js\";\r\nimport { throwError, getError } from \"../Exceptions/index.js\";\r\nimport { TypeUtil } from \"../Utility/TypeUtil.js\";\r\nimport { ErrorFirstCallback } from \"../Types/Callbacks.js\";\r\nimport { StringBuilder } from \"../Utility/StringBuilder.js\";\r\nimport { FieldNameConversion } from \"../Utility/ObjectUtil.js\";\r\nimport { Buffer } from \"node:buffer\";\r\nimport { JsonlParser } from \"../ext/stream-json/jsonl/Parser.js\";\r\n\r\nexport interface RavenCommandResponsePipelineOptions {\r\n    collectBody?: boolean | ((body: string) => void);\r\n    jsonlAsync?: {\r\n        transforms: Transform[];\r\n    };\r\n    jsonSync?: boolean;\r\n    streamKeyCaseTransform?: ObjectKeyCaseTransformStreamOptions;\r\n}\r\n\r\nexport class RavenCommandResponsePipeline<TStreamResult> extends EventEmitter {\r\n\r\n    private readonly _opts: RavenCommandResponsePipelineOptions;\r\n    private _body: StringBuilder = new StringBuilder();\r\n\r\n    private constructor() {\r\n        super();\r\n        this._opts = {} as RavenCommandResponsePipelineOptions;\r\n    }\r\n\r\n    public static create<TResult>(): RavenCommandResponsePipeline<TResult> {\r\n        return new RavenCommandResponsePipeline();\r\n    }\r\n\r\n    public parseJsonSync() {\r\n        this._opts.jsonSync = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param type Type of object to extract from objects stream - use Raw to skip extraction.\r\n     * @param options\r\n     */\r\n    public parseJsonlAsync(valueExtractor: (obj: any) => any, options: { transforms?: Transform[] } = {}) {\r\n        const transforms = options?.transforms ?? [];\r\n        const extractItemTransform = new Transform({\r\n            objectMode: true,\r\n            transform(chunk, encoding, callback) {\r\n                const value = valueExtractor(chunk[\"value\"]);\r\n                if (!value) {\r\n                    return callback();\r\n                }\r\n\r\n                callback(null, {...chunk, value});\r\n            }\r\n        });\r\n\r\n        transforms.unshift(extractItemTransform);\r\n\r\n        this._opts.jsonlAsync = {\r\n            transforms\r\n        };\r\n\r\n        return this;\r\n    }\r\n\r\n    public collectBody(callback?: (body: string) => void) {\r\n        this._opts.collectBody = callback || true;\r\n        return this;\r\n    }\r\n\r\n    public objectKeysTransform(defaultTransform: FieldNameConversion): this;\r\n    public objectKeysTransform(opts: ObjectKeyCaseTransformStreamOptions): this;\r\n    public objectKeysTransform(\r\n        optsOrTransform: FieldNameConversion | ObjectKeyCaseTransformStreamOptions): this {\r\n        this._opts.streamKeyCaseTransform = !optsOrTransform || typeof optsOrTransform === \"function\"\r\n            ? { defaultTransform: optsOrTransform as FieldNameConversion }\r\n            : optsOrTransform;\r\n\r\n        return this;\r\n    }\r\n\r\n    public stream(src: Stream): Readable;\r\n    public stream(src: Stream, dst: Writable, callback: ErrorFirstCallback<void>): Stream;\r\n    public stream(src: Stream, dst?: Writable, callback?: ErrorFirstCallback<void>): Stream {\r\n        const streams = this._buildUp(src);\r\n        if (dst) {\r\n            streams.push(dst);\r\n        }\r\n\r\n        return (pipeline as any)(...streams, TypeUtil.NOOP);\r\n    }\r\n\r\n    private _appendBody(s: Buffer | string): void {\r\n        this._body.append(s.toString());\r\n    }\r\n\r\n    private _buildUp(src: Stream) {\r\n        if (!src) {\r\n            throwError(\"MappingError\", \"Body stream cannot be null.\");\r\n        }\r\n\r\n        const opts = this._opts;\r\n        const streams: Stream[] = [src];\r\n        if (opts.collectBody) {\r\n            src.on(\"data\", (chunk: Buffer | string) => this._appendBody(chunk));\r\n        }\r\n\r\n        if (opts.jsonlAsync) {\r\n            streams.push(new JsonlParser());\r\n\r\n            if (opts.jsonlAsync.transforms) {\r\n                streams.push(...opts.jsonlAsync.transforms);\r\n            }\r\n        } else if (opts.jsonSync) {\r\n            const bytesChunks = [];\r\n            const parseJsonSyncTransform = new Transform({\r\n                readableObjectMode: true,\r\n                transform(chunk, enc, callback) {\r\n                    bytesChunks.push(chunk);\r\n                    callback();\r\n                },\r\n                flush(callback) {\r\n                    let str = null;\r\n                    try {\r\n                        str = Buffer.concat(bytesChunks).toString(\"utf8\");\r\n                    } catch(err){\r\n                        callback(\r\n                            getError(\"InvalidDataException\", `Failed to concat / decode server response`, err));\r\n                        return;\r\n                    }\r\n                    try {\r\n                        callback(null, JSON.parse(str));\r\n                    } catch (err) {\r\n                        callback(\r\n                            getError(\"InvalidOperationException\", `Error parsing response: '${str}'.`, err));\r\n                    }\r\n                }\r\n            });\r\n            streams.push(parseJsonSyncTransform);\r\n        }\r\n\r\n        if (opts.streamKeyCaseTransform) {\r\n            const keyCaseOpts = Object.assign({}, opts.streamKeyCaseTransform, { handlePath: false });\r\n            streams.push(new ObjectKeyCaseTransformStream(keyCaseOpts));\r\n        }\r\n\r\n        return streams;\r\n    }\r\n\r\n    public async process(src: Stream): Promise<TStreamResult> {\r\n        const streams = this._buildUp(src);\r\n        const opts = this._opts;\r\n\r\n        const collectResult = new CollectResultStream<TStreamResult>();\r\n        streams.push(collectResult);\r\n        const resultPromise = collectResult.promise;\r\n\r\n        await pipelineAsync(...streams);\r\n\r\n        const result = await resultPromise;\r\n\r\n        if (opts.collectBody) {\r\n            const body = this._body.toString();\r\n            this.emit(\"body\", body);\r\n            if (typeof opts.collectBody === \"function\") {\r\n                opts.collectBody(body);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}