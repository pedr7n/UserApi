{"version":3,"file":"DatabaseRecordBuilder.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/DatabaseRecordBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { IDatabaseRecordBuilderInitializer } from \"./Builder/IDatabaseRecordBuilderInitializer.js\";\r\nimport { IDatabaseRecordBuilder } from \"./Builder/IDatabaseRecordBuilder.js\";\r\nimport { IEtlConfigurationBuilder } from \"./Builder/IEtlConfigurationBuilder.js\";\r\nimport { IConnectionStringConfigurationBuilder } from \"./Builder/IConnectionStringConfigurationBuilder.js\";\r\nimport { IBackupConfigurationBuilder } from \"./Builder/IBackupConfigurationBuilder.js\";\r\nimport { IIntegrationConfigurationBuilder } from \"./Builder/IIntegrationConfigurationBuilder.js\";\r\nimport { IReplicationConfigurationBuilder } from \"./Builder/IReplicationConfigurationBuilder.js\";\r\nimport { IShardedDatabaseRecordBuilder } from \"./Builder/IShardedDatabaseRecordBuilder.js\";\r\nimport { IShardedTopologyConfigurationBuilder } from \"./Builder/IShardedTopologyConfigurationBuilder.js\";\r\nimport { DatabaseTopology } from \"./index.js\";\r\nimport { DatabaseLockMode, DatabaseRecord } from \"../index.js\";\r\nimport { PeriodicBackupConfiguration } from \"../../Documents/Operations/Backups/PeriodicBackupConfiguration.js\";\r\nimport {\r\n    ElasticSearchConnectionString,\r\n    OlapConnectionString, QueueConnectionString,\r\n    RavenConnectionString,\r\n    SqlConnectionString\r\n} from \"../../Documents/Operations/Etl/ConnectionString.js\";\r\nimport { RavenEtlConfiguration } from \"../../Documents/Operations/Etl/RavenEtlConfiguration.js\";\r\nimport { SqlEtlConfiguration } from \"../../Documents/Operations/Etl/Sql/SqlEtlConfiguration.js\";\r\nimport {\r\n    ElasticSearchEtlConfiguration\r\n} from \"../../Documents/Operations/Etl/ElasticSearch/ElasticSearchEtlConfiguration.js\";\r\nimport { OlapEtlConfiguration } from \"../../Documents/Operations/Etl/Olap/OlapEtlConfiguration.js\";\r\nimport { QueueEtlConfiguration } from \"../../Documents/Operations/Etl/Queue/QueueEtlConfiguration.js\";\r\nimport { PostgreSqlConfiguration } from \"./Integrations/PostgreSql/PostgreSqlConfiguration.js\";\r\nimport { ExternalReplication } from \"../../Documents/Replication/ExternalReplication.js\";\r\nimport { PullReplicationAsSink } from \"../../Documents/Operations/Replication/PullReplicationAsSink.js\";\r\nimport { PullReplicationDefinition } from \"../../Documents/Operations/Replication/PullReplicationDefinition.js\";\r\nimport { DocumentsCompressionConfiguration } from \"../DocumentsCompressionConfiguration.js\";\r\nimport { SorterDefinition } from \"../../Documents/Queries/Sorting/SorterDefinition.js\";\r\nimport { AnalyzerDefinition } from \"../../Documents/Indexes/Analysis/AnalyzerDefinition.js\";\r\nimport { IndexDefinition } from \"../../Documents/Indexes/IndexDefinition.js\";\r\nimport { RevisionsConfiguration } from \"../../Documents/Operations/RevisionsConfiguration.js\";\r\nimport { ClientConfiguration } from \"../../Documents/Operations/Configuration/ClientConfiguration.js\";\r\nimport { StudioConfiguration } from \"../../Documents/Operations/Configuration/StudioConfiguration.js\";\r\nimport { RefreshConfiguration } from \"../../Documents/Operations/Refresh/RefreshConfiguration.js\";\r\nimport { ExpirationConfiguration } from \"../../Documents/Operations/Expiration/ExpirationConfiguration.js\";\r\nimport { TimeSeriesConfiguration } from \"../../Documents/Operations/TimeSeries/TimeSeriesConfiguration.js\";\r\nimport { OrchestratorTopology } from \"../OrchestratorTopology.js\";\r\nimport { IOrchestratorTopologyConfigurationBuilder } from \"./Builder/IOrchestratorTopologyConfigurationBuilder.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { ShardingConfiguration } from \"../Sharding/ShardingConfiguration.js\";\r\nimport { IShardTopologyConfigurationBuilder } from \"./Builder/IShardTopologyConfigurationBuilder.js\";\r\nimport { ITopologyConfigurationBuilder } from \"./Builder/ITopologyConfigurationBuilder.js\";\r\n\r\nexport class DatabaseRecordBuilder implements IDatabaseRecordBuilderInitializer,\r\n    IDatabaseRecordBuilder,\r\n    IEtlConfigurationBuilder,\r\n    IConnectionStringConfigurationBuilder,\r\n    IBackupConfigurationBuilder,\r\n    IIntegrationConfigurationBuilder,\r\n    IReplicationConfigurationBuilder,\r\n    IShardedDatabaseRecordBuilder,\r\n    IShardedTopologyConfigurationBuilder {\r\n\r\n    public static create(): IDatabaseRecordBuilderInitializer {\r\n        return new DatabaseRecordBuilder();\r\n    }\r\n\r\n    private _shardTopology: DatabaseTopology;\r\n    private readonly _databaseRecord: DatabaseRecord;\r\n\r\n\r\n    constructor() {\r\n        this._databaseRecord = {\r\n            databaseName: undefined\r\n        };\r\n    }\r\n\r\n    addPeriodicBackup(configuration: PeriodicBackupConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.periodicBackups ??= [];\r\n        this._databaseRecord.periodicBackups.push(configuration);\r\n        return this;\r\n    }\r\n\r\n    addRavenConnectionString(connectionString: RavenConnectionString): this {\r\n        if (!connectionString) {\r\n            throw new Error(\"ConnectionString cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.ravenConnectionStrings ??= {};\r\n        this._databaseRecord.ravenConnectionStrings[connectionString.name] = connectionString;\r\n        return this;\r\n    }\r\n\r\n    addSqlConnectionString(connectionString: SqlConnectionString): this {\r\n        if (!connectionString) {\r\n            throw new Error(\"ConnectionString cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.sqlConnectionStrings ??= {};\r\n        this._databaseRecord.sqlConnectionStrings[connectionString.name] = connectionString;\r\n        return this;\r\n    }\r\n\r\n    addOlapConnectionString(connectionString: OlapConnectionString): this {\r\n        if (!connectionString) {\r\n            throw new Error(\"ConnectionString cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.olapConnectionStrings ??= {};\r\n        this._databaseRecord.olapConnectionStrings[connectionString.name] = connectionString;\r\n        return this;\r\n    }\r\n\r\n    addElasticSearchConnectionString(connectionString: ElasticSearchConnectionString): this {\r\n        if (!connectionString) {\r\n            throw new Error(\"ConnectionString cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.elasticSearchConnectionStrings = {};\r\n        this._databaseRecord.elasticSearchConnectionStrings[connectionString.name] = connectionString;\r\n        return this;\r\n    }\r\n\r\n    addQueueConnectionString(connectionString: QueueConnectionString): this {\r\n        if (!connectionString) {\r\n            throw new Error(\"ConnectionString cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.queueConnectionStrings ??= {};\r\n        this._databaseRecord.queueConnectionStrings[connectionString.name] = connectionString;\r\n        return this;\r\n    }\r\n\r\n    regular(databaseName: string): IDatabaseRecordBuilder {\r\n        this._withName(databaseName);\r\n        return this;\r\n    }\r\n\r\n    sharded(databaseName: string, builder: (builder: IShardedTopologyConfigurationBuilder) => void): this {\r\n        if (!builder) {\r\n            throw new Error(\"Builder cannot be null\");\r\n        }\r\n\r\n        this._withName(databaseName);\r\n\r\n        this._databaseRecord.sharding = {} as ShardingConfiguration;\r\n\r\n        builder(this);\r\n\r\n        if (!this._databaseRecord.sharding.shards || Object.keys(this._databaseRecord.sharding.shards).length === 0) {\r\n            throw new Error(\"At least one shard is required. Use addShard to add a shard to the topology\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    addRavenEtl(configuration: RavenEtlConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.ravenEtls ??= [];\r\n        this._databaseRecord.ravenEtls.push(configuration);\r\n\r\n        return this;\r\n    }\r\n\r\n    addSqlEtl(configuration: SqlEtlConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.sqlEtls ??= [];\r\n        this._databaseRecord.sqlEtls.push(configuration);\r\n\r\n        return this;\r\n    }\r\n\r\n    addElasticSearchEtl(configuration: ElasticSearchEtlConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.elasticSearchEtls ??= [];\r\n        this._databaseRecord.elasticSearchEtls.push(configuration);\r\n\r\n        return this;\r\n    }\r\n\r\n    addOlapEtl(configuration: OlapEtlConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.olapEtls ??= [];\r\n        this._databaseRecord.olapEtls.push(configuration);\r\n\r\n        return this;\r\n    }\r\n\r\n    addQueueEtl(configuration: QueueEtlConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.queueEtls ??= [];\r\n        this._databaseRecord.queueEtls.push(configuration);\r\n\r\n        return this;\r\n    }\r\n\r\n    configurePostgreSql(configuration: PostgreSqlConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.integrations ??= {\r\n            postgreSql: null\r\n        }\r\n        this._databaseRecord.integrations.postgreSql = configuration;\r\n\r\n        return this;\r\n    }\r\n\r\n    addExternalReplication(configuration: ExternalReplication): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.externalReplications ??= [];\r\n        this._databaseRecord.externalReplications.push(configuration);\r\n\r\n        return this;\r\n    }\r\n\r\n    addPullReplicationSink(configuration: PullReplicationAsSink): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.sinkPullReplications ??= [];\r\n        this._databaseRecord.sinkPullReplications.push(configuration);\r\n        return this;\r\n    }\r\n\r\n    addPullReplicationHub(configuration: PullReplicationDefinition): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.hubPullReplications ??= [];\r\n        this._databaseRecord.hubPullReplications.push(configuration);\r\n\r\n        return this;\r\n    }\r\n\r\n    encrypted(): this {\r\n        this._databaseRecord.encrypted = true;\r\n        return this;\r\n    }\r\n\r\n    withLockMode(lockMode: DatabaseLockMode): this {\r\n        this._databaseRecord.lockMode = lockMode;\r\n        return this;\r\n    }\r\n\r\n    configureDocumentsCompression(configuration: DocumentsCompressionConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.documentsCompression = configuration;\r\n        return this;\r\n    }\r\n\r\n    withSorters(...sorterDefinitions: SorterDefinition[]): this {\r\n        if (!sorterDefinitions || sorterDefinitions.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        this._databaseRecord.sorters ??= {};\r\n\r\n        for (const sorterDefinition of sorterDefinitions) {\r\n            this._databaseRecord.sorters[sorterDefinition.name] = sorterDefinition;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    withAnalyzers(...analyzerDefinitions: AnalyzerDefinition[]): this {\r\n        if (!analyzerDefinitions || analyzerDefinitions.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        this._databaseRecord.analyzers ??= {};\r\n\r\n        for (const analyzerDefinition of analyzerDefinitions) {\r\n            this._databaseRecord.analyzers[analyzerDefinition.name] = analyzerDefinition;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    withIndexes(...indexDefinitions: IndexDefinition[]): this {\r\n        if (!indexDefinitions || indexDefinitions.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        this._databaseRecord.indexes ??= {};\r\n\r\n        for (const indexDefinition of indexDefinitions) {\r\n            this._databaseRecord.indexes[indexDefinition.name] = indexDefinition;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    withSettings(settings: Record<string, string>): this {\r\n        if (!settings) {\r\n            throw new Error(\"Settings cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.settings = settings;\r\n        return this;\r\n    }\r\n\r\n    configureRevisions(configuration: RevisionsConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n        this._databaseRecord.revisions = configuration;\r\n        return this;\r\n    }\r\n\r\n    withEtls(builder: (builder: IEtlConfigurationBuilder) => void): this {\r\n        if (!builder) {\r\n            throw new Error(\"Builder cannot be null\");\r\n        }\r\n\r\n        builder(this);\r\n        return this;\r\n    }\r\n\r\n    withBackups(builder: (builder: IBackupConfigurationBuilder) => void): this {\r\n        if (!builder) {\r\n            throw new Error(\"Builder cannot be null\");\r\n        }\r\n        builder(this);\r\n        return this;\r\n    }\r\n\r\n    withReplication(builder: (builder: IReplicationConfigurationBuilder) => void): this {\r\n        if (!builder) {\r\n            throw new Error(\"Builder cannot be null\");\r\n        }\r\n        builder(this);\r\n        return this;\r\n    }\r\n\r\n    withConnectionStrings(builder: (builder: IConnectionStringConfigurationBuilder) => void): this {\r\n        if (!builder) {\r\n            throw new Error(\"Builder cannot be null\");\r\n        }\r\n\r\n        builder(this);\r\n        return this;\r\n    }\r\n\r\n    configureClient(configuration: ClientConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n        this._databaseRecord.client = configuration;\r\n        return this;\r\n    }\r\n\r\n    configureStudio(configuration: StudioConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n        this._databaseRecord.studio = configuration;\r\n        return this;\r\n    }\r\n\r\n    configureRefresh(configuration: RefreshConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n        this._databaseRecord.refresh = configuration;\r\n        return this;\r\n    }\r\n\r\n    configureExpiration(configuration: ExpirationConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.expiration = configuration;\r\n        return this;\r\n    }\r\n\r\n    configureTimeSeries(configuration: TimeSeriesConfiguration): this {\r\n        if (!configuration) {\r\n            throw new Error(\"Configuration cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.timeSeries = configuration;\r\n        return this;\r\n    }\r\n\r\n    withIntegrations(builder: (builder: IIntegrationConfigurationBuilder) => void): this {\r\n        if (!builder) {\r\n            throw new Error(\"Builder cannot be null\");\r\n        }\r\n\r\n        builder(this);\r\n        return this;\r\n    }\r\n\r\n    toDatabaseRecord(): DatabaseRecord {\r\n        return this._databaseRecord;\r\n    }\r\n\r\n    disabled(): this {\r\n        this._databaseRecord.disabled = true;\r\n        return this;\r\n    }\r\n\r\n    orchestrator(builder: (builder: IOrchestratorTopologyConfigurationBuilder) => void): this\r\n    orchestrator(topology: OrchestratorTopology): this\r\n    orchestrator(topologyOrBuilder: OrchestratorTopology | ((builder: IOrchestratorTopologyConfigurationBuilder) => void)): this {\r\n        if (TypeUtil.isFunction(topologyOrBuilder)) {\r\n            return this._orchestratorUsingBuilder(topologyOrBuilder);\r\n        }\r\n        return this._orchestratorUsingTopology(topologyOrBuilder);\r\n    }\r\n\r\n    private _orchestratorUsingTopology(topology: OrchestratorTopology): this {\r\n        if (!topology) {\r\n            throw new Error(\"Topology cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.sharding.orchestrator ??= {\r\n            topology: null\r\n        };\r\n\r\n        this._databaseRecord.sharding.orchestrator.topology = topology;\r\n\r\n        return this;\r\n    }\r\n\r\n    private _orchestratorUsingBuilder(builder: (builder: IOrchestratorTopologyConfigurationBuilder) => void): this {\r\n        if (!builder) {\r\n            throw new Error(\"Builder cannot be null\");\r\n        }\r\n\r\n        builder(new this.orchestratorTopologyConfigurationBuilder(this));\r\n\r\n        return this;\r\n    }\r\n\r\n    private orchestratorTopologyConfigurationBuilder = class OrchestratorTopologyConfigurationBuilder implements IOrchestratorTopologyConfigurationBuilder {\r\n\r\n        private readonly _builder: DatabaseRecordBuilder;\r\n\r\n        constructor(builder: DatabaseRecordBuilder) {\r\n            this._builder = builder;\r\n        }\r\n\r\n        addNode(nodeTag: string): IOrchestratorTopologyConfigurationBuilder {\r\n            if (!nodeTag) {\r\n                throw new Error(\"NodeTag cannot be null\");\r\n            }\r\n\r\n            this._builder._databaseRecord.sharding.orchestrator ??= {\r\n                topology: null\r\n            };\r\n            this._builder._databaseRecord.sharding.orchestrator.topology ??= {\r\n                members: [],\r\n                promotables: [],\r\n                rehabs: []\r\n            } as OrchestratorTopology;\r\n\r\n            this._builder._databaseRecord.sharding.orchestrator.topology.members.push(nodeTag);\r\n\r\n            return this;\r\n\r\n        }\r\n\r\n        enableDynamicNodesDistribution(): IOrchestratorTopologyConfigurationBuilder {\r\n            this._builder._databaseRecord.sharding.orchestrator ??= {\r\n                topology: null\r\n            };\r\n\r\n            this._builder._databaseRecord.sharding.orchestrator.topology ??= {\r\n                members: [],\r\n                rehabs: [],\r\n                promotables: []\r\n            } as OrchestratorTopology;\r\n\r\n            this._builder._databaseRecord.sharding.orchestrator.topology.dynamicNodesDistribution = true;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    addShard(shardNumber: number, builder: (builder: IShardTopologyConfigurationBuilder) => void): this;\r\n    addShard(shardNumber: number, topology: DatabaseTopology): this\r\n    addShard(shardNumber: number, topologyOrBuilder: DatabaseTopology | ((builder: IShardTopologyConfigurationBuilder) => void)): this {\r\n        if (TypeUtil.isFunction(topologyOrBuilder)) {\r\n            return this._addShardUsingBuilder(shardNumber, topologyOrBuilder);\r\n        }\r\n\r\n        return this._addShardUsingTopology(shardNumber, topologyOrBuilder);\r\n    }\r\n\r\n    private _addShardUsingTopology(shardNumber: number, topology: DatabaseTopology): this {\r\n        if (!topology) {\r\n            throw new Error(\"Topology cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.sharding.shards ??= { };\r\n\r\n        this._databaseRecord.sharding.shards[shardNumber] = topology;\r\n        return this;\r\n    }\r\n\r\n    private _addShardUsingBuilder(shardNumber: number, builder: (builder: IShardTopologyConfigurationBuilder) => void): this {\r\n        if (!builder) {\r\n            throw new Error(\"Builder cannot be null\");\r\n        }\r\n\r\n        this._shardTopology = {\r\n            members: [],\r\n            rehabs: [],\r\n            promotables: []\r\n        } as DatabaseTopology;\r\n        try {\r\n            builder(new this._shardTopologyConfigurationBuilder(this));\r\n\r\n            this._databaseRecord.sharding.shards ??= {};\r\n\r\n            this._databaseRecord.sharding.shards[shardNumber] = this._shardTopology;\r\n        } finally {\r\n            this._shardTopology = null;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _shardTopologyConfigurationBuilder = class ShardTopologyConfigurationBuilder implements IShardTopologyConfigurationBuilder {\r\n        private readonly _builder: DatabaseRecordBuilder;\r\n\r\n        constructor(builder: DatabaseRecordBuilder) {\r\n            this._builder = builder;\r\n        }\r\n\r\n        addNode(nodeTag: string): IShardTopologyConfigurationBuilder {\r\n            if (!nodeTag) {\r\n                throw new Error(\"NodeTag cannot be null\");\r\n            }\r\n\r\n            this._builder._shardTopology.members.push(nodeTag);\r\n            return this;\r\n        }\r\n\r\n        enableDynamicNodesDistribution(): IShardTopologyConfigurationBuilder {\r\n            this._builder._shardTopology.dynamicNodesDistribution = true;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    withTopology(topology: DatabaseTopology): this\r\n    withTopology(builder: (builder: ITopologyConfigurationBuilder) => void): this;\r\n    withTopology(builderOrTopology: DatabaseTopology | ((builder: ITopologyConfigurationBuilder) => void)): this {\r\n        if (TypeUtil.isFunction(builderOrTopology)) {\r\n            return this._withTopologyUsingBuilder(builderOrTopology);\r\n        }\r\n        return this._withTopologyUsingTopology(builderOrTopology);\r\n    }\r\n\r\n    private _withTopologyUsingTopology(topology: DatabaseTopology): this {\r\n        if (!topology) {\r\n            throw new Error(\"Topology cannot be null\");\r\n        }\r\n\r\n        this._databaseRecord.topology = topology;\r\n        return this;\r\n    }\r\n\r\n    private _withTopologyUsingBuilder(builder: (builder: ITopologyConfigurationBuilder) => void): this {\r\n        if (!builder) {\r\n            throw new Error(\"Builder cannot be null\");\r\n        }\r\n\r\n        builder(new this._topologyConfigurationBuilder(this));\r\n        return this;\r\n    }\r\n\r\n    private _topologyConfigurationBuilder = class TopologyConfigurationBuilder implements ITopologyConfigurationBuilder {\r\n        private readonly _builder: DatabaseRecordBuilder;\r\n\r\n        constructor(builder: DatabaseRecordBuilder) {\r\n            this._builder = builder;\r\n        }\r\n\r\n        addNode(nodeTag: string): ITopologyConfigurationBuilder {\r\n            this._builder._databaseRecord.topology ??= {\r\n                members: [],\r\n                rehabs: [],\r\n                promotables: []\r\n            } as DatabaseTopology;\r\n\r\n            this._builder._databaseRecord.topology.members.push(nodeTag);\r\n            return this;\r\n        }\r\n\r\n        enableDynamicNodesDistribution(): ITopologyConfigurationBuilder {\r\n            this._builder._databaseRecord.sharding.orchestrator ??= {\r\n                topology: null\r\n            };\r\n\r\n            this._builder._databaseRecord.sharding.orchestrator.topology ??= {\r\n                members: [],\r\n                promotables: [],\r\n                rehabs: []\r\n            } as OrchestratorTopology;\r\n\r\n            this._builder._databaseRecord.sharding.orchestrator.topology.dynamicNodesDistribution = true;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    withReplicationFactor(replicationFactor: number): this {\r\n        this._databaseRecord.topology ??= {\r\n            members: [],\r\n            rehabs: [],\r\n            promotables: []\r\n        } as DatabaseTopology;\r\n        this._databaseRecord.topology.replicationFactor = replicationFactor;\r\n\r\n        return this;\r\n    }\r\n\r\n    private _withName(databaseName: string) {\r\n        this._databaseRecord.databaseName = databaseName;\r\n    }\r\n\r\n}\r\n"]}