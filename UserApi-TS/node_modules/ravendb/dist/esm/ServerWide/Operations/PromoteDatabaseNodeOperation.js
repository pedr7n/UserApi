import { throwError } from "../../Exceptions/index.js";
import { RavenCommand } from "../../Http/RavenCommand.js";
import { RaftIdGenerator } from "../../Utility/RaftIdGenerator.js";
import { ClientShardHelper } from "../../Utility/ClientShardHelper.js";
import { TypeUtil } from "../../Utility/TypeUtil.js";
export class PromoteDatabaseNodeOperation {
    _databaseName;
    _node;
    constructor(databaseName, node, shardNumber) {
        this._node = node;
        this._databaseName = TypeUtil.isNullOrUndefined(shardNumber) ? databaseName : ClientShardHelper.toShardName(databaseName, shardNumber);
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(conventions) {
        return new PromoteDatabaseNodeCommand(this._databaseName, this._node);
    }
}
class PromoteDatabaseNodeCommand extends RavenCommand {
    _databaseName;
    _node;
    constructor(databaseName, node) {
        super();
        if (!databaseName) {
            throwError("InvalidArgumentException", "DatabaseName cannot be null");
        }
        if (!node) {
            throwError("InvalidArgumentException", "Node cannot be null");
        }
        this._databaseName = databaseName;
        this._node = node;
    }
    createRequest(node) {
        const uri = node.url + "/admin/databases/promote?name=" + this._databaseName + "&node=" + this._node;
        return {
            uri,
            method: "POST"
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
    get isReadRequest() {
        return false;
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator.newId();
    }
}
//# sourceMappingURL=PromoteDatabaseNodeOperation.js.map