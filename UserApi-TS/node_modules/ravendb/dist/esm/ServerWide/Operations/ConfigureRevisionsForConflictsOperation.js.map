{"version":3,"file":"ConfigureRevisionsForConflictsOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/ConfigureRevisionsForConflictsOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAM1D,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAEnE,MAAM,OAAO,uCAAuC;IAC/B,SAAS,CAAS;IAClB,cAAc,CAAmC;IAElE,YAAmB,QAAgB,EAAE,aAA+C;QAChF,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,UAAU,CAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAGD,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,qCAAqC,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACvG,CAAC;CACJ;AAED,MAAM,qCAAsC,SAAQ,YAAkD;IACjF,YAAY,CAAsB;IAClC,aAAa,CAAS;IACtB,cAAc,CAAmC;IAElE,YAAmB,WAAgC,EAAE,QAAgB,EAAE,aAA+C;QAClH,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,UAAU,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAEhC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,UAAU,CAAC,0BAA0B,EAAE,yBAAyB,CAAC,CAAC;QACtE,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,mCAAmC,CAAC;QAEhG,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE7D,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ;AAED,MAAM,OAAO,oCAAoC;IAC7C,gBAAgB,CAAS;CAC5B","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { RevisionsCollectionConfiguration } from \"../../Documents/Operations/RevisionsCollectionConfiguration.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class ConfigureRevisionsForConflictsOperation implements IServerOperation<ConfigureRevisionsForConflictsResult> {\r\n    private readonly _database: string;\r\n    private readonly _configuration: RevisionsCollectionConfiguration;\r\n\r\n    public constructor(database: string, configuration: RevisionsCollectionConfiguration) {\r\n        this._database = database;\r\n        if (!configuration) {\r\n            throwError(\"InvalidArgumentException\", \"Configuration cannot be null\");\r\n        }\r\n\r\n        this._configuration = configuration;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ConfigureRevisionsForConflictsResult> {\r\n        return new ConfigureRevisionsForConflictsCommand(conventions, this._database, this._configuration);\r\n    }\r\n}\r\n\r\nclass ConfigureRevisionsForConflictsCommand extends RavenCommand<ConfigureRevisionsForConflictsResult> implements IRaftCommand {\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _databaseName: string;\r\n    private readonly _configuration: RevisionsCollectionConfiguration;\r\n\r\n    public constructor(conventions: DocumentConventions, database: string, configuration: RevisionsCollectionConfiguration) {\r\n        super();\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n\r\n        this._conventions = conventions;\r\n\r\n        if (!database) {\r\n            throwError(\"InvalidArgumentException\", \"Database cannot be null\");\r\n        }\r\n\r\n        this._databaseName = database;\r\n        this._configuration = configuration;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + this._databaseName + \"/admin/revisions/conflicts/config\";\r\n\r\n        const body = this._serializer.serialize(this._configuration);\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport class ConfigureRevisionsForConflictsResult {\r\n    raftCommandIndex: number;\r\n}\r\n"]}