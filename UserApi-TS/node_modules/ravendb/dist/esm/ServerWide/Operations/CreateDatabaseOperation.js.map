{"version":3,"file":"CreateDatabaseOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/CreateDatabaseOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { Stream } from \"node:stream\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { DatabasePutResult } from \"./index.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { HeadersBuilder } from \"../../Utility/HttpUtil.js\";\r\nimport { DatabaseRecord } from \"../index.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { HEADERS } from \"../../Constants.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\nimport { IDatabaseRecordBuilderInitializer } from \"./Builder/IDatabaseRecordBuilderInitializer.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { DatabaseRecordBuilder } from \"./DatabaseRecordBuilder.js\";\r\n\r\nexport class CreateDatabaseOperation implements IServerOperation<DatabasePutResult> {\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    private readonly _databaseRecord: DatabaseRecord;\r\n    private readonly _replicationFactor: number;\r\n\r\n    public constructor(builder: (builder: IDatabaseRecordBuilderInitializer) => void)\r\n    public constructor(databaseRecord: DatabaseRecord, replicationFactor?: number)\r\n    public constructor(databaseRecordOrBuilder: DatabaseRecord | ((builder: IDatabaseRecordBuilderInitializer) => void), replicationFactor?: number) {\r\n        if (TypeUtil.isFunction(databaseRecordOrBuilder)) {\r\n            const instance = DatabaseRecordBuilder.create();\r\n            databaseRecordOrBuilder(instance);\r\n\r\n            this._databaseRecord = instance.toDatabaseRecord();\r\n            this._replicationFactor = (this._databaseRecord.topology && this._databaseRecord.topology.replicationFactor) ?? 1;\r\n        } else {\r\n            this._databaseRecord = databaseRecordOrBuilder;\r\n            const topology = databaseRecordOrBuilder.topology;\r\n            if (replicationFactor) {\r\n                this._replicationFactor = replicationFactor;\r\n            } else {\r\n                if (topology) {\r\n                    this._replicationFactor = topology.replicationFactor > 0 ? topology.replicationFactor : 1;\r\n                } else {\r\n                    this._replicationFactor = 1;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<DatabasePutResult> {\r\n        return new CreateDatabaseCommand(conventions, this._databaseRecord, this._replicationFactor);\r\n    }\r\n}\r\n\r\nexport class CreateDatabaseCommand extends RavenCommand<DatabasePutResult> implements IRaftCommand {\r\n    private _conventions: DocumentConventions;\r\n    private readonly _databaseRecord: DatabaseRecord;\r\n    private readonly _replicationFactor: number;\r\n    private readonly _dbEtag: number;\r\n    private readonly _databaseName: string;\r\n\r\n    public constructor(conventions: DocumentConventions, databaseRecord: DatabaseRecord, replicationFactor: number, etag?: number) {\r\n        super();\r\n        this._conventions = conventions;\r\n        this._databaseRecord = databaseRecord;\r\n        this._replicationFactor = replicationFactor;\r\n        this._dbEtag = etag;\r\n\r\n        if (!databaseRecord || !databaseRecord.databaseName) {\r\n            throwError(\"InvalidOperationException\", \"Database name is required\");\r\n        }\r\n\r\n        this._databaseName = databaseRecord.databaseName;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/admin/databases?name=\" + this._databaseName;\r\n\r\n        uri += \"&replicationFactor=\" + this._replicationFactor;\r\n\r\n        const databaseDocumentJson = this._serializer.serialize(this._databaseRecord);\r\n        return {\r\n            uri,\r\n            method: \"PUT\",\r\n            headers: HeadersBuilder.create()\r\n                .typeAppJson()\r\n                .with(HEADERS.ETAG, `\"${this._dbEtag}\"`)\r\n                .build(),\r\n            body: databaseDocumentJson\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}