{"version":3,"file":"ModifyDatabaseTopologyOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/ModifyDatabaseTopologyOperation.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAEvD,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAI1D,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAEnE,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AACrD,OAAO,EAAE,iBAAiB,EAAE,MAAM,oCAAoC,CAAC;AAEvE,MAAM,OAAO,+BAA+B;IACvB,aAAa,CAAS;IACtB,iBAAiB,CAAmB;IAIrD,YAAmB,YAAoB,EAAE,6BAAwD,EAAE,gBAAmC;QAClI,IAAI,QAAQ,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,EAAE,CAAC;YAC5D,UAAU,CAAC,0BAA0B,EAAE,iCAAiC,CAAC,CAAA;QAC7E,CAAC;QAED,IAAI,QAAQ,CAAC,QAAQ,CAAC,6BAA6B,CAAC,EAAE,CAAC;YACnD,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;YAC1C,IAAI,CAAC,aAAa,GAAG,iBAAiB,CAAC,WAAW,CAAC,YAAY,EAAE,6BAA6B,CAAC,CAAC;QACpG,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC9C,CAAC;IAEL,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,6BAA6B,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACzF,CAAC;CACJ;AAED,MAAM,6BAA8B,SAAQ,YAA0C;IACjE,aAAa,CAAS;IACtB,iBAAiB,CAAmB;IAErD,YAAmB,YAAoB,EAAE,gBAAkC;QACvE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACpB,UAAU,CAAC,0BAA0B,EAAE,iCAAiC,CAAC,CAAA;QAC7E,CAAC;QAED,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,wCAAwC,GAAG,IAAI,CAAC,aAAa,CAAC;QAErF,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEhE,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,IAAI;YACJ,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;SACjD,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aACnD,OAAO,CAAC,UAAU,CAAC,CAAC;QACzB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { ModifyDatabaseTopologyResult } from \"./ModifyDatabaseTopologyResult.js\";\r\nimport { DatabaseTopology } from \"./index.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { ClientShardHelper } from \"../../Utility/ClientShardHelper.js\";\r\n\r\nexport class ModifyDatabaseTopologyOperation implements IServerOperation<ModifyDatabaseTopologyResult> {\r\n    private readonly _databaseName: string;\r\n    private readonly _databaseTopology: DatabaseTopology;\r\n\r\n    public constructor(databaseName: string, databaseTopology: DatabaseTopology)\r\n    public constructor(databaseName: string, shardNumber: number, databaseTopology: DatabaseTopology)\r\n    public constructor(databaseName: string, databaseTopologyOrShardNumber: DatabaseTopology | number, databaseTopology?: DatabaseTopology) {\r\n        if (TypeUtil.isNullOrUndefined(databaseTopologyOrShardNumber)) {\r\n            throwError(\"InvalidArgumentException\", \"DatabaseTopology cannot be null\")\r\n        }\r\n\r\n        if (TypeUtil.isNumber(databaseTopologyOrShardNumber)) {\r\n            this._databaseTopology = databaseTopology;\r\n            this._databaseName = ClientShardHelper.toShardName(databaseName, databaseTopologyOrShardNumber);\r\n        } else {\r\n            this._databaseName = databaseName;\r\n            this._databaseTopology = databaseTopology;\r\n        }\r\n\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ModifyDatabaseTopologyResult> {\r\n        return new ModifyDatabaseTopologyCommand(this._databaseName, this._databaseTopology);\r\n    }\r\n}\r\n\r\nclass ModifyDatabaseTopologyCommand extends RavenCommand<ModifyDatabaseTopologyResult> implements IRaftCommand {\r\n    private readonly _databaseName: string;\r\n    private readonly _databaseTopology: DatabaseTopology;\r\n\r\n    public constructor(databaseName: string, databaseTopology: DatabaseTopology) {\r\n        super();\r\n        if (!databaseTopology) {\r\n            throwError(\"InvalidArgumentException\", \"DatabaseTopology cannot be null\")\r\n        }\r\n\r\n        this._databaseTopology = databaseTopology;\r\n        this._databaseName = databaseName;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/databases/topology/modify?name=\" + this._databaseName;\r\n\r\n        const body = this._serializer.serialize(this._databaseTopology);\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            body,\r\n            headers: this._headers().typeAppJson().build(),\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        let body: string = null;\r\n        this.result = await this._defaultPipeline(_ => body = _)\r\n            .process(bodyStream);\r\n        return body;\r\n    }\r\n}\r\n"]}