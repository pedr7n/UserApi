{"version":3,"file":"PutServerWideExternalReplicationOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/OngoingTasks/PutServerWideExternalReplicationOperation.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAE7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAKtE,MAAM,OAAO,yCAAyC;IACjC,cAAc,CAAgC;IAE/D,YAAmB,aAA4C;QAC3D,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,UAAU,CAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,uCAAuC,CAAC,IAAI,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;IACzF,CAAC;CACJ;AAED,MAAM,uCAAwC,SAAQ,YAAmD;IAEpF,cAAc,CAAS;IAExC,YAAmB,aAA4C,EAAE,WAAgC;QAC7F,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,UAAU,CAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,YAAY,CAAC,eAAe,CAAC,aAAa,CAAC,CAAA;IACjF,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,uDAAuD,CAAC;QAE/E,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE7D,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { ServerWideExternalReplicationResponse } from \"./ServerWideTaskResponse.js\";\r\nimport { ServerWideExternalReplication } from \"./ServerWideExternalReplication.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class PutServerWideExternalReplicationOperation implements IServerOperation<ServerWideExternalReplicationResponse> {\r\n    private readonly _configuration: ServerWideExternalReplication;\r\n\r\n    public constructor(configuration: ServerWideExternalReplication) {\r\n        if (!configuration) {\r\n            throwError(\"InvalidArgumentException\", \"Configuration cannot be null\");\r\n        }\r\n\r\n        this._configuration = configuration;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ServerWideExternalReplicationResponse> {\r\n        return new PutServerWideExternalReplicationCommand(this._configuration, conventions);\r\n    }\r\n}\r\n\r\nclass PutServerWideExternalReplicationCommand extends RavenCommand<ServerWideExternalReplicationResponse> implements IRaftCommand {\r\n\r\n    private readonly _configuration: object;\r\n\r\n    public constructor(configuration: ServerWideExternalReplication, conventions: DocumentConventions) {\r\n        super();\r\n\r\n        if (!configuration) {\r\n            throwError(\"InvalidArgumentException\", \"Configuration cannot be null\");\r\n        }\r\n\r\n        this._configuration = conventions.objectMapper.toObjectLiteral(configuration)\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/configuration/server-wide/external-replication\";\r\n\r\n        const body = this._serializer.serialize(this._configuration);\r\n\r\n        return {\r\n            uri,\r\n            method: \"PUT\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n}"]}