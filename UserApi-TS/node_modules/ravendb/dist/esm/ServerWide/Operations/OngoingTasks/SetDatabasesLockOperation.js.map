{"version":3,"file":"SetDatabasesLockOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/OngoingTasks/SetDatabasesLockOperation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAE7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAGtE,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAGxD,MAAM,OAAO,yBAAyB;IAEjB,WAAW,CAA6B;IAIzD,YAAmB,wBAA6D,EAAE,IAAuB;QACrG,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAC5B,UAAU,CAAC,0BAA0B,EAAE,uCAAuC,CAAC,CAAC;QACpF,CAAC;QAED,IAAI,QAAQ,CAAC,QAAQ,CAAC,wBAAwB,CAAC,EAAE,CAAC;YAC9C,IAAI,CAAC,WAAW,GAAG;gBACf,aAAa,EAAE,CAAE,wBAAwB,CAAE;gBAC3C,IAAI;aACP,CAAA;QACL,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,wBAAwB,CAAC,aAAa,IAAI,wBAAwB,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACjG,UAAU,CAAC,0BAA0B,EAAE,uCAAuC,CAAC,CAAC;YACpF,CAAC;YACD,IAAI,CAAC,WAAW,GAAG,wBAAwB,CAAC;QAChD,CAAC;IACL,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,uBAAuB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACtE,CAAC;CACJ;AAED,MAAM,uBAAwB,SAAQ,YAAkB;IACnC,WAAW,CAAS;IAErC,YAAY,WAAgC,EAAE,UAAsC;QAChF,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,UAAU,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,YAAY,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;IAC5E,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,2BAA2B,CAAC;QACnD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE;aAC1B,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QAE3B,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,IAAI;YACJ,OAAO;SACV,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { DatabaseLockMode } from \"../../index.js\";\r\n\r\nexport class SetDatabasesLockOperation implements IServerOperation<void> {\r\n\r\n    private readonly _parameters: SetDatabasesLockParameters;\r\n\r\n    public constructor(databaseName: string, mode: DatabaseLockMode)\r\n    public constructor(parameters: SetDatabasesLockParameters)\r\n    public constructor(databaseNameOrParameters: string | SetDatabasesLockParameters, mode?: DatabaseLockMode) {\r\n        if (!databaseNameOrParameters) {\r\n            throwError(\"InvalidArgumentException\", \"Database or Parameters cannot be null\");\r\n        }\r\n\r\n        if (TypeUtil.isString(databaseNameOrParameters)) {\r\n            this._parameters = {\r\n                databaseNames: [ databaseNameOrParameters ],\r\n                mode\r\n            }\r\n        } else {\r\n            if (!databaseNameOrParameters.databaseNames || databaseNameOrParameters.databaseNames.length === 0) {\r\n                throwError(\"InvalidArgumentException\", \"DatabaseNames cannot be null or empty\");\r\n            }\r\n            this._parameters = databaseNameOrParameters;\r\n        }\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new SetDatabasesLockCommand(conventions, this._parameters);\r\n    }\r\n}\r\n\r\nclass SetDatabasesLockCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _parameters: object;\r\n\r\n    constructor(conventions: DocumentConventions, parameters: SetDatabasesLockParameters) {\r\n        super();\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n\r\n        if (!parameters) {\r\n            throwError(\"InvalidArgumentException\", \"Parameters cannot be null\");\r\n        }\r\n\r\n        this._parameters = conventions.objectMapper.toObjectLiteral(parameters);\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/databases/set-lock\";\r\n        const body = this._serializer.serialize(this._parameters);\r\n        const headers = this._headers()\r\n            .typeAppJson().build();\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            body,\r\n            headers\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport interface SetDatabasesLockParameters {\r\n    databaseNames: string[];\r\n    mode: DatabaseLockMode;\r\n}"]}