{"version":3,"file":"GetCertificatesMetadataOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Certificates/GetCertificatesMetadataOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,gCAAgC,CAAC;AAG5D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAI7D,MAAM,OAAO,gCAAgC;IACxB,KAAK,CAAS;IAI/B,YAAmB,IAAa;QAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,8BAA8B,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACvE,CAAC;CACJ;AAED,MAAM,8BAA+B,SAAQ,YAAmC;IAC3D,YAAY,CAAsB;IAClC,KAAK,CAAS;IAE/B,YAAmB,WAAgC,EAAE,IAAY;QAC7D,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,uCAAuC,CAAC;QAE7D,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YACxC,GAAG,IAAI,QAAQ,GAAG,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrD,CAAC;QAED,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;SAChB,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO;QACX,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/E,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,iBAAiB,CAAqC,OAAO,EAAE;YACxG,WAAW,EAAE;gBACT,oBAAoB,EAAE,MAAM;gBAC5B,qBAAqB,EAAE,MAAM;aAChC;SACJ,CAAC,CAAC,OAAO,CAAC;QAEX,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { CertificateMetadata } from \"./CertificateMetadata.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class GetCertificatesMetadataOperation implements IServerOperation<CertificateMetadata[]> {\r\n    private readonly _name: string;\r\n\r\n    public constructor()\r\n    public constructor(name: string)\r\n    public constructor(name?: string) {\r\n        this._name = name;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<CertificateMetadata[]> {\r\n        return new GetCertificatesMetadataCommand(conventions, this._name);\r\n    }\r\n}\r\n\r\nclass GetCertificatesMetadataCommand extends RavenCommand<CertificateMetadata[]> {\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _name: string;\r\n\r\n    public constructor(conventions: DocumentConventions, name: string) {\r\n        super();\r\n\r\n        this._conventions = conventions;\r\n        this._name = name;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/admin/certificates?metadataOnly=true\";\r\n\r\n        if (!StringUtil.isNullOrEmpty(this._name)) {\r\n            uri += \"&name=\" + encodeURIComponent(this._name);\r\n        }\r\n\r\n        return {\r\n            uri,\r\n            method: \"GET\"\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n        this.result = this._conventions.objectMapper.fromObjectLiteral<{ results: CertificateMetadata[] }>(results, {\r\n            nestedTypes: {\r\n                \"results[].notAfter\": \"date\",\r\n                \"results[].notBefore\": \"date\",\r\n            }\r\n        }).results;\r\n\r\n        return body;\r\n    }\r\n}\r\n"]}