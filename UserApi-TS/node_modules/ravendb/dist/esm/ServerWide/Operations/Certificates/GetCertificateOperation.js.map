{"version":3,"file":"GetCertificateOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Certificates/GetCertificateOperation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAK1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAG7D,MAAM,OAAO,uBAAuB;IACf,WAAW,CAAS;IAErC,YAAmB,UAAkB;QACjC,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACpE,CAAC;CACJ;AAED,MAAM,qBAAsB,SAAQ,YAAmC;IAClD,WAAW,CAAS;IACpB,YAAY,CAAsB;IAEnD,YAAmB,UAAkB,EAAE,WAAgC;QACnE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,iCAAiC,GAAG,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEhG,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;SACN,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO;QACX,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/E,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,iBAAiB,CAAuC,OAAO,EAAE;YAC3G,WAAW,EAAE;gBACT,oBAAoB,EAAE,MAAM;gBAC5B,qBAAqB,EAAE,MAAM;aAChC;SACJ,CAAC,CAAC,OAAO,CAAC;QAEX,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAExB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { CertificateDefinition } from \"./CertificateDefinition.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class GetCertificateOperation implements IServerOperation<CertificateDefinition> {\r\n    private readonly _thumbprint: string;\r\n\r\n    public constructor(thumbprint: string) {\r\n        if (!thumbprint) {\r\n            throwError(\"InvalidArgumentException\", \"Thumbprint cannot be null.\");\r\n        }\r\n        this._thumbprint = thumbprint;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<CertificateDefinition> {\r\n        return new GetCertificateCommand(this._thumbprint, conventions);\r\n    }\r\n}\r\n\r\nclass GetCertificateCommand extends RavenCommand<CertificateDefinition> {\r\n    private readonly _thumbprint: string;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(thumbprint: string, conventions: DocumentConventions) {\r\n        super();\r\n\r\n        if (!thumbprint) {\r\n            throwError(\"InvalidArgumentException\", \"Thumbprint cannot be null.\");\r\n        }\r\n\r\n        this._thumbprint = thumbprint;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/certificates?thumbprint=\" + encodeURIComponent(this._thumbprint);\r\n\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n        const mapped = this._conventions.objectMapper.fromObjectLiteral<{ results: CertificateDefinition[] }>(results, {\r\n            nestedTypes: {\r\n                \"results[].notAfter\": \"date\",\r\n                \"results[].notBefore\": \"date\"\r\n            }\r\n        }).results;\r\n\r\n        if (mapped.length !== 1) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        this.result = mapped[0];\r\n\r\n        return body;\r\n    }\r\n}\r\n"]}