{"version":3,"file":"EditClientCertificateOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Certificates/EditClientCertificateOperation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAKtE,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAK7D,MAAM,OAAO,8BAA8B;IACtB,WAAW,CAAS;IACpB,YAAY,CAAiC;IAC7C,KAAK,CAAS;IACd,UAAU,CAAoB;IAE/C,YAAmB,UAA2C;QAC1D,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YACnB,UAAU,CAAC,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YACzB,UAAU,CAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;YAC1B,UAAU,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;YACxB,UAAU,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,UAAU,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,WAAW,CAAC;QAC3C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC;IAC3C,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,4BAA4B,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAC9G,CAAC;CACJ;AAED,MAAM,4BAA6B,SAAQ,YAAkB;IACxC,WAAW,CAAS;IACpB,YAAY,CAAiC;IAC7C,KAAK,CAAS;IACd,UAAU,CAAoB;IAE/C,YAAmB,UAAkB,EAAE,IAAY,EAAE,WAA2C,EAAE,SAA4B;QAC1H,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,0BAA0B,CAAC;QAElD,MAAM,UAAU,GAAG;YACf,UAAU,EAAE,IAAI,CAAC,WAAW;YAC5B,WAAW,EAAE,IAAI,CAAC,YAAY;YAC9B,iBAAiB,EAAE,IAAI,CAAC,UAAU;YAClC,IAAI,EAAE,IAAI,CAAC,KAAK;SACM,CAAC;QAE3B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAEpD,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG;YACH,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { throwError } from \"../../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { DatabaseAccess } from \"./DatabaseAccess.js\";\r\nimport { SecurityClearance } from \"./SecurityClearance.js\";\r\nimport { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { CertificateDefinition } from \"./CertificateDefinition.js\";\r\n\r\nexport class EditClientCertificateOperation implements IServerOperation<void> {\r\n    private readonly _thumbprint: string;\r\n    private readonly _permissions: Record<string, DatabaseAccess>;\r\n    private readonly _name: string;\r\n    private readonly _clearance: SecurityClearance;\r\n\r\n    public constructor(parameters: EditClientCertificateParameters) {\r\n        if (!parameters) {\r\n            throwError(\"InvalidArgumentException\", \"Parameters cannot be null\");\r\n        }\r\n\r\n        if (!parameters.name) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null\");\r\n        }\r\n\r\n        if (!parameters.thumbprint) {\r\n            throwError(\"InvalidArgumentException\", \"Thumbprint cannot be null\");\r\n        }\r\n\r\n        if (!parameters.permissions) {\r\n            throwError(\"InvalidArgumentException\", \"Permissions cannot be null\");\r\n        }\r\n\r\n        if (!parameters.clearance) {\r\n            throwError(\"InvalidArgumentException\", \"Clearance cannot be null\");\r\n        }\r\n\r\n        this._name = parameters.name;\r\n        this._thumbprint = parameters.thumbprint;\r\n        this._permissions = parameters.permissions;\r\n        this._clearance = parameters.clearance;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new EditClientCertificateCommand(this._thumbprint, this._name, this._permissions, this._clearance);\r\n    }\r\n}\r\n\r\nclass EditClientCertificateCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _thumbprint: string;\r\n    private readonly _permissions: Record<string, DatabaseAccess>;\r\n    private readonly _name: string;\r\n    private readonly _clearance: SecurityClearance;\r\n\r\n    public constructor(thumbprint: string, name: string, permissions: Record<string, DatabaseAccess>, clearance: SecurityClearance) {\r\n        super();\r\n\r\n        this._thumbprint = thumbprint;\r\n        this._name = name;\r\n        this._permissions = permissions;\r\n        this._clearance = clearance;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/certificates/edit\";\r\n\r\n        const definition = {\r\n            thumbprint: this._thumbprint,\r\n            permissions: this._permissions,\r\n            securityClearance: this._clearance,\r\n            name: this._name\r\n        } as CertificateDefinition;\r\n\r\n        const body = this._serializer.serialize(definition);\r\n\r\n        return {\r\n            method: \"POST\",\r\n            uri,\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport interface EditClientCertificateParameters {\r\n    thumbprint: string;\r\n    permissions: Record<string, DatabaseAccess>;\r\n    name: string;\r\n    clearance: SecurityClearance;\r\n}"]}