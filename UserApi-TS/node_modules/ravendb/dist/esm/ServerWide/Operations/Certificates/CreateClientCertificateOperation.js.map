{"version":3,"file":"CreateClientCertificateOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Certificates/CreateClientCertificateOperation.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,YAAY,EAAE,MAAM,gCAAgC,CAAC;AAG9D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAG7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAEtE,MAAM,OAAO,gCAAgC;IACxB,KAAK,CAAS;IACd,YAAY,CAAiC;IAC7C,UAAU,CAAoB;IAC9B,SAAS,CAAS;IAEnC,YAAmB,IAAY,EAAE,WAA2C,EAAE,SAA4B,EAAE,QAAiB;QACzH,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,UAAU,CAAC,0BAA0B,EAAE,sBAAsB,CAAC,CAAC;QACnE,CAAC;QACD,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,UAAU,CAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,8BAA8B,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC9G,CAAC;CACJ;AAED,MAAM,8BAA+B,SAAQ,YAAgC;IACxD,KAAK,CAAS;IACd,YAAY,CAAiC;IAC7C,UAAU,CAAoB;IAC9B,SAAS,CAAS;IAEnC,YAAmB,IAAY,EAAE,WAA2C,EAAE,SAA4B,EAAE,QAAiB;QACzH,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,UAAU,CAAC,0BAA0B,EAAE,sBAAsB,CAAC,CAAC;QACnE,CAAC;QAED,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,UAAU,CAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,qBAAqB,CAAC;QAE7C,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW;aACxB,SAAS,CAAC;YACP,IAAI,EAAE,IAAI,CAAC,KAAK;YAChB,iBAAiB,EAAE,IAAI,CAAC,UAAU;YAClC,QAAQ,EAAE,IAAI,CAAC,SAAS,IAAI,SAAS;YACrC,WAAW,EAAE,IAAI,CAAC,YAAY;SAEjC,CAAC,CAAC;QAEP,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG;YACH,OAAO,EAAE,UAAU,EAAE;iBAChB,WAAW,EAAE;iBACb,KAAK,EAAE;YACZ,IAAI;SACP,CAAA;IACL,CAAC;IAED,cAAc,CAAC,QAAsB,EAAE,IAAY;QAC/C,KAAK,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,MAAM,GAAG;YACV,OAAO,EAAE,MAAM,YAAY,CAAC,UAAU,CAAC;SAC1C,CAAC;QAEF,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,sBAAsB;QACzB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { CertificateRawData } from \"./CertificateRawData.js\";\r\nimport { DatabaseAccess } from \"./DatabaseAccess.js\";\r\nimport { SecurityClearance } from \"./SecurityClearance.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { HttpRequestParameters, HttpResponse } from \"../../../Primitives/Http.js\";\r\nimport { getHeaders } from \"../../../Utility/HttpUtil.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { readToBuffer } from \"../../../Utility/StreamUtil.js\";\r\nimport { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class CreateClientCertificateOperation implements IServerOperation<CertificateRawData> {\r\n    private readonly _name: string;\r\n    private readonly _permissions: Record<string, DatabaseAccess>;\r\n    private readonly _clearance: SecurityClearance;\r\n    private readonly _password: string;\r\n\r\n    public constructor(name: string, permissions: Record<string, DatabaseAccess>, clearance: SecurityClearance, password?: string) {\r\n        if (!name) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null.\");\r\n        }\r\n        if (!permissions) {\r\n            throwError(\"InvalidArgumentException\", \"Permissions cannot be null.\");\r\n        }\r\n\r\n        this._name = name;\r\n        this._permissions = permissions;\r\n        this._clearance = clearance;\r\n        this._password = password;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<CertificateRawData> {\r\n        return new CreateClientCertificateCommand(this._name, this._permissions, this._clearance, this._password);\r\n    }\r\n}\r\n\r\nclass CreateClientCertificateCommand extends RavenCommand<CertificateRawData> implements IRaftCommand {\r\n    private readonly _name: string;\r\n    private readonly _permissions: Record<string, DatabaseAccess>;\r\n    private readonly _clearance: SecurityClearance;\r\n    private readonly _password: string;\r\n\r\n    public constructor(name: string, permissions: Record<string, DatabaseAccess>, clearance: SecurityClearance, password?: string) {\r\n        super();\r\n\r\n        if (!name) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null.\");\r\n        }\r\n\r\n        if (!permissions) {\r\n            throwError(\"InvalidArgumentException\", \"Permissions cannot be null.\");\r\n        }\r\n\r\n        this._name = name;\r\n        this._permissions = permissions;\r\n        this._clearance = clearance;\r\n        this._password = password;\r\n\r\n        this._responseType = \"Raw\";\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/certificates\";\r\n\r\n        const body = this._serializer\r\n            .serialize({\r\n                Name: this._name,\r\n                SecurityClearance: this._clearance,\r\n                Password: this._password || undefined,\r\n                Permissions: this._permissions,\r\n\r\n            });\r\n\r\n        return {\r\n            method: \"POST\",\r\n            uri,\r\n            headers: getHeaders()\r\n                .typeAppJson()\r\n                .build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    setResponseRaw(response: HttpResponse, body: string) {\r\n        super.setResponseRaw(response, body);\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        this.result = {\r\n            rawData: await readToBuffer(bodyStream)\r\n        };\r\n\r\n        return null;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}"]}