import { throwError } from "../../Exceptions/index.js";
import { RavenCommand } from "../../Http/RavenCommand.js";
import { RaftIdGenerator } from "../../Utility/RaftIdGenerator.js";
import { TypeUtil } from "../../Utility/TypeUtil.js";
import { ClientShardHelper } from "../../Utility/ClientShardHelper.js";
export class AddDatabaseNodeOperation {
    _databaseName;
    _node;
    constructor(databaseName, nodeOrShardNumber, node) {
        if (!TypeUtil.isNullOrUndefined(nodeOrShardNumber) && TypeUtil.isNumber(nodeOrShardNumber)) {
            this._databaseName = ClientShardHelper.toShardName(databaseName, nodeOrShardNumber);
            this._node = node;
        }
        else {
            this._databaseName = databaseName;
            this._node = nodeOrShardNumber;
        }
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(conventions) {
        return new AddDatabaseNodeCommand(this._databaseName, this._node);
    }
}
class AddDatabaseNodeCommand extends RavenCommand {
    _databaseName;
    _node;
    constructor(databaseName, node) {
        super();
        if (!databaseName) {
            throwError("InvalidArgumentException", "DatabaseName cannot be null");
        }
        this._databaseName = databaseName;
        this._node = node;
    }
    createRequest(node) {
        let uri = node.url + "/admin/databases/node?name=" + this._databaseName;
        if (this._node) {
            uri += "&node=" + this._node;
        }
        return {
            uri,
            method: "PUT"
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
    get isReadRequest() {
        return false;
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator.newId();
    }
}
//# sourceMappingURL=AddDatabaseNodeOperation.js.map