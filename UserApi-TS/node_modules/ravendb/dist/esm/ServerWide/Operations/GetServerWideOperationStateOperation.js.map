{"version":3,"file":"GetServerWideOperationStateOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/GetServerWideOperationStateOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAkB,MAAM,4BAA4B,CAAC;AAK1E,MAAM,OAAO,oCAAoC;IAE7C,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEgB,GAAG,CAAS;IAE7B,YAAmB,EAAU;QACzB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAClB,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,kCAAkC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5D,CAAC;CACJ;AAED,MAAM,OAAO,kCAAmC,SAAQ,YAA4B;IAC/D,GAAG,CAAS;IAI7B,YAAmB,EAAU,EAAE,OAAgB;QAC3C,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC;IACpC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,uBAAuB,GAAG,IAAI,CAAC,GAAG,CAAC;QAE1D,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;SAChB,CAAC;IACN,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;CACJ","sourcesContent":["import { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { RavenCommand, IRavenResponse } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\n\r\nexport class GetServerWideOperationStateOperation implements IServerOperation<IRavenResponse> {\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    private readonly _id: number;\r\n\r\n    public constructor(id: number) {\r\n        this._id = id;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<IRavenResponse> {\r\n        return new GetServerWideOperationStateCommand(this._id);\r\n    }\r\n}\r\n\r\nexport class GetServerWideOperationStateCommand extends RavenCommand<IRavenResponse> {\r\n    private readonly _id: number;\r\n\r\n    public constructor(id: number)\r\n    public constructor(id: number, nodeTag: string)\r\n    public constructor(id: number, nodeTag?: string) {\r\n        super();\r\n\r\n        this._id = id;\r\n        this._selectedNodeTag = nodeTag;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/operations/state?id=\" + this._id;\r\n\r\n        return {\r\n            uri,\r\n            method: \"GET\"\r\n        };\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n}\r\n"]}