{"version":3,"file":"GetDatabaseSettingsOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Configuration/GetDatabaseSettingsOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAM7D,MAAM,OAAO,4BAA4B;IAEpB,aAAa,CAAS;IAEvC,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,YAAmB,YAAoB;QACnC,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,UAAU,CAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QACD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,0BAA0B,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9D,CAAC;CACJ;AAGD,MAAM,0BAA2B,SAAQ,YAA8B;IAClD,aAAa,CAAS;IAEvC,YAAmB,YAAoB;QACnC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,UAAU,CAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,eAAe,CAAC;QAE5E,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;SACN,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,CAAC;QAET,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAAO;aACrC,aAAa,EAAE;aACf,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAC1B,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzB,IAAI,CAAC,MAAM,GAAG;YACV,QAAQ,EAAE,MAAM,CAAC,QAAQ;SAC5B,CAAA;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DatabaseSettings } from \"./DatabaseSettings.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class GetDatabaseSettingsOperation implements IMaintenanceOperation<DatabaseSettings> {\r\n\r\n    private readonly _databaseName: string;\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public constructor(databaseName: string) {\r\n        if (!databaseName) {\r\n            throwError(\"InvalidArgumentException\", \"DatabaseName cannot be null\");\r\n        }\r\n        this._databaseName = databaseName;\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<DatabaseSettings> {\r\n        return new GetDatabaseSettingsCommand(this._databaseName);\r\n    }\r\n}\r\n\r\n\r\nclass GetDatabaseSettingsCommand extends RavenCommand<DatabaseSettings> {\r\n    private readonly _databaseName: string;\r\n\r\n    public constructor(databaseName: string) {\r\n        super();\r\n        if (!databaseName) {\r\n            throwError(\"InvalidArgumentException\", \"DatabaseName cannot be null\");\r\n        }\r\n\r\n        this._databaseName = databaseName;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + this._databaseName + \"/admin/record\";\r\n\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body;\r\n\r\n        const result = await this._pipeline<any>()\r\n            .parseJsonSync()\r\n            .collectBody(_ => body = _)\r\n            .process(bodyStream);\r\n\r\n        this.result = {\r\n            settings: result.Settings\r\n        }\r\n        return body;\r\n    }\r\n}\r\n"]}