{"version":3,"file":"GetDatabaseNamesOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/GetDatabaseNamesOperation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAM1D,MAAM,OAAO,yBAAyB;IAEjB,MAAM,CAAS;IACf,SAAS,CAAS;IAEnC,YAAmB,KAAa,EAAE,QAAgB;QAC9C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,uBAAuB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACpE,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CAEJ;AAED,MAAM,OAAO,uBAAwB,SAAQ,YAAsB;IAC9C,MAAM,CAAS;IACf,SAAS,CAAS;IAEnC,YAAmB,KAAa,EAAE,QAAgB;QAC9C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,oBAAoB,IAAI,CAAC,MAAM,aAAa,IAAI,CAAC,SAAS,iBAAiB,CAAC;QACnG,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7B,OAAO;QACX,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aACrD,OAAO,CAAC,UAAU,CAAC,CAAC;QACzB,MAAM,EAAE,SAAS,EAAE,GAAG,OAAc,CAAC;QACrC,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;YAC1C,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QAExB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\n\r\nexport class GetDatabaseNamesOperation implements IServerOperation<string[]> {\r\n\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n\r\n    public constructor(start: number, pageSize: number) {\r\n        this._start = start;\r\n        this._pageSize = pageSize;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<string[]> {\r\n        return new GetDatabaseNamesCommand(this._start, this._pageSize);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n}\r\n\r\nexport class GetDatabaseNamesCommand extends RavenCommand<string[]> {\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n\r\n    public constructor(start: number, pageSize: number) {\r\n        super();\r\n        this._start = start;\r\n        this._pageSize = pageSize;\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return true;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = `${node.url}/databases?start=${this._start}&pageSize=${this._pageSize}&namesOnly=true`;\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _)\r\n            .process(bodyStream);\r\n        const { databases } = results as any;\r\n        if (!databases || !Array.isArray(databases)) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        this.result = databases;\r\n\r\n        return body;\r\n    }\r\n}\r\n"]}