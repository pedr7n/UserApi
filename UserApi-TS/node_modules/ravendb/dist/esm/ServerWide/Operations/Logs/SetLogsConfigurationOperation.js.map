{"version":3,"file":"SetLogsConfigurationOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/Logs/SetLogsConfigurationOperation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAK1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAG7D,MAAM,OAAO,6BAA6B;IACrB,WAAW,CAAiC;IAE7D,YAAmB,UAA0C;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,2BAA2B,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7D,CAAC;CACJ;AAED,MAAM,2BAA4B,SAAQ,YAAkB;IACvC,WAAW,CAAiC;IAE7D,YAAmB,UAA0C;QACzD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,2BAA2B,CAAC;QAEnD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE1D,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;CACJ","sourcesContent":["import { throwError } from \"../../../Exceptions/index.js\";\r\nimport { LogMode } from \"./LogMode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { IServerOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class SetLogsConfigurationOperation implements IServerOperation<void> {\r\n    private readonly _parameters: SetLogsConfigurationParameters;\r\n\r\n    public constructor(parameters: SetLogsConfigurationParameters) {\r\n        if (!parameters) {\r\n            throwError(\"InvalidArgumentException\", \"Parameters cannot be null\");\r\n        }\r\n\r\n        this._parameters = parameters;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new SetLogsConfigurationCommand(this._parameters);\r\n    }\r\n}\r\n\r\nclass SetLogsConfigurationCommand extends RavenCommand<void> {\r\n    private readonly _parameters: SetLogsConfigurationParameters;\r\n\r\n    public constructor(parameters: SetLogsConfigurationParameters) {\r\n        super();\r\n\r\n        if (!parameters) {\r\n            throwError(\"InvalidArgumentException\", \"Parameters cannot be null\");\r\n        }\r\n\r\n        this._parameters = parameters;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/logs/configuration\";\r\n\r\n        const body = this._serializer.serialize(this._parameters);\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n}\r\n\r\nexport interface SetLogsConfigurationParameters {\r\n    mode: LogMode;\r\n    retentionTime?: string;\r\n    retentionSize?: number;\r\n    compress?: boolean;\r\n    persist?: boolean;\r\n}"]}