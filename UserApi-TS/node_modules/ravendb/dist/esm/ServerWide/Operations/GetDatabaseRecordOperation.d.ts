import { HttpRequestParameters } from "../../Primitives/Http.js";
import { Stream } from "node:stream";
import { IServerOperation, OperationResultType } from "../../Documents/Operations/OperationAbstractions.js";
import { DatabaseRecordWithEtag } from "../index.js";
import { DocumentConventions } from "../../Documents/Conventions/DocumentConventions.js";
import { RavenCommand } from "../../Http/RavenCommand.js";
import { ServerNode } from "../../Http/ServerNode.js";
import { ServerResponse } from "../../Types/index.js";
import { RollingIndexDeployment } from "../../Documents/Indexes/RollingIndexDeployment.js";
export declare class GetDatabaseRecordOperation implements IServerOperation<DatabaseRecordWithEtag> {
    private readonly _database;
    constructor(database: string);
    getCommand(conventions: DocumentConventions): RavenCommand<DatabaseRecordWithEtag>;
    get resultType(): OperationResultType;
}
export declare class GetDatabaseRecordCommand extends RavenCommand<DatabaseRecordWithEtag> {
    private readonly _conventions;
    private readonly _database;
    constructor(conventions: DocumentConventions, database: string);
    get isReadRequest(): boolean;
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
    static mapRollingDeployment(input: ServerResponse<Record<string, RollingIndexDeployment>>): Record<string, RollingIndexDeployment>;
}
//# sourceMappingURL=GetDatabaseRecordOperation.d.ts.map