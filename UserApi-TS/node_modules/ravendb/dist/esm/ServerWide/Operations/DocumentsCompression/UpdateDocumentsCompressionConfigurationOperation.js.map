{"version":3,"file":"UpdateDocumentsCompressionConfigurationOperation.js","sourceRoot":"","sources":["../../../../../src/ServerWide/Operations/DocumentsCompression/UpdateDocumentsCompressionConfigurationOperation.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAK7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAGtE,MAAM,OAAO,gDAAgD;IACxC,kCAAkC,CAAoC;IAEvF,YAAmB,aAAgD;QAC/D,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,UAAU,CAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,kCAAkC,GAAG,aAAa,CAAC;IAC5D,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,6CAA6C,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;IACtG,CAAC;CACJ;AAED,MAAM,6CAA8C,SAAQ,YAAoD;IACpG,kCAAkC,CAAoC;IAE9E,YAAmB,aAAgD;QAC/D,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,aAAa,EAAE,CAAC;YACjB,UAAU,CAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,kCAAkC,GAAG,aAAa,CAAC;IAC5D,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,qCAAqC,CAAC;QAC7F,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE;aAC1B,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;QAEjF,OAAO;YACH,GAAG;YACH,MAAM,EAAE,MAAM;YACd,OAAO;YACP,IAAI;SACP,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO;QACX,CAAC;QAED,OAAO,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IAC7D,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DocumentCompressionConfigurationResult } from \"./DocumentCompressionConfigurationResult.js\";\r\nimport { DocumentsCompressionConfiguration } from \"../../DocumentsCompressionConfiguration.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../../Documents/Conventions/DocumentConventions.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class UpdateDocumentsCompressionConfigurationOperation implements IMaintenanceOperation<DocumentCompressionConfigurationResult> {\r\n    private readonly _documentsCompressionConfiguration: DocumentsCompressionConfiguration;\r\n\r\n    public constructor(configuration: DocumentsCompressionConfiguration) {\r\n        if (!configuration) {\r\n            throwError(\"InvalidArgumentException\", \"Configuration cannot be null\");\r\n        }\r\n\r\n        this._documentsCompressionConfiguration = configuration;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<DocumentCompressionConfigurationResult> {\r\n        return new UpdateDocumentCompressionConfigurationCommand(this._documentsCompressionConfiguration);\r\n    }\r\n}\r\n\r\nclass UpdateDocumentCompressionConfigurationCommand extends RavenCommand<DocumentCompressionConfigurationResult> implements IRaftCommand {\r\n    private _documentsCompressionConfiguration: DocumentsCompressionConfiguration;\r\n\r\n    public constructor(configuration: DocumentsCompressionConfiguration) {\r\n        super();\r\n\r\n        if (!configuration) {\r\n            throwError(\"InvalidArgumentException\", \"Configuration cannot be null\");\r\n        }\r\n\r\n        this._documentsCompressionConfiguration = configuration;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/documents-compression/config\";\r\n        const headers = this._headers()\r\n            .typeAppJson().build();\r\n        const body = this._serializer.serialize(this._documentsCompressionConfiguration);\r\n\r\n        return {\r\n            uri,\r\n            method: \"POST\",\r\n            headers,\r\n            body\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        return await this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\n"]}