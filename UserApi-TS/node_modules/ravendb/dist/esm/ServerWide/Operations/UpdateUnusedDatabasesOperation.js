import { StringUtil } from "../../Utility/StringUtil.js";
import { throwError } from "../../Exceptions/index.js";
import { RavenCommand } from "../../Http/RavenCommand.js";
import { RaftIdGenerator } from "../../Utility/RaftIdGenerator.js";
export class UpdateUnusedDatabasesOperation {
    _database;
    _parameters;
    constructor(database, unusedDatabaseIds, validate = false) {
        if (StringUtil.isNullOrEmpty(database)) {
            throwError("InvalidArgumentException", "Database cannot be null");
        }
        this._database = database;
        this._parameters = {
            databaseIds: unusedDatabaseIds,
            validate
        };
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(conventions) {
        return new UpdateUnusedDatabasesCommand(this._database, this._parameters);
    }
}
class UpdateUnusedDatabasesCommand extends RavenCommand {
    _database;
    _parameters;
    constructor(database, parameters) {
        super();
        this._database = database;
        this._parameters = parameters;
    }
    createRequest(node) {
        let uri = node.url + "/admin/databases/unused-ids?name=" + this._database;
        if (this._parameters.validate) {
            uri += "&validate=true";
        }
        const body = this._serializer.serialize(this._parameters);
        return {
            uri,
            method: "POST",
            headers: this._headers().typeAppJson().build(),
            body
        };
    }
    get isReadRequest() {
        return false;
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator.newId();
    }
}
//# sourceMappingURL=UpdateUnusedDatabasesOperation.js.map