import { throwError } from "../../Exceptions/index.js";
import { RavenCommand } from "../../Http/RavenCommand.js";
import { RaftIdGenerator } from "../../Utility/RaftIdGenerator.js";
export class ModifyConflictSolverOperation {
    _database;
    _collectionByScript;
    _resolveToLatest;
    constructor(database, collectionByScript, resolveToLatest) {
        this._database = database;
        this._collectionByScript = collectionByScript;
        this._resolveToLatest = resolveToLatest;
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(conventions) {
        return new ModifyConflictSolverCommand(conventions, this._database, this._collectionByScript, this._resolveToLatest);
    }
}
class ModifyConflictSolverCommand extends RavenCommand {
    _database;
    _conventions;
    _collectionByScript;
    _resolveToLatest;
    constructor(conventions, database, collectionByScript, resolveToLatest) {
        super();
        if (!conventions) {
            throwError("InvalidArgumentException", "Conventions cannot be null");
        }
        if (!database) {
            throwError("InvalidArgumentException", "Database cannot be null");
        }
        this._database = database;
        this._conventions = conventions;
        this._collectionByScript = collectionByScript;
        this._resolveToLatest = resolveToLatest || false;
    }
    createRequest(node) {
        const uri = node.url + "/admin/replication/conflicts/solver?name=" + encodeURIComponent(this._database);
        const body = this._serializer.serialize({
            ResolveToLatest: this._resolveToLatest,
            ResolveByCollection: this._collectionByScript
        });
        return {
            uri,
            method: "POST",
            headers: this._headers().typeAppJson().build(),
            body
        };
    }
    get isReadRequest() {
        return false;
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator.newId();
    }
}
//# sourceMappingURL=ModifyConflictSolverOperation.js.map