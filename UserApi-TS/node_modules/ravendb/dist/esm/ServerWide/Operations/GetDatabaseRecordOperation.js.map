{"version":3,"file":"GetDatabaseRecordOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Operations/GetDatabaseRecordOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { DatabaseRecordWithEtag, IndexHistoryEntry } from \"../index.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { TimeSeriesConfiguration } from \"../../Documents/Operations/TimeSeries/TimeSeriesConfiguration.js\";\r\nimport { ServerResponse } from \"../../Types/index.js\";\r\nimport { RollingIndexDeployment } from \"../../Documents/Indexes/RollingIndexDeployment.js\";\r\nimport { DateUtil } from \"../../Utility/DateUtil.js\";\r\nimport { ObjectUtil } from \"../../Utility/ObjectUtil.js\";\r\n\r\nexport class GetDatabaseRecordOperation implements IServerOperation<DatabaseRecordWithEtag> {\r\n    private readonly _database: string;\r\n\r\n    public constructor(database: string) {\r\n        this._database = database;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<DatabaseRecordWithEtag> {\r\n        return new GetDatabaseRecordCommand(conventions, this._database);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nexport class GetDatabaseRecordCommand extends RavenCommand<DatabaseRecordWithEtag> {\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _database: string;\r\n\r\n    public constructor(conventions: DocumentConventions, database: string) {\r\n        super();\r\n\r\n        this._conventions = conventions;\r\n        this._database = database;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/admin/databases?name=\" + this._database;\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return null;\r\n        }\r\n\r\n        let body: string = null;\r\n        this.result = await this._defaultPipeline(_ => body = _)\r\n            .collectBody()\r\n            .objectKeysTransform({\r\n                defaultTransform: ObjectUtil.camel,\r\n                ignorePaths: [\r\n                    /^(indexes|sorters|autoIndexes|settings|indexesHistory|ravenConnectionStrings|sqlConnectionStrings|rollingIndexes)\\.[^.]+$/i,\r\n                    /^rollingIndexes\\.[^.]+\\.activeDeployments\\.[^.]+$/i,\r\n                    /^indexesHistory\\.[^.]+\\.[^.]+\\.rollingDeployment\\.[^.]+$/i,\r\n                    /^timeSeries\\./i\r\n                ]\r\n            })\r\n            .process(bodyStream);\r\n\r\n        if (this.result.rollingIndexes) {\r\n            for (const index of Object.values(this.result.rollingIndexes)) {\r\n                if (index.activeDeployments) {\r\n                    index.activeDeployments = GetDatabaseRecordCommand.mapRollingDeployment(index.activeDeployments as any);\r\n                }\r\n            }\r\n        }\r\n\r\n        const history = this.result.indexesHistory;\r\n        if (history) {\r\n\r\n            for (const indexName of Object.keys(history)) {\r\n                const indexHistory = history[indexName];\r\n\r\n                history[indexName] = indexHistory.map(item => {\r\n                    const { createdAt, rollingDeployment, ...otherHistoryProps } = item as unknown as ServerResponse<IndexHistoryEntry>;\r\n\r\n                    return {\r\n                        ...otherHistoryProps,\r\n                        createdAt: DateUtil.utc.parse(createdAt),\r\n                        rollingDeployment: GetDatabaseRecordCommand.mapRollingDeployment(rollingDeployment)\r\n                    } as IndexHistoryEntry;\r\n                });\r\n            }\r\n        }\r\n\r\n        if (this.result.timeSeries) {\r\n            this.result.timeSeries = TimeSeriesConfiguration.parse(this.result.timeSeries as any);\r\n        }\r\n\r\n        return body;\r\n    }\r\n\r\n    static mapRollingDeployment(input: ServerResponse<Record<string, RollingIndexDeployment>>): Record<string, RollingIndexDeployment> {\r\n        if (!input) {\r\n            return null;\r\n        }\r\n\r\n        const result: Record<string, RollingIndexDeployment> = {};\r\n        for (const tag of Object.keys(input)) {\r\n            const deployment = input[tag];\r\n            result[tag] = {\r\n                state: deployment.state,\r\n                createdAt: DateUtil.utc.parse(deployment.createdAt),\r\n                startedAt: DateUtil.utc.parse(deployment.startedAt),\r\n                finishedAt: DateUtil.utc.parse(deployment.finishedAt),\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}