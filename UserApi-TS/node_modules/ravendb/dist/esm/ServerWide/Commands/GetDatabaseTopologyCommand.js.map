{"version":3,"file":"GetDatabaseTopologyCommand.js","sourceRoot":"","sources":["../../../../src/ServerWide/Commands/GetDatabaseTopologyCommand.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElD,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AAczD,MAAM,OAAO,0BAA2B,SAAQ,YAAsB;IAEjD,sBAAsB,CAAS;IAC/B,SAAS,CAAS;IAEnC,YAAY,QAAiB,EAAE,qBAA8B;QACzD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;QAEpD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,kBAAkB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEvD,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YAC9C,4EAA4E;YAC5E,kDAAkD;YAClD,GAAG,IAAI,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvD,CAAC;QAED,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,GAAG,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,CAAC;QAED,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC9B,GAAG,IAAI,yBAAyB,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACpF,CAAC;QAED,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO;QACX,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAAe;aAC7C,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAC1B,aAAa,EAAE;aACf,mBAAmB,CAAC,UAAU,CAAC,KAAK,CAAC;aACrC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzB,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK;YACtB,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC,IAAI,CAAC;QACX,IAAI,CAAC,MAAM,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { Stream } from \"node:stream\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { Topology } from \"../../Http/Topology.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { ObjectUtil } from \"../../Utility/ObjectUtil.js\";\r\n\r\ninterface ServerNodeDto {\r\n    database: string;\r\n    url: string;\r\n    clusterTag?: string;\r\n    serverRole: string;\r\n}\r\n\r\ninterface TopologyDto {\r\n    etag: number;\r\n    nodes?: ServerNodeDto[];\r\n}\r\n\r\nexport class GetDatabaseTopologyCommand extends RavenCommand<Topology> {\r\n\r\n    private readonly _applicationIdentifier: string;\r\n    private readonly _debugTag: string;\r\n\r\n    constructor(debugTag?: string, applicationIdentifier?: string) {\r\n        super();\r\n        this._debugTag = debugTag;\r\n        this._applicationIdentifier = applicationIdentifier;\r\n\r\n        this.timeout = 15_000;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = `${node.url}/topology?name=${node.database}`;\r\n\r\n        if (node.url.toLowerCase().includes(\".fiddler\")) {\r\n            // we want to keep the '.fiddler' stuff there so we'll keep tracking request\r\n            // so we are going to ask the server to respect it\r\n            uri += \"&localUrl=\" + encodeURIComponent(node.url);\r\n        }\r\n\r\n        if (this._debugTag) {\r\n            uri += \"&\" + this._debugTag;\r\n        }\r\n\r\n        if (this._applicationIdentifier) {\r\n            uri += \"&applicationIdentifier=\" + this._urlEncode(this._applicationIdentifier);\r\n        }\r\n\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n        const rawTpl = await this._pipeline<TopologyDto>()\r\n            .collectBody(_ => body = _)\r\n            .parseJsonSync()\r\n            .objectKeysTransform(ObjectUtil.camel)\r\n            .process(bodyStream);\r\n\r\n        const nodes = rawTpl.nodes\r\n            ? rawTpl.nodes.map(x => Object.assign(new ServerNode(), x))\r\n            : null;\r\n        this.result = new Topology(rawTpl.etag, nodes);\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}