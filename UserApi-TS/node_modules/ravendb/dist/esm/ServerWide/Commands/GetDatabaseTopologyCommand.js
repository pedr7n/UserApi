import { RavenCommand } from "../../Http/RavenCommand.js";
import { ServerNode } from "../../Http/ServerNode.js";
import { Topology } from "../../Http/Topology.js";
import { ObjectUtil } from "../../Utility/ObjectUtil.js";
export class GetDatabaseTopologyCommand extends RavenCommand {
    _applicationIdentifier;
    _debugTag;
    constructor(debugTag, applicationIdentifier) {
        super();
        this._debugTag = debugTag;
        this._applicationIdentifier = applicationIdentifier;
        this.timeout = 15_000;
    }
    createRequest(node) {
        let uri = `${node.url}/topology?name=${node.database}`;
        if (node.url.toLowerCase().includes(".fiddler")) {
            // we want to keep the '.fiddler' stuff there so we'll keep tracking request
            // so we are going to ask the server to respect it
            uri += "&localUrl=" + encodeURIComponent(node.url);
        }
        if (this._debugTag) {
            uri += "&" + this._debugTag;
        }
        if (this._applicationIdentifier) {
            uri += "&applicationIdentifier=" + this._urlEncode(this._applicationIdentifier);
        }
        return { uri };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            return;
        }
        let body = null;
        const rawTpl = await this._pipeline()
            .collectBody(_ => body = _)
            .parseJsonSync()
            .objectKeysTransform(ObjectUtil.camel)
            .process(bodyStream);
        const nodes = rawTpl.nodes
            ? rawTpl.nodes.map(x => Object.assign(new ServerNode(), x))
            : null;
        this.result = new Topology(rawTpl.etag, nodes);
        return body;
    }
    get isReadRequest() {
        return true;
    }
}
//# sourceMappingURL=GetDatabaseTopologyCommand.js.map