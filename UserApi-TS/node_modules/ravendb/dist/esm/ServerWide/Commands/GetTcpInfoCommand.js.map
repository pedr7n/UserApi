{"version":3,"file":"GetTcpInfoCommand.js","sourceRoot":"","sources":["../../../../src/ServerWide/Commands/GetTcpInfoCommand.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAK1D,MAAM,OAAO,iBAAiB;IACnB,GAAG,CAAS;IACZ,WAAW,CAAS;IACpB,IAAI,CAAW;IACf,OAAO,CAAS;IAChB,QAAQ,CAAS;CAC3B;AAED,MAAM,OAAO,iBAAkB,SAAQ,YAA+B;IAEjD,IAAI,CAAS;IACb,OAAO,CAAS;IAC1B,aAAa,CAAa;IAIjC,YAAmB,GAAW,EAAE,MAAe;QAC3C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,IAAI,GAAG,CAAC;QACR,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAChB,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,iBAAiB,IAAI,CAAC,IAAI,EAAE,CAAC;QAClD,CAAC;aAAM,CAAC;YACJ,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,cAAc,IAAI,CAAC,OAAO,iBAAiB,IAAI,CAAC,IAAI,EAAE,CAAC;QAC5E,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;SAChB,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class TcpConnectionInfo {\r\n    public url: string;\r\n    public certificate: string;\r\n    public urls: string[];\r\n    public nodeTag: string;\r\n    public serverId: string;\r\n}\r\n\r\nexport class GetTcpInfoCommand extends RavenCommand<TcpConnectionInfo> {\r\n\r\n    private readonly _tag: string;\r\n    private readonly _dbName: string;\r\n    public requestedNode: ServerNode;\r\n\r\n    public constructor(tag: string);\r\n    public constructor(tag: string, dbName: string);\r\n    public constructor(tag: string, dbName?: string) {\r\n        super();\r\n        this._tag = tag;\r\n        this._dbName = dbName;\r\n        this.timeout = 15_000;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri;\r\n        if (!this._dbName) {\r\n            uri = `${node.url}/info/tcp?tcp=${this._tag}`;\r\n        } else {\r\n            uri = `${node.url}/databases/${this._dbName}/info/tcp?tcp=${this._tag}`;\r\n        }\r\n\r\n        this.requestedNode = node;\r\n        return {\r\n            uri,\r\n            method: \"GET\"\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return true;\r\n    }\r\n}\r\n"]}