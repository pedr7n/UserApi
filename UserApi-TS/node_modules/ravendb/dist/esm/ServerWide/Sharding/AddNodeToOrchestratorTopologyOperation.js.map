{"version":3,"file":"AddNodeToOrchestratorTopologyOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Sharding/AddNodeToOrchestratorTopologyOperation.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAI1D,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAGnE,MAAM,OAAO,sCAAsC;IAC9B,aAAa,CAAS;IACtB,KAAK,CAAS;IAE/B,YAAmB,YAAoB,EAAE,IAAa;QAClD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,oCAAoC,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACpF,CAAC;CACJ;AAED,MAAM,oCAAqC,SAAQ,YAA8C;IAC5E,aAAa,CAAS;IACtB,KAAK,CAAS;IAE/B,YAAmB,YAAoB,EAAE,IAAa;QAClD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,qCAAqC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEjG,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,GAAG,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClD,CAAC;QACD,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;SAChB,CAAC;IACN,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { OrchestratorTopology } from \"../OrchestratorTopology.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class AddNodeToOrchestratorTopologyOperation implements IServerOperation<ModifyOrchestratorTopologyResult> {\r\n    private readonly _databaseName: string;\r\n    private readonly _node: string;\r\n\r\n    public constructor(databaseName: string, node?: string) {\r\n        this._databaseName = databaseName;\r\n        this._node = node;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ModifyOrchestratorTopologyResult> {\r\n        return new AddNodeToOrchestratorTopologyCommand(this._databaseName, this._node);\r\n    }\r\n}\r\n\r\nclass AddNodeToOrchestratorTopologyCommand extends RavenCommand<ModifyOrchestratorTopologyResult> implements IRaftCommand {\r\n    private readonly _databaseName: string;\r\n    private readonly _node: string;\r\n\r\n    public constructor(databaseName: string, node?: string) {\r\n        super();\r\n        this._databaseName = databaseName;\r\n        this._node = node;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/admin/databases/orchestrator?name=\" + this._urlEncode(this._databaseName);\r\n\r\n        if (this._node) {\r\n            uri += \"&node=\" + this._urlEncode(this._node);\r\n        }\r\n        return {\r\n            uri,\r\n            method: \"PUT\"\r\n        };\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\nexport interface ModifyOrchestratorTopologyResult {\r\n    name: string;\r\n    orchestratorTopology: OrchestratorTopology;\r\n    raftCommandIndex: number;\r\n}"]}