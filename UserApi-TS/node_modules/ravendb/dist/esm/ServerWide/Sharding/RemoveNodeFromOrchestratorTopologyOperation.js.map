{"version":3,"file":"RemoveNodeFromOrchestratorTopologyOperation.js","sourceRoot":"","sources":["../../../../src/ServerWide/Sharding/RemoveNodeFromOrchestratorTopologyOperation.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAE1D,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAIvD,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAEnE,MAAM,OAAO,2CAA2C;IACnC,aAAa,CAAS;IACtB,KAAK,CAAS;IAE/B,YAAmB,YAAoB,EAAE,IAAa;QAClD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,yCAAyC,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACzF,CAAC;CACJ;AAED,MAAM,OAAO,yCAA0C,SAAQ,YAA8C;IACxF,aAAa,CAAS;IACtB,KAAK,CAAS;IAE/B,YAAmB,YAAoB,EAAE,IAAa;QAClD,KAAK,EAAE,CAAC;QACR,IAAI,UAAU,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC;YACzC,UAAU,CAAC,0BAA0B,EAAE,sCAAsC,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,UAAU,CAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAI,qCAAqC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE7I,OAAO;YACH,GAAG;YACH,MAAM,EAAE,QAAQ;SACnB,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IServerOperation, OperationResultType } from \"../../Documents/Operations/OperationAbstractions.js\";\r\nimport { ModifyOrchestratorTopologyResult } from \"./AddNodeToOrchestratorTopologyOperation.js\";\r\nimport { DocumentConventions } from \"../../Documents/Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class RemoveNodeFromOrchestratorTopologyOperation implements IServerOperation<ModifyOrchestratorTopologyResult> {\r\n    private readonly _databaseName: string;\r\n    private readonly _node: string;\r\n\r\n    public constructor(databaseName: string, node?: string) {\r\n        this._databaseName = databaseName;\r\n        this._node = node;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ModifyOrchestratorTopologyResult> {\r\n        return new RemoveNodeFromOrchestratorTopologyCommand(this._databaseName, this._node);\r\n    }\r\n}\r\n\r\nexport class RemoveNodeFromOrchestratorTopologyCommand extends RavenCommand<ModifyOrchestratorTopologyResult> implements IRaftCommand {\r\n    private readonly _databaseName: string;\r\n    private readonly _node: string;\r\n\r\n    public constructor(databaseName: string, node?: string) {\r\n        super();\r\n        if (StringUtil.isNullOrEmpty(databaseName)) {\r\n            throwError(\"InvalidArgumentException\", \"DatabaseName cannot be null or empty\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrEmpty(node)) {\r\n            throwError(\"InvalidArgumentException\", \"Node cannot be null or empty\");\r\n        }\r\n\r\n        this._databaseName = databaseName;\r\n        this._node = node;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url +  \"/admin/databases/orchestrator?name=\" + this._urlEncode(this._databaseName) + \"&node=\" + this._urlEncode(this._node);\r\n\r\n        return {\r\n            uri,\r\n            method: \"DELETE\"\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}"]}