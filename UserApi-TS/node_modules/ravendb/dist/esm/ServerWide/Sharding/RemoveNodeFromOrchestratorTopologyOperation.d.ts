import { IServerOperation, OperationResultType } from "../../Documents/Operations/OperationAbstractions.js";
import { ModifyOrchestratorTopologyResult } from "./AddNodeToOrchestratorTopologyOperation.js";
import { DocumentConventions } from "../../Documents/Conventions/DocumentConventions.js";
import { RavenCommand } from "../../Http/RavenCommand.js";
import { IRaftCommand } from "../../Http/IRaftCommand.js";
import { ServerNode } from "../../Http/ServerNode.js";
import { HttpRequestParameters } from "../../Primitives/Http.js";
import { Stream } from "node:stream";
export declare class RemoveNodeFromOrchestratorTopologyOperation implements IServerOperation<ModifyOrchestratorTopologyResult> {
    private readonly _databaseName;
    private readonly _node;
    constructor(databaseName: string, node?: string);
    get resultType(): OperationResultType;
    getCommand(conventions: DocumentConventions): RavenCommand<ModifyOrchestratorTopologyResult>;
}
export declare class RemoveNodeFromOrchestratorTopologyCommand extends RavenCommand<ModifyOrchestratorTopologyResult> implements IRaftCommand {
    private readonly _databaseName;
    private readonly _node;
    constructor(databaseName: string, node?: string);
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
    get isReadRequest(): boolean;
    getRaftUniqueRequestId(): string;
}
//# sourceMappingURL=RemoveNodeFromOrchestratorTopologyOperation.d.ts.map