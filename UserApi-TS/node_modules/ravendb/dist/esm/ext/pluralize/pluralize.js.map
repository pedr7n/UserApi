{"version":3,"file":"pluralize.js","sourceRoot":"","sources":["../../../../src/ext/pluralize/pluralize.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable */\r\n\r\n// Rule storage - pluralize and singularize need to be run sequentially,\r\n// while other rules can be optimized using an object for instant lookups.\r\nlet pluralRules = [];\r\nlet singularRules = [];\r\nlet uncountables = {};\r\nlet irregularPlurals = {};\r\nlet irregularSingles = {};\r\n\r\n/**\r\n * Sanitize a pluralization rule to a usable regular expression.\r\n *\r\n * @param  {(RegExp|string)} rule\r\n * @return {RegExp}\r\n */\r\nfunction sanitizeRule(rule) {\r\n    if (typeof rule === 'string') {\r\n        return new RegExp('^' + rule + '$', 'i');\r\n    }\r\n\r\n    return rule;\r\n}\r\n\r\n/**\r\n * Pass in a word token to produce a function that can replicate the case on\r\n * another word.\r\n *\r\n * @param  {string}   word\r\n * @param  {string}   token\r\n * @return {Function}\r\n */\r\nfunction restoreCase(word, token) {\r\n    // Tokens are an exact match.\r\n    if (word === token) return token;\r\n\r\n    // Lower cased words. E.g. \"hello\".\r\n    if (word === word.toLowerCase()) return token.toLowerCase();\r\n\r\n    // Upper cased words. E.g. \"WHISKY\".\r\n    if (word === word.toUpperCase()) return token.toUpperCase();\r\n\r\n    // Title cased words. E.g. \"Title\".\r\n    if (word[0] === word[0].toUpperCase()) {\r\n        return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\r\n    }\r\n\r\n    // Lower cased words. E.g. \"test\".\r\n    return token.toLowerCase();\r\n}\r\n\r\n/**\r\n * Interpolate a regexp string.\r\n *\r\n * @param  {string} str\r\n * @param  {Array}  args\r\n * @return {string}\r\n */\r\nfunction interpolate(str, args) {\r\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\r\n        return args[index] || '';\r\n    });\r\n}\r\n\r\n/**\r\n * Replace a word using a rule.\r\n *\r\n * @param  {string} word\r\n * @param  {Array}  rule\r\n * @return {string}\r\n */\r\nfunction replace(word, rule) {\r\n    return word.replace(rule[0], function (match, index) {\r\n        var result = interpolate(rule[1], arguments);\r\n\r\n        if (match === '') {\r\n            return restoreCase(word[index - 1], result);\r\n        }\r\n\r\n        return restoreCase(match, result);\r\n    });\r\n}\r\n\r\n/**\r\n * Sanitize a word by passing in the word and sanitization rules.\r\n *\r\n * @param  {string}   token\r\n * @param  {string}   word\r\n * @param  {Array}    rules\r\n * @return {string}\r\n */\r\nfunction sanitizeWord(token, word, rules) {\r\n    // Empty string or doesn't need fixing.\r\n    if (!token.length || uncountables.hasOwnProperty(token)) {\r\n        return word;\r\n    }\r\n\r\n    var len = rules.length;\r\n\r\n    // Iterate over the sanitization rules and use the first one to match.\r\n    while (len--) {\r\n        var rule = rules[len];\r\n\r\n        if (rule[0].test(word)) return replace(word, rule);\r\n    }\r\n\r\n    return word;\r\n}\r\n\r\n/**\r\n * Replace a word with the updated word.\r\n *\r\n * @param  {Object}   replaceMap\r\n * @param  {Object}   keepMap\r\n * @param  {Array}    rules\r\n * @return {Function}\r\n */\r\nfunction replaceWord(replaceMap, keepMap, rules) {\r\n    return function (word) {\r\n        // Get the correct token and case restoration functions.\r\n        var token = word.toLowerCase();\r\n\r\n        // Check against the keep object map.\r\n        if (keepMap.hasOwnProperty(token)) {\r\n            return restoreCase(word, token);\r\n        }\r\n\r\n        // Check against the replacement map for a direct word replacement.\r\n        if (replaceMap.hasOwnProperty(token)) {\r\n            return restoreCase(word, replaceMap[token]);\r\n        }\r\n\r\n        // Run all the rules against the word.\r\n        return sanitizeWord(token, word, rules);\r\n    };\r\n}\r\n\r\n/**\r\n * Check if a word is part of the map.\r\n */\r\nfunction checkWord(replaceMap, keepMap, rules, bool = undefined) {\r\n    return function (word) {\r\n        var token = word.toLowerCase();\r\n\r\n        if (keepMap.hasOwnProperty(token)) return true;\r\n        if (replaceMap.hasOwnProperty(token)) return false;\r\n\r\n        return sanitizeWord(token, token, rules) === token;\r\n    };\r\n}\r\n\r\n\r\n\r\n/**\r\n * Pluralize a word.\r\n *\r\n * @type {Function}\r\n */\r\nexport const plural = replaceWord(\r\n    irregularSingles, irregularPlurals, pluralRules\r\n);\r\n\r\n\r\n/**\r\n * Add a pluralization rule to the collection.\r\n *\r\n * @param {(string|RegExp)} rule\r\n * @param {string}          replacement\r\n */\r\nconst addPluralRule = function (rule, replacement) {\r\n    pluralRules.push([sanitizeRule(rule), replacement]);\r\n};\r\n\r\n/**\r\n * Add a singularization rule to the collection.\r\n *\r\n * @param {(string|RegExp)} rule\r\n * @param {string}          replacement\r\n */\r\nconst addSingularRule = function (rule, replacement) {\r\n    singularRules.push([sanitizeRule(rule), replacement]);\r\n};\r\n\r\n/**\r\n * Add an uncountable word rule.\r\n *\r\n * @param {(string|RegExp)} word\r\n */\r\nconst addUncountableRule = function (word) {\r\n    if (typeof word === 'string') {\r\n        uncountables[word.toLowerCase()] = true;\r\n        return;\r\n    }\r\n\r\n    // Set singular and plural references for the word.\r\n    addPluralRule(word, '$0');\r\n    addSingularRule(word, '$0');\r\n};\r\n\r\n/**\r\n * Add an irregular word definition.\r\n *\r\n * @param {string} single\r\n * @param {string} plural\r\n */\r\nconst addIrregularRule = function (single, plural) {\r\n    plural = plural.toLowerCase();\r\n    single = single.toLowerCase();\r\n\r\n    irregularSingles[single] = plural;\r\n    irregularPlurals[plural] = single;\r\n};\r\n\r\n/**\r\n * Irregular rules.\r\n */\r\n[\r\n    // Pronouns.\r\n    ['I', 'we'],\r\n    ['me', 'us'],\r\n    ['he', 'they'],\r\n    ['she', 'they'],\r\n    ['them', 'them'],\r\n    ['myself', 'ourselves'],\r\n    ['yourself', 'yourselves'],\r\n    ['itself', 'themselves'],\r\n    ['herself', 'themselves'],\r\n    ['himself', 'themselves'],\r\n    ['themself', 'themselves'],\r\n    ['is', 'are'],\r\n    ['was', 'were'],\r\n    ['has', 'have'],\r\n    ['this', 'these'],\r\n    ['that', 'those'],\r\n    // Words ending in with a consonant and `o`.\r\n    ['echo', 'echoes'],\r\n    ['dingo', 'dingoes'],\r\n    ['volcano', 'volcanoes'],\r\n    ['tornado', 'tornadoes'],\r\n    ['torpedo', 'torpedoes'],\r\n    // Ends with `us`.\r\n    ['genus', 'genera'],\r\n    ['viscus', 'viscera'],\r\n    // Ends with `ma`.\r\n    ['stigma', 'stigmata'],\r\n    ['stoma', 'stomata'],\r\n    ['dogma', 'dogmata'],\r\n    ['lemma', 'lemmata'],\r\n    ['schema', 'schemata'],\r\n    ['anathema', 'anathemata'],\r\n    // Other irregular rules.\r\n    ['ox', 'oxen'],\r\n    ['axe', 'axes'],\r\n    ['die', 'dice'],\r\n    ['yes', 'yeses'],\r\n    ['foot', 'feet'],\r\n    ['eave', 'eaves'],\r\n    ['goose', 'geese'],\r\n    ['tooth', 'teeth'],\r\n    ['quiz', 'quizzes'],\r\n    ['human', 'humans'],\r\n    ['proof', 'proofs'],\r\n    ['carve', 'carves'],\r\n    ['valve', 'valves'],\r\n    ['looey', 'looies'],\r\n    ['thief', 'thieves'],\r\n    ['groove', 'grooves'],\r\n    ['pickaxe', 'pickaxes'],\r\n    ['passerby', 'passersby']\r\n].forEach(function (rule) {\r\n    return addIrregularRule(rule[0], rule[1]);\r\n});\r\n\r\n/**\r\n * Pluralization rules.\r\n */\r\n[\r\n    [/s?$/i, 's'],\r\n    [/[^\\u0000-\\u007F]$/i, '$0'],\r\n    [/([^aeiou]ese)$/i, '$1'],\r\n    [/(ax|test)is$/i, '$1es'],\r\n    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\r\n    [/(e[mn]u)s?$/i, '$1s'],\r\n    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\r\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\r\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\r\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\r\n    [/(her|at|gr)o$/i, '$1oes'],\r\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\r\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\r\n    [/sis$/i, 'ses'],\r\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\r\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\r\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\r\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\r\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\r\n    [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\r\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\r\n    [/(child)(?:ren)?$/i, '$1ren'],\r\n    [/eaux$/i, '$0'],\r\n    [/m[ae]n$/i, 'men'],\r\n    ['thou', 'you']\r\n].forEach(function (rule) {\r\n    return addPluralRule(rule[0], rule[1]);\r\n});\r\n\r\n/**\r\n * Singularization rules.\r\n */\r\n[\r\n    [/s$/i, ''],\r\n    [/(ss)$/i, '$1'],\r\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\r\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\r\n    [/ies$/i, 'y'],\r\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\r\n    [/\\b(mon|smil)ies$/i, '$1ey'],\r\n    [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\r\n    [/(seraph|cherub)im$/i, '$1'],\r\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\r\n    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\r\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\r\n    [/(test)(?:is|es)$/i, '$1is'],\r\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\r\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\r\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\r\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\r\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\r\n    [/(matr|append)ices$/i, '$1ix'],\r\n    [/(pe)(rson|ople)$/i, '$1rson'],\r\n    [/(child)ren$/i, '$1'],\r\n    [/(eau)x?$/i, '$1'],\r\n    [/men$/i, 'man']\r\n].forEach(function (rule) {\r\n    return addSingularRule(rule[0], rule[1]);\r\n});\r\n\r\n/**\r\n * Uncountable rules.\r\n */\r\n[\r\n    // Singular words with no plurals.\r\n    'adulthood',\r\n    'advice',\r\n    'agenda',\r\n    'aid',\r\n    'aircraft',\r\n    'alcohol',\r\n    'ammo',\r\n    'analytics',\r\n    'anime',\r\n    'athletics',\r\n    'audio',\r\n    'bison',\r\n    'blood',\r\n    'bream',\r\n    'buffalo',\r\n    'butter',\r\n    'carp',\r\n    'cash',\r\n    'chassis',\r\n    'chess',\r\n    'clothing',\r\n    'cod',\r\n    'commerce',\r\n    'cooperation',\r\n    'corps',\r\n    'debris',\r\n    'diabetes',\r\n    'digestion',\r\n    'elk',\r\n    'energy',\r\n    'equipment',\r\n    'excretion',\r\n    'expertise',\r\n    'firmware',\r\n    'flounder',\r\n    'fun',\r\n    'gallows',\r\n    'garbage',\r\n    'graffiti',\r\n    'hardware',\r\n    'headquarters',\r\n    'health',\r\n    'herpes',\r\n    'highjinks',\r\n    'homework',\r\n    'housework',\r\n    'information',\r\n    'jeans',\r\n    'justice',\r\n    'kudos',\r\n    'labour',\r\n    'literature',\r\n    'machinery',\r\n    'mackerel',\r\n    'mail',\r\n    'media',\r\n    'mews',\r\n    'moose',\r\n    'music',\r\n    'mud',\r\n    'manga',\r\n    'news',\r\n    'only',\r\n    'personnel',\r\n    'pike',\r\n    'plankton',\r\n    'pliers',\r\n    'police',\r\n    'pollution',\r\n    'premises',\r\n    'rain',\r\n    'research',\r\n    'rice',\r\n    'salmon',\r\n    'scissors',\r\n    'series',\r\n    'sewage',\r\n    'shambles',\r\n    'shrimp',\r\n    'software',\r\n    'species',\r\n    'staff',\r\n    'swine',\r\n    'tennis',\r\n    'traffic',\r\n    'transportation',\r\n    'trout',\r\n    'tuna',\r\n    'wealth',\r\n    'welfare',\r\n    'whiting',\r\n    'wildebeest',\r\n    'wildlife',\r\n    'you',\r\n    /pok[eé]mon$/i,\r\n    // Regexes.\r\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\r\n    /deer$/i, // \"deer\", \"reindeer\"\r\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\r\n    /measles$/i,\r\n    /o[iu]s$/i, // \"carnivorous\"\r\n    /pox$/i, // \"chickpox\", \"smallpox\"\r\n    /sheep$/i\r\n].forEach(addUncountableRule);\r\n\r\n"]}