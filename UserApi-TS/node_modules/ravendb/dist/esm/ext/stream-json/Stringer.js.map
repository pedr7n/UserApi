{"version":3,"file":"Stringer.js","sourceRoot":"","sources":["../../../../src/ext/stream-json/Stringer.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable */\r\n\r\nimport { Transform } from \"node:stream\";\r\n\r\nconst noCommaAfter = {startObject: 1, startArray: 1, endKey: 1, keyValue: 1},\r\n    noSpaceAfter = {endObject: 1, endArray: 1, '': 1},\r\n    noSpaceBefore = {startObject: 1, startArray: 1},\r\n    depthIncrement = {startObject: 1, startArray: 1},\r\n    depthDecrement = {endObject: 1, endArray: 1},\r\n    values = {startKey: 'keyValue', startString: 'stringValue', startNumber: 'numberValue'},\r\n    stopNames = {startKey: 'endKey', startString: 'endString', startNumber: 'endNumber'},\r\n    symbols = {\r\n        startObject: '{',\r\n        endObject: '}',\r\n        startArray: '[',\r\n        endArray: ']',\r\n        startKey: '\"',\r\n        endKey: '\":',\r\n        startString: '\"',\r\n        endString: '\"',\r\n        startNumber: '',\r\n        endNumber: '',\r\n        nullValue: 'null',\r\n        trueValue: 'true',\r\n        falseValue: 'false'\r\n    };\r\n\r\nconst skipValue = endName =>\r\n    function (chunk, encoding, callback) {\r\n        if (chunk.name === endName) {\r\n            this._transform = this._prev_transform;\r\n        }\r\n        callback(null);\r\n    };\r\n\r\nconst replaceSymbols = {'\\b': '\\\\b', '\\f': '\\\\f', '\\n': '\\\\n', '\\r': '\\\\r', '\\t': '\\\\t', '\"': '\\\\\"', '\\\\': '\\\\\\\\'};\r\nconst sanitizeString = value =>\r\n    value.replace(/[\\b\\f\\n\\r\\t\\\"\\\\\\u0000-\\u001F\\u007F-\\u009F]/g, match =>\r\n        replaceSymbols.hasOwnProperty(match) ? replaceSymbols[match] : '\\\\u' + ('0000' + match.charCodeAt(0).toString(16)).slice(-4)\r\n    );\r\n\r\nconst doNothing = () => {};\r\n\r\nexport class Stringer extends Transform {\r\n    static make(options) {\r\n        return new Stringer(options);\r\n    }\r\n\r\n    static stringer = Stringer.make;\r\n\r\n    _values: any;\r\n    _prev: any;\r\n    _depth: number;\r\n    _prev_transform: any;\r\n    _makeArray: any;\r\n\r\n    constructor(options) {\r\n        super(Object.assign({}, options, {writableObjectMode: true, readableObjectMode: false}));\r\n\r\n        this._values = {};\r\n        if (options) {\r\n            'useValues' in options && (this._values.keyValue = this._values.stringValue = this._values.numberValue = options.useValues);\r\n            'useKeyValues' in options && (this._values.keyValue = options.useKeyValues);\r\n            'useStringValues' in options && (this._values.stringValue = options.useStringValues);\r\n            'useNumberValues' in options && (this._values.numberValue = options.useNumberValues);\r\n            this._makeArray = options.makeArray;\r\n        }\r\n\r\n        this._prev = '';\r\n        this._depth = 0;\r\n\r\n        if (this._makeArray) {\r\n            this._transform = this._arrayTransform;\r\n            this._flush = this._arrayFlush;\r\n        }\r\n    }\r\n\r\n    _arrayTransform(chunk, encoding, callback) {\r\n        // it runs once\r\n        delete this._transform;\r\n        this._transform({name: 'startArray'}, encoding, doNothing);\r\n        this._transform(chunk, encoding, callback);\r\n    }\r\n\r\n    _arrayFlush(callback) {\r\n        if (this._transform === this._arrayTransform) {\r\n            delete this._transform;\r\n            this._transform({name: 'startArray'}, null, doNothing);\r\n        }\r\n        this._transform({name: 'endArray'}, null, callback);\r\n    }\r\n\r\n    _transform(chunk, _, callback) {\r\n        if (this._values[chunk.name]) {\r\n            if (this._depth && noCommaAfter[this._prev] !== 1) this.push(',');\r\n            switch (chunk.name) {\r\n                case 'keyValue':\r\n                    this.push('\"' + sanitizeString(chunk.value) + '\":');\r\n                    break;\r\n                case 'stringValue':\r\n                    this.push('\"' + sanitizeString(chunk.value) + '\"');\r\n                    break;\r\n                case 'numberValue':\r\n                    this.push(chunk.value);\r\n                    break;\r\n            }\r\n        } else {\r\n            // filter out values\r\n            switch (chunk.name) {\r\n                case 'endObject':\r\n                case 'endArray':\r\n                case 'endKey':\r\n                case 'endString':\r\n                case 'endNumber':\r\n                    this.push(symbols[chunk.name]);\r\n                    break;\r\n                case 'stringChunk':\r\n                    this.push(sanitizeString(chunk.value));\r\n                    break;\r\n                case 'numberChunk':\r\n                    this.push(chunk.value);\r\n                    break;\r\n                case 'keyValue':\r\n                case 'stringValue':\r\n                case 'numberValue':\r\n                    // skip completely\r\n                    break;\r\n                case 'startKey':\r\n                case 'startString':\r\n                case 'startNumber':\r\n                    if (this._values[values[chunk.name]]) {\r\n                        this._prev_transform = this._transform;\r\n                        this._transform = skipValue(stopNames[chunk.name]);\r\n                        return callback(null);\r\n                    }\r\n                // intentional fall down\r\n                default:\r\n                    // case 'startObject': case 'startArray': case 'startKey': case 'startString':\r\n                    // case 'startNumber': case 'nullValue': case 'trueValue': case 'falseValue':\r\n                    if (this._depth) {\r\n                        if (noCommaAfter[this._prev] !== 1) this.push(',');\r\n                    } else {\r\n                        if (noSpaceAfter[this._prev] !== 1 && noSpaceBefore[chunk.name] !== 1) this.push(' ');\r\n                    }\r\n                    this.push(symbols[chunk.name]);\r\n                    break;\r\n            }\r\n            if (depthIncrement[chunk.name]) {\r\n                ++this._depth;\r\n            } else if (depthDecrement[chunk.name]) {\r\n                --this._depth;\r\n            }\r\n        }\r\n        this._prev = chunk.name;\r\n        callback(null);\r\n    }\r\n}\r\n"]}