{"version":3,"file":"JsonOperation.js","sourceRoot":"","sources":["../../../src/Mapping/JsonOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { TypeUtil } from \"../Utility/TypeUtil.js\";\r\nimport { DocumentInfo } from \"../Documents/Session/DocumentInfo.js\";\r\nimport { DocumentsChanges, ChangeType } from \"../Documents/Session/DocumentsChanges.js\";\r\nimport { CONSTANTS } from \"../Constants.js\";\r\nimport { throwError } from \"../Exceptions/index.js\";\r\n\r\nexport class JsonOperation {\r\n\r\n    public static entityChanged(\r\n        newObj: object,\r\n        documentInfo: DocumentInfo,\r\n        changes: { [id: string]: DocumentsChanges[] }): boolean {\r\n\r\n        const docChanges: DocumentsChanges[] = changes ? [] : null;\r\n\r\n        if (!documentInfo.newDocument && documentInfo.document) {\r\n            return JsonOperation._compareJson(\"\", documentInfo.id, documentInfo.document, newObj, changes, docChanges);\r\n        }\r\n\r\n        if (!changes) {\r\n            return true;\r\n        }\r\n\r\n        JsonOperation._newChange(null, null, null, null, docChanges, \"DocumentAdded\");\r\n        changes[documentInfo.id] = docChanges;\r\n        return true;\r\n    }\r\n\r\n    private static _fieldPathCombine(path1: string, path2: string): string {\r\n        return !path1 ? path2 : path1 + \".\" + path2;\r\n    }\r\n\r\n    private static _compareJson(\r\n        fieldPath: string,\r\n        id: string,\r\n        originalJson: object,\r\n        newJson: object,\r\n        changes: { [id: string]: DocumentsChanges[] },\r\n        docChanges: DocumentsChanges[]): boolean {\r\n        const newJsonProps: string[] = Object.entries(newJson).filter(([_, value]) => typeof value !== \"undefined\").map(x => x[0]);\r\n        const oldJsonProps: string[] = Object.entries(originalJson).filter(([_, value]) => typeof value !== \"undefined\").map(x => x[0]);\r\n\r\n        const newFields = new Set(newJsonProps.filter(x => !oldJsonProps.includes(x)));\r\n        const removedFields = oldJsonProps.filter(x => !newJsonProps.includes(x));\r\n\r\n        for (const field of removedFields) {\r\n            if (!changes) {\r\n                return true;\r\n            }\r\n\r\n            JsonOperation._newChange(fieldPath, field, null, originalJson[field], docChanges, \"RemovedField\");\r\n        }\r\n\r\n        for (const prop of newJsonProps) {\r\n\r\n            if (CONSTANTS.Documents.Metadata.LAST_MODIFIED === prop ||\r\n                CONSTANTS.Documents.Metadata.COLLECTION === prop ||\r\n                CONSTANTS.Documents.Metadata.CHANGE_VECTOR === prop ||\r\n                CONSTANTS.Documents.Metadata.ID === prop ||\r\n                CONSTANTS.Documents.Metadata.KEY === prop) {\r\n                continue;\r\n            }\r\n\r\n            if (newFields.has(prop)) {\r\n                if (!changes) {\r\n                    return true;\r\n                }\r\n\r\n                JsonOperation._newChange(fieldPath, prop, newJson[prop], null, docChanges, \"NewField\");\r\n                continue;\r\n            }\r\n\r\n            const newProp = newJson[prop];\r\n            const oldProp = originalJson[prop];\r\n\r\n            let changed: boolean;\r\n            const typeOfNewProp = typeof newProp;\r\n            if (typeOfNewProp === \"number\"\r\n                || typeOfNewProp === \"boolean\"\r\n                || typeOfNewProp === \"string\") {\r\n\r\n                if (newProp === oldProp || JsonOperation._compareValues(oldProp, newProp)) {\r\n                    continue;\r\n                }\r\n                if (!changes) {\r\n                    return true;\r\n                }\r\n\r\n                JsonOperation._newChange(fieldPath, prop, newProp, oldProp, docChanges, \"FieldChanged\");\r\n            } else if (!newProp) {\r\n                if (oldProp) {\r\n                    if (!changes) {\r\n                        return true;\r\n                    }\r\n\r\n                    JsonOperation._newChange(fieldPath, prop, null, oldProp, docChanges, \"FieldChanged\");\r\n                }\r\n            } else if (Array.isArray(newProp)) {\r\n                if (!Array.isArray(oldProp)) {\r\n                    if (!changes) {\r\n                        return true;\r\n                    }\r\n\r\n                    JsonOperation._newChange(fieldPath, prop, newProp, oldProp, docChanges, \"FieldChanged\");\r\n                }\r\n\r\n                changed = JsonOperation._compareJsonArray(\r\n                    JsonOperation._fieldPathCombine(fieldPath, prop),\r\n                    id, \r\n                    oldProp as any[], \r\n                    newProp as any[], \r\n                    changes, \r\n                    docChanges, \r\n                    prop);\r\n                if (!changes && changed) {\r\n                    return true;\r\n                }\r\n            } else if (TypeUtil.isObject(newProp)) {\r\n                if (!oldProp) {\r\n                    if (!changes) {\r\n                        return true;\r\n                    }\r\n\r\n                    JsonOperation._newChange(fieldPath, prop, newProp, null, docChanges, \"FieldChanged\");\r\n                } else {\r\n                    changed = JsonOperation._compareJson(\r\n                        JsonOperation._fieldPathCombine(fieldPath, prop), \r\n                        id, \r\n                        oldProp as object, \r\n                        newProp as object, \r\n                        changes, \r\n                        docChanges);\r\n\r\n                    if (!changes && changed) {\r\n                        return true;\r\n                    }\r\n                }\r\n            } else {\r\n                throwError(\"InvalidArgumentException\", `Unknown type of JSON property: ${typeOfNewProp}.`);\r\n            }\r\n        }\r\n\r\n        if (!changes || docChanges.length <= 0) {\r\n            return false;\r\n        }\r\n\r\n        changes[id] = docChanges;\r\n        return true;\r\n    }\r\n\r\n    private static _compareValues(oldProp: string | boolean | number, newProp): boolean {\r\n        return oldProp === newProp; // triple equals compares type as well\r\n    }\r\n\r\n    private static _compareJsonArray(\r\n        fieldPath: string,\r\n        id: string,\r\n        oldArray: any[],\r\n        newArray: any[],\r\n        changes: { [id: string]: DocumentsChanges[] },\r\n        docChanges: DocumentsChanges[],\r\n        propName: string): boolean {\r\n        // if we don't care about the changes\r\n        if (oldArray.length !== newArray.length && !changes) {\r\n            return true;\r\n        }\r\n\r\n        let position = 0;\r\n        let changed: boolean = false;\r\n\r\n        let oldArrayItem = oldArray[position];\r\n        let typeOfOldArrayItem = typeof oldArrayItem;\r\n        let newArrayItem = newArray[position];\r\n        let typeOfNewArrayItem = typeof newArrayItem;\r\n\r\n        while (position < oldArray.length && position < newArray.length) {\r\n            if (TypeUtil.isObject(oldArrayItem)) {\r\n                if (TypeUtil.isObject(newArrayItem)) {\r\n                    changed = changed || this._compareJson(\r\n                        JsonOperation._addIndexFieldPath(fieldPath, position), \r\n                        id, \r\n                        oldArrayItem, \r\n                        newArrayItem, \r\n                        changes, \r\n                        docChanges);\r\n                } else {\r\n                    changed = true;\r\n                    if (changes) {\r\n                        this._newChange(\r\n                            JsonOperation._addIndexFieldPath(fieldPath, position), \r\n                            propName, \r\n                            newArrayItem, \r\n                            oldArrayItem, \r\n                            docChanges, \r\n                            \"ArrayValueAdded\");\r\n                    }\r\n                }\r\n            } else if (Array.isArray(oldArrayItem)) {\r\n                if (Array.isArray(newArrayItem)) {\r\n                    changed = changed\r\n                        || this._compareJsonArray(\r\n                            JsonOperation._addIndexFieldPath(fieldPath, position),\r\n                            id, \r\n                            oldArrayItem, \r\n                            newArrayItem, \r\n                            changes, \r\n                            docChanges, \r\n                            propName);\r\n                } else {\r\n                    changed = true;\r\n                    if (changes) {\r\n                        this._newChange(\r\n                            JsonOperation._addIndexFieldPath(fieldPath, position),\r\n                            propName, \r\n                            newArrayItem, \r\n                            oldArrayItem, \r\n                            docChanges, \r\n                            \"ArrayValueChanged\");\r\n                    }\r\n                }\r\n            } else if (!oldArrayItem) {\r\n                if (newArrayItem) {\r\n                    changed = true;\r\n                    if (changes) {\r\n                        this._newChange(\r\n                            JsonOperation._addIndexFieldPath(fieldPath, position),\r\n                            propName, \r\n                            newArrayItem, \r\n                            oldArrayItem, \r\n                            docChanges, \r\n                            \"ArrayValueAdded\");\r\n                    }\r\n                }\r\n            } else {\r\n                if (oldArrayItem !== newArrayItem) {\r\n                    if (changes) {\r\n                        this._newChange(\r\n                            JsonOperation._addIndexFieldPath(fieldPath, position),\r\n                            propName, \r\n                            newArrayItem,\r\n                            oldArrayItem, \r\n                            docChanges, \r\n                            \"ArrayValueChanged\");\r\n                    }\r\n\r\n                    changed = true;\r\n                }\r\n            }\r\n\r\n            position++;\r\n            oldArrayItem = oldArray[position];\r\n            typeOfOldArrayItem = typeof oldArrayItem;\r\n            newArrayItem = newArray[position];\r\n            typeOfNewArrayItem = typeof newArrayItem;\r\n        }\r\n\r\n        if (!changes) {\r\n            return changed;\r\n        }\r\n\r\n        // if one of the arrays is larger than the other\r\n        while (position < oldArray.length) {\r\n            this._newChange(fieldPath, propName, null, oldArray[position], docChanges, \"ArrayValueRemoved\");\r\n            position++;\r\n        }\r\n\r\n        while (position < newArray.length) {\r\n            this._newChange(fieldPath, propName, newArray[position], null, docChanges, \"ArrayValueAdded\");\r\n            position++;\r\n        }\r\n\r\n        return changed;\r\n    }\r\n\r\n    private static _addIndexFieldPath(fieldPath: string, position: number): string {\r\n        return fieldPath + \"[\" + position + \"]\";\r\n    }\r\n\r\n    private static _newChange(\r\n        fieldPath: string,\r\n        name: string, \r\n        newValue: any, \r\n        oldValue: any, \r\n        docChanges: DocumentsChanges[], \r\n        change: ChangeType): void {\r\n        const documentsChanges = new DocumentsChanges();\r\n        documentsChanges.fieldName = name;\r\n        documentsChanges.fieldNewValue = newValue;\r\n        documentsChanges.fieldOldValue = oldValue;\r\n        documentsChanges.change = change;\r\n        documentsChanges.fieldPath = fieldPath;\r\n        docChanges.push(documentsChanges);\r\n    }\r\n}\r\n"]}