{"version":3,"file":"Serializer.js","sourceRoot":"","sources":["../../../../src/Mapping/Json/Serializer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AACpD,OAAO,EAAE,gBAAgB,EAAE,MAAM,eAAe,CAAC;AAKjD,MAAM,OAAO,cAAc;IAEN,QAAQ,CAAmB;IAC3B,SAAS,CAAoB;IAE9C,YAAY,OAAwB,EAAE,QAA0B;QAC5D,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,WAAW,CAAmB,UAAkB;QACnD,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAY,CAAC;IAC5D,CAAC;IAEM,SAAS,CAAC,GAAW;QACxB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,UAAU;QACpB,OAAO,IAAI,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACpD,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,2BAA2B;QACrC,OAAO,IAAI,cAAc,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC;IACpE,CAAC;IAEM,MAAM,CAAC,aAAa,CAAI,GAAM;QACjC,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;YACpB,OAAO,SAAc,CAAC;QAC1B,CAAC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3C,CAAC;CACJ","sourcesContent":["import { pascalCaseReplacer } from \"./Replacers.js\";\r\nimport { camelCaseReviver } from \"./Revivers.js\";\r\n\r\nexport type ReviverFunction = (key: string, value: any) => any;\r\nexport type ReplacerFunction = (key: string, value: any) => any;\r\n\r\nexport class JsonSerializer {\r\n\r\n    private readonly _reviver?: ReviverFunction;\r\n    private readonly _replacer?: ReplacerFunction;\r\n\r\n    constructor(reviver: ReviverFunction, replacer: ReplacerFunction) {\r\n        this._reviver = reviver;\r\n        this._replacer = replacer;\r\n    }\r\n\r\n    public deserialize<TResult = object>(jsonString: string) {\r\n        return JSON.parse(jsonString, this._reviver) as TResult;\r\n    }\r\n\r\n    public serialize(obj: object): string {\r\n        return JSON.stringify(obj, this._replacer);\r\n    }\r\n\r\n    /**\r\n     * Serializer which doesn't touch casing - just using build-in JS functions like\r\n     * stringify and parse.\r\n     */\r\n    public static getDefault(): JsonSerializer {\r\n        return new JsonSerializer(undefined, undefined);\r\n    }\r\n\r\n    /**\r\n     * Serialization changes from camelCasing to PascalCasing\r\n     * Deserialization changes from PascalCasing to camelCasing\r\n     */\r\n    public static getDefaultForCommandPayload(): JsonSerializer {\r\n        return new JsonSerializer(camelCaseReviver, pascalCaseReplacer);\r\n    }\r\n\r\n    public static toPlainObject<T>(obj: T): T {\r\n        if (obj === undefined) {\r\n            return undefined as T;\r\n        }\r\n        \r\n        return JSON.parse(JSON.stringify(obj));\r\n    }\r\n}"]}