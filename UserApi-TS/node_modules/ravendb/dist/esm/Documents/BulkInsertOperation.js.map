{"version":3,"file":"BulkInsertOperation.js","sourceRoot":"","sources":["../../../src/Documents/BulkInsertOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { GenerateEntityIdOnTheClient } from \"./Identity/GenerateEntityIdOnTheClient.js\";\r\nimport { Readable, Stream } from \"node:stream\";\r\nimport { RavenCommand } from \"../Http/RavenCommand.js\";\r\nimport { HttpRequestParameters } from \"../Primitives/Http.js\";\r\nimport { IMetadataDictionary } from \"./Session/IMetadataDictionary.js\";\r\nimport { MetadataInternal } from \"../Mapping/MetadataAsDictionary.js\";\r\nimport { CONSTANTS, HEADERS } from \"../Constants.js\";\r\nimport { getError, throwError } from \"../Exceptions/index.js\";\r\nimport { GetOperationStateCommand } from \"./Operations/GetOperationStateOperation.js\";\r\nimport { StringUtil } from \"../Utility/StringUtil.js\";\r\nimport { JsonSerializer } from \"../Mapping/Json/Serializer.js\";\r\nimport { RequestExecutor } from \"../Http/RequestExecutor.js\";\r\nimport { IDocumentStore } from \"./IDocumentStore.js\";\r\nimport { GetNextOperationIdCommand } from \"./Commands/GetNextOperationIdCommand.js\";\r\nimport { DocumentInfo } from \"./Session/DocumentInfo.js\";\r\nimport { EntityToJson } from \"./Session/EntityToJson.js\";\r\nimport { KillOperationCommand } from \"./Commands/KillOperationCommand.js\";\r\nimport { DocumentConventions } from \"./Conventions/DocumentConventions.js\";\r\nimport { ServerNode } from \"../Http/ServerNode.js\";\r\nimport { MetadataObject } from \"./Session/MetadataObject.js\";\r\nimport { CommandType } from \"./Commands/CommandData.js\";\r\nimport { TypeUtil } from \"../Utility/TypeUtil.js\";\r\nimport { IDisposable } from \"../Types/Contracts.js\";\r\nimport { TypedTimeSeriesEntry } from \"./Session/TimeSeries/TypedTimeSeriesEntry.js\";\r\nimport { ClassConstructor, EntityConstructor } from \"../Types/index.js\";\r\nimport { TimeSeriesOperations } from \"./TimeSeries/TimeSeriesOperations.js\";\r\nimport { TimeSeriesValuesHelper } from \"./Session/TimeSeries/TimeSeriesValuesHelper.js\";\r\nimport { Timer } from \"../Primitives/Timer.js\";\r\nimport { EventEmitter } from \"node:events\";\r\nimport { BulkInsertOnProgressEventArgs } from \"./Session/SessionEvents.js\";\r\nimport { acquireSemaphore } from \"../Utility/SemaphoreUtil.js\";\r\nimport { Buffer } from \"node:buffer\";\r\nimport { Semaphore } from \"../Utility/Semaphore.js\";\r\nimport { BulkInsertOperationBase } from \"./BulkInsert/BulkInsertOperationBase.js\";\r\nimport { BulkInsertOptions } from \"./BulkInsert/BulkInsertOptions.js\";\r\nimport { BulkInsertWriter } from \"./BulkInsert/BulkInsertWriter.js\";\r\nimport { HttpCompressionAlgorithm } from \"../Http/HttpCompressionAlgorithm.js\";\r\n\r\nexport class BulkInsertOperation extends BulkInsertOperationBase<object> {\r\n\r\n    private static _countersBulkInsertOperationClass = class CountersBulkInsertOperation {\r\n        private readonly _operation: BulkInsertOperation;\r\n        private _id: string;\r\n        private _first: boolean = true;\r\n        private static readonly MAX_COUNTERS_IN_BATCH = 1024;\r\n        private _countersInBatch = 0;\r\n\r\n        public constructor(bulkInsertOperation: BulkInsertOperation) {\r\n            this._operation = bulkInsertOperation;\r\n        }\r\n\r\n        public async increment(id: string, name: string): Promise<void>;\r\n        public async increment(id: string, name: string, delta: number): Promise<void>;\r\n        public async increment(id: string, name: string, delta: number = 1): Promise<void> {\r\n            const check = await this._operation._concurrencyCheck();\r\n\r\n            try {\r\n                await this._operation._executeBeforeStore();\r\n\r\n                if (this._operation._inProgressCommand === \"TimeSeries\") {\r\n                    BulkInsertOperation._timeSeriesBulkInsertBaseClass.throwAlreadyRunningTimeSeries();\r\n                }\r\n\r\n                try {\r\n                    const isFirst = !this._id;\r\n\r\n                    if (isFirst || !StringUtil.equalsIgnoreCase(this._id, id)) {\r\n                        if (!isFirst) {\r\n                            //we need to end the command for the previous document id\r\n                            this._operation._writer.write(\"]}},\");\r\n                        } else if (!this._operation._first) {\r\n                            this._operation._writeComma();\r\n                        }\r\n\r\n                        this._operation._first = false;\r\n\r\n                        this._id = id;\r\n                        this._operation._inProgressCommand = \"Counters\";\r\n\r\n                        this._writePrefixForNewCommand();\r\n                    }\r\n\r\n                    if (this._countersInBatch >= CountersBulkInsertOperation.MAX_COUNTERS_IN_BATCH) {\r\n                        this._operation._writer.write(\"]}},\");\r\n\r\n                        this._writePrefixForNewCommand();\r\n                    }\r\n\r\n                    this._countersInBatch++;\r\n\r\n                    if (!this._first) {\r\n                        this._operation._writeComma();\r\n                    }\r\n\r\n                    this._first = false;\r\n\r\n                    this._operation._writer.write(`{\"Type\":\"Increment\",\"CounterName\":\"`);\r\n                    this._operation._writeString(name);\r\n                    this._operation._writer.write(`\",\"Delta\":`);\r\n                    this._operation._writer.write(delta.toString());\r\n                    this._operation._writer.write(\"}\");\r\n\r\n                    await this._operation.flushIfNeeded();\r\n\r\n                } catch (e) {\r\n                    this._operation._handleErrors(this._id, e);\r\n                }\r\n            } finally {\r\n                check.dispose();\r\n            }\r\n        }\r\n\r\n        public endPreviousCommandIfNeeded() {\r\n            if (!this._id) {\r\n                return;\r\n            }\r\n\r\n            this._operation._writer.write(\"]}}\");\r\n            this._id = null;\r\n        }\r\n\r\n        private _writePrefixForNewCommand() {\r\n            this._first = true;\r\n            this._countersInBatch = 0;\r\n\r\n            this._operation._writer.write(`{\"Id\":\"`);\r\n            this._operation._writeString(this._id);\r\n            this._operation._writer.write(`\",\"Type\":\"Counters\",\"Counters\":{\"DocumentId\":\"`);\r\n            this._operation._writeString(this._id);\r\n            this._operation._writer.write(`\",\"Operations\":[`);\r\n        }\r\n    }\r\n\r\n    private static _timeSeriesBulkInsertBaseClass = class TimeSeriesBulkInsertBase implements IDisposable {\r\n        private readonly _operation: BulkInsertOperation;\r\n        private readonly _id: string;\r\n        private readonly _name: string;\r\n        private _first: boolean = true;\r\n        private _timeSeriesInBatch: number = 0;\r\n\r\n        protected constructor(operation: BulkInsertOperation, id: string, name: string) {\r\n            operation._endPreviousCommandIfNeeded();\r\n\r\n            this._operation = operation;\r\n            this._id = id;\r\n            this._name = name;\r\n\r\n            this._operation._inProgressCommand = \"TimeSeries\";\r\n        }\r\n\r\n        protected async _appendInternal(timestamp: Date, values: number[], tag: string): Promise<void> {\r\n            const check = await this._operation._concurrencyCheck();\r\n            try {\r\n                await this._operation._executeBeforeStore();\r\n\r\n                try {\r\n                    if (this._first) {\r\n                        if (!this._operation._first) {\r\n                            this._operation._writeComma();\r\n                        }\r\n\r\n                        this._writePrefixForNewCommand();\r\n                    } else if (this._timeSeriesInBatch >= this._operation._timeSeriesBatchSize) {\r\n                        this._operation._writer.write(\"]}},\");\r\n                        this._writePrefixForNewCommand();\r\n                    }\r\n\r\n                    this._timeSeriesInBatch++;\r\n\r\n                    if (!this._first) {\r\n                        this._operation._writeComma();\r\n                    }\r\n\r\n                    this._first = false;\r\n\r\n                    this._operation._writer.write(\"[\");\r\n                    this._operation._writer.write(timestamp.getTime().toString());\r\n                    this._operation._writeComma();\r\n\r\n                    this._operation._writer.write(values.length.toString());\r\n                    this._operation._writeComma();\r\n\r\n                    let firstValue = true;\r\n\r\n                    for (const value of values) {\r\n                        if (!firstValue) {\r\n                            this._operation._writeComma();\r\n                        }\r\n\r\n                        firstValue = false;\r\n                        this._operation._writer.write(((value ?? 0).toString()));\r\n                    }\r\n\r\n                    if (tag) {\r\n                        this._operation._writer.write(`,\"`);\r\n                        this._operation._writeString(tag);\r\n                        this._operation._writer.write(`\"`);\r\n                    }\r\n\r\n                    this._operation._writer.write(\"]\");\r\n\r\n                    await this._operation.flushIfNeeded();\r\n                } catch (e) {\r\n                    this._operation._handleErrors(this._id, e);\r\n                }\r\n            } finally {\r\n                check.dispose();\r\n            }\r\n        }\r\n\r\n        private _writePrefixForNewCommand() {\r\n            this._first = true;\r\n            this._timeSeriesInBatch = 0;\r\n\r\n            this._operation._writer.write(`{\"Id\":\"`);\r\n            this._operation._writeString(this._id);\r\n            this._operation._writer.write(`\",\"Type\":\"TimeSeriesBulkInsert\",\"TimeSeries\":{\"Name\":\"`);\r\n            this._operation._writeString(this._name);\r\n            this._operation._writer.write(`\",\"TimeFormat\":\"UnixTimeInMs\",\"Appends\":[`);\r\n        }\r\n\r\n        static throwAlreadyRunningTimeSeries() {\r\n            throwError(\"BulkInsertInvalidOperationException\", \"There is an already running time series operation, did you forget to close it?\");\r\n        }\r\n\r\n        dispose(): void {\r\n            this._operation._inProgressCommand = \"None\";\r\n\r\n            if (!this._first) {\r\n                this._operation._writer.write(\"]}}\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _timeSeriesBulkInsertClass = class TimeSeriesBulkInsert extends BulkInsertOperation._timeSeriesBulkInsertBaseClass implements ITimeSeriesBulkInsert {\r\n        public constructor(operation: BulkInsertOperation, id: string, name: string) {\r\n            super(operation, id, name);\r\n        }\r\n\r\n        public append(timestamp: Date, value: number): Promise<void>;\r\n        public append(timestamp: Date, value: number, tag: string): Promise<void>;\r\n        public append(timestamp: Date, values: number[]): Promise<void>;\r\n        public append(timestamp: Date, values: number[], tag: string): Promise<void>;\r\n        public append(timestamp: Date, valueOrValues: number | number[], tag?: string): Promise<void> {\r\n            if (TypeUtil.isArray(valueOrValues)) {\r\n                return this._appendInternal(timestamp, valueOrValues, tag);\r\n            } else {\r\n                return this._appendInternal(timestamp, [ valueOrValues ], tag);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _typedTimeSeriesBulkInsertClass = class TypedTimeSeriesBulkInsert<T extends object> extends BulkInsertOperation._timeSeriesBulkInsertBaseClass implements ITypedTimeSeriesBulkInsert<T> {\r\n\r\n        private readonly clazz: ClassConstructor<T>;\r\n\r\n        public constructor(operation: BulkInsertOperation, clazz: ClassConstructor<T>, id: string, name: string) {\r\n            super(operation, id, name);\r\n\r\n            this.clazz = clazz;\r\n        }\r\n\r\n        append(timestamp: Date, value: T): Promise<void>;\r\n        append(timestamp: Date, value: T, tag: string): Promise<void>;\r\n        append(entry: TypedTimeSeriesEntry<T>): Promise<void>;\r\n        append(timestampOrEntry: Date | TypedTimeSeriesEntry<T>, value?: T, tag?: string): Promise<void> {\r\n            if (timestampOrEntry instanceof TypedTimeSeriesEntry) {\r\n                return this.append(timestampOrEntry.timestamp, timestampOrEntry.value, timestampOrEntry.tag);\r\n            } else  {\r\n                const values = TimeSeriesValuesHelper.getValues(this.clazz, value);\r\n                return this._appendInternal(timestampOrEntry, values, tag);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _attachmentsBulkInsertClass = class AttachmentsBulkInsert implements IAttachmentsBulkInsert {\r\n        private readonly _operation: BulkInsertOperation;\r\n        private readonly _id: string;\r\n\r\n        public constructor(operation: BulkInsertOperation, id: string) {\r\n            this._operation = operation;\r\n            this._id = id;\r\n        }\r\n\r\n        public store(name: string, bytes: Buffer): Promise<void>;\r\n        public store(name: string, bytes: Buffer, contentType: string): Promise<void>;\r\n        public store(name: string, bytes: Buffer, contentType?: string): Promise<void> {\r\n            return this._operation._attachmentsOperation.store(this._id, name, bytes, contentType);\r\n        }\r\n    }\r\n\r\n    private static _attachmentsBulkInsertOperationClass = class AttachmentsBulkInsertOperation {\r\n        private readonly _operation: BulkInsertOperation;\r\n\r\n        public constructor(operation: BulkInsertOperation) {\r\n            this._operation = operation;\r\n        }\r\n\r\n        public async store(id: string, name: string, bytes: Buffer): Promise<void>;\r\n        public async store(id: string, name: string, bytes: Buffer, contentType: string): Promise<void>;\r\n        public async store(id: string, name: string, bytes: Buffer, contentType?: string): Promise<void> {\r\n            const check = await this._operation._concurrencyCheck();\r\n\r\n            try {\r\n                this._operation._endPreviousCommandIfNeeded();\r\n\r\n                await this._operation._executeBeforeStore();\r\n\r\n                try {\r\n                    if (!this._operation._first) {\r\n                        this._operation._writeComma();\r\n                    }\r\n\r\n                    this._operation._writer.write(`{\"Id\":\"`);\r\n                    this._operation._writeString(id);\r\n                    this._operation._writer.write(`\",\"Type\":\"AttachmentPUT\",\"Name\":\"`);\r\n                    this._operation._writeString(name);\r\n\r\n                    if (contentType) {\r\n                        this._operation._writer.write(`\",\"ContentType\":\"`);\r\n                        this._operation._writeString(contentType);\r\n                    }\r\n\r\n                    this._operation._writer.write(`\",\"ContentLength\":`);\r\n                    this._operation._writer.write(bytes.length.toString());\r\n                    this._operation._writer.write(\"}\");\r\n\r\n                    await this._operation.flushIfNeeded();\r\n\r\n                    this._operation._writer.write(bytes);\r\n\r\n                    await this._operation.flushIfNeeded();\r\n                } catch (e) {\r\n                    this._operation._handleErrors(id, e);\r\n                }\r\n            } finally {\r\n                check.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _emitter = new EventEmitter();\r\n\r\n    private _options: BulkInsertOptions;\r\n    private _database: string;\r\n    private readonly _generateEntityIdOnTheClient: GenerateEntityIdOnTheClient;\r\n\r\n    private readonly _requestExecutor: RequestExecutor;\r\n\r\n    private _inProgressCommand: CommandType;\r\n    private readonly _countersOperation = new BulkInsertOperation._countersBulkInsertOperationClass(this);\r\n    private readonly _attachmentsOperation = new BulkInsertOperation._attachmentsBulkInsertOperationClass(this);\r\n    private _nodeTag: string;\r\n\r\n    private readonly _timeSeriesBatchSize: number;\r\n    private _concurrentCheck: number = 0;\r\n    private _first: boolean = true;\r\n    private _useCompression: boolean = false;\r\n    private _unsubscribeChanges: IDisposable;\r\n\r\n    private _onProgressInitialized = false;\r\n\r\n    private _timer: Timer;\r\n\r\n    private readonly _streamLock: Semaphore;\r\n    private _heartbeatCheckInterval = 40_000;\r\n\r\n    private _writer: BulkInsertWriter;\r\n\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _store: IDocumentStore;\r\n\r\n    public constructor(database: string, store: IDocumentStore, options?: BulkInsertOptions) {\r\n        super();\r\n        if (StringUtil.isNullOrEmpty(database)) {\r\n            BulkInsertOperation._throwNoDatabase();\r\n        }\r\n\r\n        this._useCompression = options ? options.useCompression : false;\r\n        this._options = options ?? {};\r\n        this._database = database;\r\n        this._conventions = store.conventions;\r\n        this._store = store;\r\n\r\n        this._requestExecutor = store.getRequestExecutor(database);\r\n        this._writer = new BulkInsertWriter();\r\n        this._writer.initialize();\r\n        this._timeSeriesBatchSize = this._conventions.bulkInsert.timeSeriesBatchSize;\r\n\r\n        this._generateEntityIdOnTheClient = new GenerateEntityIdOnTheClient(this._requestExecutor.conventions,\r\n            entity => this._requestExecutor.conventions.generateDocumentId(database, entity));\r\n\r\n        this._streamLock = new Semaphore(1);\r\n\r\n        const timerState: TimerState = {\r\n            parent: this,\r\n            timer: null\r\n        };\r\n\r\n        this._timer = new Timer(() => BulkInsertOperation._handleHeartbeat(timerState), this._heartbeatCheckInterval, this._heartbeatCheckInterval);\r\n        timerState.timer = this._timer;\r\n    }\r\n\r\n    private static async _handleHeartbeat(timerState: TimerState): Promise<void> {\r\n        const bulkInsert = timerState.parent;\r\n        if (!bulkInsert) {\r\n            timerState.timer.dispose();\r\n            return;\r\n        }\r\n\r\n        await bulkInsert.sendHeartBeat();\r\n    }\r\n\r\n    private async sendHeartBeat(): Promise<void> {\r\n        if (!this.isHeartbeatIntervalExceeded()) {\r\n            return;\r\n        }\r\n\r\n        const context = acquireSemaphore(this._streamLock, {\r\n            timeout: 0\r\n        });\r\n        try {\r\n            await context.promise;\r\n        } catch {\r\n            return ; // if locked we are already writing\r\n        }\r\n\r\n        try {\r\n            await this._executeBeforeStore();\r\n            this._endPreviousCommandIfNeeded();\r\n            if (!BulkInsertOperation._checkServerVersion(this._requestExecutor.lastServerVersion)) {\r\n                return;\r\n            }\r\n\r\n            if (!this._first) {\r\n                this._writeComma();\r\n            }\r\n\r\n            this._first = false;\r\n            this._inProgressCommand = \"None\";\r\n            this._writer.write(\"{\\\"Type\\\":\\\"HeartBeat\\\"}\");\r\n\r\n            await this.flushIfNeeded(true);\r\n        } catch {\r\n            //Ignore the heartbeat if failed\r\n        } finally {\r\n            context.dispose();\r\n        }\r\n    }\r\n\r\n    private static _checkServerVersion(serverVersion: string): boolean {\r\n        if (serverVersion) {\r\n            const versionParsed = serverVersion.split(\".\");\r\n            const major = Number.parseInt(versionParsed[0], 10);\r\n            const minor = versionParsed.length > 1 ? Number.parseInt(versionParsed[1]) : 0;\r\n            const build = versionParsed.length> 2 ? Number.parseInt(versionParsed[2]) : 0;\r\n            if (Number.isNaN(major) || Number.isNaN(minor)) {\r\n                return false;\r\n            }\r\n\r\n            // version 6 only from 6.0.2\r\n            if (major === 6 && minor > 0) {\r\n                return true;\r\n            }\r\n\r\n            if (major === 6 && build < 2) {\r\n                return false;\r\n            }\r\n\r\n            // 5.4.108 or higher\r\n            return major > 5 || (major == 5 && minor >= 4 && build >= 110);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public on(event: \"progress\", handler: (value: BulkInsertOnProgressEventArgs) => void): this {\r\n        this._emitter.on(\"progress\", handler);\r\n        this._onProgressInitialized = true;\r\n        return this;\r\n    }\r\n\r\n    public off(event: \"progress\", handler: (value: BulkInsertOnProgressEventArgs) => void): this {\r\n        this._emitter.off(\"progress\", handler);\r\n        return this;\r\n    }\r\n\r\n    get useCompression(): boolean {\r\n        return this._useCompression;\r\n    }\r\n\r\n    set useCompression(value: boolean) {\r\n        this._useCompression = value;\r\n    }\r\n\r\n    private static _throwNoDatabase(): void {\r\n        throwError(\"BulkInsertInvalidOperationException\", \"Cannot start bulk insert operation without specifying a name of a database to operate on.\"\r\n            + \"Database name can be passed as an argument when bulk insert is being created or default database can be defined using 'DocumentStore.setDatabase' method.\");\r\n    }\r\n\r\n    protected async _waitForId(): Promise<void> {\r\n        if (this._operationId !== -1) {\r\n            return;\r\n        }\r\n\r\n        const bulkInsertGetIdRequest = new GetNextOperationIdCommand();\r\n        await this._requestExecutor.execute(bulkInsertGetIdRequest);\r\n        this._operationId = bulkInsertGetIdRequest.result;\r\n        this._nodeTag = bulkInsertGetIdRequest.nodeTag;\r\n\r\n        if (this._onProgressInitialized && !this._unsubscribeChanges) {\r\n            const observable = this._store.changes(this._database, this._nodeTag)\r\n                .forOperationId(this._operationId);\r\n\r\n            const handler = value => {\r\n                const state = value.state;\r\n                if (state && state.status === \"InProgress\") {\r\n                    this._emitter.emit(\"progress\", new BulkInsertOnProgressEventArgs(state.progress));\r\n                }\r\n            }\r\n\r\n            observable.on(\"data\", handler);\r\n\r\n            this._unsubscribeChanges = {\r\n                dispose(): void {\r\n                    observable.off(\"data\", handler)\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private static _typeCheckStoreArgs(\r\n        idOrMetadata?: string | IMetadataDictionary,\r\n        optionalMetadata?: IMetadataDictionary): { id: string, getId: boolean, metadata: IMetadataDictionary } {\r\n\r\n        let id: string;\r\n        let metadata;\r\n        let getId = false;\r\n\r\n        if (typeof idOrMetadata === \"string\" || optionalMetadata) {\r\n            id = idOrMetadata as string;\r\n            metadata = optionalMetadata;\r\n        } else {\r\n            metadata = idOrMetadata;\r\n            if (metadata && (CONSTANTS.Documents.Metadata.ID in metadata)) {\r\n                id = metadata[CONSTANTS.Documents.Metadata.ID];\r\n            }\r\n        }\r\n\r\n        if (!id) {\r\n            getId = true;\r\n        }\r\n\r\n        return { id, metadata, getId };\r\n    }\r\n\r\n    /**\r\n     * Synchronous version of store. It stores the entity unless the buffer is full\r\n     * (then false is returned, and you are expected to call await store() ).\r\n     *\r\n     * Usage pattern:\r\n     *\r\n     * ```\r\n     * if (!tryStoreSync(entity, id)) {\r\n     *     await store(entity, id);\r\n     * }\r\n     * ```\r\n     * @param entity Entity\r\n     * @param id Document ID\r\n     */\r\n    public tryStoreSync(entity: object, id: string): boolean;\r\n    public tryStoreSync(entity: object, id: string, metadata: IMetadataDictionary): boolean;\r\n    public tryStoreSync(\r\n        entity: object,\r\n        id: string,\r\n        metadata?: IMetadataDictionary): boolean {\r\n\r\n        if (this.isFlushNeeded() || this._first) {\r\n            return false;\r\n        }\r\n\r\n        BulkInsertOperation._verifyValidId(id);\r\n\r\n        metadata = this.handleMetadata(metadata, entity);\r\n\r\n        this._endPreviousCommandIfNeeded();\r\n\r\n        this._writeToStream(entity, id, metadata, \"PUT\");\r\n\r\n        return true;\r\n    }\r\n\r\n    public async store(entity: object): Promise<void>;\r\n    public async store(entity: object, id: string): Promise<void>;\r\n    public async store(entity: object, metadata: IMetadataDictionary): Promise<void>;\r\n    public async store(entity: object, id: string, metadata: IMetadataDictionary): Promise<void>;\r\n    public async store(\r\n        entity: object,\r\n        idOrMetadata?: string | IMetadataDictionary,\r\n        optionalMetadata?: IMetadataDictionary): Promise<void> {\r\n\r\n        const check = await this._concurrencyCheck();\r\n        let id: string;\r\n        try {\r\n\r\n            const opts = BulkInsertOperation._typeCheckStoreArgs(idOrMetadata, optionalMetadata);\r\n            let metadata = opts.metadata;\r\n\r\n            id = opts.getId ? await this._getId(entity) : opts.id;\r\n            BulkInsertOperation._verifyValidId(id);\r\n\r\n            await this._executeBeforeStore();\r\n            metadata = this.handleMetadata(metadata, entity);\r\n\r\n            this._endPreviousCommandIfNeeded();\r\n\r\n            try {\r\n                this._writeToStream(entity, id, metadata, \"PUT\");\r\n                await this.flushIfNeeded();\r\n            } catch (e) {   \r\n                this._handleErrors(id, e);\r\n            }\r\n        } finally {\r\n            check.dispose();\r\n        }\r\n    }\r\n\r\n    private handleMetadata(metadata: IMetadataDictionary, entity: object) {\r\n        if (!metadata) {\r\n            metadata = new MetadataInternal({});\r\n        }\r\n\r\n        if (!((\"@collection\" as keyof MetadataObject) in metadata)) {\r\n            const collection = this._requestExecutor.conventions.getCollectionNameForEntity(entity);\r\n            if (collection) {\r\n                metadata[\"@collection\"] = collection;\r\n            }\r\n        }\r\n\r\n        if (!(\"Raven-Node-Type\" as keyof MetadataObject in metadata)) {\r\n            const descriptor = this._conventions.getTypeDescriptorByEntity(entity);\r\n            const jsType = this._requestExecutor.conventions.getJsTypeName(descriptor);\r\n            if (jsType) {\r\n                metadata[\"Raven-Node-Type\"] = jsType;\r\n            }\r\n        }\r\n        return metadata;\r\n    }\r\n\r\n    // in node.js we handle errors outside of this method\r\n    private _writeToStream(entity: object, id: string, metadata: IMetadataDictionary, type: CommandType) {\r\n        if (this._first) {\r\n            this._first = false;\r\n        } else {\r\n            this._writeComma();\r\n        }\r\n\r\n        this._inProgressCommand = \"None\";\r\n\r\n        const documentInfo = new DocumentInfo();\r\n        documentInfo.metadataInstance = metadata;\r\n        let json = EntityToJson.convertEntityToJson(entity, this._conventions, documentInfo, true);\r\n\r\n        json = this._conventions.transformObjectKeysToRemoteFieldNameConvention(json);\r\n\r\n        this._writer.write(`{\"Id\":\"`);\r\n        this._writeString(id);\r\n        const jsonString = JsonSerializer.getDefault().serialize(json);\r\n        this._writer.write(`\",\"Type\":\"PUT\",\"Document\":${jsonString}}`);\r\n    }\r\n\r\n    private _handleErrors(documentId: string, e: Error) {\r\n        if (e.name === \"BulkInsertClientException\") {\r\n            throw e;\r\n        }\r\n        const error = this._getExceptionFromOperation();\r\n        if (error) {\r\n            throw error;\r\n        }\r\n\r\n        throwError(\"InvalidOperationException\", \"Bulk insert error, Document Id: \" + documentId, e);\r\n    }\r\n\r\n    private async _concurrencyCheck(): Promise<IDisposable> {\r\n        if (this._concurrentCheck) {\r\n            throwError(\"BulkInsertInvalidOperationException\", \"Bulk Insert store methods cannot be executed concurrently.\");\r\n        }\r\n        this._concurrentCheck = 1;\r\n\r\n        const context = acquireSemaphore(this._streamLock);\r\n        await context.promise;\r\n\r\n        return {\r\n            dispose: () => {\r\n                context.dispose();\r\n                this._concurrentCheck = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _endPreviousCommandIfNeeded() {\r\n        if (this._inProgressCommand === \"Counters\") {\r\n            this._countersOperation.endPreviousCommandIfNeeded();\r\n        } else if (this._inProgressCommand === \"TimeSeries\") {\r\n            BulkInsertOperation._timeSeriesBulkInsertBaseClass.throwAlreadyRunningTimeSeries();\r\n        }\r\n    }\r\n\r\n    private _writeString(input: string): void {\r\n        for (let i = 0; i < input.length; i++) {\r\n            const c = input[i];\r\n            if (`\"` === c) {\r\n                if (i === 0 || input[i - 1] !== `\\\\`) {\r\n                    this._writer.write(\"\\\\\");\r\n                }\r\n            }\r\n\r\n            this._writer.write(c);\r\n        }\r\n    }\r\n\r\n    private _writeComma() {\r\n        this._writer.write(\",\");\r\n    }\r\n\r\n    private static _verifyValidId(id: string): void {\r\n        if (StringUtil.isNullOrEmpty(id)) {\r\n            throwError(\"BulkInsertInvalidOperationException\", \"Document id must have a non empty value.\" +\r\n                \"If you want to store object literals with empty id, please register convention here: store.conventions.findCollectionNameForObjectLiteral\");\r\n        }\r\n\r\n        if (id.endsWith(\"|\")) {\r\n            throwError(\"NotSupportedException\", \"Document ids cannot end with '|', but was called with \" + id);\r\n        }\r\n    }\r\n\r\n    protected async _getExceptionFromOperation(): Promise<Error> {\r\n        const stateRequest = new GetOperationStateCommand(this._operationId, this._nodeTag);\r\n        await this._requestExecutor.execute(stateRequest);\r\n        if (!stateRequest.result) {\r\n            return null;\r\n        }\r\n\r\n        const result = stateRequest.result[\"result\"];\r\n\r\n        if (stateRequest.result[\"status\"] !== \"Faulted\") {\r\n            return null;\r\n        }\r\n\r\n        return getError(\"BulkInsertAbortedException\", result.error);\r\n    }\r\n\r\n    protected async _ensureStream() {\r\n        const compressionAlgorithm = this._useCompression ? this._conventions.httpCompressionAlgorithm : null;\r\n        await this._writer.ensureStream(compressionAlgorithm);\r\n\r\n        const bulkCommand =\r\n            new BulkInsertCommand(this._operationId, compressionAlgorithm, this._writer.compressedStream ?? this._writer.requestBodyStream, this._nodeTag, this._options.skipOverwriteIfUnchanged);\r\n\r\n        this._bulkInsertExecuteTask = this._requestExecutor.execute(bulkCommand);\r\n        this._bulkInsertExecuteTask\r\n            .catch(() => this._bulkInsertExecuteTaskErrored = true);\r\n    }\r\n\r\n    public async abort(): Promise<void> {\r\n        if (this._operationId !== -1) {\r\n            await this._waitForId();\r\n\r\n            try {\r\n                await this._requestExecutor.execute(new KillOperationCommand(this._operationId, this._nodeTag));\r\n            } catch (err) {\r\n                throwError(\"BulkInsertAbortedException\",\r\n                    \"Unable to kill bulk insert operation, because it was not found on the server.\", err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async finish(): Promise<void> {\r\n        if (this._writer.requestBodyStreamFinished) {\r\n            return;\r\n        }\r\n\r\n        this._timer?.dispose(); // in node.js we destroy timer in different place\r\n\r\n        this._endPreviousCommandIfNeeded();\r\n\r\n        let flushEx: Error;\r\n\r\n        try {\r\n            const context = acquireSemaphore(this._streamLock);\r\n            await context.promise;\r\n\r\n            try {\r\n                await this._writer.dispose();\r\n            } finally {\r\n                context.dispose();\r\n            }\r\n        } catch (e) {\r\n            flushEx = e;\r\n        }\r\n\r\n        if (this._operationId === -1) {\r\n            // closing without calling a single store.\r\n            return;\r\n        }\r\n\r\n        if (this._bulkInsertExecuteTask) {\r\n            try {\r\n                await this._bulkInsertExecuteTask;\r\n            } catch (e) {\r\n                await this._throwBulkInsertAborted(e, flushEx)\r\n            }\r\n        }\r\n\r\n        if (this._unsubscribeChanges) {\r\n            this._unsubscribeChanges.dispose();\r\n        }\r\n    }\r\n\r\n    private async _getId(entity: any) {\r\n        let idRef: string;\r\n        if (this._generateEntityIdOnTheClient.tryGetIdFromInstance(entity, id => idRef = id)) {\r\n            return idRef;\r\n        }\r\n\r\n        idRef = await this._generateEntityIdOnTheClient.generateDocumentKeyForStorage(entity);\r\n\r\n        this._generateEntityIdOnTheClient.trySetIdentity(entity, idRef); // set id property if it was null;\r\n        return idRef;\r\n    }\r\n\r\n    public attachmentsFor(id: string): IAttachmentsBulkInsert {\r\n        if (StringUtil.isNullOrEmpty(id)) {\r\n            throwError(\"InvalidArgumentException\", \"Document id cannot be null or empty\");\r\n        }\r\n\r\n        return new BulkInsertOperation._attachmentsBulkInsertClass(this, id);\r\n    }\r\n\r\n    public countersFor(id: string): ICountersBulkInsert {\r\n        if (StringUtil.isNullOrEmpty(id)) {\r\n            throwError(\"InvalidArgumentException\", \"Document id cannot be null or empty\");\r\n        }\r\n\r\n        return new BulkInsertOperation._countersBulkInsertClass(this, id);\r\n    }\r\n\r\n    public timeSeriesFor(id: string, name): ITimeSeriesBulkInsert;\r\n    public timeSeriesFor<T extends object>(clazz: EntityConstructor<T>, id: string): ITypedTimeSeriesBulkInsert<T>;\r\n    public timeSeriesFor<T extends object>(clazz: EntityConstructor<T>, id: string, name: string): ITypedTimeSeriesBulkInsert<T>;\r\n    public timeSeriesFor<T extends object>(classOrId: EntityConstructor<T> | string, idOrName: string, name?: string) {\r\n        if (TypeUtil.isString(classOrId)) {\r\n            return this._timeSeriesFor(classOrId, idOrName);\r\n        } else {\r\n            return this._typedTimeSeriesFor(classOrId, idOrName, name);\r\n        }\r\n    }\r\n\r\n    private _typedTimeSeriesFor<T extends object>(clazz: EntityConstructor<T>, id: string, name: string = null) {\r\n        if (StringUtil.isNullOrEmpty(id)) {\r\n            throwError(\"InvalidArgumentException\", \"Document id cannot be null or empty\");\r\n        }\r\n\r\n        let tsName = name;\r\n        if (!tsName) {\r\n            tsName = TimeSeriesOperations.getTimeSeriesName(clazz, this._conventions);\r\n        }\r\n\r\n        BulkInsertOperation._validateTimeSeriesName(tsName);\r\n\r\n        return new BulkInsertOperation._typedTimeSeriesBulkInsertClass(this, clazz, id, tsName);\r\n    }\r\n\r\n\r\n    private _timeSeriesFor(id: string, name: string): ITimeSeriesBulkInsert {\r\n        if (StringUtil.isNullOrEmpty(id)) {\r\n            throwError(\"InvalidArgumentException\", \"Document id cannot be null or empty\");\r\n        }\r\n\r\n        BulkInsertOperation._validateTimeSeriesName(name);\r\n\r\n        return new BulkInsertOperation._timeSeriesBulkInsertClass(this, id, name);\r\n    }\r\n\r\n    private static _validateTimeSeriesName(name: string) {\r\n        if (StringUtil.isNullOrEmpty(name)) {\r\n            throwError(\"InvalidArgumentException\", \"Time series name cannot be null or empty\");\r\n        }\r\n\r\n        if (StringUtil.startsWithIgnoreCase(name, HEADERS.INCREMENTAL_TIME_SERIES_PREFIX) && !name.includes(\"@\")) {\r\n            throwError(\"InvalidArgumentException\", \"Time Series name cannot start with \" + HEADERS.INCREMENTAL_TIME_SERIES_PREFIX + \" prefix\");\r\n        }\r\n    }\r\n\r\n    private isFlushNeeded(): boolean {\r\n        return this._writer.isFlushNeeded();\r\n    }\r\n\r\n    private async flushIfNeeded(force: boolean = false) {\r\n        force = force || this.isHeartbeatIntervalExceeded();\r\n\r\n        return this._writer.flushIfNeeded(force);\r\n    }\r\n\r\n    private isHeartbeatIntervalExceeded(): boolean {\r\n        return Date.now() - this._writer.lastFlushToStream.getTime() >= this._heartbeatCheckInterval;\r\n    }\r\n\r\n    private static readonly _countersBulkInsertClass = class CountersBulkInsert implements ICountersBulkInsert {\r\n        private readonly _operation: BulkInsertOperation;\r\n        private readonly _id: string;\r\n\r\n        public constructor(operation: BulkInsertOperation, id: string) {\r\n            this._operation = operation;\r\n            this._id = id;\r\n        }\r\n\r\n        public increment(name: string): Promise<void>;\r\n        public increment(name: string, delta: number): Promise<void>;\r\n        public increment(name: string, delta: number = 1): Promise<void> {\r\n            return this._operation._countersOperation.increment(this._id, name, delta);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport interface ICountersBulkInsert {\r\n    increment(name: string): Promise<void>;\r\n    increment(name: string, delta: number): Promise<void>;\r\n}\r\n\r\nexport interface ITimeSeriesBulkInsert extends IDisposable {\r\n    append(timestamp: Date, value: number): Promise<void>\r\n    append(timestamp: Date, value: number, tag: string): Promise<void>;\r\n    append(timestamp: Date, values: number[]): Promise<void>;\r\n    append(timestamp: Date, values: number[], tag: string): Promise<void>;\r\n}\r\n\r\nexport interface ITypedTimeSeriesBulkInsert<T extends object> extends IDisposable {\r\n    append(timestamp: Date, value: T): Promise<void>;\r\n    append(timestamp: Date, value: T, tag: string): Promise<void>;\r\n    append(entry: TypedTimeSeriesEntry<T>): Promise<void>;\r\n}\r\n\r\nexport interface IAttachmentsBulkInsert {\r\n    store(name: string, bytes: Buffer): Promise<void>;\r\n    store(name: string, bytes: Buffer, contentType: string): Promise<void>;\r\n}\r\n\r\nexport class BulkInsertCommand extends RavenCommand<void> {\r\n    public get isReadRequest() {\r\n        return false;\r\n    }\r\n\r\n    private readonly _stream: Readable;\r\n    private _skipOverwriteIfUnchanged: boolean;\r\n    private readonly _id: number;\r\n    private _compressionAlgorithm: HttpCompressionAlgorithm;\r\n\r\n    public constructor(id: number, compressionAlgorithm: HttpCompressionAlgorithm, stream: Readable, nodeTag: string, skipOverwriteIfUnchanged: boolean) {\r\n        super();\r\n\r\n        this._compressionAlgorithm = compressionAlgorithm;\r\n        this._stream = stream;\r\n        this._id = id;\r\n        this._selectedNodeTag = nodeTag;\r\n        this._skipOverwriteIfUnchanged = skipOverwriteIfUnchanged;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url\r\n            + \"/databases/\" + node.database\r\n            + \"/bulk_insert?id=\" + this._id\r\n            + \"&skipOverwriteIfUnchanged=\" + (this._skipOverwriteIfUnchanged ? \"true\" : \"false\");\r\n\r\n        const headersBuilder = this._headers().typeAppJson();\r\n        if (this._compressionAlgorithm === \"Gzip\") {\r\n            headersBuilder.with(\"Content-Encoding\", \"gzip\");\r\n        }\r\n\r\n        const headers = headersBuilder.build();\r\n        return {\r\n            method: \"POST\",\r\n            uri,\r\n            body: this._stream,\r\n            duplex: \"half\",\r\n            headers\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        return throwError(\"NotImplementedException\", \"Not implemented\");\r\n    }\r\n}\r\n\r\nexport interface TimerState {\r\n    parent: BulkInsertOperation;\r\n    timer: Timer;\r\n}\r\n"]}