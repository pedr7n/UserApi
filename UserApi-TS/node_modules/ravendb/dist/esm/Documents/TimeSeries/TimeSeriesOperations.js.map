{"version":3,"file":"TimeSeriesOperations.js","sourceRoot":"","sources":["../../../../src/Documents/TimeSeries/TimeSeriesOperations.ts"],"names":[],"mappings":"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","sourcesContent":["import { IDocumentStore } from \"../IDocumentStore.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport {\r\n    ConfigureTimeSeriesValueNamesOperation,\r\n    ConfigureTimeSeriesValueNamesParameters\r\n} from \"../Operations/TimeSeries/ConfigureTimeSeriesValueNamesOperation.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { TimeValue } from \"../../Primitives/TimeValue.js\";\r\nimport { TimeSeriesPolicy } from \"../Operations/TimeSeries/TimeSeriesPolicy.js\";\r\nimport { ConfigureTimeSeriesPolicyOperation } from \"../Operations/TimeSeries/ConfigureTimeSeriesPolicyOperation.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { RawTimeSeriesPolicy } from \"../Operations/TimeSeries/RawTimeSeriesPolicy.js\";\r\nimport { ConfigureRawTimeSeriesPolicyOperation } from \"../Operations/TimeSeries/ConfigureRawTimeSeriesPolicyOperation.js\";\r\nimport { RemoveTimeSeriesPolicyOperation } from \"../Operations/TimeSeries/RemoveTimeSeriesPolicyOperation.js\";\r\nimport { TimeSeriesValuesHelper } from \"../Session/TimeSeries/TimeSeriesValuesHelper.js\";\r\nimport { MaintenanceOperationExecutor } from \"../Operations/MaintenanceOperationExecutor.js\";\r\nimport { ClassConstructor } from \"../../Types/index.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\n\r\nexport class TimeSeriesOperations {\r\n    private readonly _store: IDocumentStore;\r\n    private readonly _database: string;\r\n    private readonly _executor: MaintenanceOperationExecutor;\r\n\r\n    public constructor(store: IDocumentStore)\r\n    public constructor(store: IDocumentStore, database: string)\r\n    public constructor(store: IDocumentStore, database?: string) {\r\n        this._store = store;\r\n        this._database = database || store.database;\r\n        this._executor = this._store.maintenance.forDatabase(database);\r\n    }\r\n\r\n    /**\r\n     * Register value names of a time-series\r\n     * @param collectionClass Collection class\r\n     * @param timeSeriesEntryClass Time-series entry class\r\n     */\r\n    public register<TCollection extends object, TTimeSeriesEntry extends object>(\r\n        collectionClass: ClassConstructor<TCollection>,\r\n        timeSeriesEntryClass: ClassConstructor<TTimeSeriesEntry>): Promise<void>;\r\n    /**\r\n     * Register value names of a time-series\r\n     * @param collectionClass Collection class\r\n     * @param timeSeriesEntryClass Time-series entry class\r\n     * @param name Override time series entry name\r\n     */\r\n    public async register<TCollection extends object, TTimeSeriesEntry extends object>(\r\n        collectionClass: ClassConstructor<TCollection>,\r\n        timeSeriesEntryClass: ClassConstructor<TTimeSeriesEntry>, name: string): Promise<void>;\r\n    /**\r\n     * Register value name of a time-series\r\n     * @param collectionClass Collection class\r\n     * @param name Time series name\r\n     * @param valueNames Values to register\r\n     */\r\n    public async register<TCollection extends object>(\r\n        collectionClass: ClassConstructor<TCollection>,\r\n        name: string,\r\n        valueNames: string[]): Promise<void>;\r\n    /**\r\n     * Register value name of a time-series\r\n     * @param collection Collection name\r\n     * @param name Time series name\r\n     * @param valueNames Values to register\r\n     */\r\n    public async register(\r\n        collection: string,\r\n        name: string,\r\n        valueNames: string[]): Promise<void>\r\n    public async register(\r\n        collectionClassOrCollection: ClassConstructor<any> | string,\r\n        timeSeriesEntryClassOrName: string | ClassConstructor<any>,\r\n        nameOrValuesName?: string | string[]): Promise<void> {\r\n        if (TypeUtil.isString(collectionClassOrCollection)) {\r\n            return this._registerInternal(collectionClassOrCollection, timeSeriesEntryClassOrName as string, nameOrValuesName as string[]);\r\n        } else {\r\n            const collectionClass = collectionClassOrCollection as ClassConstructor<any>;\r\n            if (TypeUtil.isString(timeSeriesEntryClassOrName)) {\r\n                const collection = this._store.conventions.findCollectionName(collectionClass);\r\n                await this._registerInternal(collection, timeSeriesEntryClassOrName, nameOrValuesName as string[]);\r\n            } else { // [ClassConstructor<TCollection>, ClassConstructor<TTimeSeriesEntry>, string?]\r\n                let name = nameOrValuesName as string;\r\n                if (!name) {\r\n                    name = TimeSeriesOperations.getTimeSeriesName(timeSeriesEntryClassOrName, this._store.conventions);\r\n                }\r\n\r\n                const mapping = TimeSeriesValuesHelper.getFieldsMapping(timeSeriesEntryClassOrName);\r\n                if (!mapping) {\r\n                    throwError(\"InvalidOperationException\", TimeSeriesOperations.getTimeSeriesName(timeSeriesEntryClassOrName, this._store.conventions) + \" must contain valid mapping\");\r\n                }\r\n\r\n                const collection = this._store.conventions.findCollectionName(collectionClass);\r\n                const valueNames = mapping.map(x => x.name);\r\n                await this._registerInternal(collection, name, valueNames);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _registerInternal(collection: string, name: string, valueNames: string[]): Promise<void> {\r\n        const parameters: ConfigureTimeSeriesValueNamesParameters = {\r\n            collection,\r\n            timeSeries: name,\r\n            valueNames,\r\n            update: true\r\n        };\r\n\r\n        const command = new ConfigureTimeSeriesValueNamesOperation(parameters);\r\n        await this._executor.send(command);\r\n    }\r\n\r\n    /**\r\n     * Set rollup and retention policy\r\n     * @param collectionClass Collection class\r\n     * @param name Policy name\r\n     * @param aggregation Aggregation time\r\n     * @param retention Retention time\r\n     */\r\n    public async setPolicy<TCollection extends object>(\r\n        collectionClass: ClassConstructor<TCollection>, name: string, aggregation: TimeValue, retention: TimeValue): Promise<void>;\r\n    /**\r\n     * Set rollup and retention policy\r\n     * @param collection Collection name\r\n     * @param name Policy name\r\n     * @param aggregation Aggregation time\r\n     * @param retention Retention time\r\n     */\r\n    public async setPolicy<TCollection extends object>(collection: string, name: string, aggregation: TimeValue, retention: TimeValue): Promise<void>;\r\n    public async setPolicy<TCollection extends object>(collectionNameOrClass: string | ClassConstructor<TCollection>, name: string, aggregation: TimeValue, retention: TimeValue): Promise<void> {\r\n        const collection = TypeUtil.isString(collectionNameOrClass) ? collectionNameOrClass : this._store.conventions.findCollectionName(collectionNameOrClass);\r\n\r\n        const p = new TimeSeriesPolicy(name, aggregation, retention);\r\n        await this._executor.send(new ConfigureTimeSeriesPolicyOperation(collection, p));\r\n    }\r\n\r\n    /**\r\n     * Set raw retention policy\r\n     * @param collectionClass Collection class\r\n     * @param retention Retention time\r\n     */\r\n    public async setRawPolicy<TCollection extends object>(\r\n        collectionClass: ClassConstructor<TCollection>, retention: TimeValue): Promise<void>;\r\n    /**\r\n     * Set raw retention policy\r\n     * @param collection Collection name\r\n     * @param retention Retention time\r\n     */\r\n    public async setRawPolicy(\r\n        collection: string, retention: TimeValue): Promise<void>;\r\n    public async setRawPolicy<TCollection extends object>(\r\n        collectionOrClass: string | ClassConstructor<TCollection>, retention: TimeValue): Promise<void> {\r\n        const collection = TypeUtil.isString(collectionOrClass) ? collectionOrClass : this._store.conventions.findCollectionName(collectionOrClass);\r\n        const p = new RawTimeSeriesPolicy(retention);\r\n        await this._executor.send(new ConfigureRawTimeSeriesPolicyOperation(collection, p));\r\n    }\r\n\r\n    /**\r\n     * Remove policy\r\n     * @param collection Collection name\r\n     * @param name Policy name\r\n     */\r\n    public async removePolicy(collection: string, name: string): Promise<void>;\r\n    /**\r\n     * Remove policy\r\n     * @param clazz Collection class\r\n     * @param name Policy name\r\n     */\r\n    public async removePolicy<TCollection extends object>(\r\n        clazz: ClassConstructor<TCollection>, name: string): Promise<void>;\r\n    public async removePolicy<TCollection extends object>(\r\n        clazzOrCollection: ClassConstructor<TCollection> | string, name: string): Promise<void> {\r\n        const collection = TypeUtil.isString(clazzOrCollection) ? clazzOrCollection : this._store.conventions.findCollectionName(clazzOrCollection);\r\n\r\n        await this._executor.send(new RemoveTimeSeriesPolicyOperation(collection, name));\r\n    }\r\n\r\n    public static getTimeSeriesName<TTimeSeriesEntry extends object>(\r\n        clazz: ClassConstructor<TTimeSeriesEntry>, conventions: DocumentConventions) {\r\n        return conventions.findCollectionName(clazz);\r\n    }\r\n\r\n    public forDatabase(database: string): TimeSeriesOperations {\r\n        if (StringUtil.equalsIgnoreCase(database, this._database)) {\r\n            return this;\r\n        }\r\n\r\n        return new TimeSeriesOperations(this._store, database);\r\n    }\r\n\r\n}\r\n"]}