{"version":3,"file":"DocumentSessionRevisionsBase.js","sourceRoot":"","sources":["../../../../src/Documents/Session/DocumentSessionRevisionsBase.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AACrD,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AACzD,OAAO,EAAE,4BAA4B,EAAE,MAAM,mCAAmC,CAAC;AAEjF,MAAM,OAAO,4BAA6B,SAAQ,4BAA4B;IAK1E,wBAAwB,CAAmB,UAAsB,EAAE,WAAkC,QAAQ;QACzG,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,uBAAuB,CAAC,CAAC;QACpE,CAAC;QAED,IAAI,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YAChC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC5C,CAAC;aAAM,CAAC;YACJ,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACrE,IAAI,CAAC,YAAY,EAAE,CAAC;gBAChB,UAAU,CAAC,2BAA2B,EAAE,4FAA4F,CAAC,CAAC;YAC1I,CAAC;YAED,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QACjD,CAAC;IACL,CAAC;IAEO,YAAY,CAAC,EAAU,EAAE,iBAAwC;QACrE,IAAI,UAAU,CAAC,aAAa,CAAC,EAAE,CAAC,EAAE,CAAC;YAC/B,UAAU,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,6BAA6B,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC7E,MAAM,cAAc,GAAG,CAAC,CAAC,gBAAgB,CAAC;QAC1C,IAAI,cAAc,IAAI,gBAAgB,KAAK,iBAAiB,EAAE,CAAC;YAC3D,UAAU,CAAC,2BAA2B,EAAE,kEAAkE;kBACpG,EAAE,GAAG,uFAAuF,GAAG,iBAAiB;kBAChH,uBAAuB,GAAG,gBAAgB,GAAG,GAAG,CAAC,CAAC;QAC5D,CAAC;QAED,IAAI,CAAC,cAAc,EAAE,CAAC;YAClB,IAAI,CAAC,QAAQ,CAAC,6BAA6B,CAAC,GAAG,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;QAC3E,CAAC;IACL,CAAC;CACJ","sourcesContent":["import { ForceRevisionStrategy } from \"./ForceRevisionStrategy.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { AdvancedSessionExtensionBase } from \"./AdvancedSessionExtensionBase.js\";\r\n\r\nexport class DocumentSessionRevisionsBase extends AdvancedSessionExtensionBase {\r\n    forceRevisionCreationFor<T extends object>(entity: T)\r\n    forceRevisionCreationFor<T extends object>(entity: T, strategy: ForceRevisionStrategy)\r\n    forceRevisionCreationFor<T extends object>(id: string)\r\n    forceRevisionCreationFor<T extends object>(id: string, strategy: ForceRevisionStrategy)\r\n    forceRevisionCreationFor<T extends object>(entityOrId: T | string, strategy: ForceRevisionStrategy = \"Before\") {\r\n        if (!entityOrId) {\r\n            throwError(\"InvalidArgumentException\", \"Entity cannot be null\");\r\n        }\r\n\r\n        if (TypeUtil.isString(entityOrId)) {\r\n            this._addIdToList(entityOrId, strategy);\r\n        } else {\r\n            const documentInfo = this._session.documentsByEntity.get(entityOrId);\r\n            if (!documentInfo) {\r\n                throwError(\"InvalidOperationException\", \"Cannot create a revision for the requested entity because it is Not tracked by the session\");\r\n            }\r\n\r\n            this._addIdToList(documentInfo.id, strategy);\r\n        }\r\n    }\r\n\r\n    private _addIdToList(id: string, requestedStrategy: ForceRevisionStrategy) {\r\n        if (StringUtil.isNullOrEmpty(id)) {\r\n            throwError(\"InvalidArgumentException\", \"Id cannot be null or empty\");\r\n        }\r\n\r\n        const existingStrategy = this._session.idsForCreatingForcedRevisions.get(id);\r\n        const idAlreadyAdded = !!existingStrategy;\r\n        if (idAlreadyAdded && existingStrategy !== requestedStrategy) {\r\n            throwError(\"InvalidOperationException\", \"A request for creating a revision was already made for document \"\r\n                + id + \" in the current session but with a different force strategy. New strategy requested: \" + requestedStrategy\r\n                + \". Previous strategy: \" + existingStrategy + \".\");\r\n        }\r\n\r\n        if (!idAlreadyAdded) {\r\n            this._session.idsForCreatingForcedRevisions.set(id, requestedStrategy);\r\n        }\r\n    }\r\n}"]}