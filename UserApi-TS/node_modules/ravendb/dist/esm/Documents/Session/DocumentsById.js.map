{"version":3,"file":"DocumentsById.js","sourceRoot":"","sources":["../../../../src/Documents/Session/DocumentsById.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,sBAAsB,EAAE,MAAM,4CAA4C,CAAC;AAGpF,MAAM,OAAO,aAAa;IAEf,MAAM,CAA4B;IAEzC;QACI,IAAI,CAAC,MAAM,GAAG,sBAAsB,CAAC,MAAM,EAAE,CAAC;IAClD,CAAC;IAEM,QAAQ,CAAC,EAAU;QACtB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;IAEM,GAAG,CAAC,IAAkB;QACzB,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;YAC3B,OAAO;QACX,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,MAAM,CAAC,EAAU;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAClC,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IAC5B,CAAC;IAEM,OAAO;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACjC,CAAC;IAEM,kBAAkB,CAAC,OAA0C;QAChE,MAAM,MAAM,GAAG,sBAAsB,CAAC,MAAM,EAAc,CAAC;QAE3D,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC;YAC3C,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;YACpC,UAAU,CAAC,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5B,UAAU,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACvC,UAAU,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;QACrC,CAAC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AAGD,MAAM,OAAO,UAAU;IACnB,EAAE,CAAS;IACX,MAAM,CAAS;IACf,SAAS,CAAU;CACtB","sourcesContent":["import { DocumentInfo } from \"./DocumentInfo.js\";\r\nimport { CaseInsensitiveKeysMap } from \"../../Primitives/CaseInsensitiveKeysMap.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\n\r\nexport class DocumentsById {\r\n\r\n    public _inner: Map<string, DocumentInfo>;\r\n\r\n    public constructor() {\r\n        this._inner = CaseInsensitiveKeysMap.create();\r\n    }\r\n\r\n    public getValue(id: string) {\r\n        return this._inner.get(id);\r\n    }\r\n\r\n    public add(info: DocumentInfo): void {\r\n        if (this._inner.has(info.id)) {\r\n            return;\r\n        }\r\n\r\n        this._inner.set(info.id, info);\r\n    }\r\n\r\n    public remove(id: string): boolean {\r\n        return this._inner.delete(id);\r\n    }\r\n\r\n    public clear(): void {\r\n        this._inner.clear();\r\n    }\r\n\r\n    public getCount(): number {\r\n        return this._inner.size;\r\n    }\r\n\r\n    public entries() {\r\n        return this._inner.entries();\r\n    }\r\n\r\n    public getTrackedEntities(session: InMemoryDocumentSessionOperations): Map<string, EntityInfo> {\r\n        const result = CaseInsensitiveKeysMap.create<EntityInfo>();\r\n\r\n        for (const keyValue of this._inner.entries()) {\r\n            const entityInfo = new EntityInfo();\r\n            entityInfo.id = keyValue[0];\r\n            entityInfo.entity = keyValue[1].entity;\r\n            entityInfo.isDeleted = session.isDeleted(keyValue[0]);\r\n            result[keyValue[0]] = entityInfo;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nexport class EntityInfo {\r\n    id: string;\r\n    entity: object;\r\n    isDeleted: boolean;\r\n}\r\n"]}