{"version":3,"file":"IFilterDocumentQueryBase.js","sourceRoot":"","sources":["../../../../src/Documents/Session/IFilterDocumentQueryBase.ts"],"names":[],"mappings":"","sourcesContent":["import { IDocumentQueryBase } from \"./IDocumentQueryBase.js\";\r\nimport { IQueryBase } from \"./IQueryBase.js\";\r\nimport { SearchOperator } from \"../Queries/SearchOperator.js\";\r\nimport { MethodCall } from \"./MethodCall.js\";\r\nimport { WhereParams } from \"./WhereParams.js\";\r\nimport { SpatialUnits, SpatialRelation } from \"../Indexes/Spatial.js\";\r\nimport { SpatialCriteria } from \"../Queries/Spatial/SpatialCriteria.js\";\r\nimport { SpatialCriteriaFactory } from \"../Queries/Spatial/SpatialCriteriaFactory.js\";\r\nimport { IDocumentQuery } from \"./IDocumentQuery.js\";\r\nimport { DynamicSpatialField } from \"../Queries/Spatial/DynamicSpatialField.js\";\r\nimport { MoreLikeThisBase } from \"../Queries/MoreLikeThis/MoreLikeThisBase.js\";\r\nimport { Field } from \"../../Types/index.js\";\r\n\r\nexport interface IFilterDocumentQueryBase<T extends object, TSelf extends IDocumentQueryBase<T, TSelf>>\r\n    extends IQueryBase<T, TSelf> {\r\n\r\n    /**\r\n     * Negate the next operation\r\n     */\r\n    not(): TSelf;\r\n\r\n    /**\r\n     *  Add an AND to the query\r\n     */\r\n    andAlso(): TSelf;\r\n\r\n    /**\r\n     *  Add an AND to the query\r\n     */\r\n    andAlso(wrapPreviousQueryClauses: boolean): TSelf;\r\n\r\n    /**\r\n     * Simplified method for closing a clause within the query\r\n     */\r\n    closeSubclause(): TSelf;\r\n\r\n    /**\r\n     * Performs a query matching ALL of the provided values against the given field (AND)\r\n     */\r\n    containsAll(fieldName: Field<T>, values: any[]): TSelf;\r\n\r\n    //TBD TSelf ContainsAll<TValue>(Expression<Func<T, TValue>> propertySelector, IEnumerable<TValue> values);\r\n\r\n    /**\r\n     * Performs a query matching ANY of the provided values against the given field (OR)\r\n     */\r\n    containsAny(fieldName: Field<T>, values: any[]): TSelf;\r\n\r\n    //TBD TSelf ContainsAny<TValue>(Expression<Func<T, TValue>> propertySelector, IEnumerable<TValue> values);\r\n\r\n    /**\r\n     * Negate the next operation\r\n     */\r\n    negateNext(): TSelf;\r\n\r\n    /**\r\n     *  Simplified method for opening a new clause within the query\r\n     */\r\n    openSubclause(): TSelf;\r\n\r\n    /**\r\n     * Add an OR to the query\r\n     */\r\n    orElse(): TSelf;\r\n\r\n    /**\r\n     * Perform a search for documents which fields that match the searchTerms.\r\n     * If there is more than a single term, each of them will be checked independently.\r\n     *\r\n     * Space separated terms e.g. 'John Adam' means that we will look in selected field for 'John'\r\n     * or 'Adam'.\r\n     */\r\n    search(fieldName: Field<T>, searchTerms: string): TSelf;\r\n\r\n    /**\r\n     * Perform a search for documents which fields that match the searchTerms.\r\n     * If there is more than a single term, each of them will be checked independently.\r\n     *\r\n     * Space separated terms e.g. 'John Adam' means that we will look in selected field for 'John'\r\n     * or 'Adam'.\r\n     */\r\n    search(fieldName: Field<T>, searchTerms: string, operator: SearchOperator): TSelf;\r\n\r\n    //TBD TSelf Search<TValue>(Expression<Func<T, TValue>> propertySelector, string searchTerms,\r\n    //     SearchOperator @operator = SearchOperator.Or);\r\n\r\n    /**\r\n     * Filter the results from the index using the specified where clause.\r\n     */\r\n    whereLucene(fieldName: Field<T>, whereClause: string): TSelf;\r\n\r\n    /**\r\n     * Filter the results from the index using the specified where clause.\r\n     */\r\n    whereLucene(fieldName: Field<T>, whereClause: string, exact: boolean): TSelf;\r\n\r\n    /**\r\n     * Matches fields where the value is between the specified start and end, inclusive\r\n     */\r\n    whereBetween(fieldName: Field<T>, start: any, end: any): TSelf;\r\n\r\n    /**\r\n     * Matches fields where the value is between the specified start and end, inclusive\r\n     */\r\n    whereBetween(fieldName: Field<T>, start: any, end: any, exact: boolean): TSelf;\r\n\r\n    //TBD TSelf WhereBetween<TValue>(Expression<Func<T, TValue>> propertySelector,\r\n    //     TValue start, TValue end, bool exact = false);\r\n\r\n    /**\r\n     * Matches fields which ends with the specified value.\r\n     */\r\n    whereEndsWith(fieldName: Field<T>, value: any): TSelf;\r\n\r\n    /**\r\n     * Matches fields which ends with the specified value.\r\n     */\r\n    whereEndsWith(fieldName: Field<T>, value: any, exact: boolean): TSelf;\r\n\r\n    //TBD TSelf WhereEndsWith<TValue>(Expression<Func<T, TValue>> propertySelector, TValue value);\r\n\r\n    /**\r\n     * Matches value\r\n     */\r\n    whereEquals(fieldName: Field<T>, value: any): TSelf;\r\n\r\n    /**\r\n     * Matches value\r\n     */\r\n    whereEquals(fieldName: Field<T>, value: any, exact: boolean): TSelf;\r\n\r\n    /**\r\n     * Matches value\r\n     */\r\n    whereEquals(fieldName: Field<T>, method: MethodCall): TSelf;\r\n\r\n    /**\r\n     * Matches value\r\n     */\r\n    whereEquals(fieldName: Field<T>, method: MethodCall, exact: boolean): TSelf;\r\n\r\n    //TBD TSelf WhereEquals<TValue>(Expression<Func<T, TValue>> propertySelector, TValue value, bool exact = false);\r\n    //TBD TSelf WhereEquals<TValue>(Expression<Func<T, TValue>> propertySelector, MethodCall value, bool exact = false);\r\n\r\n    /**\r\n     * Matches value\r\n     */\r\n    whereEquals(whereParams: WhereParams): TSelf;\r\n\r\n    /**\r\n     * Not matches value\r\n     */\r\n    whereNotEquals(fieldName: Field<T>, value: any): TSelf;\r\n\r\n    /**\r\n     * Not matches value\r\n     */\r\n    whereNotEquals(fieldName: Field<T>, value: any, exact: boolean): TSelf;\r\n\r\n    /**\r\n     * Not matches value\r\n     */\r\n    whereNotEquals(fieldName: Field<T>, method: MethodCall): TSelf;\r\n\r\n    /**\r\n     * Not matches value\r\n     */\r\n    whereNotEquals(fieldName: Field<T>, method: MethodCall, exact: boolean): TSelf;\r\n\r\n    // TBD TSelf WhereNotEquals<TValue>(Expression<Func<T, TValue>> propertySelector, TValue value, bool exact = false);\r\n    // TBD TSelf WhereNotEquals<TValue>(Expression<Func<T, TValue>> propertySelector,\r\n    //     MethodCall value, bool exact = false);\r\n\r\n    /**\r\n     * Not matches value\r\n     */\r\n    whereNotEquals(whereParams: WhereParams): TSelf;\r\n\r\n    /**\r\n     * Matches fields where the value is greater than the specified value\r\n     */\r\n    whereGreaterThan(fieldName: Field<T>, value: any): TSelf;\r\n\r\n    /**\r\n     * Matches fields where the value is greater than the specified value\r\n     */\r\n    whereGreaterThan(fieldName: Field<T>, value: any, exact: boolean): TSelf;\r\n\r\n    //TBD  TSelf WhereGreaterThan<TValue>(Expression<Func<T, TValue>> propertySelector,\r\n    //     TValue value, bool exact = false);\r\n\r\n    /**\r\n     * Matches fields where the value is greater than or equal to the specified value\r\n     */\r\n    whereGreaterThanOrEqual(fieldName: Field<T>, value: any): TSelf;\r\n\r\n    /**\r\n     * Matches fields where the value is greater than or equal to the specified value\r\n     */\r\n    whereGreaterThanOrEqual(fieldName: Field<T>, value: any, exact: boolean): TSelf;\r\n\r\n    //TBD TSelf WhereGreaterThanOrEqual<TValue>(Expression<Func<T, TValue>> propertySelector,\r\n    //     TValue value, bool exact = false);\r\n\r\n    /**\r\n     * Check that the field has one of the specified values\r\n     */\r\n    whereIn(fieldName: Field<T>, values: any[]): TSelf;\r\n\r\n    /**\r\n     * Check that the field has one of the specified values\r\n     */\r\n    whereIn(fieldName: Field<T>, values: any[], exact: boolean): TSelf;\r\n\r\n    //TBD TSelf WhereIn<TValue>(Expression<Func<T, TValue>> propertySelector, IEnumerable<TValue> values,\r\n    //     bool exact = false);\r\n\r\n    /**\r\n     * Matches fields where the value is less than the specified value\r\n     */\r\n    whereLessThan(fieldName: Field<T>, value: any): TSelf;\r\n\r\n    /**\r\n     * Matches fields where the value is less than the specified value\r\n     */\r\n    whereLessThan(fieldName: Field<T>, value: any, exact: boolean): TSelf;\r\n\r\n    //TBD TSelf WhereLessThan<TValue>(Expression<Func<T, TValue>> propertySelector, TValue value, bool exact = false);\r\n\r\n    /**\r\n     *  Matches fields where the value is less than or equal to the specified value\r\n     */\r\n    whereLessThanOrEqual(fieldName: Field<T>, value: any): TSelf;\r\n\r\n    /**\r\n     *  Matches fields where the value is less than or equal to the specified value\r\n     */\r\n    whereLessThanOrEqual(fieldName: Field<T>, value: any, exact: boolean): TSelf;\r\n\r\n    //TBD TSelf WhereLessThanOrEqual<TValue>(Expression<Func<T, TValue>> propertySelector,\r\n    //     TValue value, bool exact = false);\r\n\r\n    /**\r\n     * Matches fields which starts with the specified value.\r\n     */\r\n    whereStartsWith(fieldName: Field<T>, value: any): TSelf;\r\n\r\n    /**\r\n     * Matches fields which starts with the specified value.\r\n     */\r\n    whereStartsWith(fieldName: Field<T>, value: any, exact: boolean): TSelf;\r\n\r\n    //TBD TSelf WhereStartsWith<TValue>(Expression<Func<T, TValue>> propertySelector, TValue value);\r\n\r\n    //TBD TSelf WhereExists<TValue>(Expression<Func<T, TValue>> propertySelector);\r\n\r\n    /**\r\n     * Check if the given field exists\r\n     */\r\n    whereExists(fieldName: Field<T>): TSelf;\r\n\r\n    //TBD TSelf WhereRegex<TValue>(Expression<Func<T, TValue>> propertySelector, string pattern);\r\n\r\n    /**\r\n     * Checks value of a given field against supplied regular expression pattern\r\n     */\r\n    whereRegex(fieldName: Field<T>, pattern: string): TSelf;\r\n\r\n    //TBD TSelf WithinRadiusOf<TValue>(Expression<Func<T, TValue>> propertySelector, double radius,\r\n    //     double latitude, double longitude, SpatialUnits? radiusUnits = null,\r\n    //     double distanceErrorPct = Constants.Documents.Indexing.Spatial.DefaultDistanceErrorPct);\r\n\r\n    /**\r\n     * Filter matches to be inside the specified radius\r\n     */\r\n    withinRadiusOf(fieldName: Field<T>, radius: number, latitude: number, longitude: number): TSelf;\r\n\r\n    /**\r\n     * Filter matches to be inside the specified radius\r\n     */\r\n    withinRadiusOf(\r\n        fieldName: Field<T>, radius: number, latitude: number, longitude: number, radiusUnits: SpatialUnits): TSelf;\r\n\r\n    /**\r\n     * Filter matches to be inside the specified radius\r\n     */\r\n    withinRadiusOf(\r\n        fieldName: Field<T>,\r\n        radius: number,\r\n        latitude: number,\r\n        longitude: number,\r\n        radiusUnits: SpatialUnits,\r\n        distanceErrorPct: number): TSelf;\r\n\r\n    // TBD TSelf RelatesToShape<TValue>(Expression<Func<T, TValue>> propertySelector, string shapeWkt, SpatialRelation relation, double distanceErrorPct = Constants.Documents.Indexing.Spatial.DefaultDistanceErrorPct);\r\n\r\n    /**\r\n     * Filter matches based on a given shape - only documents with the shape defined in fieldName that\r\n     * have a relation rel with the given shapeWkt will be returned\r\n     */\r\n    relatesToShape(fieldName: Field<T>, shapeWkt: string, relation: SpatialRelation): TSelf;\r\n\r\n    /**\r\n     * Filter matches based on a given shape - only documents with the shape defined in fieldName that\r\n     * have a relation rel with the given shapeWkt will be returned\r\n     */\r\n    relatesToShape(fieldName: Field<T>, shapeWkt: string, relation: SpatialRelation, distanceErrorPct: number): TSelf;\r\n\r\n    /**\r\n     * Filter matches based on a given shape - only documents with the shape defined in fieldName that\r\n     * have a relation rel with the given shapeWkt will be returned\r\n     */\r\n    relatesToShape(\r\n        fieldName: Field<T>,\r\n        shapeWkt: string,\r\n        relation: SpatialRelation,\r\n        units: SpatialUnits,\r\n        distanceErrorPct: number): TSelf;\r\n\r\n\r\n    // TBD IDocumentQuery<T> Spatial(Expression<Func<T, object>> path, Func<SpatialCriteriaFactory, SpatialCriteria> clause);\r\n\r\n    /**\r\n     * Ability to use one factory to determine spatial shape that will be used in query.\r\n     */\r\n    spatial(\r\n        fieldName: Field<T>,\r\n        clause: (spatialCriteriaFactory: SpatialCriteriaFactory) => SpatialCriteria): IDocumentQuery<T>;\r\n\r\n    spatial(\r\n        field: DynamicSpatialField,\r\n        clause: (spatialCriteriaFactory: SpatialCriteriaFactory) => SpatialCriteria): IDocumentQuery<T>;\r\n\r\n    // TBD IDocumentQuery<T> spatial(Function<SpatialDynamicFieldFactory<T>, DynamicSpatialField> field, Function<SpatialCriteriaFactory, SpatialCriteria> clause);\r\n\r\n    moreLikeThis(moreLikeThis: MoreLikeThisBase): IDocumentQuery<T>;\r\n\r\n}\r\n"]}