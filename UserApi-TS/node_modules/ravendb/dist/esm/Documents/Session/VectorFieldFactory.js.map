{"version":3,"file":"VectorFieldFactory.js","sourceRoot":"","sources":["../../../../src/Documents/Session/VectorFieldFactory.ts"],"names":[],"mappings":"AAmJA,MAAM,OAAO,gCAAgC;IAGlC,SAAS,GAAa,IAAI,CAAC;IAC3B,UAAU,GAAe,IAAI,CAAC;IAC9B,IAAI,GAAW,IAAI,CAAC;IACpB,KAAK,GAAa,IAAI,CAAC;IACvB,IAAI,GAAW,IAAI,CAAC;IAIpB,WAAW,CAAC,SAAc;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACI,YAAY,CAAmB,UAAiB;QACnD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAED;;;OAGG;IACI,QAAQ,CAAC,eAAuB;QACnC,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;IAChC,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,IAAY;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED;;;OAGG;IACI,OAAO,CAAC,KAAe;QAC1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAEM,WAAW,CAAC,UAAkB;QACjC,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;IAC3B,CAAC;CACJ","sourcesContent":["import { VectorEmbeddingType } from \"../Queries/VectorSearch/VectorEmbeddingType.js\";\r\nimport { Field } from \"../../Types/index.js\";\r\n\r\nexport interface IVectorFieldFactory<T> {\r\n    /**\r\n     * Defines the text field that vector search will be performed on\r\n     * @param fieldName Name of the document field containing text data\r\n     */\r\n    withText(fieldName: Field<T>): IVectorEmbeddingTextField;\r\n\r\n    /**\r\n     * Defines the embedding field that vector search will be performed on\r\n     * @param fieldName Name of the document field containing embedding data\r\n     * @param storedEmbeddingQuantization Quantization that was performed on stored embeddings\r\n     */\r\n    withEmbedding(fieldName: Field<T>, storedEmbeddingQuantization?: VectorEmbeddingType): IVectorEmbeddingField;\r\n\r\n    /**\r\n     * Defines the embedding field (encoded as base64) that vector search will be performed on\r\n     * @param fieldName Name of the document field containing base64 encoded embedding data\r\n     * @param storedEmbeddingQuantization Quantization of stored embeddings\r\n     */\r\n    withBase64(fieldName: Field<T>, storedEmbeddingQuantization?: VectorEmbeddingType): IVectorEmbeddingField;\r\n\r\n    /**\r\n     * Defines the field (that's already indexed) that vector search will be performed on\r\n     * @param fieldName Name of the index-field containing indexed data\r\n     */\r\n    withField(fieldName: Field<T>): IVectorField;\r\n}\r\n\r\nexport interface IVectorEmbeddingTextField {\r\n    /**\r\n     * Defines quantization that will be performed on embeddings that are already in the database\r\n     * @param targetEmbeddingQuantization Desired target quantization type\r\n     */\r\n    targetQuantization(targetEmbeddingQuantization: VectorEmbeddingType): IVectorEmbeddingTextField;\r\n\r\n\r\n    /**\r\n     * Defines which task will be used to get embeddings from\r\n     * @param embeddingsGenerationTaskIdentifier Task identifier\r\n     */\r\n    usingTask(embeddingsGenerationTaskIdentifier: string): IVectorEmbeddingTextField;\r\n}\r\n\r\nexport interface IVectorEmbeddingField {\r\n    /**\r\n     * Defines quantization that will be performed on embeddings that are already in the database\r\n     * @param targetEmbeddingQuantization Desired target quantization type\r\n     */\r\n    targetQuantization(targetEmbeddingQuantization: VectorEmbeddingType): IVectorEmbeddingField;\r\n}\r\n\r\nexport interface IVectorField {\r\n    // Empty interface for type consistency\r\n}\r\n\r\n/**\r\n * Interface for accessing embedding field factory properties\r\n * @internal\r\n */\r\nexport interface IVectorEmbeddingFieldFactoryAccessor<T> {\r\n    fieldName: Field<T>;\r\n    sourceQuantizationType: VectorEmbeddingType;\r\n    destinationQuantizationType: VectorEmbeddingType;\r\n    isBase64Encoded: boolean;\r\n    embeddingsGenerationTaskIdentifier: string;\r\n}\r\n\r\n/**\r\n * Represents a RavenDB vector in TypeScript\r\n */\r\nexport interface IRavenVector<T> extends Array<T> {\r\n}\r\n\r\n/**\r\n * Factory for providing text field values for vector searches\r\n */\r\nexport interface IVectorEmbeddingTextFieldValueFactory {\r\n    /**\r\n     * Defines queried text.\r\n     * @param text Queried text\r\n     */\r\n    byText(text: string): void;\r\n\r\n    /**\r\n     * Query by the embedding(s) indexed from the specified document for the quried field.\r\n     * @param documentId The unique identifier of the document to be processed.\r\n     */\r\n    forDocument(documentId: string): void;\r\n\r\n    /**\r\n     * Defines queried texts.\r\n     * @param texts Queried texts\r\n     */\r\n    byTexts(texts: string[]): void;\r\n}\r\n\r\nexport interface IVectorEmbeddingFieldValueFactory {\r\n    /**\r\n     * Defines queried embedding.\r\n     * @param embedding Array containing embedding values\r\n     */\r\n    byEmbedding<T extends number>(embedding: T[]): void;\r\n\r\n    /**\r\n     * Defines queried embeddings.\r\n     * @param embeddings Array containing embeddings values\r\n     */\r\n    byEmbeddings<T extends number>(embeddings: T[][]): void;\r\n\r\n    /**\r\n     * Defines queried embedding in base64 format.\r\n     * @param base64Embedding Embedding encoded as base64 string\r\n     */\r\n    byBase64(base64Embedding: string): void;\r\n\r\n    /**\r\n     * Defines queried embedding.\r\n     * @param embedding RavenVector containing embedding values\r\n     */\r\n    byEmbedding<T extends number>(embedding: { \"@vector\": IRavenVector<T> }): void;\r\n\r\n    /**\r\n     * Query by the embedding(s) indexed from the specified document for the queried field.\r\n     * @param documentId The unique identifier of the document to be processed.\r\n     */\r\n    forDocument(documentId: string): void;\r\n}\r\n\r\nexport interface IVectorFieldValueFactory extends IVectorEmbeddingTextFieldValueFactory,\r\n    IVectorEmbeddingFieldValueFactory {\r\n}\r\n\r\nexport interface IVectorFieldValueFactoryAccessor {\r\n    embeddings: number[][];\r\n\r\n    embedding: number[];\r\n\r\n    text: string;\r\n\r\n    texts: string[];\r\n\r\n    byId: string;\r\n}\r\n\r\nexport class VectorEmbeddingFieldValueFactory implements IVectorEmbeddingFieldValueFactory,\r\n    IVectorFieldValueFactoryAccessor {\r\n\r\n    public embedding: number[] = null;\r\n    public embeddings: number[][] = null;\r\n    public text: string = null;\r\n    public texts: string[] = null;\r\n    public byId: string = null;\r\n\r\n    public byEmbedding<T extends number>(embedding: T[]): void;\r\n    public byEmbedding<T extends number>(embedding: { \"@vector\": IRavenVector<T> }): void;\r\n    public byEmbedding(embedding: any): void {\r\n        this.embedding = embedding;\r\n    }\r\n\r\n    /**\r\n     * Defines queried embeddings.\r\n     * @param embeddings Array containing embeddings values\r\n     */\r\n    public byEmbeddings<T extends number>(embeddings: T[][]): void {\r\n        this.embeddings = embeddings;\r\n    }\r\n\r\n    /**\r\n     * Defines queried embedding in base64 format.\r\n     * @param base64Embedding Embedding encoded as base64 string\r\n     */\r\n    public byBase64(base64Embedding: string): void {\r\n        this.text = base64Embedding;\r\n    }\r\n\r\n    /**\r\n     * Defines queried text.\r\n     * @param text Queried text\r\n     */\r\n    public byText(text: string): void {\r\n        this.text = text;\r\n    }\r\n\r\n    /**\r\n     * Defines queried texts.\r\n     * @param texts Queried texts\r\n     */\r\n    public byTexts(texts: string[]): void {\r\n        this.texts = texts;\r\n    }\r\n\r\n    public forDocument(documentId: string): void {\r\n        this.byId = documentId;\r\n    }\r\n}\r\n"]}