import { ILazyOperation } from "./ILazyOperation.js";
import { GetRevisionOperation } from "../GetRevisionOperation.js";
import { QueryResult } from "../../../Queries/QueryResult.js";
import { GetRequest } from "../../../Commands/MultiGet/GetRequest.js";
import { GetResponse } from "../../../Commands/MultiGet/GetResponse.js";
import { DocumentType } from "../../../DocumentAbstractions.js";
export type Mode = "Single" | "Multi" | "Map" | "ListOfMetadata";
export declare class LazyRevisionOperation<T extends object> implements ILazyOperation {
    private readonly _clazz;
    private readonly _getRevisionOperation;
    private _mode;
    private _result;
    private _queryResult;
    private _requiresRetry;
    constructor(clazz: DocumentType<T>, getRevisionOperation: GetRevisionOperation, mode: Mode);
    get result(): any;
    set result(result: any);
    get queryResult(): QueryResult;
    set queryResult(queryResult: QueryResult);
    get requiresRetry(): boolean;
    set requiresRetry(result: boolean);
    createRequest(): GetRequest;
    handleResponseAsync(response: GetResponse): Promise<void>;
}
//# sourceMappingURL=LazyRevisionOperation.d.ts.map