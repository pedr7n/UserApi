{"version":3,"file":"LazySuggestionQueryOperation.js","sourceRoot":"","sources":["../../../../../../src/Documents/Session/Operations/Lazy/LazySuggestionQueryOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,0CAA0C,CAAC;AAEtE,OAAO,EAAE,YAAY,EAAE,MAAM,mCAAmC,CAAC;AACjE,OAAO,EAAE,gBAAgB,EAAE,MAAM,mCAAmC,CAAC;AACrE,OAAO,EAAc,eAAe,EAAE,MAAM,gCAAgC,CAAC;AAI7E,MAAM,OAAO,4BAA4B;IAErC,wDAAwD;IAChD,OAAO,CAAS;IAChB,YAAY,CAAc;IAC1B,cAAc,CAAU;IAEf,QAAQ,CAAoC;IAC5C,WAAW,CAAa;IACxB,yBAAyB,CAAgC;IACzD,eAAe,CACuB;IAEvD,YAAmB,OAA0C,EAAE,UAAsB,EAClE,wBAAuD,EACvD,cACgC;QAC/C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,yBAAyB,GAAG,wBAAwB,CAAC;QAC1D,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IAC1C,CAAC;IAEM,aAAa;QAChB,MAAM,OAAO,GAAG,IAAI,UAAU,EAAE,CAAC;QACjC,OAAO,CAAC,GAAG,GAAG,UAAU,CAAC;QACzB,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;QACxB,OAAO,CAAC,KAAK,GAAG,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QACtG,OAAO,CAAC,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE5E,OAAO,OAAO,CAAC;IACnB,CAAC;IAED,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,IAAW,MAAM,CAAC,MAAM;QACpB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,IAAW,WAAW,CAAC,WAAW;QAC9B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED,IAAW,aAAa,CAAC,MAAM;QAC3B,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,mBAAmB,CAAC,QAAqB;QAClD,IAAI,QAAQ,CAAC,UAAU,EAAE,CAAC;YACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,OAAO;QACX,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,6BAA6B,CAC3D,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAEzE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAEO,eAAe,CAAC,WAAwB;QAC5C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;CACJ","sourcesContent":["import { ILazyOperation } from \"./ILazyOperation.js\";\r\nimport { QueryResult } from \"../../../Queries/QueryResult.js\";\r\nimport { GetRequest } from \"../../../Commands/MultiGet/GetRequest.js\";\r\nimport { GetResponse } from \"../../../Commands/MultiGet/GetResponse.js\";\r\nimport { QueryCommand } from \"../../../Commands/QueryCommand.js\";\r\nimport { stringToReadable } from \"../../../../Utility/StreamUtil.js\";\r\nimport { IndexQuery, writeIndexQuery } from \"../../../Queries/IndexQuery.js\";\r\nimport { SuggestionsResponseObject } from \"../../../../Types/index.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"../../InMemoryDocumentSessionOperations.js\";\r\n\r\nexport class LazySuggestionQueryOperation implements ILazyOperation {\r\n\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    private _result: Object;\r\n    private _queryResult: QueryResult;\r\n    private _requiresRetry: boolean;\r\n\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n    private readonly _indexQuery: IndexQuery;\r\n    private readonly _invokeAfterQueryExecuted: (result: QueryResult) => void;\r\n    private readonly _processResults:\r\n        (result: QueryResult) => SuggestionsResponseObject;\r\n\r\n    public constructor(session: InMemoryDocumentSessionOperations, indexQuery: IndexQuery,\r\n                       invokeAfterQueryExecuted: (result: QueryResult) => void,\r\n                       processResults: (result: QueryResult)\r\n                           => SuggestionsResponseObject) {\r\n        this._session = session;\r\n        this._indexQuery = indexQuery;\r\n        this._invokeAfterQueryExecuted = invokeAfterQueryExecuted;\r\n        this._processResults = processResults;\r\n    }\r\n\r\n    public createRequest(): GetRequest {\r\n        const request = new GetRequest();\r\n        request.url = \"/queries\";\r\n        request.method = \"POST\";\r\n        request.query = \"?queryHash=\" + this._indexQuery.getQueryHash(this._session.conventions.objectMapper);\r\n        request.body = writeIndexQuery(this._session.conventions, this._indexQuery);\r\n\r\n        return request;\r\n    }\r\n\r\n    public get result(): any {\r\n        return this._result;\r\n    }\r\n\r\n    public set result(result) {\r\n        this._result = result;\r\n    }\r\n\r\n    public get queryResult(): QueryResult {\r\n        return this._queryResult;\r\n    }\r\n\r\n    public set queryResult(queryResult) {\r\n        this._queryResult = queryResult;\r\n    }\r\n\r\n    public get requiresRetry() {\r\n        return this._requiresRetry;\r\n    }\r\n\r\n    public set requiresRetry(result) {\r\n        this._requiresRetry = result;\r\n    }\r\n\r\n    public async handleResponseAsync(response: GetResponse) {\r\n        if (response.forceRetry) {\r\n            this._result = null;\r\n            this._requiresRetry = true;\r\n            return;\r\n        }\r\n\r\n        const result = await QueryCommand.parseQueryResultResponseAsync(\r\n            stringToReadable(response.result), this._session.conventions, false);\r\n\r\n        this._handleResponse(result);\r\n    }\r\n\r\n    private _handleResponse(queryResult: QueryResult) {\r\n        this._result = this._processResults(queryResult);\r\n        this._queryResult = queryResult;\r\n    }\r\n}\r\n"]}