{"version":3,"file":"GetRevisionOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Operations/GetRevisionOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { InMemoryDocumentSessionOperations } from \"../InMemoryDocumentSessionOperations.js\";\r\nimport { GetRevisionsCommand } from \"../../Commands/GetRevisionsCommand.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { IRavenArrayResult, IRavenObject, RevisionsCollectionObject } from \"../../../Types/index.js\";\r\nimport { DocumentInfo } from \"../DocumentInfo.js\";\r\nimport { MetadataAsDictionary } from \"../../../Mapping/MetadataAsDictionary.js\";\r\nimport { CONSTANTS } from \"../../../Constants.js\";\r\nimport { DocumentType } from \"../../DocumentAbstractions.js\";\r\nimport { IMetadataDictionary } from \"../IMetadataDictionary.js\";\r\n\r\nexport class GetRevisionOperation {\r\n\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n\r\n    private _result: IRavenArrayResult;\r\n    private readonly _command: GetRevisionsCommand;\r\n\r\n    public constructor(session: InMemoryDocumentSessionOperations, id: string, before: Date);\r\n    public constructor(session: InMemoryDocumentSessionOperations, id: string, start: number, pageSize: number);\r\n    public constructor(session: InMemoryDocumentSessionOperations, id: string, start: number, pageSize: number,\r\n                       metadataOnly: boolean);\r\n    public constructor(session: InMemoryDocumentSessionOperations, changeVector: string);\r\n    public constructor(session: InMemoryDocumentSessionOperations, changeVectors: string[]);\r\n    public constructor(session: InMemoryDocumentSessionOperations, changeVectorOrChangeVectorsOrId: string | string[],\r\n                       startOrDate?: Date | number, pageSize?: number, metadataOnly: boolean = false) {\r\n        if (!session) {\r\n            throwError(\"InvalidArgumentException\", \"Session cannot be null.\");\r\n        }\r\n\r\n        if (!changeVectorOrChangeVectorsOrId) {\r\n            throwError(\"InvalidArgumentException\", \"Id cannot be null.\");\r\n        }\r\n\r\n        this._session = session;\r\n        if (startOrDate instanceof Date) {\r\n            this._command = new GetRevisionsCommand(session.conventions,\r\n                changeVectorOrChangeVectorsOrId as string, startOrDate);\r\n        } else if (TypeUtil.isArray(changeVectorOrChangeVectorsOrId)) {\r\n            this._command = new GetRevisionsCommand(session.conventions, changeVectorOrChangeVectorsOrId);\r\n        } else if (TypeUtil.isNumber(startOrDate)) {\r\n            this._command = new GetRevisionsCommand(session.conventions, changeVectorOrChangeVectorsOrId, startOrDate,\r\n                pageSize, metadataOnly);\r\n        } else {\r\n            this._command = new GetRevisionsCommand(session.conventions, changeVectorOrChangeVectorsOrId);\r\n        }\r\n    }\r\n\r\n    public createRequest() {\r\n        if (this._command.changeVectors) {\r\n            return this._session.checkIfAllChangeVectorsAreAlreadyIncluded(this._command.changeVectors) ? null : this._command;\r\n        }\r\n\r\n        if (this._command.changeVector) {\r\n            return this._session.checkIfAllChangeVectorsAreAlreadyIncluded([this.command.changeVector]) ? null : this._command;\r\n        }\r\n\r\n        if (this.command.before) {\r\n            return this._session.checkIfRevisionByDateTimeBeforeAlreadyIncluded(this.command.id, this.command.before) ? null : this._command;\r\n        }\r\n\r\n        return this._command;\r\n    }\r\n\r\n    set result(result: IRavenArrayResult) {\r\n        this._result = result;\r\n    }\r\n\r\n    public get command() {\r\n        return this._command;\r\n    }\r\n\r\n    private _getRevision<TEntity extends object>(documentType: DocumentType<TEntity>, document: IRavenObject): TEntity {\r\n        if (!document) {\r\n            return null;\r\n        }\r\n\r\n        let id: string = null;\r\n\r\n        const metadata = document[CONSTANTS.Documents.Metadata.KEY];\r\n        if (metadata) {\r\n            id = metadata[CONSTANTS.Documents.Metadata.ID];\r\n        }\r\n\r\n        let changeVector = null as string;\r\n        if (metadata) {\r\n            changeVector = metadata[CONSTANTS.Documents.Metadata.CHANGE_VECTOR];\r\n        }\r\n\r\n        const entity = this._session.entityToJson.convertToEntity(documentType, id, document, !this._session.noTracking) as any as TEntity;\r\n        const documentInfo = new DocumentInfo();\r\n        documentInfo.id = id;\r\n        documentInfo.changeVector = changeVector;\r\n        documentInfo.document = document;\r\n        documentInfo.metadata = metadata;\r\n        documentInfo.entity = entity;\r\n        this._session.documentsByEntity.put(entity, documentInfo);\r\n\r\n        this._session.onAfterConversionToEntityInvoke(id, document, entity);\r\n\r\n        return entity;\r\n    }\r\n\r\n    public getRevisionsFor<TEntity extends object>(documentType: DocumentType<TEntity>): TEntity[] {\r\n        const resultsCount = this._result.results.length;\r\n        const results = [] as TEntity[];\r\n\r\n        for (const document of this._result.results) {\r\n            results.push(this._getRevision<TEntity>(documentType, document));\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public getRevisionsMetadataFor(): IMetadataDictionary[] {\r\n        const resultsCount = this._result.results.length;\r\n        const results = [] as MetadataAsDictionary[];\r\n\r\n        for (const document of this._result.results) {\r\n            const metadata = document[CONSTANTS.Documents.Metadata.KEY];\r\n            results.push(metadata);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public getRevision<TEntity extends object>(documentType: DocumentType<TEntity>): TEntity | null {\r\n        if (!this._result) {\r\n\r\n            let revision: DocumentInfo;\r\n\r\n            if (this._command.changeVectors) {\r\n                for (const changeVector of this._command.changeVectors) {\r\n                    revision = this._session.includeRevisionsByChangeVector.get(changeVector);\r\n                    if (revision) {\r\n                        return this._getRevision(documentType, revision.document);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.command.changeVector && this._session.includeRevisionsByChangeVector) {\r\n                revision = this._session.includeRevisionsByChangeVector.get(this._command.changeVector);\r\n                if (revision) {\r\n                    return this._getRevision(documentType, revision.document);\r\n                }\r\n            }\r\n\r\n            if (this._command.before && this._session.includeRevisionsIdByDateTimeBefore) {\r\n                const dictionaryDateTimeToDocument = this._session.includeRevisionsIdByDateTimeBefore.get(this._command.id);\r\n\r\n                if (dictionaryDateTimeToDocument) {\r\n                    revision = dictionaryDateTimeToDocument.get(this._command.before.getTime());\r\n                    if (revision) {\r\n                        return this._getRevision(documentType, revision.document);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        const document = this._result.results[0];\r\n        return this._getRevision(documentType, document);\r\n    }\r\n\r\n    public getRevisions<TEntity extends object>(\r\n        documentType: DocumentType<TEntity>): RevisionsCollectionObject<TEntity> {\r\n        const results = {} as RevisionsCollectionObject<TEntity>;\r\n\r\n        if (!this._result) {\r\n            for (const changeVector of this._command.changeVectors) {\r\n                const revision = this._session.includeRevisionsByChangeVector.get(changeVector);\r\n                if (revision) {\r\n                    results[changeVector] = this._getRevision(documentType, revision.document);\r\n                }\r\n            }\r\n\r\n            return results;\r\n        }\r\n\r\n        for (let i = 0; i < this._command.changeVectors.length; i++) {\r\n            const changeVector = this._command.changeVectors[i];\r\n            if (!changeVector) {\r\n                continue;\r\n            }\r\n\r\n            results[changeVector] = this._getRevision(documentType, this._result.results[i]);\r\n        }\r\n\r\n        return results;\r\n    }\r\n}\r\n"]}