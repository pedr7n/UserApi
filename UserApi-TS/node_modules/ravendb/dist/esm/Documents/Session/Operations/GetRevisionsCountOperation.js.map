{"version":3,"file":"GetRevisionsCountOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Operations/GetRevisionsCountOperation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAC7D,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAM1D,MAAM,OAAO,0BAA0B;IAClB,MAAM,CAAS;IAEhC,YAAY,KAAa;QACrB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAEM,aAAa;QAChB,OAAO,IAAI,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC;CACJ;AAED,MAAM,wBAAyB,SAAQ,YAAoB;IACtC,GAAG,CAAS;IAE7B,YAAmB,EAAU;QACzB,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,EAAE,EAAE,CAAC;YACN,UAAU,CAAC,0BAA0B,EAAE,mBAAmB,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAClB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,uBAAuB,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3G,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;SACN,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAA6B,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAE1G,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;QACpC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\n\r\nexport class GetRevisionsCountOperation {\r\n    private readonly _docId: string;\r\n\r\n    constructor(docId: string) {\r\n        this._docId = docId;\r\n    }\r\n\r\n    public createRequest(): RavenCommand<number> {\r\n        return new GetRevisionsCountCommand(this._docId);\r\n    }\r\n}\r\n\r\nclass GetRevisionsCountCommand extends RavenCommand<number> {\r\n    private readonly _id: string;\r\n\r\n    public constructor(id: string) {\r\n        super();\r\n\r\n        if (!id) {\r\n            throwError(\"InvalidArgumentException\", \"Id cannot be null\");\r\n        }\r\n\r\n        this._id = id;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/revisions/count?&id=\" + this._urlEncode(this._id);\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        let body: string = null;\r\n        const result = await this._defaultPipeline<{ revisionsCount: number }>(_ => body = _).process(bodyStream);\r\n\r\n        this.result = result.revisionsCount;\r\n        return body;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}