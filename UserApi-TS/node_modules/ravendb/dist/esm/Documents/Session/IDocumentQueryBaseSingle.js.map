{"version":3,"file":"IDocumentQueryBaseSingle.js","sourceRoot":"","sources":["../../../../src/Documents/Session/IDocumentQueryBaseSingle.ts"],"names":[],"mappings":"","sourcesContent":["import { Lazy } from \"../Lazy.js\";\r\n\r\nexport interface IDocumentQueryBaseSingle<T extends object> {\r\n    //TBD  Lazy<int> CountLazily();\r\n\r\n    /**\r\n     * Returns first element or throws if sequence is empty.\r\n     */\r\n    first(): Promise<T>;\r\n\r\n    /**\r\n     * Returns first element if there's any or null otherwise.\r\n     */\r\n    firstOrNull(): Promise<T | null>;\r\n\r\n    /**\r\n     * Returns single element or throws if sequence is empty or contains more than one element.\r\n     */\r\n    single(): Promise<T>;\r\n\r\n    /**\r\n     * Returns single element if there's any or null otherwise.\r\n     */\r\n    singleOrNull(): Promise<T | null>;\r\n\r\n    /**\r\n     * Gets the total count of records for this query\r\n     */\r\n    count(): Promise<number>;\r\n\r\n    /**\r\n     * Gets the total count of records for this query as long\r\n     */\r\n    longCount(): Promise<number>;\r\n\r\n    /**\r\n     * Register the query as a lazy query in the session and return a lazy\r\n     * instance that will evaluate the query only when needed.\r\n     */\r\n    lazily(): Lazy<T[]>;\r\n\r\n    /**\r\n     * Register the query as a lazy query in the session and return a lazy\r\n     * instance that will evaluate the query only when needed.\r\n     * Also provide a function to execute when the value is evaluated\r\n     */\r\n    lazily(onEval: (list: T[]) => void): Lazy<T[]>;\r\n\r\n    /**\r\n     * Checks if the given query matches any records\r\n     */\r\n    any(): Promise<boolean>;\r\n\r\n    /**\r\n     * Register the query as a lazy-count query in the session and return a lazy\r\n     * instance that will evaluate the query only when needed.\r\n     */\r\n    countLazily(): Lazy<number>;\r\n}\r\n"]}