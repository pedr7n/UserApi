{"version":3,"file":"InMemoryDocumentSessionOperations.js","sourceRoot":"","sources":["../../../../src/Documents/Session/InMemoryDocumentSessionOperations.ts"],"names":[],"mappings":"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","sourcesContent":["import { EntityToJson } from \"./EntityToJson.js\";\r\nimport { IDisposable } from \"../../Types/Contracts.js\";\r\nimport { SessionInfo, ConcurrencyCheckMode, StoreOptions } from \"./IDocumentSession.js\";\r\nimport { IMetadataDictionary } from \"./IMetadataDictionary.js\";\r\nimport { ObjectTypeDescriptor, ClassConstructor, ServerResponse } from \"../../Types/index.js\";\r\nimport {\r\n    SessionEventsEmitter,\r\n    SessionBeforeStoreEventArgs,\r\n    SessionBeforeDeleteEventArgs,\r\n    BeforeConversionToDocumentEventArgs,\r\n    AfterConversionToDocumentEventArgs,\r\n    BeforeConversionToEntityEventArgs,\r\n    AfterConversionToEntityEventArgs\r\n} from \"./SessionEvents.js\";\r\nimport { RequestExecutor } from \"../../Http/RequestExecutor.js\";\r\nimport { IDocumentStore } from \"../IDocumentStore.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { DocumentsById, EntityInfo } from \"./DocumentsById.js\";\r\nimport { DocumentInfo } from \"./DocumentInfo.js\";\r\nimport { DocumentStoreBase } from \"../DocumentStoreBase.js\";\r\nimport {\r\n    ICommandData,\r\n    DeleteCommandData,\r\n    SaveChangesData,\r\n    PutCommandDataWithJson,\r\n    CommandType\r\n} from \"../Commands/CommandData.js\";\r\nimport { BatchPatchCommandData } from \"../Commands/Batches/BatchPatchCommandData.js\";\r\nimport { GenerateEntityIdOnTheClient } from \"../Identity/GenerateEntityIdOnTheClient.js\";\r\nimport { tryGetConflict } from \"../../Mapping/Json/index.js\";\r\nimport { CONSTANTS, HEADERS } from \"../../Constants.js\";\r\nimport { DateUtil } from \"../../Utility/DateUtil.js\";\r\nimport { ObjectUtil } from \"../../Utility/ObjectUtil.js\";\r\nimport { IncludesUtil } from \"./IncludesUtil.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { IdTypeAndName } from \"../IdTypeAndName.js\";\r\nimport { BatchOptions } from \"../Commands/Batches/BatchOptions.js\";\r\nimport { DocumentsChanges } from \"./DocumentsChanges.js\";\r\nimport { EventEmitter } from \"node:events\";\r\nimport { JsonOperation } from \"../../Mapping/JsonOperation.js\";\r\nimport { IRavenObject } from \"../../Types/IRavenObject.js\";\r\nimport { GetDocumentsCommand } from \"../Commands/GetDocumentsCommand.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { OperationExecutor } from \"../Operations/OperationExecutor.js\";\r\nimport { createMetadataDictionary } from \"../../Mapping/MetadataAsDictionary.js\";\r\nimport { IndexBatchOptions, ReplicationBatchOptions } from \"./IAdvancedSessionOperations.js\";\r\nimport { ILazyOperation } from \"./Operations/Lazy/ILazyOperation.js\";\r\nimport { TransactionMode } from \"./TransactionMode.js\";\r\nimport { CounterTracking } from \"./CounterInternalTypes.js\";\r\nimport { CaseInsensitiveKeysMap } from \"../../Primitives/CaseInsensitiveKeysMap.js\";\r\nimport { CaseInsensitiveStringSet } from \"../../Primitives/CaseInsensitiveStringSet.js\";\r\nimport { DocumentStore } from \"../DocumentStore.js\";\r\nimport { SessionOptions } from \"./SessionOptions.js\";\r\nimport { ClusterTransactionOperationsBase } from \"./ClusterTransactionOperationsBase.js\";\r\nimport { BatchCommandResult } from \"./Operations/BatchCommandResult.js\";\r\nimport { SessionOperationExecutor } from \"../Operations/SessionOperationExecutor.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { Reference } from \"../../Utility/Reference.js\";\r\nimport { ForceRevisionStrategy } from \"./ForceRevisionStrategy.js\";\r\nimport { ForceRevisionCommandData } from \"../Commands/Batches/ForceRevisionCommandData.js\";\r\nimport { TimeSeriesRangeResult } from \"../Operations/TimeSeries/TimeSeriesRangeResult.js\";\r\nimport { DatesComparator, leftDate, rightDate } from \"../../Primitives/DatesComparator.js\";\r\nimport { TimeSeriesEntry } from \"./TimeSeries/TimeSeriesEntry.js\";\r\nimport { reviveTimeSeriesRangeResult } from \"../Operations/TimeSeries/GetTimeSeriesOperation.js\";\r\nimport { forBehavior } from \"../Commands/Batches/ShardedBatchOptions.js\";\r\n\r\nexport abstract class InMemoryDocumentSessionOperations\r\n    extends EventEmitter\r\n    implements IDisposable, SessionEventsEmitter {\r\n\r\n    protected _requestExecutor: RequestExecutor;\r\n\r\n    private _operationExecutor: OperationExecutor;\r\n\r\n    protected _pendingLazyOperations: ILazyOperation[] = [];\r\n\r\n    protected static _instancesCounter: number = 0;\r\n\r\n    private _hash = ++InMemoryDocumentSessionOperations._instancesCounter;\r\n\r\n    private _disposed: boolean;\r\n\r\n    private readonly _id: string;\r\n\r\n    public get id() {\r\n        return this._id;\r\n    }\r\n\r\n    protected _knownMissingIds: Set<string> = CaseInsensitiveStringSet.create();\r\n\r\n    private _externalState: Map<string, object>;\r\n\r\n    public disableAtomicDocumentWritesInClusterWideTransaction: boolean;\r\n\r\n    private _transactionMode: TransactionMode;\r\n\r\n    public get externalState() {\r\n        if (!this._externalState) {\r\n            this._externalState = new Map();\r\n        }\r\n\r\n        return this._externalState;\r\n    }\r\n\r\n    public getCurrentSessionNode(): Promise<ServerNode> {\r\n        return this.sessionInfo.getCurrentSessionNode(this._requestExecutor);\r\n\r\n    }\r\n\r\n    public documentsById: DocumentsById = new DocumentsById();\r\n\r\n    /**\r\n     * map holding the data required to manage Counters tracking for RavenDB's Unit of Work\r\n     */\r\n    public get countersByDocId(): Map<string, CounterTracking> {\r\n        if (!this._countersByDocId) {\r\n            this._countersByDocId = CaseInsensitiveKeysMap.create();\r\n        }\r\n\r\n        return this._countersByDocId;\r\n    }\r\n\r\n    private _countersByDocId: Map<string, CounterTracking>;\r\n\r\n    private _timeSeriesByDocId: Map<string, Map<string, TimeSeriesRangeResult[]>>;\r\n\r\n    public get timeSeriesByDocId() {\r\n        if (!this._timeSeriesByDocId) {\r\n            this._timeSeriesByDocId = CaseInsensitiveKeysMap.create();\r\n        }\r\n\r\n        return this._timeSeriesByDocId;\r\n    }\r\n\r\n    public readonly noTracking: boolean;\r\n\r\n    public idsForCreatingForcedRevisions: Map<string, ForceRevisionStrategy> = CaseInsensitiveKeysMap.create();\r\n\r\n    public includedDocumentsById: Map<string, DocumentInfo> = CaseInsensitiveKeysMap.create();\r\n\r\n    /**\r\n     * Translate between an CV and its associated entity\r\n     */\r\n    public includeRevisionsByChangeVector: Map<string, DocumentInfo> = CaseInsensitiveKeysMap.create();\r\n\r\n    /**\r\n     * Translate between an ID and its associated entity\r\n     */\r\n    public includeRevisionsIdByDateTimeBefore: Map<string, Map<number, DocumentInfo>> = CaseInsensitiveKeysMap.create();\r\n\r\n    public documentsByEntity: DocumentsByEntityHolder = new DocumentsByEntityHolder();\r\n\r\n    public deletedEntities: DeletedEntitiesHolder = new DeletedEntitiesHolder();\r\n\r\n    protected _documentStore: DocumentStoreBase;\r\n\r\n    private readonly _databaseName: string;\r\n\r\n    private _saveChangesOptions: BatchOptions;\r\n\r\n    public get databaseName(): string {\r\n        return this._databaseName;\r\n    }\r\n\r\n    public get documentStore(): IDocumentStore {\r\n        return this._documentStore;\r\n    }\r\n\r\n    public get requestExecutor(): RequestExecutor {\r\n        return this._requestExecutor;\r\n    }\r\n\r\n    public get sessionInfo(): SessionInfo {\r\n        return this._sessionInfo;\r\n    }\r\n\r\n    public get operations() {\r\n        if (!this._operationExecutor) {\r\n            this._operationExecutor = new SessionOperationExecutor(this);\r\n        }\r\n\r\n        return this._operationExecutor;\r\n    }\r\n\r\n    private _numberOfRequests: number = 0;\r\n\r\n    public get numberOfRequests() {\r\n        return this._numberOfRequests;\r\n    }\r\n\r\n    public getNumberOfEntitiesInUnitOfWork() {\r\n        return this.documentsByEntity.size;\r\n    }\r\n\r\n    public get storeIdentifier(): string {\r\n        return `${this._documentStore.identifier};${this._databaseName}`;\r\n    }\r\n\r\n    public get conventions(): DocumentConventions {\r\n        return this._requestExecutor.conventions;\r\n    }\r\n\r\n    public maxNumberOfRequestsPerSession: number;\r\n\r\n    public useOptimisticConcurrency: boolean;\r\n\r\n    protected _deferredCommands: ICommandData[] = [];\r\n\r\n    // keys are produced with IdTypeAndName.keyFor() method\r\n    public deferredCommandsMap: Map<string, ICommandData> = new Map();\r\n\r\n    public get deferredCommands() {\r\n        return this._deferredCommands;\r\n    }\r\n\r\n    public get deferredCommandsCount() {\r\n        return this._deferredCommands.length;\r\n    }\r\n\r\n    private readonly _generateEntityIdOnTheClient: GenerateEntityIdOnTheClient;\r\n\r\n    public get generateEntityIdOnTheClient() {\r\n        return this._generateEntityIdOnTheClient;\r\n    }\r\n\r\n    private readonly _entityToJson: EntityToJson;\r\n\r\n    public get entityToJson() {\r\n        return this._entityToJson;\r\n    }\r\n\r\n    protected _sessionInfo: SessionInfo;\r\n\r\n    protected constructor(\r\n        documentStore: DocumentStore,\r\n        id: string,\r\n        options: SessionOptions) {\r\n        super();\r\n\r\n        this._id = id;\r\n        this._databaseName = options.database || documentStore.database;\r\n\r\n        if (StringUtil.isNullOrWhitespace(this._databaseName)) {\r\n            InMemoryDocumentSessionOperations._throwNoDatabase();\r\n        }\r\n\r\n        this._documentStore = documentStore;\r\n        this._requestExecutor =\r\n            options.requestExecutor || documentStore.getRequestExecutor(this._databaseName);\r\n\r\n        this.noTracking = options.noTracking;\r\n\r\n        this.useOptimisticConcurrency = this._requestExecutor.conventions.isUseOptimisticConcurrency();\r\n        this.maxNumberOfRequestsPerSession = this._requestExecutor.conventions.maxNumberOfRequestsPerSession;\r\n        this._generateEntityIdOnTheClient =\r\n            new GenerateEntityIdOnTheClient(this._requestExecutor.conventions,\r\n                (obj) => this._generateId(obj));\r\n        this._entityToJson = new EntityToJson(this);\r\n\r\n        this._sessionInfo = new SessionInfo(this, options, documentStore);\r\n        this._transactionMode = options.transactionMode;\r\n        this.disableAtomicDocumentWritesInClusterWideTransaction = options.disableAtomicDocumentWritesInClusterWideTransaction;\r\n\r\n        const shardedBatchBehavior = options.shardedBatchBehavior ?? this.requestExecutor.conventions.sharding.batchBehavior;\r\n\r\n        const shardedBatchOptions = forBehavior(shardedBatchBehavior);\r\n        if (shardedBatchOptions) {\r\n            this._saveChangesOptions = {\r\n                shardedOptions: shardedBatchOptions,\r\n                replicationOptions: null,\r\n                indexOptions: null\r\n            }\r\n        }\r\n    }\r\n\r\n    protected abstract _generateId(entity: object): Promise<string>;\r\n\r\n    /**\r\n     * Gets the metadata for the specified entity.\r\n     */\r\n    public getMetadataFor<T extends object>(instance: T): IMetadataDictionary {\r\n        if (!instance) {\r\n            throwError(\"InvalidOperationException\", \"Instance cannot be null or undefined.\");\r\n        }\r\n\r\n        const documentInfo = this._getDocumentInfo(instance);\r\n        return this._makeMetadataInstance(documentInfo);\r\n    }\r\n\r\n    /**\r\n     * Gets all counter names for the specified entity.\r\n     */\r\n    public getCountersFor<T extends object>(instance: T): string[] {\r\n        if (!instance) {\r\n            throwError(\"InvalidArgumentException\", \"Instance cannot be null.\");\r\n        }\r\n\r\n        const documentInfo = this._getDocumentInfo(instance);\r\n        const countersArray = documentInfo.metadata[CONSTANTS.Documents.Metadata.COUNTERS] as string[];\r\n        if (!countersArray) {\r\n            return null;\r\n        }\r\n\r\n        return countersArray;\r\n    }\r\n\r\n    /**\r\n     * Gets all time series names for the specified entity.\r\n     * @param instance Entity\r\n     */\r\n    public getTimeSeriesFor<T extends object>(instance: T): string[] {\r\n        if (!instance) {\r\n            throwError(\"InvalidArgumentException\", \"Instance cannot be null\");\r\n        }\r\n\r\n        const documentInfo = this._getDocumentInfo(instance);\r\n        return documentInfo.metadata[CONSTANTS.Documents.Metadata.TIME_SERIES] || [];\r\n    }\r\n\r\n    private _makeMetadataInstance<T extends object>(docInfo: DocumentInfo): IMetadataDictionary {\r\n        const metadataInstance = docInfo.metadataInstance;\r\n        if (metadataInstance) {\r\n            return metadataInstance;\r\n        }\r\n\r\n        const metadataAsJson = docInfo.metadata;\r\n        const metadata = createMetadataDictionary({ raw: metadataAsJson });\r\n        docInfo.entity[CONSTANTS.Documents.Metadata.KEY] = docInfo.metadataInstance = metadata;\r\n\r\n        return metadata;\r\n    }\r\n\r\n    private _getDocumentInfo<T extends object>(instance: T): DocumentInfo {\r\n        const documentInfo: DocumentInfo = this.documentsByEntity.get(instance);\r\n\r\n        if (documentInfo) {\r\n            return documentInfo;\r\n        }\r\n\r\n        let idRef;\r\n        if (!this._generateEntityIdOnTheClient.tryGetIdFromInstance(\r\n            instance, (_idRef) => idRef = _idRef)) {\r\n            throwError(\"InvalidOperationException\", \"Could not find the document id for \" + instance);\r\n        }\r\n\r\n        this._assertNoNonUniqueInstance(instance, idRef);\r\n\r\n        throwError(\"InvalidArgumentException\", \"Document \" + idRef + \" doesn't exist in the session\");\r\n    }\r\n\r\n    protected _assertNoNonUniqueInstance(entity: object, id: string): void {\r\n        if (!id\r\n            || id.at(-1) === \"|\"\r\n            || id.at(-1) === this.conventions.identityPartsSeparator) {\r\n            return;\r\n        }\r\n\r\n        const info: DocumentInfo = this.documentsById.getValue(id);\r\n        if (!info || info.entity === entity) {\r\n            return;\r\n        }\r\n\r\n        throwError(\"NonUniqueObjectException\", \"Attempted to associate a different object with id '\" + id + \"'.\");\r\n    }\r\n\r\n    /**\r\n     * Gets the Change Vector for the specified entity.\r\n     * If the entity is transient, it will load the change vector from the store\r\n     * and associate the current state of the entity with the change vector from the server.\r\n     */\r\n    public getChangeVectorFor<T extends object>(instance: T): string {\r\n        if (!instance) {\r\n            throwError(\"InvalidArgumentException\", \"Instance cannot be null or undefined.\");\r\n        }\r\n\r\n        const documentInfo: DocumentInfo = this._getDocumentInfo(instance);\r\n        const changeVector = documentInfo.metadata[CONSTANTS.Documents.Metadata.CHANGE_VECTOR];\r\n        if (changeVector) {\r\n            return changeVector.toString() as string;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public getLastModifiedFor<T extends object>(instance: T): Date {\r\n        if (!instance) {\r\n            throwError(\"InvalidArgumentException\", \"Instance cannot be null or undefined.\");\r\n        }\r\n\r\n        const documentInfo = this._getDocumentInfo(instance);\r\n        const lastModified = documentInfo.metadata[\"@last-modified\"];\r\n        return DateUtil.utc.parse(lastModified);\r\n    }\r\n\r\n    /**\r\n     * Returns whether a document with the specified id is loaded in the\r\n     * current session\r\n     */\r\n    public isLoaded(id: string): boolean {\r\n        return this.isLoadedOrDeleted(id);\r\n    }\r\n\r\n    public isLoadedOrDeleted(id: string): boolean {\r\n        const documentInfo = this.documentsById.getValue(id);\r\n        return !!(documentInfo && (documentInfo.document || documentInfo.entity))\r\n            || this.isDeleted(id)\r\n            || this.includedDocumentsById.has(id);\r\n    }\r\n\r\n    /**\r\n     * Returns whether a document with the specified id is deleted\r\n     * or known to be missing\r\n     */\r\n    public isDeleted(id: string): boolean {\r\n        return this._knownMissingIds.has(id);\r\n    }\r\n\r\n    /**\r\n     * Gets the document id.\r\n     */\r\n    public getDocumentId(instance: object): string {\r\n        if (!instance) {\r\n            return null;\r\n        }\r\n\r\n        const value = this.documentsByEntity.get(instance);\r\n        return value ? value.id : null;\r\n    }\r\n\r\n    public incrementRequestCount(): void {\r\n        if (++this._numberOfRequests > this.maxNumberOfRequestsPerSession) {\r\n            throwError(\"InvalidOperationException\",\r\n                `The maximum number of requests (${this.maxNumberOfRequestsPerSession}) allowed for this session has been reached.` +\r\n                \"Raven limits the number of remote calls that a session is allowed to make as an early warning system. Sessions are expected to be short lived, and \" +\r\n                \"Raven provides facilities like load(string[] keys) to load multiple documents at once and batch saves (call SaveChanges() only once).\" +\r\n                \"You can increase the limit by setting DocumentConvention.MaxNumberOfRequestsPerSession or MaxNumberOfRequestsPerSession, but it is\" +\r\n                \"advisable that you'll look into reducing the number of remote calls first, since that will speed up your application significantly and result in a\" +\r\n                \"more responsive application.\");\r\n        }\r\n    }\r\n\r\n    public checkIfAllChangeVectorsAreAlreadyIncluded(changeVectors: string[]): boolean {\r\n        if (!this.includeRevisionsByChangeVector) {\r\n            return false;\r\n        }\r\n\r\n        for (const cv of changeVectors) {\r\n            if (!this.includeRevisionsByChangeVector.has(cv)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public checkIfRevisionByDateTimeBeforeAlreadyIncluded(id: string, dateTime: Date): boolean {\r\n        if (!this.includeRevisionsIdByDateTimeBefore) {\r\n            return false;\r\n        }\r\n\r\n        const dictionaryDateTimeToDocument = this.includeRevisionsIdByDateTimeBefore.get(id);\r\n        return dictionaryDateTimeToDocument && dictionaryDateTimeToDocument.has(dateTime.getTime());\r\n    }\r\n\r\n    public checkIfIdAlreadyIncluded(ids: string[], includes: string[]): boolean {\r\n        for (const id of ids) {\r\n            if (this._knownMissingIds.has(id)) {\r\n                continue;\r\n            }\r\n\r\n            // Check if document was already loaded, the check if we've received it through include\r\n            let documentInfo: DocumentInfo = this.documentsById.getValue(id);\r\n            if (!documentInfo) {\r\n                documentInfo = this.includedDocumentsById.get(id);\r\n                if (!documentInfo) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (!documentInfo.entity && !documentInfo.document) {\r\n                return false;\r\n            }\r\n\r\n            if (!includes) {\r\n                continue;\r\n            }\r\n\r\n            for (const include of includes) {\r\n                let hasAll: boolean = true;\r\n\r\n                IncludesUtil.include(documentInfo.document, include, (includeId: string) => {\r\n                    hasAll = hasAll && this.isLoaded(includeId);\r\n                });\r\n\r\n                if (!hasAll) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tracks the entity inside the unit of work\r\n     */\r\n    public trackEntity<T extends object>(\r\n        entityType: ObjectTypeDescriptor<T>, documentFound: DocumentInfo): T;\r\n    public trackEntity<T extends object>(\r\n        entityType: ObjectTypeDescriptor<T>,\r\n        id: string,\r\n        document: object,\r\n        metadata: object,\r\n        noTracking: boolean): object;\r\n    public trackEntity<T extends object>(\r\n        entityType: ObjectTypeDescriptor<T>,\r\n        idOrDocumentInfo: string | DocumentInfo,\r\n        document?: object,\r\n        metadata?: object,\r\n        noTracking?: boolean): T {\r\n\r\n        let id: string;\r\n        if (TypeUtil.isObject(idOrDocumentInfo)) {\r\n            const info = idOrDocumentInfo as DocumentInfo;\r\n            return this.trackEntity(entityType, info.id, info.document, info.metadata, this.noTracking) as T;\r\n        } else {\r\n            id = idOrDocumentInfo as string;\r\n        }\r\n\r\n        // if noTracking is session-wide then we want to override the passed argument\r\n        noTracking = this.noTracking || noTracking;\r\n\r\n        if (!id) {\r\n            return this._deserializeFromTransformer(entityType, null, document, false) as T;\r\n        }\r\n\r\n        let docInfo: DocumentInfo = this.documentsById.getValue(id);\r\n        if (docInfo) {\r\n            // the local instance may have been changed, we adhere to the current Unit of Work\r\n            // instance, and return that, ignoring anything new.\r\n\r\n            if (!docInfo.entity) {\r\n                docInfo.entity = this.entityToJson.convertToEntity(entityType, id, document, !noTracking);\r\n                this._makeMetadataInstance(docInfo);\r\n            }\r\n\r\n            if (!noTracking) {\r\n                this.includedDocumentsById.delete(id);\r\n                this.documentsByEntity.put(docInfo.entity, docInfo);\r\n            }\r\n\r\n            this.onAfterConversionToEntityInvoke(id, docInfo.document, docInfo.entity);\r\n\r\n            return docInfo.entity as T;\r\n        }\r\n\r\n        docInfo = this.includedDocumentsById.get(id);\r\n        if (docInfo) {\r\n            if (!docInfo.entity) {\r\n                docInfo.entity = this.entityToJson.convertToEntity(entityType, id, document, !noTracking);\r\n                this._makeMetadataInstance(docInfo);\r\n            }\r\n\r\n            if (!noTracking) {\r\n                this.includedDocumentsById.delete(id);\r\n                this.documentsById.add(docInfo);\r\n                this.documentsByEntity.put(docInfo.entity, docInfo);\r\n            }\r\n\r\n            this.onAfterConversionToEntityInvoke(id, docInfo.document, docInfo.entity);\r\n\r\n            return docInfo.entity as T;\r\n        }\r\n\r\n        const entity = this.entityToJson.convertToEntity(entityType, id, document, !noTracking);\r\n\r\n        const changeVector = metadata[CONSTANTS.Documents.Metadata.CHANGE_VECTOR];\r\n        if (!changeVector) {\r\n            throwError(\"InvalidOperationException\", \"Document \" + id + \" must have Change Vector.\");\r\n        }\r\n\r\n        if (!noTracking) {\r\n            const newDocumentInfo: DocumentInfo = new DocumentInfo();\r\n            newDocumentInfo.id = id;\r\n            newDocumentInfo.document = document;\r\n            newDocumentInfo.metadata = metadata;\r\n            newDocumentInfo.entity = entity;\r\n            newDocumentInfo.changeVector = changeVector;\r\n\r\n            this.documentsById.add(newDocumentInfo);\r\n            this.documentsByEntity.put(entity, newDocumentInfo);\r\n            this._makeMetadataInstance(newDocumentInfo);\r\n        }\r\n\r\n        this.onAfterConversionToEntityInvoke(id, document, entity);\r\n\r\n        return entity as T;\r\n    }\r\n\r\n    public registerExternalLoadedIntoTheSession(info: DocumentInfo): void {\r\n        if (this.noTracking) {\r\n            return;\r\n        }\r\n\r\n        const existing = this.documentsById.getValue(info.id);\r\n        if (existing) {\r\n            if (existing.entity === info.entity) {\r\n                return;\r\n            }\r\n\r\n            throwError(\r\n                \"InvalidOperationException\",\r\n                \"The document \" + info.id + \" is already in the session with a different entity instance.\");\r\n        }\r\n\r\n        const existingEntity = this.documentsByEntity.get(info.entity);\r\n        if (existingEntity) {\r\n            if (StringUtil.equalsIgnoreCase(existingEntity.id, info.id)) {\r\n                return;\r\n            }\r\n\r\n            throwError(\r\n                \"InvalidOperationException\",\r\n                \"Attempted to load an entity with id \"\r\n                + info.id\r\n                + \", but the entity instance already exists in the session with id: \" + existing.id);\r\n        }\r\n\r\n        this.documentsByEntity.put(info.entity, info);\r\n        this.documentsById.add(info);\r\n        this.includedDocumentsById.delete(info.id);\r\n     }\r\n\r\n    private _deserializeFromTransformer(clazz: ObjectTypeDescriptor, id: string, document: object, trackEntity: boolean): object {\r\n        const entity = this.entityToJson.convertToEntity(clazz, id, document, trackEntity);\r\n        this.onAfterConversionToEntityInvoke(id, document, entity);\r\n        return entity;\r\n    }\r\n\r\n    public registerIncludes(includes: object): void {\r\n        if (this.noTracking) {\r\n            return;\r\n        }\r\n\r\n        if (!includes) {\r\n            return;\r\n        }\r\n\r\n        for (const fieldName of Object.keys(includes)) {\r\n            const fieldValue = includes[fieldName];\r\n\r\n            if (TypeUtil.isNullOrUndefined(fieldValue)) {\r\n                continue;\r\n            }\r\n\r\n            const newDocumentInfo = DocumentInfo.getNewDocumentInfo(fieldValue);\r\n            if (tryGetConflict(newDocumentInfo.metadata)) {\r\n                continue;\r\n            }\r\n\r\n            this.includedDocumentsById.set(newDocumentInfo.id, newDocumentInfo);\r\n        }\r\n    }\r\n\r\n    public registerRevisionIncludes(revisionIncludes: any[]) {\r\n        if (this.noTracking) {\r\n            return;\r\n        }\r\n\r\n        if (!revisionIncludes) {\r\n            return;\r\n        }\r\n\r\n        if (!this.includeRevisionsByChangeVector) {\r\n            this.includeRevisionsByChangeVector = CaseInsensitiveKeysMap.create();\r\n        }\r\n\r\n        if (!this.includeRevisionsIdByDateTimeBefore) {\r\n            this.includeRevisionsIdByDateTimeBefore = CaseInsensitiveKeysMap.create();\r\n        }\r\n\r\n        for (const obj of revisionIncludes) {\r\n            if (!obj) {\r\n                continue;\r\n            }\r\n\r\n            const json = obj;\r\n            const id = json.Id;\r\n            const changeVector = json.ChangeVector;\r\n            const beforeAsText = json.Before;\r\n            const dateTime = beforeAsText ? DateUtil.utc.parse(beforeAsText) : null;\r\n            const revision = json.Revision;\r\n\r\n            this.includeRevisionsByChangeVector.set(changeVector, DocumentInfo.getNewDocumentInfo(revision));\r\n\r\n            if (dateTime && !StringUtil.isNullOrWhitespace(id)) {\r\n                const map = new Map<number, DocumentInfo>();\r\n\r\n                this.includeRevisionsIdByDateTimeBefore.set(id, map);\r\n\r\n                const documentInfo = new DocumentInfo();\r\n                documentInfo.document = revision;\r\n                map.set(dateTime.getTime(), documentInfo);\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerMissingIncludes(results: object[], includes: object, includePaths: string[]): void {\r\n        if (this.noTracking) {\r\n            return;\r\n        }\r\n\r\n        if (!includePaths || !includePaths.length) {\r\n            return;\r\n        }\r\n\r\n        for (const result of results) {\r\n            for (const include of includePaths) {\r\n                if (include === CONSTANTS.Documents.Indexing.Fields.DOCUMENT_ID_FIELD_NAME) {\r\n                    continue;\r\n                }\r\n\r\n                IncludesUtil.include(result, include, id => {\r\n                    if (!id) {\r\n                        return;\r\n                    }\r\n\r\n                    if (this.isLoaded(id)) {\r\n                        return;\r\n                    }\r\n\r\n                    const document = includes[id];\r\n                    if (document) {\r\n                        const metadata = document.get(CONSTANTS.Documents.Metadata.KEY);\r\n\r\n                        if (tryGetConflict(metadata)) {\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    this.registerMissing(id);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerMissing(idOrIds: string | string[]): void {\r\n        if (this.noTracking) {\r\n            return;\r\n        }\r\n\r\n        if (TypeUtil.isArray(idOrIds)) {\r\n            for (const id of idOrIds) {\r\n                this._knownMissingIds.add(id);\r\n            }\r\n        } else {\r\n            this._knownMissingIds.add(idOrIds);\r\n        }\r\n    }\r\n\r\n    public unregisterMissing(id: string) {\r\n        this._knownMissingIds.delete(id);\r\n    }\r\n\r\n    public registerCounters(\r\n        resultCounters: object,\r\n        countersToInclude: { [key: string]: string[] }): void;\r\n    public registerCounters(\r\n        resultCounters: object,\r\n        ids: string[],\r\n        countersToInclude: string[],\r\n        gotAll: boolean): void;\r\n    public registerCounters(\r\n        resultCounters: object,\r\n        idsOrCountersToInclude: string[] | { [key: string]: string[] },\r\n        countersToInclude?: string[],\r\n        gotAll?: boolean) {\r\n            if (Array.isArray(idsOrCountersToInclude)) {\r\n                this._registerCountersWithIdsList(resultCounters, idsOrCountersToInclude, countersToInclude, gotAll);\r\n            } else {\r\n                this._registerCountersWithCountersToIncludeObj(resultCounters, idsOrCountersToInclude);\r\n            }\r\n        }\r\n\r\n    private _registerCountersWithIdsList(\r\n        resultCounters: object,\r\n        ids: string[],\r\n        countersToInclude: string[],\r\n        gotAll: boolean): void {\r\n        if (this.noTracking) {\r\n            return;\r\n        }\r\n\r\n        if (!resultCounters || Object.keys(resultCounters).length === 0) {\r\n            if (gotAll) {\r\n                for (const id of ids) {\r\n                    this._setGotAllCountersForDocument(id);\r\n                }\r\n                return;\r\n            }\r\n        } else {\r\n            this._registerCountersInternal(resultCounters, null, false, gotAll);\r\n        }\r\n\r\n        this._registerMissingCounters(ids, countersToInclude);\r\n    }\r\n\r\n    private _registerCountersWithCountersToIncludeObj(\r\n        resultCounters: object,\r\n        countersToInclude: { [key: string]: string[] }): void {\r\n\r\n        if (this.noTracking) {\r\n            return;\r\n        }\r\n\r\n        if (!resultCounters || Object.keys(resultCounters).length === 0) {\r\n            this._setGotAllInCacheIfNeeded(countersToInclude);\r\n        } else {\r\n            this._registerCountersInternal(resultCounters, countersToInclude, true, false);\r\n        }\r\n\r\n        this._registerMissingCounters(countersToInclude);\r\n    }\r\n     private _registerCountersInternal(\r\n         resultCounters: object,\r\n         countersToInclude: { [key: string]: string[] },\r\n         fromQueryResult: boolean,\r\n         gotAll: boolean): void {\r\n         for (const [field, value] of Object.entries(resultCounters)) {\r\n             if (!value) {\r\n                 continue;\r\n             }\r\n             let counters = [] as string[];\r\n\r\n             if (fromQueryResult) {\r\n                 counters = countersToInclude[field];\r\n                 gotAll = counters && counters.length === 0;\r\n             }\r\n\r\n             if (value.length === 0 && !gotAll) {\r\n                 const cache = this.countersByDocId.get(field);\r\n                 if (!cache) {\r\n                     continue;\r\n                 }\r\n\r\n                 for (const counter of counters) {\r\n                     cache.data.delete(counter);\r\n                 }\r\n\r\n                 this._countersByDocId.set(field, cache);\r\n                 continue;\r\n             }\r\n\r\n             this._registerCountersForDocument(field, gotAll, value, countersToInclude);\r\n         }\r\n    }\r\n\r\n    private _registerCountersForDocument(id: string, gotAll: boolean, counters: any[], countersToInclude: { [key:string]: string[] } ): void {\r\n        let cache = this.countersByDocId.get(id);\r\n        if (!cache) {\r\n            cache = { gotAll, data: CaseInsensitiveKeysMap.create<number>() };\r\n        }\r\n\r\n        const deletedCounters = cache.data.size === 0\r\n            ? new Set<string>()\r\n            : (countersToInclude[id].length === 0 ? new Set(cache.data.keys()) : new Set(countersToInclude[id]));\r\n\r\n        for (const counterJson of counters) {\r\n            if (!counterJson) {\r\n                continue;\r\n            }\r\n            const counterName = counterJson[\"counterName\"] as string;\r\n            const totalValue = counterJson[\"totalValue\"] as number;\r\n            if (counterName && totalValue) {\r\n                cache.data.set(counterName, totalValue);\r\n                deletedCounters.delete(counterName);\r\n            }\r\n        }\r\n\r\n        if (deletedCounters.size > 0) {\r\n            for (const name of deletedCounters) {\r\n                cache.data.delete(name);\r\n            }\r\n        }\r\n\r\n        cache.gotAll = gotAll;\r\n        this._countersByDocId.set(id, cache);\r\n    }\r\n\r\n    private _setGotAllInCacheIfNeeded(countersToInclude: { [key: string]: string[] }): void {\r\n        for (const [key, value] of Object.entries(countersToInclude)) {\r\n            if (value.length > 0) {\r\n                continue;\r\n            }\r\n\r\n            this._setGotAllCountersForDocument(key);\r\n        }\r\n    }\r\n\r\n    private _setGotAllCountersForDocument(id: string): void {\r\n        let cache = this.countersByDocId.get(id);\r\n        if (!cache) {\r\n            cache = { gotAll: false, data: CaseInsensitiveKeysMap.create<number>() };\r\n        }\r\n\r\n        cache.gotAll = true;\r\n        this._countersByDocId.set(id, cache);\r\n    }\r\n\r\n    private _registerMissingCounters(ids: string[], countersToInclude: string[]): void;\r\n    private _registerMissingCounters(countersToInclude: { [key: string]: string[] }): void;\r\n    private _registerMissingCounters(\r\n        idsOrCountersToInclude: string[] | { [key: string]: string[] }, countersToInclude?: string[]): void {\r\n        if (Array.isArray(idsOrCountersToInclude)) {\r\n            this._registerMissingCountersWithIdsList(idsOrCountersToInclude, countersToInclude);\r\n        } else {\r\n            this._registerMissingCountersWithCountersToIncludeObj(idsOrCountersToInclude);\r\n        }\r\n    }\r\n\r\n    public registerTimeSeries(resultTimeSeries: Record<string, Record<string, ServerResponse<TimeSeriesRangeResult>[]>>) {\r\n        if (this.noTracking || !resultTimeSeries) {\r\n            return;\r\n        }\r\n\r\n        for (const [id, perDocTs] of Object.entries(resultTimeSeries)) {\r\n            if (!perDocTs) {\r\n                continue;\r\n            }\r\n\r\n            let cache = this.timeSeriesByDocId.get(id);\r\n            if (!cache) {\r\n                cache = CaseInsensitiveKeysMap.create();\r\n                this.timeSeriesByDocId.set(id, cache);\r\n            }\r\n\r\n            if (!TypeUtil.isObject(perDocTs)) {\r\n                throwError(\"InvalidOperationException\", \"Unable to read time series range results on document: '\" + id + \"'.\");\r\n            }\r\n\r\n            for (const [name, perNameTs] of Object.entries(perDocTs)) {\r\n                if (!perNameTs) {\r\n                    continue;\r\n                }\r\n\r\n                if (!TypeUtil.isArray(perNameTs)) {\r\n                    throwError(\"InvalidOperationException\", \"Unable to read time series range results on document: '\" + id + \"', time series: '\" + name + \"'.\");\r\n                }\r\n\r\n                for (const range of perNameTs) {\r\n                    const newRange = InMemoryDocumentSessionOperations._parseTimeSeriesRangeResult(range, id, name);\r\n                    InMemoryDocumentSessionOperations._addToCache(cache, newRange, name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _addToCache(cache: Map<string, TimeSeriesRangeResult[]>, newRange: TimeSeriesRangeResult, name: string) {\r\n        const localRanges = cache.get(name);\r\n        if (!localRanges || !localRanges.length) {\r\n            // no local ranges in cache for this series\r\n             cache.set(name, [newRange]);\r\n             return;\r\n        }\r\n\r\n        if (DatesComparator.compare(leftDate(localRanges[0].from), rightDate(newRange.to)) > 0\r\n            || DatesComparator.compare(rightDate(localRanges.at(-1).to), leftDate(newRange.from)) < 0) {\r\n            // the entire range [from, to] is out of cache bounds\r\n\r\n            const index = DatesComparator.compare(leftDate(localRanges[0].from), rightDate(newRange.to)) > 0 ? 0 : localRanges.length;\r\n            localRanges.splice(index, 0, newRange);\r\n            return;\r\n        }\r\n\r\n        let toRangeIndex;\r\n        let fromRangeIndex = -1;\r\n        let rangeAlreadyInCache = false;\r\n\r\n        for (toRangeIndex = 0; toRangeIndex < localRanges.length; toRangeIndex++) {\r\n            if (DatesComparator.compare(leftDate(localRanges[toRangeIndex].from), leftDate(newRange.from)) <= 0) {\r\n                if (DatesComparator.compare(rightDate(localRanges[toRangeIndex].to), rightDate(newRange.to)) >= 0) {\r\n                    rangeAlreadyInCache = true;\r\n                    break;\r\n                }\r\n\r\n                fromRangeIndex = toRangeIndex;\r\n                continue;\r\n            }\r\n\r\n            if (DatesComparator.compare(rightDate(localRanges[toRangeIndex].to), rightDate(newRange.to)) >= 0) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (rangeAlreadyInCache) {\r\n            InMemoryDocumentSessionOperations._updateExistingRange(localRanges[toRangeIndex], newRange);\r\n            return;\r\n        }\r\n\r\n        const mergedValues = InMemoryDocumentSessionOperations._mergeRanges(fromRangeIndex, toRangeIndex, localRanges, newRange);\r\n        InMemoryDocumentSessionOperations.addToCache(name, newRange.from, newRange.to, fromRangeIndex, toRangeIndex, localRanges, cache, mergedValues);\r\n    }\r\n\r\n    public static addToCache(timeseries: string,\r\n                             from: Date,\r\n                             to: Date,\r\n                             fromRangeIndex: number,\r\n                             toRangeIndex: number,\r\n                             ranges: TimeSeriesRangeResult[],\r\n                             cache: Map<string, TimeSeriesRangeResult[]>,\r\n                             values: TimeSeriesEntry[]) {\r\n        if (fromRangeIndex === -1) {\r\n            // didn't find a 'fromRange' => all ranges in cache start after 'from'\r\n\r\n            if (toRangeIndex === ranges.length) {\r\n                // the requested range [from, to] contains all the ranges that are in cache\r\n\r\n                // e.g. if cache is : [[2,3], [4,5], [7, 10]]\r\n                // and the requested range is : [1, 15]\r\n                // after this action cache will be : [[1, 15]]\r\n\r\n                const timeSeriesRangeResult = new TimeSeriesRangeResult();\r\n                timeSeriesRangeResult.from = from;\r\n                timeSeriesRangeResult.to = to;\r\n                timeSeriesRangeResult.entries = values;\r\n\r\n                const result: TimeSeriesRangeResult[] = [];\r\n                result.push(timeSeriesRangeResult);\r\n                cache.set(timeseries, result);\r\n\r\n                return;\r\n            }\r\n\r\n            if (DatesComparator.compare(leftDate(ranges[toRangeIndex].from), rightDate(to)) > 0) {\r\n                // requested range ends before 'toRange' starts\r\n                // remove all ranges that come before 'toRange' from cache\r\n                // add the new range at the beginning of the list\r\n\r\n                // e.g. if cache is : [[2,3], [4,5], [7,10]]\r\n                // and the requested range is : [1,6]\r\n                // after this action cache will be : [[1,6], [7,10]]\r\n\r\n                ranges.splice(0, toRangeIndex);\r\n\r\n                const timeSeriesRangeResult = new TimeSeriesRangeResult();\r\n                timeSeriesRangeResult.from = from;\r\n                timeSeriesRangeResult.to = to;\r\n                timeSeriesRangeResult.entries = values;\r\n\r\n                ranges.splice(0, 0, timeSeriesRangeResult);\r\n\r\n                return;\r\n            }\r\n\r\n            // the requested range ends inside 'toRange'\r\n            // merge the result from server into 'toRange'\r\n            // remove all ranges that come before 'toRange' from cache\r\n\r\n            // e.g. if cache is : [[2,3], [4,5], [7,10]]\r\n            // and the requested range is : [1,8]\r\n            // after this action cache will be : [[1,10]]\r\n\r\n            ranges[toRangeIndex].from = from;\r\n            ranges[toRangeIndex].entries = values;\r\n\r\n            ranges.splice(0, toRangeIndex);\r\n\r\n            return;\r\n        }\r\n\r\n        // found a 'fromRange'\r\n\r\n        if (toRangeIndex === ranges.length) {\r\n            // didn't find a 'toRange' => all the ranges in cache end before 'to'\r\n\r\n            if (DatesComparator.compare(rightDate(ranges[fromRangeIndex].to), leftDate(from)) < 0) {\r\n                // requested range starts after 'fromRange' ends,\r\n                // so it needs to be placed right after it\r\n                // remove all the ranges that come after 'fromRange' from cache\r\n                // add the merged values as a new range at the end of the list\r\n\r\n                // e.g. if cache is : [[2,3], [5,6], [7,10]]\r\n                // and the requested range is : [4,12]\r\n                // then 'fromRange' is : [2,3]\r\n                // after this action cache will be : [[2,3], [4,12]]\r\n\r\n                ranges.splice(fromRangeIndex + 1, ranges.length - fromRangeIndex - 1);\r\n\r\n                const timeSeriesRangeResult = new TimeSeriesRangeResult();\r\n                timeSeriesRangeResult.from = from;\r\n                timeSeriesRangeResult.to = to;\r\n                timeSeriesRangeResult.entries = values;\r\n\r\n                ranges.push(timeSeriesRangeResult);\r\n\r\n                return;\r\n            }\r\n\r\n            // the requested range starts inside 'fromRange'\r\n            // merge result into 'fromRange'\r\n            // remove all the ranges from cache that come after 'fromRange'\r\n\r\n            // e.g. if cache is : [[2,3], [4,6], [7,10]]\r\n            // and the requested range is : [5,12]\r\n            // then 'fromRange' is [4,6]\r\n            // after this action cache will be : [[2,3], [4,12]]\r\n\r\n            ranges[fromRangeIndex].to = to;\r\n            ranges[fromRangeIndex].entries = values;\r\n            ranges.splice(fromRangeIndex + 1, ranges.length - fromRangeIndex - 1);\r\n\r\n            return;\r\n        }\r\n\r\n        // found both 'fromRange' and 'toRange'\r\n        // the requested range is inside cache bounds\r\n\r\n        if (DatesComparator.compare(rightDate(ranges[fromRangeIndex].to), leftDate(from)) < 0) {\r\n            // requested range starts after 'fromRange' ends\r\n\r\n            if (DatesComparator.compare(leftDate(ranges[toRangeIndex].from), rightDate(to)) > 0) {\r\n                // requested range ends before 'toRange' starts\r\n\r\n                // remove all ranges in between 'fromRange' and 'toRange'\r\n                // place new range in between 'fromRange' and 'toRange'\r\n\r\n                // e.g. if cache is : [[2,3], [5,6], [7,8], [10,12]]\r\n                // and the requested range is : [4,9]\r\n                // then 'fromRange' is [2,3] and 'toRange' is [10,12]\r\n                // after this action cache will be : [[2,3], [4,9], [10,12]]\r\n\r\n                ranges.splice(fromRangeIndex + 1, toRangeIndex - fromRangeIndex - 1);\r\n\r\n                const timeSeriesRangeResult = new TimeSeriesRangeResult();\r\n                timeSeriesRangeResult.from = from;\r\n                timeSeriesRangeResult.to = to;\r\n                timeSeriesRangeResult.entries = values;\r\n\r\n                ranges.splice(fromRangeIndex + 1, 0, timeSeriesRangeResult);\r\n\r\n                return;\r\n            }\r\n\r\n            // requested range ends inside 'toRange'\r\n            // merge the new range into 'toRange'\r\n            // remove all ranges in between 'fromRange' and 'toRange'\r\n\r\n            // e.g. if cache is : [[2,3], [5,6], [7,10]]\r\n            // and the requested range is : [4,9]\r\n            // then 'fromRange' is [2,3] and 'toRange' is [7,10]\r\n            // after this action cache will be : [[2,3], [4,10]]\r\n\r\n            ranges.splice(fromRangeIndex + 1, toRangeIndex - fromRangeIndex - 1);\r\n            ranges[toRangeIndex].from = from;\r\n            ranges[toRangeIndex].entries = values;\r\n\r\n            return;\r\n        }\r\n\r\n        // the requested range starts inside 'fromRange'\r\n\r\n        if (DatesComparator.compare(leftDate(ranges[toRangeIndex].from), rightDate(to)) > 0) {\r\n            // requested range ends before 'toRange' starts\r\n\r\n            // remove all ranges in between 'fromRange' and 'toRange'\r\n            // merge new range into 'fromRange'\r\n\r\n            // e.g. if cache is : [[2,4], [5,6], [8,10]]\r\n            // and the requested range is : [3,7]\r\n            // then 'fromRange' is [2,4] and 'toRange' is [8,10]\r\n            // after this action cache will be : [[2,7], [8,10]]\r\n\r\n            ranges[fromRangeIndex].to = to;\r\n            ranges[fromRangeIndex].entries = values;\r\n            ranges.splice(fromRangeIndex + 1, toRangeIndex - fromRangeIndex - 1);\r\n\r\n            return;\r\n        }\r\n\r\n        // the requested range starts inside 'fromRange'\r\n        // and ends inside 'toRange'\r\n\r\n        // merge all ranges in between 'fromRange' and 'toRange'\r\n        // into a single range [fromRange.From, toRange.To]\r\n\r\n        // e.g. if cache is : [[2,4], [5,6], [8,10]]\r\n        // and the requested range is : [3,9]\r\n        // then 'fromRange' is [2,4] and 'toRange' is [8,10]\r\n        // after this action cache will be : [[2,10]]\r\n\r\n        ranges[fromRangeIndex].to = ranges[toRangeIndex].to;\r\n        ranges[fromRangeIndex].entries = values;\r\n        ranges.splice(fromRangeIndex + 1, toRangeIndex - fromRangeIndex);\r\n    }\r\n\r\n    private static _parseTimeSeriesRangeResult(json: ServerResponse<TimeSeriesRangeResult>,\r\n                                               id: string,\r\n                                               databaseName: string): TimeSeriesRangeResult {\r\n        return reviveTimeSeriesRangeResult(json);\r\n    }\r\n\r\n    private static _mergeRanges(fromRangeIndex: number,\r\n                                toRangeIndex: number,\r\n                                localRanges: TimeSeriesRangeResult[],\r\n                                newRange: TimeSeriesRangeResult) {\r\n        const mergedValues: TimeSeriesEntry[] = [];\r\n\r\n        if (fromRangeIndex !== -1 && localRanges[fromRangeIndex].to.getTime() >= newRange.from.getTime()) {\r\n            for (const val of localRanges[fromRangeIndex].entries) {\r\n                if (val.timestamp.getTime() >= newRange.from.getTime()) {\r\n                    break;\r\n                }\r\n\r\n                mergedValues.push(val);\r\n            }\r\n        }\r\n\r\n        mergedValues.push(...newRange.entries);\r\n\r\n        if (toRangeIndex < localRanges.length\r\n            && DatesComparator.compare(leftDate(localRanges[toRangeIndex].from), rightDate(newRange.to)) <= 0) {\r\n            for (const val of localRanges[toRangeIndex].entries) {\r\n                if (val.timestamp.getTime() <= newRange.to.getTime()) {\r\n                    continue;\r\n                }\r\n\r\n                mergedValues.push(val);\r\n            }\r\n        }\r\n\r\n        return mergedValues;\r\n    }\r\n\r\n    private static _updateExistingRange(localRange: TimeSeriesRangeResult, newRange: TimeSeriesRangeResult) {\r\n        const newValues: TimeSeriesEntry[] = [];\r\n\r\n        let index: number;\r\n\r\n        for (index = 0; index < localRange.entries.length; index++) {\r\n            if (localRange.entries[index].timestamp.getTime() >= newRange.from.getTime()) {\r\n                break;\r\n            }\r\n\r\n            newValues.push(localRange.entries[index]);\r\n        }\r\n\r\n        newValues.push(...newRange.entries);\r\n\r\n        for (const item of localRange.entries) {\r\n            if (item.timestamp.getTime() <= newRange.to.getTime()) {\r\n                continue;\r\n            }\r\n\r\n            newValues.push(item);\r\n        }\r\n\r\n        localRange.entries = newValues;\r\n    }\r\n\r\n    private _registerMissingCountersWithCountersToIncludeObj(countersToInclude: { [key: string]: string[] }): void {\r\n        if (!countersToInclude) {\r\n            return;\r\n        }\r\n\r\n        for (const [key, value] of Object.entries(countersToInclude)) {\r\n            let cache = this.countersByDocId.get(key);\r\n            if (!cache) {\r\n                cache = { gotAll: false, data: CaseInsensitiveKeysMap.create<number>() };\r\n                this.countersByDocId.set(key, cache);\r\n            }\r\n\r\n            for (const counter of value) {\r\n                if (cache.data.has(counter)) {\r\n                    continue;\r\n                }\r\n\r\n                cache.data.set(counter, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _registerMissingCountersWithIdsList(ids: string[], countersToInclude: string[]): void {\r\n        if (!countersToInclude) {\r\n            return;\r\n        }\r\n\r\n        for (const counter of countersToInclude) {\r\n            for (const id of ids) {\r\n                let cache = this.countersByDocId.get(id);\r\n                if (!cache) {\r\n                    cache = { gotAll: false, data: CaseInsensitiveKeysMap.create<number>() };\r\n                    this.countersByDocId.set(id, cache);\r\n                }\r\n\r\n                if (cache.data.has(counter)) {\r\n                    continue;\r\n                }\r\n\r\n                cache.data.set(counter, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    public store<TEntity extends object>(\r\n        entity: TEntity): Promise<void>;\r\n    public store<TEntity extends object>(\r\n        entity: TEntity,\r\n        id?: string): Promise<void>;\r\n    public store<TEntity extends object>(\r\n        entity: TEntity,\r\n        id?: string,\r\n        documentType?: DocumentType<TEntity>): Promise<void>;\r\n    public store<TEntity extends object>(\r\n        entity: TEntity,\r\n        id?: string,\r\n        options?: StoreOptions<TEntity>): Promise<void>;\r\n    public store<TEntity extends object>(\r\n        entity: TEntity,\r\n        id?: string,\r\n        docTypeOrOptions?: DocumentType<TEntity> | StoreOptions<TEntity>): Promise<void> {\r\n\r\n        let documentType: DocumentType<TEntity> = null;\r\n        let options: StoreOptions<TEntity> = {};\r\n\r\n        // figure out third arg\r\n        if (TypeUtil.isDocumentType<TEntity>(docTypeOrOptions)) {\r\n            documentType = docTypeOrOptions as DocumentType<TEntity>;\r\n        } else if (TypeUtil.isObject(docTypeOrOptions)) {\r\n            options = docTypeOrOptions as StoreOptions<TEntity>;\r\n        }\r\n\r\n        const changeVector = options.changeVector;\r\n        documentType = documentType || options.documentType;\r\n        this.conventions.tryRegisterJsType(documentType);\r\n        if (entity.constructor !== Object) {\r\n            this.conventions.tryRegisterJsType(entity.constructor as ClassConstructor);\r\n        }\r\n\r\n        let forceConcurrencyCheck: ConcurrencyCheckMode;\r\n        if (!TypeUtil.isUndefined(changeVector)) {\r\n            forceConcurrencyCheck = changeVector === null ? \"Disabled\" : \"Forced\";\r\n        } else if (!TypeUtil.isNullOrUndefined(id)) {\r\n            forceConcurrencyCheck = \"Auto\";\r\n        } else {\r\n            const hasId = this._generateEntityIdOnTheClient.tryGetIdFromInstance(entity);\r\n            forceConcurrencyCheck = !hasId ? \"Forced\" : \"Auto\";\r\n        }\r\n\r\n        return this._storeInternal(entity, changeVector, id, forceConcurrencyCheck, documentType);\r\n    }\r\n\r\n    protected _generateDocumentKeysOnStore: boolean = true;\r\n\r\n    private async _storeInternal(\r\n        entity: object,\r\n        changeVector: string,\r\n        id: string,\r\n        forceConcurrencyCheck: ConcurrencyCheckMode,\r\n        documentType: DocumentType): Promise<void> {\r\n        if (this.noTracking) {\r\n            throwError(\r\n                \"InvalidOperationException\",\r\n                \"Cannot store entity. Entity tracking is disabled in this session.\");\r\n        }\r\n\r\n        if (!entity) {\r\n            throwError(\"InvalidArgumentException\", \"Entity cannot be null or undefined.\");\r\n        }\r\n\r\n        const value = this.documentsByEntity.get(entity);\r\n        if (value) {\r\n            if (id && !StringUtil.equalsIgnoreCase(value.id, id)) {\r\n                throwError(\"InvalidOperationException\", \"Cannot store the same entity (id: \" + value.id + \") with different id (\" + id + \")\");\r\n            }\r\n            value.changeVector = changeVector || value.changeVector;\r\n            value.concurrencyCheckMode = forceConcurrencyCheck;\r\n            return;\r\n        }\r\n\r\n        if (!id) {\r\n            if (this._generateDocumentKeysOnStore) {\r\n                id = await this._generateEntityIdOnTheClient.generateDocumentKeyForStorage(entity);\r\n            } else {\r\n                this._rememberEntityForDocumentIdGeneration(entity);\r\n            }\r\n        } else {\r\n            this._generateEntityIdOnTheClient.trySetIdentity(entity, id);\r\n        }\r\n\r\n        const cmdKey = IdTypeAndName.keyFor(id, \"ClientAnyCommand\", null);\r\n        if (this.deferredCommandsMap.has(cmdKey)) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Can't store document, there is a deferred command registered \"\r\n                + \"for this document in the session. Document id: \" + id);\r\n        }\r\n\r\n        if (this.deletedEntities.contains(entity)) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Can't store object, it was already deleted in this session. Document id: \" + id);\r\n        }\r\n\r\n        // we make the check here even if we just generated the ID\r\n        // users can override the ID generation behavior, and we need\r\n        // to detect if they generate duplicates.\r\n        this._assertNoNonUniqueInstance(entity, id);\r\n\r\n        const conventions = this._requestExecutor.conventions;\r\n\r\n        const typeDesc = conventions.getJsTypeByDocumentType(documentType);\r\n        const collectionName: string = documentType\r\n            ? conventions.getCollectionNameForType(typeDesc)\r\n            : conventions.getCollectionNameForEntity(entity);\r\n\r\n        const metadata = {};\r\n        if (collectionName) {\r\n            metadata[CONSTANTS.Documents.Metadata.COLLECTION] = collectionName;\r\n        }\r\n\r\n        const entityType = documentType\r\n                ? conventions.getJsTypeByDocumentType(documentType)\r\n                : conventions.getTypeDescriptorByEntity(entity);\r\n        const jsType = conventions.getJsTypeName(entityType);\r\n        if (jsType) {\r\n            metadata[CONSTANTS.Documents.Metadata.RAVEN_JS_TYPE] = jsType;\r\n        }\r\n\r\n        if (id) {\r\n            this._knownMissingIds.delete(id);\r\n        }\r\n\r\n        this._storeEntityInUnitOfWork(id, entity, changeVector, metadata, forceConcurrencyCheck, documentType);\r\n    }\r\n\r\n    protected _storeEntityInUnitOfWork(\r\n        id: string,\r\n        entity: object,\r\n        changeVector: string,\r\n        metadata: object,\r\n        forceConcurrencyCheck: ConcurrencyCheckMode,\r\n        documentType: DocumentType): void {\r\n\r\n        if (id) {\r\n            this._knownMissingIds.delete(id);\r\n        }\r\n\r\n        if (this.transactionMode === \"ClusterWide\") {\r\n            if (!changeVector) {\r\n                let changeVectorInner: string;\r\n                if (this.clusterSession.tryGetMissingAtomicGuardFor(id, r => changeVectorInner = r)) {\r\n                    changeVector = changeVectorInner;\r\n                }\r\n            }\r\n        }\r\n\r\n        const documentInfo = new DocumentInfo();\r\n        documentInfo.id = id;\r\n        documentInfo.metadata = metadata;\r\n        documentInfo.changeVector = changeVector;\r\n        documentInfo.concurrencyCheckMode = forceConcurrencyCheck;\r\n        documentInfo.entity = entity;\r\n        documentInfo.newDocument = true;\r\n        documentInfo.document = null;\r\n\r\n        this.documentsByEntity.put(entity, documentInfo);\r\n\r\n        if (id) {\r\n            this.documentsById.add(documentInfo);\r\n        }\r\n    }\r\n\r\n    protected _rememberEntityForDocumentIdGeneration(entity: object): void {\r\n        throwError(\"NotImplementedException\",\r\n            \"You cannot set GenerateDocumentIdsOnStore to false\"\r\n            + \" without implementing RememberEntityForDocumentIdGeneration\");\r\n    }\r\n\r\n    public prepareForSaveChanges(): SaveChangesData {\r\n        const result = this._newSaveChangesData();\r\n\r\n        const deferredCommandsCount = this._deferredCommands.length;\r\n\r\n        this._prepareForEntitiesDeletion(result, null);\r\n        this._prepareForEntitiesPuts(result);\r\n\r\n        this._prepareForCreatingRevisionsFromIds(result);\r\n        this._prepareCompareExchangeEntities(result);\r\n\r\n        if (this._deferredCommands.length > deferredCommandsCount) {\r\n            // this allow OnBeforeStore to call Defer during the call to include\r\n            // additional values during the same SaveChanges call\r\n\r\n            for (let i = deferredCommandsCount; i < this._deferredCommands.length; i++) {\r\n                result.deferredCommands.push(this._deferredCommands[i]);\r\n            }\r\n\r\n            for (const item of this.deferredCommandsMap.entries()) {\r\n                result.deferredCommandsMap.set(item[0], item[1]);\r\n            }\r\n        }\r\n\r\n        for (const deferredCommand of result.deferredCommands) {\r\n            if (deferredCommand.onBeforeSaveChanges) {\r\n                deferredCommand.onBeforeSaveChanges(this);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public validateClusterTransaction(result: SaveChangesData): void {\r\n        if (this._transactionMode !== \"ClusterWide\") {\r\n            return;\r\n        }\r\n\r\n        if (this.useOptimisticConcurrency) {\r\n            throwError(\r\n                \"InvalidOperationException\",\r\n                \"useOptimisticConcurrency is not supported with TransactionMode set to \"\r\n                    + \"ClusterWide\" as TransactionMode);\r\n        }\r\n\r\n        for (const commandData of result.sessionCommands) {\r\n            switch (commandData.type) {\r\n                case \"PUT\":\r\n                case \"DELETE\": {\r\n                    if (commandData.changeVector) {\r\n                        throwError(\r\n                            \"InvalidOperationException\",\r\n                            \"Optimistic concurrency for \"\r\n                            + commandData.id + \" is not supported when using a cluster transaction.\");\r\n                    }\r\n                    break;\r\n                }\r\n                case \"CompareExchangeDELETE\":\r\n                case \"CompareExchangePUT\": {\r\n                    break;\r\n                }\r\n                default: {\r\n                    throwError(\r\n                        \"InvalidOperationException\",\r\n                        \"The command '\" + commandData.type + \"' is not supported in a cluster session.\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _updateSessionAfterSaveChanges(result: BatchCommandResult): void {\r\n        const returnedTransactionIndex = result.transactionIndex;\r\n        this._documentStore.setLastTransactionIndex(this.databaseName, returnedTransactionIndex);\r\n        this.sessionInfo.lastClusterTransactionIndex = returnedTransactionIndex;\r\n    }\r\n\r\n    public onBeforeConversionToDocumentInvoke(id: string, entity: object) {\r\n        const args = new BeforeConversionToDocumentEventArgs(this, id, entity);\r\n        this.emit(\"beforeConversionToDocument\", args);\r\n    }\r\n\r\n    public onAfterConversionToDocumentInvoke(id: string, entity: object, document: Reference<object>) {\r\n        if (this.listenerCount(\"afterConversionToDocument\")) {\r\n            const eventArgs = new AfterConversionToDocumentEventArgs(this, id, entity, document);\r\n            this.emit(\"afterConversionToDocument\", eventArgs);\r\n\r\n            if (eventArgs.document.value && eventArgs.document.value !== document.value) {\r\n                document.value = eventArgs.document.value; //TODO: test if doc ref changes\r\n            }\r\n        }\r\n    }\r\n\r\n    public onBeforeConversionToEntityInvoke(id: string, type: DocumentType, document: Reference<object>) {\r\n        if (this.listenerCount(\"beforeConversionToEntity\")) {\r\n            const eventArgs = new BeforeConversionToEntityEventArgs(this, id, type, document.value);\r\n            this.emit(\"beforeConversionToEntity\", eventArgs);\r\n\r\n            if (eventArgs.document && eventArgs.document !== document) {\r\n                document.value = eventArgs.document;\r\n            }\r\n        }\r\n    }\r\n\r\n    public onAfterConversionToEntityInvoke(id: string, document: object, entity: object) {\r\n        const eventArgs = new AfterConversionToEntityEventArgs(this, id, document, entity);\r\n        this.emit(\"afterConversionToEntity\", eventArgs);\r\n    }\r\n\r\n    private _prepareCompareExchangeEntities(result: SaveChangesData): void {\r\n        if (!this._hasClusterSession()) {\r\n            return;\r\n        }\r\n\r\n        const clusterTransactionOperations = this.clusterSession;\r\n        if (!clusterTransactionOperations.numberOfTrackedCompareExchangeValues) {\r\n            return;\r\n        }\r\n\r\n        if (this._transactionMode !== \"ClusterWide\") {\r\n            throwError(\r\n                \"InvalidOperationException\",\r\n                \"Performing cluster transaction operation require the TransactionMode to be set to ClusterWide\");\r\n        }\r\n\r\n        this.clusterSession.prepareCompareExchangeEntities(result);\r\n    }\r\n\r\n    protected abstract _hasClusterSession(): boolean;\r\n\r\n    protected abstract _clearClusterSession(): void;\r\n\r\n    public abstract clusterSession: ClusterTransactionOperationsBase;\r\n\r\n    private _newSaveChangesData(): SaveChangesData {\r\n        return new SaveChangesData({\r\n            deferredCommands: [...this._deferredCommands],\r\n            deferredCommandsMap: new Map(this.deferredCommandsMap),\r\n            options: this._saveChangesOptions,\r\n            session: this\r\n        });\r\n    }\r\n\r\n    private _prepareForCreatingRevisionsFromIds(result: SaveChangesData) {\r\n        // Note: here there is no point checking 'Before' or 'After' because if there were changes then forced revision is done from the PUT command....\r\n\r\n        for (const idEntry of this.idsForCreatingForcedRevisions.keys()) {\r\n            result.sessionCommands.push(new ForceRevisionCommandData(idEntry));\r\n        }\r\n\r\n        this.idsForCreatingForcedRevisions.clear();\r\n    }\r\n\r\n    private _prepareForEntitiesDeletion(result: SaveChangesData, changes: { [id: string]: DocumentsChanges[] }): void {\r\n        const deletes = this.deletedEntities.prepareEntitiesDeletes();\r\n        try {\r\n            for (const deletedEntity of this.deletedEntities) {\r\n                let documentInfo = this.documentsByEntity.get(deletedEntity.entity);\r\n                if (!documentInfo) {\r\n                    continue;\r\n                }\r\n\r\n                if (changes) {\r\n                    const docChanges = [];\r\n                    const change = new DocumentsChanges();\r\n                    change.fieldNewValue = \"\";\r\n                    change.fieldOldValue = \"\";\r\n                    change.change = \"DocumentDeleted\";\r\n\r\n                    docChanges.push(change);\r\n                    changes[documentInfo.id] = docChanges;\r\n                } else {\r\n                    const command: ICommandData =\r\n                        result.deferredCommandsMap.get(IdTypeAndName.keyFor(documentInfo.id, \"ClientAnyCommand\", null));\r\n                    if (command) {\r\n                        InMemoryDocumentSessionOperations._throwInvalidDeletedDocumentWithDeferredCommand(command);\r\n                    }\r\n\r\n                    let changeVector = null;\r\n                    documentInfo = this.documentsById.getValue(documentInfo.id);\r\n\r\n                    if (documentInfo) {\r\n                        changeVector = documentInfo.changeVector;\r\n\r\n                        if (documentInfo.entity) {\r\n                            result.onSuccess.removeDocumentByEntity(documentInfo.entity);\r\n                            result.entities.push(documentInfo.entity);\r\n                        }\r\n\r\n                        result.onSuccess.removeDocumentById(documentInfo.id);\r\n                    }\r\n\r\n                    if (!this.useOptimisticConcurrency) {\r\n                        changeVector = null;\r\n                    }\r\n                    const beforeDeleteEventArgs =\r\n                        new SessionBeforeDeleteEventArgs(this, documentInfo.id, documentInfo.entity);\r\n                    this.emit(\"beforeDelete\", beforeDeleteEventArgs);\r\n                    result.sessionCommands.push(new DeleteCommandData(documentInfo.id, changeVector, documentInfo.changeVector));\r\n                }\r\n\r\n                if (!changes) {\r\n                    result.onSuccess.clearDeletedEntities();\r\n                }\r\n            }\r\n        } finally {\r\n            deletes.dispose();\r\n        }\r\n    }\r\n\r\n    private _prepareForEntitiesPuts(result: SaveChangesData): void {\r\n        const putsContext = this.documentsByEntity.prepareEntitiesPuts();\r\n        try {\r\n            const shouldIgnoreEntityChanges = this.conventions.shouldIgnoreEntityChanges;\r\n\r\n            for (const entry of this.documentsByEntity) {\r\n                const  { key: entityKey, value: entityValue } = entry;\r\n\r\n                if (entityValue.ignoreChanges) {\r\n                    continue;\r\n                }\r\n\r\n                if (shouldIgnoreEntityChanges) {\r\n                    if (shouldIgnoreEntityChanges(this, entry.value.entity, entry.value.id)) {\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                if (this.isDeleted(entityValue.id)) {\r\n                    continue;\r\n                }\r\n\r\n                const dirtyMetadata = InMemoryDocumentSessionOperations._updateMetadataModifications(entityValue);\r\n\r\n                let document = this.entityToJson.convertEntityToJson(entityKey, entityValue);\r\n                if (!this._entityChanged(document, entityValue, null) && !dirtyMetadata) {\r\n                    continue;\r\n                }\r\n\r\n                const command = result.deferredCommandsMap.get(\r\n                    IdTypeAndName.keyFor(entityValue.id, \"ClientModifyDocumentCommand\", null));\r\n                if (command) {\r\n                    InMemoryDocumentSessionOperations._throwInvalidModifiedDocumentWithDeferredCommand(command);\r\n                }\r\n\r\n                const beforeStoreEventArgs = new SessionBeforeStoreEventArgs(this, entityValue.id, entityKey);\r\n\r\n                if (this.emit(\"beforeStore\", beforeStoreEventArgs)) { //TODO: && entity.executeOnBeforeStore\r\n                    if (beforeStoreEventArgs.isMetadataAccessed()) {\r\n                        InMemoryDocumentSessionOperations._updateMetadataModifications(entityValue);\r\n                    }\r\n\r\n                    if (beforeStoreEventArgs.isMetadataAccessed() || this._entityChanged(document, entityValue, null)) {\r\n                        document = this.entityToJson.convertEntityToJson(entityKey, entityValue);\r\n                    }\r\n                }\r\n\r\n                result.entities.push(entityKey);\r\n\r\n                if (entityValue.id) {\r\n                    result.onSuccess.removeDocumentById(entityValue.id);\r\n                }\r\n                result.onSuccess.updateEntityDocumentInfo(entityValue, document);\r\n\r\n                let changeVector: string;\r\n                if (this.useOptimisticConcurrency) {\r\n                    if (entityValue.concurrencyCheckMode !== \"Disabled\") {\r\n                        // if the user didn't provide a change vector, we'll test for an empty one\r\n                        changeVector = entityValue.changeVector || \"\";\r\n                    } else {\r\n                        changeVector = null;\r\n                    }\r\n                } else if (entityValue.concurrencyCheckMode === \"Forced\") {\r\n                    changeVector = entityValue.changeVector;\r\n                } else {\r\n                    changeVector = null;\r\n                }\r\n\r\n                let forceRevisionCreationStrategy: ForceRevisionStrategy = \"None\";\r\n\r\n                if (entityValue.id) {\r\n                    // Check if user wants to Force a Revision\r\n                    const creationStrategy = this.idsForCreatingForcedRevisions.get(entityValue.id);\r\n                    if (creationStrategy) {\r\n                        this.idsForCreatingForcedRevisions.delete(entityValue.id);\r\n                        forceRevisionCreationStrategy = creationStrategy;\r\n                    }\r\n                }\r\n\r\n                result.sessionCommands.push(\r\n                    new PutCommandDataWithJson(entityValue.id,\r\n                        changeVector,\r\n                        entityValue.changeVector,\r\n                        document,\r\n                        forceRevisionCreationStrategy));\r\n            }\r\n        } finally {\r\n            putsContext.dispose();\r\n        }\r\n    }\r\n\r\n    protected _entityChanged(\r\n        newObj: object,\r\n        documentInfo: DocumentInfo,\r\n        changes: { [id: string]: DocumentsChanges[] }): boolean {\r\n        return JsonOperation.entityChanged(newObj, documentInfo, changes);\r\n    }\r\n\r\n    private static _throwInvalidModifiedDocumentWithDeferredCommand(resultCommand: ICommandData): void {\r\n        throwError(\"InvalidOperationException\", \"Cannot perform save because document \" + resultCommand.id\r\n            + \" has been modified by the session and is also taking part in deferred \"\r\n            + resultCommand.type + \" command\");\r\n    }\r\n\r\n    private static _throwInvalidDeletedDocumentWithDeferredCommand(resultCommand: ICommandData): void {\r\n        throwError(\"InvalidOperationException\", \"Cannot perform save because document \" + resultCommand.id\r\n            + \" has been deleted by the session and is also taking part in deferred \"\r\n            + resultCommand.type + \" command\");\r\n    }\r\n\r\n    private static _updateMetadataModifications(documentInfo: DocumentInfo) {\r\n        let dirty = false;\r\n\r\n        if (documentInfo.metadataInstance) {\r\n            if (documentInfo.metadataInstance.isDirty()) {\r\n                dirty = true;\r\n            }\r\n\r\n            for (const prop of Object.keys(documentInfo.metadataInstance)) {\r\n                const propValue = documentInfo.metadataInstance[prop];\r\n                if (propValue && (typeof propValue[\"isDirty\"] === \"function\"\r\n                        && (propValue as IMetadataDictionary).isDirty())) {\r\n                    dirty = true;\r\n                }\r\n\r\n                documentInfo.metadata[prop] = ObjectUtil.deepJsonClone(propValue);\r\n            }\r\n        }\r\n\r\n        return dirty;\r\n    }\r\n\r\n    public async delete(id: string): Promise<void>;\r\n    public async delete(id: string, expectedChangeVector: string): Promise<void>;\r\n    public async delete<TEntity extends IRavenObject>(entity: TEntity): Promise<void>;\r\n    public async delete<TEntity extends IRavenObject>(\r\n        idOrEntity: string | TEntity, expectedChangeVector: string = null): Promise<void> {\r\n        if (TypeUtil.isString(idOrEntity)) {\r\n            this._deleteById(idOrEntity as string, expectedChangeVector);\r\n            return;\r\n        }\r\n\r\n        this._deleteByEntity(idOrEntity as TEntity);\r\n    }\r\n\r\n    /**\r\n     * Marks the specified entity for deletion. The entity will be deleted when SaveChanges is called.\r\n     */\r\n    private _deleteByEntity<TEntity extends IRavenObject>(entity: TEntity) {\r\n        if (!entity) {\r\n            throwError(\"InvalidArgumentException\", \"Entity cannot be null.\");\r\n        }\r\n\r\n        const value = this.documentsByEntity.get(entity);\r\n        if (!value) {\r\n            throwError(\"InvalidOperationException\",\r\n                entity + \" is not associated with the session, cannot delete unknown entity instance\");\r\n        }\r\n\r\n        this.deletedEntities.add(entity);\r\n        this.includedDocumentsById.delete(value.id);\r\n\r\n        if (this._countersByDocId) {\r\n            this._countersByDocId.delete(value.id);\r\n        }\r\n\r\n        if (this._timeSeriesByDocId) {\r\n            this._timeSeriesByDocId.delete(value.id);\r\n        }\r\n\r\n        this._knownMissingIds.add(value.id);\r\n    }\r\n\r\n    /**\r\n     * Marks the specified entity for deletion. The entity will be deleted when IDocumentSession.SaveChanges is called.\r\n     * WARNING: This method will not call beforeDelete listener!\r\n     */\r\n    private _deleteById(id: string): void;\r\n    private _deleteById(id: string, expectedChangeVector: string): void;\r\n    private _deleteById(id: string, expectedChangeVector: string = null): void {\r\n        if (!id) {\r\n            throwError(\"InvalidArgumentException\", \"Id cannot be null.\");\r\n        }\r\n\r\n        let changeVector = null;\r\n        const documentInfo = this.documentsById.getValue(id);\r\n        if (documentInfo) {\r\n            const newObj = this.entityToJson.convertEntityToJson(documentInfo.entity, documentInfo);\r\n            if (documentInfo.entity && this._entityChanged(newObj, documentInfo, null)) {\r\n                throwError(\"InvalidOperationException\",\r\n                    \"Can't delete changed entity using identifier. Use delete(T entity) instead.\");\r\n            }\r\n\r\n            if (documentInfo.entity) {\r\n                this.documentsByEntity.remove(documentInfo.entity);\r\n            }\r\n\r\n            this.documentsById.remove(id);\r\n            changeVector = documentInfo.changeVector;\r\n        }\r\n\r\n        this._knownMissingIds.add(id);\r\n        changeVector = this.useOptimisticConcurrency ? changeVector : null;\r\n\r\n        if (this._countersByDocId) {\r\n            this._countersByDocId.delete(id);\r\n        }\r\n\r\n        this.defer(new DeleteCommandData(\r\n            id,\r\n            expectedChangeVector || changeVector,\r\n            expectedChangeVector || documentInfo?.changeVector\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * Defer commands to be executed on saveChanges()\r\n     */\r\n    public defer(...commands: ICommandData[]) {\r\n        this._deferredCommands.push(...commands);\r\n        for (const command of commands) {\r\n            this._deferInternal(command);\r\n        }\r\n    }\r\n\r\n    private _deferInternal(command: ICommandData): void {\r\n        if (command.type === \"BatchPATCH\") {\r\n            const batchPatchCommand = command as BatchPatchCommandData;\r\n            for (const kvp of batchPatchCommand.ids) {\r\n                this._addCommand(command, kvp.id, \"PATCH\", command.name);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this._addCommand(command, command.id, command.type, command.name);\r\n    }\r\n\r\n    private _addCommand(command: ICommandData, id: string, commandType: CommandType, commandName: string): void {\r\n        this.deferredCommandsMap.set(\r\n            IdTypeAndName.keyFor(id, commandType, commandName), command);\r\n        this.deferredCommandsMap.set(\r\n            IdTypeAndName.keyFor(id, \"ClientAnyCommand\", null), command);\r\n\r\n        if (command.type !== \"AttachmentPUT\"\r\n            && command.type !== \"AttachmentDELETE\"\r\n            && command.type !== \"AttachmentCOPY\"\r\n            && command.type !== \"AttachmentMOVE\"\r\n            && command.type !== \"Counters\"\r\n            && command.type !== \"TimeSeries\"\r\n            && command.type !== \"TimeSeriesWithIncrements\"\r\n            && command.type !== \"TimeSeriesCopy\") {\r\n            this.deferredCommandsMap.set(\r\n                IdTypeAndName.keyFor(id, \"ClientModifyDocumentCommand\", null), command);\r\n        }\r\n    }\r\n\r\n    protected _buildEntityDocInfoByIdHolder<T extends object>(entities: T[]): Map<string, [object, DocumentInfo]> {\r\n        const idsEntitiesPairs = new Map<string, [object, DocumentInfo]>();\r\n\r\n        for (const entity of entities) {\r\n            const docInfo = this.documentsByEntity.get(entity);\r\n            if (!docInfo) {\r\n                InMemoryDocumentSessionOperations._throwCouldNotRefreshDocument(\"Cannot refresh a transient instance.\");\r\n            }\r\n\r\n            idsEntitiesPairs.set(docInfo.id, [entity, docInfo]);\r\n        }\r\n\r\n        return idsEntitiesPairs;\r\n    }\r\n\r\n    protected _refreshEntities(command: GetDocumentsCommand, idsEntitiesPairs: Map<string, [object, DocumentInfo]>) {\r\n        const list: EntityInfoAndResult[] = [];\r\n\r\n        let hasDeleted = false;\r\n        const resultsCollection = command.result.results;\r\n\r\n        for (const result of resultsCollection) {\r\n            if (!result) {\r\n                hasDeleted = true;\r\n                break;\r\n            }\r\n\r\n            const id = result[CONSTANTS.Documents.Metadata.KEY][CONSTANTS.Documents.Metadata.ID];\r\n            const tuple = idsEntitiesPairs.get(id);\r\n\r\n            if (!tuple) {\r\n                InMemoryDocumentSessionOperations._throwCouldNotRefreshDocument(\"Could not refresh an entity, the server returned an invalid id: \" + id + \". Should not happen!\");\r\n            }\r\n            list.push({\r\n                entity: tuple[0],\r\n                info: tuple[1],\r\n                result\r\n            });\r\n        }\r\n\r\n        if (hasDeleted) {\r\n            InMemoryDocumentSessionOperations._throwCouldNotRefreshDocument(\"Some of the requested documents are no longer exists and were probably deleted!\");\r\n        }\r\n\r\n        for (const tuple of list) {\r\n            this._refreshInternal(tuple.entity, tuple.result, tuple.info);\r\n        }\r\n    }\r\n\r\n    protected static _throwCouldNotRefreshDocument(msg: string) {\r\n        throwError(\"InvalidArgumentException\", msg);\r\n    }\r\n\r\n\r\n    protected _refreshInternal<T extends object>(\r\n        entity: T, cmd: object, documentInfo: DocumentInfo): void {\r\n        const document = cmd;\r\n        if (!document) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Document '\" + documentInfo.id + \"' no longer exists and was probably deleted\");\r\n        }\r\n\r\n        const value = document[CONSTANTS.Documents.Metadata.KEY];\r\n        documentInfo.metadata = value;\r\n\r\n        if (documentInfo.metadata) {\r\n            const changeVector = value[CONSTANTS.Documents.Metadata.CHANGE_VECTOR];\r\n            documentInfo.changeVector = changeVector;\r\n        }\r\n\r\n        if (documentInfo.entity && !this.noTracking) {\r\n            this.entityToJson.removeFromMissing(documentInfo.entity);\r\n        }\r\n\r\n        const entityType = this.conventions.getTypeDescriptorByEntity(entity);\r\n        documentInfo.entity = this.entityToJson.convertToEntity(entityType, documentInfo.id, document, !this.noTracking);\r\n        documentInfo.document = document;\r\n\r\n        Object.assign(entity, documentInfo.entity);\r\n\r\n        const documentInfoById = this.documentsById.getValue(documentInfo.id);\r\n\r\n        if (documentInfoById) {\r\n            documentInfoById.entity = entity;\r\n        }\r\n\r\n        this.onAfterConversionToEntityInvoke(documentInfo.id, documentInfo.document, documentInfo.entity);\r\n    }\r\n\r\n    /**\r\n     * Returns all changes for the specified entity. Including name of the field/property that changed, its old and new value and change type.\r\n     * @param entity Entity\r\n     */\r\n    public whatChangedFor(entity: object): DocumentsChanges[] {\r\n        const documentInfo = this.documentsByEntity.get(entity);\r\n        if (!documentInfo) {\r\n            return [];\r\n        }\r\n\r\n        if (this.deletedEntities.contains(entity)) {\r\n            const change = new DocumentsChanges();\r\n            change.fieldNewValue = \"\";\r\n            change.fieldOldValue = \"\";\r\n            change.change = \"DocumentDeleted\";\r\n\r\n            return [change];\r\n        }\r\n\r\n        InMemoryDocumentSessionOperations._updateMetadataModifications(documentInfo);\r\n        const document = this.entityToJson.convertEntityToJson(documentInfo.entity, documentInfo);\r\n\r\n        const changes: { [id: string]: DocumentsChanges[] } = {};\r\n        if (!this._entityChanged(document, documentInfo, changes)) {\r\n            return [];\r\n        }\r\n\r\n        return changes[documentInfo.id];\r\n    }\r\n\r\n    public getTrackedEntities(): Map<string, EntityInfo> {\r\n        const tracked = this.documentsById.getTrackedEntities(this);\r\n\r\n        for (const id of this._knownMissingIds) {\r\n            if (tracked.has(id)) {\r\n                continue;\r\n            }\r\n\r\n            const entityInfo = new EntityInfo();\r\n            entityInfo.id = id;\r\n            entityInfo.isDeleted = true;\r\n\r\n            tracked.set(id, entityInfo);\r\n        }\r\n\r\n        return tracked;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating whether any of the entities tracked by the session has changes.\r\n     */\r\n    public hasChanges(): boolean {\r\n        for (const entity of this.documentsByEntity) {\r\n            const document = this.entityToJson.convertEntityToJson(entity.key, entity.value);\r\n            if (this._entityChanged(document, entity.value, null)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return !!this.deletedEntities.size || this.deferredCommands.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Evicts the specified entity from the session.\r\n     * Remove the entity from the delete queue and stops tracking changes for this entity.\r\n     */\r\n    public evict<T extends object>(entity: T): void {\r\n        const documentInfo = this.documentsByEntity.get(entity);\r\n        if (documentInfo) {\r\n            this.documentsByEntity.evict(entity);\r\n            this.documentsById.remove(documentInfo.id);\r\n            if (this._countersByDocId) {\r\n                this._countersByDocId.delete(documentInfo.id);\r\n            }\r\n            if (this._timeSeriesByDocId) {\r\n                this._timeSeriesByDocId.delete(documentInfo.id);\r\n            }\r\n        }\r\n\r\n        this.deletedEntities.evict(entity);\r\n        this.entityToJson.removeFromMissing(entity);\r\n    }\r\n\r\n    /**\r\n     * Clears this instance.\r\n     * Remove all entities from the delete queue and stops tracking changes for all entities.\r\n     */\r\n    public clear(): void {\r\n        this.documentsByEntity.clear();\r\n        this.deletedEntities.clear();\r\n        this.documentsById.clear();\r\n        this._knownMissingIds.clear();\r\n        if (this._countersByDocId) {\r\n            this._countersByDocId.clear();\r\n        }\r\n\r\n        this.deferredCommands.length = 0;\r\n        this.deferredCommandsMap.clear();\r\n        this._clearClusterSession();\r\n\r\n        this._pendingLazyOperations.length = 0;\r\n        this.entityToJson.clear();\r\n    }\r\n\r\n    /**\r\n     * Determines whether the specified entity has changed.\r\n     */\r\n    public hasChanged(entity: object): boolean {\r\n        const documentInfo = this.documentsByEntity.get(entity);\r\n\r\n        if (!documentInfo) {\r\n            return false;\r\n        }\r\n\r\n        const document = this.entityToJson.convertEntityToJson(entity, documentInfo);\r\n        return this._entityChanged(document, documentInfo, null);\r\n    }\r\n\r\n    /**\r\n     * SaveChanges will wait for the changes made to be replicates to `replicas` nodes\r\n     */\r\n    public waitForReplicationAfterSaveChanges();\r\n    /**\r\n     * SaveChanges will wait for the changes made to be replicates to `replicas` nodes\r\n     */\r\n    public waitForReplicationAfterSaveChanges(opts: ReplicationBatchOptions);\r\n    /**\r\n     * SaveChanges will wait for the changes made to be replicates to `replicas` nodes\r\n     */\r\n    public waitForReplicationAfterSaveChanges(opts?: ReplicationBatchOptions) {\r\n        if (!this._saveChangesOptions) {\r\n            this._saveChangesOptions = {\r\n                indexOptions: null,\r\n                replicationOptions: null\r\n            };\r\n        }\r\n\r\n        opts = opts || {};\r\n\r\n        this._saveChangesOptions.replicationOptions = {\r\n            replicas: opts.replicas || 1,\r\n            throwOnTimeout: TypeUtil.isUndefined(opts.throwOnTimeout) ? true : opts.throwOnTimeout,\r\n            majority: TypeUtil.isNullOrUndefined(opts.majority) ? false : opts.majority,\r\n            timeout: opts.timeout || this.conventions.waitForReplicationAfterSaveChangesTimeout\r\n        } as ReplicationBatchOptions;\r\n    }\r\n\r\n    /**\r\n     * SaveChanges will wait for the indexes to catch up with the saved changes\r\n     */\r\n    public waitForIndexesAfterSaveChanges();\r\n    /**\r\n     * SaveChanges will wait for the indexes to catch up with the saved changes\r\n     */\r\n    public waitForIndexesAfterSaveChanges(opts: IndexBatchOptions);\r\n    /**\r\n     * SaveChanges will wait for the indexes to catch up with the saved changes\r\n     */\r\n    public waitForIndexesAfterSaveChanges(opts?: IndexBatchOptions) {\r\n        if (!this._saveChangesOptions) {\r\n            this._saveChangesOptions = {\r\n                indexOptions: null,\r\n                replicationOptions: null\r\n            };\r\n        }\r\n\r\n        opts = opts || {};\r\n\r\n        this._saveChangesOptions.indexOptions = {\r\n            indexes: opts.indexes || [],\r\n            throwOnTimeout: TypeUtil.isNullOrUndefined(opts.throwOnTimeout) ? true : opts.throwOnTimeout,\r\n            timeout: opts.timeout || this.conventions.waitForIndexesAfterSaveChangesTimeout\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Mark the entity as one that should be ignore for change tracking purposes,\r\n     * it still takes part in the session, but is ignored for SaveChanges.\r\n     */\r\n    public ignoreChangesFor(entity: object): void {\r\n        this._getDocumentInfo(entity).ignoreChanges = true;\r\n    }\r\n\r\n    public whatChanged(): { [id: string]: DocumentsChanges[] } {\r\n        const changes: { [id: string]: DocumentsChanges[] } = {};\r\n\r\n        this._getAllEntitiesChanges(changes);\r\n        this._prepareForEntitiesDeletion(null, changes);\r\n\r\n        return changes;\r\n    }\r\n\r\n    private _getAllEntitiesChanges(changes: { [id: string]: DocumentsChanges[] }): void {\r\n        for (const pair of this.documentsById.entries()) {\r\n            InMemoryDocumentSessionOperations._updateMetadataModifications(pair[1]);\r\n            const newObj = this.entityToJson.convertEntityToJson(pair[1].entity, pair[1]);\r\n            this._entityChanged(newObj, pair[1], changes);\r\n        }\r\n    }\r\n\r\n    public dispose(isDisposing?: boolean): void {\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n\r\n        this.emit(\"sessionDisposing\", { session: this });\r\n\r\n        this._disposed = true;\r\n    }\r\n\r\n    public get transactionMode() {\r\n        return this._transactionMode;\r\n    }\r\n\r\n    public set transactionMode(value) {\r\n        this._transactionMode = value;\r\n    }\r\n\r\n    public static validateTimeSeriesName(name: string) {\r\n        if (StringUtil.isNullOrEmpty(name)) {\r\n            throwError(\"InvalidArgumentException\", \"Time Series name must contain at least one character\");\r\n        }\r\n\r\n        if (StringUtil.startsWithIgnoreCase(name, HEADERS.INCREMENTAL_TIME_SERIES_PREFIX) && !name.includes(\"@\")) {\r\n            throwError(\"InvalidArgumentException\", \"Time Series name cannot start with \" + HEADERS.INCREMENTAL_TIME_SERIES_PREFIX + \" prefix\");\r\n        }\r\n    }\r\n\r\n    public static validateIncrementalTimeSeriesName(name: string) {\r\n        if (StringUtil.isNullOrEmpty(name)) {\r\n            throwError(\"InvalidArgumentException\", \"Incremental Time Series name must contain at least one character\");\r\n        }\r\n\r\n        if (!StringUtil.startsWithIgnoreCase(name, HEADERS.INCREMENTAL_TIME_SERIES_PREFIX)) {\r\n            throwError(\"InvalidArgumentException\", \"Time Series name must start with \" + HEADERS.INCREMENTAL_TIME_SERIES_PREFIX + \" prefix\");\r\n        }\r\n\r\n        if (name.includes(\"@\")) {\r\n            throwError(\"InvalidArgumentException\", \"Time Series from type Rollup cannot be Incremental\");\r\n        }\r\n    }\r\n\r\n    public assertNoIncludesInNonTrackingSession() {\r\n        if (this.noTracking) {\r\n            throw new Error(\"This session does not track any entities, because of that registering \" +\r\n                \"includes is forbidden to avoid false expectations when later load operations are performed \" +\r\n                \"on those and no requests are being sent to the server. Please avoid any 'include' \" +\r\n                \"operations during non-tracking session actions like load or query.\")\r\n        }\r\n    }\r\n\r\n    private static _throwNoDatabase(): never {\r\n        return throwError(\r\n            \"InvalidOperationException\",\r\n            \"Cannot open a Session without specifying a name of a database \" +\r\n            \"to operate on. Database name can be passed as an argument when Session is\" +\r\n                \" being opened or default database can be defined using 'DocumentStore.setDatabase()' method\");\r\n    }\r\n}\r\n\r\nexport class DocumentsByEntityHolder implements Iterable<DocumentsByEntityEnumeratorResult> {\r\n    private readonly _documentsByEntity = new Map<object, DocumentInfo>();\r\n    private _onBeforeStoreDocumentsByEntity: Map<object, DocumentInfo>;\r\n    private _prepareEntitiesPuts: boolean;\r\n\r\n    public get size(): number {\r\n        return this._documentsByEntity.size + (this._onBeforeStoreDocumentsByEntity ? this._onBeforeStoreDocumentsByEntity.size : 0);\r\n    }\r\n\r\n    public remove(entity: object) {\r\n        this._documentsByEntity.delete(entity);\r\n\r\n        if (this._onBeforeStoreDocumentsByEntity) {\r\n            this._onBeforeStoreDocumentsByEntity.delete(entity);\r\n        }\r\n    }\r\n\r\n    public evict(entity: object) {\r\n        if (this._prepareEntitiesPuts) {\r\n            throwError(\"InvalidArgumentException\", \"Cannot Evict entity during OnBeforeStore\");\r\n        }\r\n\r\n        this._documentsByEntity.delete(entity);\r\n    }\r\n\r\n    public put(entity: object, documentInfo: DocumentInfo) {\r\n        if (!this._prepareEntitiesPuts) {\r\n            this._documentsByEntity.set(entity, documentInfo);\r\n            return;\r\n        }\r\n\r\n        this._createOnBeforeStoreDocumentsByEntityIfNeeded();\r\n        this._onBeforeStoreDocumentsByEntity.set(entity, documentInfo);\r\n    }\r\n\r\n    private _createOnBeforeStoreDocumentsByEntityIfNeeded() {\r\n        if (this._onBeforeStoreDocumentsByEntity) {\r\n            return;\r\n        }\r\n\r\n        this._onBeforeStoreDocumentsByEntity = new Map<object, DocumentInfo>();\r\n    }\r\n\r\n    public clear() {\r\n        this._documentsByEntity.clear();\r\n        if (this._onBeforeStoreDocumentsByEntity) {\r\n            this._onBeforeStoreDocumentsByEntity.clear();\r\n        }\r\n    }\r\n\r\n    public get(entity: object): DocumentInfo {\r\n        const documentInfo = this._documentsByEntity.get(entity);\r\n        if (documentInfo) {\r\n            return documentInfo;\r\n        }\r\n\r\n        if (this._onBeforeStoreDocumentsByEntity) {\r\n            return this._onBeforeStoreDocumentsByEntity.get(entity);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<DocumentsByEntityEnumeratorResult> {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const self = this;\r\n        const generator = function* () {\r\n            const firstIterator = self._documentsByEntity.entries();\r\n\r\n            for (const item of firstIterator) {\r\n                const mapped: DocumentsByEntityEnumeratorResult = {\r\n                    key: item[0],\r\n                    value: item[1],\r\n                    executeOnBeforeStore: true\r\n                }\r\n                yield mapped;\r\n            }\r\n\r\n            if (!self._onBeforeStoreDocumentsByEntity) {\r\n                return;\r\n            }\r\n\r\n            for (const item of self._onBeforeStoreDocumentsByEntity.entries()) {\r\n                const mapped: DocumentsByEntityEnumeratorResult = {\r\n                    key: item[0],\r\n                    value: item[1],\r\n                    executeOnBeforeStore: false\r\n                }\r\n                yield mapped;\r\n            }\r\n        };\r\n\r\n        return generator();\r\n    }\r\n\r\n    public prepareEntitiesPuts(): IDisposable {\r\n        this._prepareEntitiesPuts = true;\r\n\r\n        const turnOff = () => this._prepareEntitiesPuts = false;\r\n        return {\r\n            dispose: turnOff\r\n        }\r\n    }\r\n}\r\n\r\nexport interface DocumentsByEntityEnumeratorResult {\r\n    key: object;\r\n    value: DocumentInfo;\r\n    executeOnBeforeStore: boolean;\r\n}\r\n\r\nexport class DeletedEntitiesHolder implements Iterable<DeletedEntitiesEnumeratorResult> {\r\n    private readonly _deletedEntities = new Set<object>();\r\n\r\n    private _onBeforeDeletedEntities: Set<object>;\r\n\r\n    private _prepareEntitiesDeletes: boolean;\r\n\r\n    public isEmpty(): boolean {\r\n        return this.size === 0;\r\n    }\r\n\r\n    public get size() {\r\n        return this._deletedEntities.size + (this._onBeforeDeletedEntities ? this._onBeforeDeletedEntities.size : 0);\r\n    }\r\n\r\n    public add(entity: object) {\r\n        if (this._prepareEntitiesDeletes) {\r\n            if (!this._onBeforeDeletedEntities) {\r\n                this._onBeforeDeletedEntities = new Set<object>();\r\n            }\r\n\r\n            this._onBeforeDeletedEntities.add(entity);\r\n            return;\r\n        }\r\n\r\n        this._deletedEntities.add(entity);\r\n    }\r\n\r\n    public remove(entity: object) {\r\n        this._deletedEntities.delete(entity);\r\n        if (this._onBeforeDeletedEntities) {\r\n            this._onBeforeDeletedEntities.delete(entity);\r\n        }\r\n    }\r\n\r\n    public evict(entity: object) {\r\n        if (this._prepareEntitiesDeletes) {\r\n            throwError(\"InvalidOperationException\", \"Cannot Evict entity during OnBeforeDelete\");\r\n        }\r\n\r\n        this._deletedEntities.delete(entity);\r\n    }\r\n\r\n    public contains(entity: object): boolean {\r\n        if (this._deletedEntities.has(entity)) {\r\n            return true;\r\n        }\r\n\r\n        if (!this._onBeforeDeletedEntities) {\r\n            return false;\r\n        }\r\n\r\n        return this._onBeforeDeletedEntities.has(entity);\r\n    }\r\n\r\n    public clear() {\r\n        this._deletedEntities.clear();\r\n        if (this._onBeforeDeletedEntities) {\r\n            this._onBeforeDeletedEntities.clear();\r\n        }\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<DeletedEntitiesEnumeratorResult> {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const self = this;\r\n        const generator = function* () {\r\n            const deletedIterator = self._deletedEntities.values();\r\n\r\n            for (const item of deletedIterator) {\r\n                const mapped: DeletedEntitiesEnumeratorResult = {\r\n                    entity: item,\r\n                    executeOnBeforeDelete: true\r\n                }\r\n                yield mapped;\r\n            }\r\n\r\n            if (!self._onBeforeDeletedEntities) {\r\n                return;\r\n            }\r\n\r\n            for (const item of self._onBeforeDeletedEntities.values()) {\r\n                const mapped: DeletedEntitiesEnumeratorResult = {\r\n                    entity: item,\r\n                    executeOnBeforeDelete: false\r\n                }\r\n                yield mapped;\r\n            }\r\n        };\r\n\r\n        return generator();\r\n    }\r\n\r\n    public prepareEntitiesDeletes(): IDisposable {\r\n        this._prepareEntitiesDeletes = true;\r\n\r\n        return {\r\n            dispose(): void {\r\n                this._prepareEntitiesDeletes = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport interface DeletedEntitiesEnumeratorResult {\r\n    entity: object;\r\n    executeOnBeforeDelete: boolean;\r\n}\r\n\r\n\r\nexport interface EntityInfoAndResult {\r\n    entity: object;\r\n    info: DocumentInfo;\r\n    result: object;\r\n}\r\n"]}