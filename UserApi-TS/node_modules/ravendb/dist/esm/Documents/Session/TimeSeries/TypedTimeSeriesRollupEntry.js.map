{"version":3,"file":"TypedTimeSeriesRollupEntry.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/TimeSeries/TypedTimeSeriesRollupEntry.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AAGrE,MAAM,OAAO,0BAA0B;IAC3B,MAAM,CAA4B;IAEnC,SAAS,CAAO;IAChB,GAAG,CAAS;IACZ,MAAM,CAAU;IAEf,MAAM,CAAU;IAChB,KAAK,CAAU;IACf,IAAI,CAAU;IACd,IAAI,CAAU;IACd,IAAI,CAAU;IACd,MAAM,CAAU;IAEhB,QAAQ,CAAU;IAE1B,YAAmB,KAAgC,EAAE,SAAe;QAChE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAGO,eAAe;QACnB,OAAO,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC;IAED,IAAW,GAAG;QACV,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACvC,CAAC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,IAAW,GAAG;QACV,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACvC,CAAC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,IAAW,KAAK;QACZ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACzC,CAAC;QAED,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,IAAW,KAAK;QACZ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACzC,CAAC;QAED,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,IAAW,IAAI;QACX,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YACd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACxC,CAAC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,IAAW,GAAG;QACV,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACvC,CAAC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,IAAW,OAAO;QACd,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;QAED,MAAM,WAAW,GAAG,sBAAsB,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;QAEhF,MAAM,IAAI,GAAG,sBAAsB,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACtE,MAAM,MAAM,GAAG,sBAAsB,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1E,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;QAExC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;gBACb,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC;YAC7B,CAAC;iBAAM,CAAC;gBACJ,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACtC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,sBAAsB,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAExE,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAEM,oBAAoB;QACvB,MAAM,WAAW,GAAG,sBAAsB,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;QAEhF,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;QAC1C,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3C,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1C,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAE3C,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,aAAa,CAAC,MAAgB,EAAE,MAAe,EAAE,MAAc;QACnE,IAAI,MAAM,EAAE,CAAC;YACT,MAAM,MAAM,GAAG,sBAAsB,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACrE,IAAI,MAAM,EAAE,CAAC;gBACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACrC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACvC,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,SAAS,CAAyB,KAAsB,EAAE,KAAgC;QACpG,MAAM,MAAM,GAAG,IAAI,0BAA0B,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;QACtE,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QAEvB,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAE5B,MAAM,CAAC,MAAM,GAAG,sBAAsB,CAAC,SAAS,CAAC,KAAK,EAAE,0BAA0B,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9G,MAAM,CAAC,KAAK,GAAG,sBAAsB,CAAC,SAAS,CAAC,KAAK,EAAE,0BAA0B,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,IAAI,GAAG,sBAAsB,CAAC,SAAS,CAAC,KAAK,EAAE,0BAA0B,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5G,MAAM,CAAC,IAAI,GAAG,sBAAsB,CAAC,SAAS,CAAC,KAAK,EAAE,0BAA0B,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5G,MAAM,CAAC,IAAI,GAAG,sBAAsB,CAAC,SAAS,CAAC,KAAK,EAAE,0BAA0B,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5G,MAAM,CAAC,MAAM,GAAG,sBAAsB,CAAC,SAAS,CAAC,KAAK,EAAE,0BAA0B,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QAE9G,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,MAAM,CAAC,cAAc,CAAC,KAAe,EAAE,MAAc;QACzD,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QACtD,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;QAEjC,OAAO,GAAG,GAAG,MAAM,EAAE,CAAC;YAClB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;YACtC,GAAG,EAAE,CAAC;QACV,CAAC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ","sourcesContent":["import { ClassConstructor } from \"../../../Types/index.js\";\r\nimport { TimeSeriesValuesHelper } from \"./TimeSeriesValuesHelper.js\";\r\nimport { TimeSeriesEntry } from \"./TimeSeriesEntry.js\";\r\n\r\nexport class TypedTimeSeriesRollupEntry<TValues extends object> {\r\n    private _clazz: ClassConstructor<TValues>;\r\n\r\n    public timestamp: Date;\r\n    public tag: string;\r\n    public rollup: boolean;\r\n\r\n    private _first: TValues;\r\n    private _last: TValues;\r\n    private _max: TValues;\r\n    private _min: TValues;\r\n    private _sum: TValues;\r\n    private _count: TValues;\r\n\r\n    private _average: TValues;\r\n\r\n    public constructor(clazz: ClassConstructor<TValues>, timestamp: Date) {\r\n        this._clazz = clazz;\r\n        this.rollup = true;\r\n        this.timestamp = timestamp;\r\n    }\r\n\r\n\r\n    private _createInstance(): TValues {\r\n        return new this._clazz();\r\n    }\r\n\r\n    public get max(): TValues {\r\n        if (!this._max) {\r\n            this._max = this._createInstance();\r\n        }\r\n\r\n        return this._max;\r\n    }\r\n\r\n    public get min(): TValues {\r\n        if (!this._min) {\r\n            this._min = this._createInstance();\r\n        }\r\n\r\n        return this._min;\r\n    }\r\n\r\n    public get count(): TValues {\r\n        if (!this._count) {\r\n            this._count = this._createInstance();\r\n        }\r\n\r\n        return this._count;\r\n    }\r\n\r\n    public get first(): TValues {\r\n        if (!this._first) {\r\n            this._first = this._createInstance();\r\n        }\r\n\r\n        return this._first;\r\n    }\r\n\r\n    public get last(): TValues {\r\n        if (!this._last) {\r\n            this._last = this._createInstance();\r\n        }\r\n\r\n        return this._last;\r\n    }\r\n\r\n    public get sum(): TValues {\r\n        if (!this._sum) {\r\n            this._sum = this._createInstance();\r\n        }\r\n\r\n        return this._sum;\r\n    }\r\n\r\n    public get average(): TValues {\r\n        if (this._average) {\r\n            return this._average;\r\n        }\r\n\r\n        const valuesCount = TimeSeriesValuesHelper.getFieldsMapping(this._clazz).length;\r\n\r\n        const sums = TimeSeriesValuesHelper.getValues(this._clazz, this._sum);\r\n        const counts = TimeSeriesValuesHelper.getValues(this._clazz, this._count);\r\n        const averages = new Array(valuesCount);\r\n\r\n        for (let i = 0; i < valuesCount; i++) {\r\n            if (!counts[i]) {\r\n                averages[i] = Number.NaN;\r\n            } else {\r\n                averages[i] = sums[i] / counts[i];\r\n            }\r\n        }\r\n\r\n        this._average = TimeSeriesValuesHelper.setFields(this._clazz, averages);\r\n\r\n        return this._average;\r\n    }\r\n\r\n    public getValuesFromMembers(): number[] {\r\n        const valuesCount = TimeSeriesValuesHelper.getFieldsMapping(this._clazz).length;\r\n\r\n        const result = new Array(valuesCount * 6);\r\n        this._assignRollup(result, this._first, 0);\r\n        this._assignRollup(result, this._last, 1);\r\n        this._assignRollup(result, this._min, 2);\r\n        this._assignRollup(result, this._max, 3);\r\n        this._assignRollup(result, this._sum, 4);\r\n        this._assignRollup(result, this._count, 5);\r\n\r\n        return result;\r\n    }\r\n\r\n    private _assignRollup(target: number[], source: TValues, offset: number) {\r\n        if (source) {\r\n            const values = TimeSeriesValuesHelper.getValues(this._clazz, source);\r\n            if (values) {\r\n                for (let i = 0; i < values.length; i++) {\r\n                    target[i * 6 + offset] = values[i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static fromEntry<TValues extends object>(entry: TimeSeriesEntry, clazz: ClassConstructor<TValues>): TypedTimeSeriesRollupEntry<TValues> {\r\n        const result = new TypedTimeSeriesRollupEntry(clazz, entry.timestamp);\r\n        result.rollup = true;\r\n        result.tag = entry.tag;\r\n\r\n        const values = entry.values;\r\n\r\n        result._first = TimeSeriesValuesHelper.setFields(clazz, TypedTimeSeriesRollupEntry._extractValues(values, 0));\r\n        result._last = TimeSeriesValuesHelper.setFields(clazz, TypedTimeSeriesRollupEntry._extractValues(values, 1));\r\n        result._min = TimeSeriesValuesHelper.setFields(clazz, TypedTimeSeriesRollupEntry._extractValues(values, 2));\r\n        result._max = TimeSeriesValuesHelper.setFields(clazz, TypedTimeSeriesRollupEntry._extractValues(values, 3));\r\n        result._sum = TimeSeriesValuesHelper.setFields(clazz, TypedTimeSeriesRollupEntry._extractValues(values, 4));\r\n        result._count = TimeSeriesValuesHelper.setFields(clazz, TypedTimeSeriesRollupEntry._extractValues(values, 5));\r\n\r\n        return result;\r\n    }\r\n\r\n    private static _extractValues(input: number[], offset: number): number[] {\r\n        const length = Math.ceil((input.length - offset) / 6);\r\n        let idx = 0;\r\n        const result = new Array(length);\r\n\r\n        while (idx < length) {\r\n            result[idx] = input[offset + idx * 6];\r\n            idx++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"]}