{"version":3,"file":"IncludesUtil.js","sourceRoot":"","sources":["../../../../src/Documents/Session/IncludesUtil.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AAEzD,MAAM,OAAO,YAAY;IAEd,MAAM,CAAC,OAAO,CACjB,QAAgB,EAAE,OAAe,EAAE,MAA4B;QAC/D,IAAI,CAAC,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxB,OAAO;QACX,CAAC;QAED,OAAO;IACX,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IAEI,MAAM,CAAC,cAAc,CAAC,OAAe,EAAE,oBAA6C;QACvF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,EAAE,CAAC;gBACnF,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAA,IAAI,CAAC,CAAC,CAAC;gBAC5D,OAAO,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QAED,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC3B,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ","sourcesContent":["import { StringUtil } from \"../../Utility/StringUtil.js\";\r\n\r\nexport class IncludesUtil {\r\n\r\n    public static include(\r\n        document: object, include: string, loadId: (id: string) => void): void {\r\n        if (!include || !document) {\r\n            return;\r\n        }\r\n\r\n        // TBD:\r\n    }\r\n\r\n    /* TBD\r\n     public static void Include(BlittableJsonReaderObject document, string include, Action<string> loadId)\r\n        {\r\n            if (string.IsNullOrEmpty(include) || document == null)\r\n                return;\r\n            var path = GetIncludePath(include, out var isPrefix);\r\n\r\n            foreach (var token in document.SelectTokenWithRavenSyntaxReturningFlatStructure(path.Path))\r\n            {\r\n                ExecuteInternal(token.Item1, path.Addition, (value, addition) =>\r\n                {\r\n                    value = addition != null\r\n                        ? (isPrefix ? addition + value : string.Format(addition, value))\r\n                        : value;\r\n\r\n                    loadId(value);\r\n                });\r\n            }\r\n        }\r\n     */\r\n\r\n    public static requiresQuotes(include: string, escapedIncludeSetter: (value: string) => void): boolean {\r\n        for (let i = 0; i < include.length; i++) {\r\n            const ch = include.charAt(i);\r\n            if (!(StringUtil.isLetter(ch) || StringUtil.isDigit(ch)) && ch !== \"_\" && ch !== \".\") {\r\n                escapedIncludeSetter(include.replace(/'/g, String.raw`\\'`));\r\n                return true;\r\n            }\r\n        }\r\n\r\n        escapedIncludeSetter(null);\r\n        return false;\r\n    }\r\n}\r\n"]}