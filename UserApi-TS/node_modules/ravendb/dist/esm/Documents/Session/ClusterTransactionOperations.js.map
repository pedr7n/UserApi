{"version":3,"file":"ClusterTransactionOperations.js","sourceRoot":"","sources":["../../../../src/Documents/Session/ClusterTransactionOperations.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,gCAAgC,EAAE,MAAM,uCAAuC,CAAC;AAEzF,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AACrD,OAAO,EAAE,gCAAgC,EAAE,MAAM,uDAAuD,CAAC;AAGzG,MAAM,OAAO,4BACT,SAAQ,gCAAgC;IAGxC,YAAmB,OAAwB;QACvC,KAAK,CAAC,OAAO,CAAC,CAAC;IACnB,CAAC;IAED,IAAW,MAAM;QACb,OAAO,IAAI,gCAAgC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/D,CAAC;IAIM,KAAK,CAAC,uBAAuB,CAChC,GAAW,EACX,IAAoC;QAEpC,OAAO,IAAI,CAAC,gCAAgC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IAoBM,wBAAwB,CAC3B,gBAAmC,EACnC,IAAoC,EACpC,KAAc,EACd,QAAiB;QAGjB,IAAI,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,CAAC;YACrC,OAAO,IAAI,CAAC,iCAAiC,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAC1E,CAAC;aAAM,CAAC;YACJ,OAAO,IAAI,CAAC,iCAAiC,CAAC,gBAAgB,EAAE,IAAI,EAAE,KAAK,IAAI,CAAC,EAAE,QAAQ,IAAI,EAAE,CAAC,CAAC;QACtG,CAAC;IACL,CAAC;CACJ","sourcesContent":["import { CompareExchangeValue } from \"../Operations/CompareExchange/CompareExchangeValue.js\";\r\nimport { CompareExchangeResultClass } from \"../../Types/index.js\";\r\nimport { ClusterTransactionOperationsBase } from \"./ClusterTransactionOperationsBase.js\";\r\nimport { IClusterTransactionOperations } from \"./IClusterTransactionOperations.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { LazyClusterTransactionOperations } from \"./Operations/Lazy/LazyClusterTransactionOperations.js\";\r\nimport { DocumentSession } from \"./DocumentSession.js\";\r\n\r\nexport class ClusterTransactionOperations \r\n    extends ClusterTransactionOperationsBase \r\n    implements IClusterTransactionOperations {\r\n    \r\n    public constructor(session: DocumentSession) {\r\n        super(session);\r\n    }\r\n\r\n    public get lazily() {\r\n        return new LazyClusterTransactionOperations(this._session);\r\n    }\r\n\r\n    public getCompareExchangeValue<T>(key: string): Promise<CompareExchangeValue<T>>;\r\n    public getCompareExchangeValue<T>(key: string, type: CompareExchangeResultClass<T>): Promise<CompareExchangeValue<T>>;\r\n    public async getCompareExchangeValue<T>(\r\n        key: string, \r\n        type?: CompareExchangeResultClass<T>): Promise<CompareExchangeValue<T>> {\r\n\r\n        return this._getCompareExchangeValueInternal(key, type);\r\n    }\r\n\r\n    public getCompareExchangeValues<T>(\r\n        keys: string[]): Promise<{ [key: string]: CompareExchangeValue<T> }>;\r\n    public getCompareExchangeValues<T>(\r\n        keys: string[], type: CompareExchangeResultClass<T>): Promise<{ [key: string]: CompareExchangeValue<T> }>;\r\n    public getCompareExchangeValues<T>(\r\n        startsWith: string): Promise<{ [key: string]: CompareExchangeValue<T> }>;\r\n    public getCompareExchangeValues<T>(\r\n        startsWith: string,\r\n        type: CompareExchangeResultClass<T>): Promise<{ [key: string]: CompareExchangeValue<T> }>;\r\n    public getCompareExchangeValues<T>(\r\n        startsWith: string,\r\n        type: CompareExchangeResultClass<T>,\r\n        start: number): Promise<{ [key: string]: CompareExchangeValue<T> }>;\r\n    public getCompareExchangeValues<T>(\r\n        startsWith: string,\r\n        type: CompareExchangeResultClass<T>,\r\n        start: number,\r\n        pageSize: number): Promise<{ [key: string]: CompareExchangeValue<T> }>;\r\n    public getCompareExchangeValues<T>(\r\n        keysOrStartsWith: string[] | string,\r\n        type?: CompareExchangeResultClass<T>,\r\n        start?: number,\r\n        pageSize?: number)\r\n            : Promise<{ [key: string]: CompareExchangeValue<T> }> {\r\n\r\n        if (TypeUtil.isArray(keysOrStartsWith)) {\r\n            return this._getCompareExchangeValuesInternal(keysOrStartsWith, type);\r\n        } else {\r\n            return this._getCompareExchangeValuesInternal(keysOrStartsWith, type, start ?? 0, pageSize ?? 25);\r\n        }\r\n    }\r\n}\r\n"]}