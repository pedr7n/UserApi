{"version":3,"file":"SessionDocumentCounters.js","sourceRoot":"","sources":["../../../../src/Documents/Session/SessionDocumentCounters.ts"],"names":[],"mappings":"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","sourcesContent":["import { SessionCountersBase } from \"./SessionCountersBase.js\";\r\nimport { ISessionDocumentCounters } from \"./ISessionDocumentCounters.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\nimport { CaseInsensitiveKeysMap } from \"../../Primitives/CaseInsensitiveKeysMap.js\";\r\nimport { CONSTANTS } from \"../../Constants.js\";\r\nimport { GetCountersOperation } from \"../Operations/Counters/GetCountersOperation.js\";\r\nimport { ObjectUtil } from \"../../Utility/ObjectUtil.js\";\r\n\r\nexport class SessionDocumentCounters extends SessionCountersBase implements ISessionDocumentCounters {\r\n\r\n    public constructor(session: InMemoryDocumentSessionOperations, entity: object);\r\n    public constructor(session: InMemoryDocumentSessionOperations, documentId: string);\r\n    public constructor(session: InMemoryDocumentSessionOperations, entityOrId: string | object) {\r\n        super(session, entityOrId);\r\n    }\r\n\r\n    public async getAll(): Promise<{ [key: string]: number }> {\r\n        let cache = this._session.countersByDocId.get(this._docId);\r\n        if (!cache) {\r\n            cache = {\r\n                gotAll: false,\r\n                data: CaseInsensitiveKeysMap.create<number>()\r\n            };\r\n        }\r\n\r\n        let missingCounters = !cache.gotAll;\r\n        const document = this._session.documentsById.getValue(this._docId);\r\n        if (document) {\r\n            const metadataCounters = document.metadata[CONSTANTS.Documents.Metadata.COUNTERS] as string[];\r\n            if (!metadataCounters) {\r\n                missingCounters = false;\r\n            } else if (cache.data.size >= metadataCounters.length) {\r\n                missingCounters = false;\r\n                for (const c of metadataCounters) {\r\n                    if (cache.data.has(c)) {\r\n                        continue;\r\n                    }\r\n\r\n                    missingCounters = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (missingCounters) {\r\n            // we either don't have the document in session and GotAll = false,\r\n            // or we do and cache doesn't contain all metadata counters\r\n            this._session.incrementRequestCount();\r\n            const details = await this._session.operations.send(\r\n                new GetCountersOperation(this._docId), this._session.sessionInfo);\r\n            cache.data.clear();\r\n            for (const counterDetail of details.counters) {\r\n                cache.data.set(counterDetail.counterName, counterDetail.totalValue);\r\n            }\r\n        }\r\n        cache.gotAll = true;\r\n        if (!this._session.noTracking) {\r\n            this._session.countersByDocId.set(this._docId, cache);\r\n        }\r\n\r\n        return ObjectUtil.mapToLiteral(cache.data);\r\n    }\r\n\r\n    public async get(counter: string): Promise<number | null>;\r\n    public async get(counters: string[]): Promise<{ [key: string]: number }>;\r\n    public async get(counters: string | string[]): Promise<any> {\r\n        return Array.isArray(counters)\r\n            ? this._getCounters(counters)\r\n            : this._getCounter(counters);\r\n    }\r\n\r\n    private async _getCounter(counter: string): Promise<number> {\r\n        let value = null;\r\n        let cache = this._session.countersByDocId.get(this._docId);\r\n        if (cache) {\r\n            value = cache.data.get(counter) || null;\r\n            if (cache.data.has(counter)) {\r\n                return value;\r\n            }\r\n        } else {\r\n            cache = { gotAll: false, data: CaseInsensitiveKeysMap.create<number>() };\r\n        }\r\n\r\n        const document = this._session.documentsById.getValue(this._docId);\r\n        let metadataHasCounterName = false;\r\n        if (document) {\r\n            const metadataCounters = document.metadata[\"@counters\"];\r\n            if (metadataCounters) {\r\n                metadataHasCounterName = metadataCounters.some(x => x.toLocaleLowerCase() === counter.toLocaleLowerCase());\r\n            }\r\n        }\r\n\r\n        if ((!document && !cache.gotAll) || metadataHasCounterName) {\r\n            // we either don't have the document in session and GotAll = false,\r\n            // or we do and it's metadata contains the counter name\r\n            this._session.incrementRequestCount();\r\n            const details = await this._session.operations.send(\r\n                new GetCountersOperation(this._docId, counter), this._session.sessionInfo);\r\n            if (details.counters && details.counters.length) {\r\n                const counterDetail = details.counters[0];\r\n\r\n                value = counterDetail ? counterDetail.totalValue : null;\r\n            }\r\n        }\r\n\r\n        cache.data.set(counter, value);\r\n        if (!this._session.noTracking) {\r\n            this._session.countersByDocId.set(this._docId, cache);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    private async _getCounters(counters: string[]): Promise<{ [key: string]: number }> {\r\n        let cache = this._session.countersByDocId.get(this._docId);\r\n        if (!cache) {\r\n            cache = { gotAll: false, data: CaseInsensitiveKeysMap.create<number>() };\r\n        }\r\n\r\n        let metadataCounters: string[] = null;\r\n        const document = this._session.documentsById.getValue(this._docId);\r\n        if (document) {\r\n            metadataCounters = document.metadata[CONSTANTS.Documents.Metadata.COUNTERS] as string[];\r\n        }\r\n\r\n        const result = new Map<string, number>();\r\n        for (const counter of counters) {\r\n            const hasCounter = cache.data.has(counter);\r\n            const val = cache.data.get(counter);\r\n            let notInMetadata = true;\r\n\r\n            if (document && metadataCounters) {\r\n                notInMetadata = !metadataCounters.some(x => x.toLowerCase() === counter.toLowerCase());\r\n            }\r\n\r\n            if (hasCounter || cache.gotAll || (document && notInMetadata)) {\r\n                // we either have value in cache,\r\n                // or we have the metadata and the counter is not there,\r\n                // or GotAll\r\n                result.set(counter, val);\r\n                continue;\r\n            }\r\n\r\n            result.clear();\r\n            this._session.incrementRequestCount();\r\n\r\n            const details = await this._session.operations.send(\r\n                new GetCountersOperation(this._docId, counters), this._session.sessionInfo);\r\n            for (const counterDetail of details.counters) {\r\n                if (!counterDetail) {\r\n                    continue;\r\n                }\r\n                cache.data.set(counterDetail.counterName, counterDetail.totalValue);\r\n                result.set(counterDetail.counterName, counterDetail.totalValue);\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        if (!this._session.noTracking) {\r\n            this._session.countersByDocId.set(this._docId, cache);\r\n        }\r\n\r\n        return ObjectUtil.mapToLiteral(result);\r\n    }\r\n}\r\n"]}