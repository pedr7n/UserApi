{"version":3,"file":"JavaScriptArray.js","sourceRoot":"","sources":["../../../../src/Documents/Session/JavaScriptArray.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,eAAe;IACP,OAAO,CAAS;IACzB,WAAW,GAAW,CAAC,CAAC;IAEf,YAAY,CAAS;IAE9B,YAAY,GAAa,EAAE,CAAC;IAC5B,WAAW,GAAG,EAAE,CAAC;IAEzB,YAAY,MAAc,EAAE,WAAmB;QAC3C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAEM,IAAI,CAAC,GAAG,CAAM;QACjB,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvB,OAAO;QACX,CAAC;QAED,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACvB,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;YACjD,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;YACvC,OAAO,OAAO,GAAG,YAAY,CAAC;QAClC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEb,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,GAAG,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;QAC7E,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,QAAQ,CAAC,KAAa;QACzB,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAEjD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,GAAG,eAAe,GAAG,YAAY,GAAG,OAAO,CAAC,CAAC;QAC/F,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;QACvC,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,oBAAoB;QACxB,OAAO,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;IAC5D,CAAC;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,IAAI,UAAU;QACV,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;CACJ","sourcesContent":["export class JavaScriptArray<U> {\r\n    private readonly _suffix: number;\r\n    private _argCounter: number = 0;\r\n\r\n    private readonly _pathToArray: string;\r\n\r\n    private _scriptLines: string[] = [];\r\n    private _parameters = {};\r\n\r\n    constructor(suffix: number, pathToArray: string) {\r\n        this._suffix = suffix;\r\n        this._pathToArray = pathToArray;\r\n    }\r\n\r\n    public push(...u: U[]): this {\r\n        if (!u || u.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const args = u.map(value => {\r\n            const argumentName = this._getNextArgumentName();\r\n            this._parameters[argumentName] = value;\r\n            return \"args.\" + argumentName;\r\n        }).join(\",\");\r\n\r\n        this._scriptLines.push(\"this.\" + this._pathToArray + \".push(\" + args + \");\");\r\n        return this;\r\n    }\r\n\r\n    public removeAt(index: number): this {\r\n        const argumentName = this._getNextArgumentName();\r\n\r\n        this._scriptLines.push(\"this.\" + this._pathToArray + \".splice(args.\" + argumentName + \", 1);\");\r\n        this._parameters[argumentName] = index;\r\n        return this;\r\n    }\r\n\r\n    private _getNextArgumentName() {\r\n        return \"val_\" + this._argCounter++ + \"_\" + this._suffix;\r\n    }\r\n\r\n    get script() {\r\n        return this._scriptLines.join(\"\\n\");\r\n    }\r\n\r\n    get parameters() {\r\n        return this._parameters;\r\n    }\r\n}\r\n"]}