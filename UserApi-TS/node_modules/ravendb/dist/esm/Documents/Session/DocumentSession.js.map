{"version":3,"file":"DocumentSession.js","sourceRoot":"","sources":["../../../../src/Documents/Session/DocumentSession.ts"],"names":[],"mappings":"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","sourcesContent":["import { pipeline, Writable, Transform, TransformCallback } from \"node:stream\";\r\nimport { DocumentQuery } from \"./DocumentQuery.js\";\r\nimport { MultiLoaderWithInclude } from \"./Loaders/MultiLoaderWithInclude.js\";\r\nimport { BatchOperation } from \"./Operations/BatchOperation.js\";\r\nimport {\r\n    ConcurrencyCheckMode,\r\n    IDocumentSession,\r\n    IDocumentSessionImpl,\r\n    LoadOptions,\r\n    SessionLoadInternalParameters,\r\n    SessionLoadStartingWithOptions,\r\n} from \"./IDocumentSession.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { ClassConstructor, EntitiesCollectionObject, IRavenObject, ObjectTypeDescriptor } from \"../../Types/index.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { LoadOperation } from \"./Operations/LoadOperation.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\nimport { DocumentStore } from \"../DocumentStore.js\";\r\nimport { GetDocumentsCommand } from \"../Commands/GetDocumentsCommand.js\";\r\nimport { HeadDocumentCommand } from \"../Commands/HeadDocumentCommand.js\";\r\nimport { LoadStartingWithOperation } from \"./Operations/LoadStartingWithOperation.js\";\r\nimport { ILoaderWithInclude } from \"./Loaders/ILoaderWithInclude.js\";\r\nimport { IRawDocumentQuery } from \"./IRawDocumentQuery.js\";\r\nimport { RawDocumentQuery } from \"./RawDocumentQuery.js\";\r\nimport { AdvancedDocumentQueryOptions, DocumentQueryOptions } from \"./QueryOptions.js\";\r\nimport { IDocumentQuery } from \"./IDocumentQuery.js\";\r\nimport { IAttachmentsSessionOperations } from \"./IAttachmentsSessionOperations.js\";\r\nimport { DocumentSessionAttachments } from \"./DocumentSessionAttachments.js\";\r\nimport { IEagerSessionOperations } from \"./Operations/Lazy/IEagerSessionOperations.js\";\r\nimport { Lazy } from \"../Lazy.js\";\r\nimport { LazyLoadOperation } from \"./Operations/Lazy/LazyLoadOperation.js\";\r\nimport { ILazyOperation } from \"./Operations/Lazy/ILazyOperation.js\";\r\nimport { ResponseTimeInformation } from \"./ResponseTimeInformation.js\";\r\nimport { GetRequest } from \"../Commands/MultiGet/GetRequest.js\";\r\nimport { MultiGetOperation } from \"./Operations/MultiGetOperation.js\";\r\nimport { Stopwatch } from \"../../Utility/Stopwatch.js\";\r\nimport { GetResponse } from \"../Commands/MultiGet/GetResponse.js\";\r\nimport { CONSTANTS, HEADERS } from \"../../Constants.js\";\r\nimport { delay } from \"../../Utility/PromiseUtil.js\";\r\nimport { ILazySessionOperations } from \"./Operations/Lazy/ILazySessionOperations.js\";\r\nimport { LazySessionOperations } from \"./Operations/Lazy/LazySessionOperations.js\";\r\nimport { JavaScriptArray } from \"./JavaScriptArray.js\";\r\nimport { PatchRequest } from \"../Operations/PatchRequest.js\";\r\nimport { PatchCommandData } from \"../Commands/Batches/PatchCommandData.js\";\r\nimport { IdTypeAndName } from \"../IdTypeAndName.js\";\r\nimport { IRevisionsSessionOperations } from \"./IRevisionsSessionOperations.js\";\r\nimport { DocumentSessionRevisions } from \"./DocumentSessionRevisions.js\";\r\nimport { stringToReadable, pipelineAsync } from \"../../Utility/StreamUtil.js\";\r\nimport { StreamResult } from \"../Commands/StreamResult.js\";\r\nimport { DocumentResultStream } from \"./DocumentResultStream.js\";\r\nimport { StreamOperation } from \"./Operations/StreamOperation.js\";\r\nimport { QueryOperation } from \"./Operations/QueryOperation.js\";\r\nimport { IAdvancedSessionOperations, StreamQueryStatisticsCallback } from \"./IAdvancedSessionOperations.js\";\r\nimport { streamResultsIntoStream } from \"../../Mapping/Json/Streams/Pipelines.js\";\r\nimport { IClusterTransactionOperations } from \"./IClusterTransactionOperations.js\";\r\nimport { ClusterTransactionOperations } from \"./ClusterTransactionOperations.js\";\r\nimport { ClusterTransactionOperationsBase } from \"./ClusterTransactionOperationsBase.js\";\r\nimport { SessionOptions } from \"./SessionOptions.js\";\r\nimport { ISessionDocumentCounters } from \"./ISessionDocumentCounters.js\";\r\nimport { SessionDocumentCounters } from \"./SessionDocumentCounters.js\";\r\nimport { IncludeBuilder } from \"./Loaders/IncludeBuilder.js\";\r\nimport { SingleNodeBatchCommand } from \"../Commands/Batches/SingleNodeBatchCommand.js\";\r\nimport { AbstractDocumentQuery } from \"./AbstractDocumentQuery.js\";\r\nimport { ISessionDocumentTimeSeries } from \"./ISessionDocumentTimeSeries.js\";\r\nimport { ISessionDocumentTypedTimeSeries } from \"./ISessionDocumentTypedTimeSeries.js\";\r\nimport { ISessionDocumentRollupTypedTimeSeries } from \"./ISessionDocumentRollupTypedTimeSeries.js\";\r\nimport { JavaScriptMap } from \"./JavaScriptMap.js\";\r\nimport { SessionDocumentTimeSeries } from \"./SessionDocumentTimeSeries.js\";\r\nimport { TimeSeriesOperations } from \"../TimeSeries/TimeSeriesOperations.js\";\r\nimport { SessionDocumentTypedTimeSeries } from \"./SessionDocumentTypedTimeSeries.js\";\r\nimport { SessionDocumentRollupTypedTimeSeries } from \"./SessionDocumentRollupTypedTimeSeries.js\";\r\nimport { TIME_SERIES_ROLLUP_SEPARATOR } from \"../Operations/TimeSeries/RawTimeSeriesTypes.js\";\r\nimport { AbstractCommonApiForIndexes } from \"../Indexes/AbstractCommonApiForIndexes.js\";\r\nimport { DocumentInfo } from \"./DocumentInfo.js\";\r\nimport { MetadataDictionary } from \"../../Mapping/MetadataAsDictionary.js\";\r\nimport { ConditionalLoadResult } from \"./ConditionalLoadResult.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { ConditionalGetDocumentsCommand } from \"../Commands/ConditionalGetDocumentsCommand.js\";\r\nimport { StatusCodes } from \"../../Http/StatusCode.js\";\r\nimport { ISessionDocumentIncrementalTimeSeries } from \"./ISessionDocumentIncrementalTimeSeries.js\";\r\nimport { ISessionDocumentTypedIncrementalTimeSeries } from \"./ISessionDocumentTypedIncrementalTimeSeries.js\";\r\nimport { EOL } from \"../../Utility/OsUtil.js\";\r\n\r\nexport interface IStoredRawEntityInfo {\r\n    originalValue: object;\r\n    metadata: object;\r\n    originalMetadata: object;\r\n    id: string;\r\n    changeVector?: string | null;\r\n    expectedChangeVector?: string | null;\r\n    concurrencyCheckMode: ConcurrencyCheckMode;\r\n    documentType: DocumentType;\r\n}\r\n\r\nexport class DocumentSession extends InMemoryDocumentSessionOperations\r\n    implements IDocumentSession, IDocumentSessionImpl {\r\n\r\n    public constructor(documentStore: DocumentStore, id: string, options: SessionOptions) {\r\n        super(documentStore, id, options);\r\n\r\n    }\r\n\r\n    public get advanced(): IAdvancedSessionOperations {\r\n        return this;\r\n    }\r\n\r\n    public get session(): InMemoryDocumentSessionOperations {\r\n        return this;\r\n    }\r\n\r\n    protected _generateId(entity: object): Promise<string> {\r\n        return this.conventions.generateDocumentId(this.databaseName, entity);\r\n    }\r\n\r\n    public numberOfRequestsInSession: number;\r\n\r\n    public async load<TEntity extends object = IRavenObject>(\r\n        id: string): Promise<TEntity | null>;\r\n    public async load<TEntity extends object = IRavenObject>(\r\n        id: string,\r\n        options?: LoadOptions<TEntity>): Promise<TEntity | null>;\r\n    public async load<TEntity extends object = IRavenObject>(\r\n        id: string,\r\n        documentType?: DocumentType<TEntity>): Promise<TEntity | null>;\r\n    public async load<TEntity extends object = IRavenObject>(\r\n        ids: string[]): Promise<EntitiesCollectionObject<TEntity>>;\r\n    public async load<TEntity extends object = IRavenObject>(\r\n        ids: string[],\r\n        options?: LoadOptions<TEntity>):\r\n        Promise<EntitiesCollectionObject<TEntity>>;\r\n    public async load<TEntity extends object = IRavenObject>(\r\n        ids: string[],\r\n        documentType?: DocumentType<TEntity>):\r\n        Promise<EntitiesCollectionObject<TEntity>>;\r\n    public async load<TEntity extends object = IRavenObject>(\r\n        idOrIds: string | string[],\r\n        optionsOrDocumentType?:\r\n            DocumentType<TEntity> | LoadOptions<TEntity>)\r\n        : Promise<TEntity | null | EntitiesCollectionObject<TEntity>> {\r\n\r\n        const isLoadingSingle = !Array.isArray(idOrIds);\r\n        if (isLoadingSingle && StringUtil.isNullOrWhitespace(idOrIds as string)) {\r\n            return null;\r\n        }\r\n        const ids = isLoadingSingle ? [idOrIds as string] : idOrIds as string[];\r\n\r\n        let options: LoadOptions<TEntity>;\r\n        if (TypeUtil.isDocumentType(optionsOrDocumentType)) {\r\n            options = { documentType: optionsOrDocumentType as DocumentType<TEntity> };\r\n        } else if (TypeUtil.isObject(optionsOrDocumentType)) {\r\n            options = optionsOrDocumentType as LoadOptions<TEntity>;\r\n        }\r\n\r\n        const internalOpts = this._prepareLoadInternalOpts(options || {});\r\n        const docs = await this.loadInternal(ids, internalOpts);\r\n        return isLoadingSingle\r\n            ? docs[Object.keys(docs)[0]]\r\n            : docs;\r\n    }\r\n\r\n    private _prepareLoadInternalOpts<TEntity extends object>(options: LoadOptions<TEntity>) {\r\n        const internalOpts: SessionLoadInternalParameters<TEntity> = { documentType: options.documentType };\r\n        this.conventions.tryRegisterJsType(internalOpts.documentType);\r\n        if (\"includes\" in options) {\r\n            if (TypeUtil.isFunction(options.includes)) {\r\n                const builder = new IncludeBuilder(this.conventions);\r\n                options.includes(builder);\r\n\r\n                if (builder.countersToInclude) {\r\n                    internalOpts.counterIncludes = [...builder.countersToInclude];\r\n                }\r\n\r\n                if (builder.documentsToInclude) {\r\n                    internalOpts.includes = [...builder.documentsToInclude];\r\n                }\r\n\r\n                if (builder.timeSeriesToInclude) {\r\n                    internalOpts.timeSeriesIncludes = [ ...builder.timeSeriesToInclude ];\r\n                }\r\n\r\n                if (builder.compareExchangeValuesToInclude) {\r\n                    internalOpts.compareExchangeValueIncludes = [ ...builder.compareExchangeValuesToInclude ];\r\n                }\r\n\r\n                internalOpts.revisionIncludesByChangeVector = builder.revisionsToIncludeByChangeVector ? Array.from(builder.revisionsToIncludeByChangeVector) : null;\r\n                internalOpts.revisionsToIncludeByDateTime = builder.revisionsToIncludeByDateTime;\r\n\r\n                internalOpts.includeAllCounters = builder.isAllCounters;\r\n            } else {\r\n                internalOpts.includes = options.includes as string[];\r\n            }\r\n        }\r\n\r\n        return internalOpts;\r\n    }\r\n\r\n    private async _loadInternal(\r\n        ids: string[],\r\n        operation: LoadOperation,\r\n        writable: Writable): Promise<void>;\r\n    private async _loadInternal(\r\n        ids: string[],\r\n        operation: LoadOperation, writable?: Writable)\r\n        : Promise<void> {\r\n        if (!ids) {\r\n            throwError(\"InvalidArgumentException\", \"Ids cannot be null\");\r\n        }\r\n\r\n        operation.byIds(ids);\r\n\r\n        const command = operation.createRequest();\r\n        if (command) {\r\n            await this._requestExecutor.execute(command, this._sessionInfo);\r\n            if (!writable) {\r\n                operation.setResult(command.result);\r\n            } else {\r\n                const readable = stringToReadable(JSON.stringify(command.result));\r\n                await pipelineAsync(readable, writable);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async saveChanges(): Promise<void> {\r\n        const saveChangeOperation = new BatchOperation(this);\r\n        let command: SingleNodeBatchCommand;\r\n        try {\r\n            command = saveChangeOperation.createRequest();\r\n            if (!command) {\r\n                return;\r\n            }\r\n\r\n            if (this.noTracking) {\r\n                throwError(\r\n                    \"InvalidOperationException\",\r\n                    \"Cannot execute saveChanges when entity tracking is disabled in session.\");\r\n            }\r\n\r\n            await this._requestExecutor.execute(command, this._sessionInfo);\r\n            this._updateSessionAfterSaveChanges(command.result);\r\n            saveChangeOperation.setResult(command.result);\r\n        } finally {\r\n            if (command) {\r\n                command.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refreshes the specified entity from Raven server.\r\n     */\r\n    public async refresh<TEntity extends object>(entity: TEntity): Promise<void>;\r\n    public async refresh<TEntity extends object>(entities: TEntity[]): Promise<void>;\r\n    public async refresh<TEntity extends object>(entityOrEntities: TEntity[] | TEntity): Promise<void> {\r\n        if (TypeUtil.isArray(entityOrEntities)) {\r\n            return this._refreshEntitiesInternal(entityOrEntities);\r\n        } else {\r\n            return this._refreshEntityInternal(entityOrEntities);\r\n        }\r\n    }\r\n\r\n    private async _refreshEntityInternal<TEntity extends object>(entity: TEntity): Promise<void> {\r\n        const documentInfo = this.documentsByEntity.get(entity);\r\n        if (!documentInfo) {\r\n            DocumentSession._throwCouldNotRefreshDocument(\"Cannot refresh a transient instance\");\r\n        }\r\n\r\n        this.incrementRequestCount();\r\n\r\n        const command = new GetDocumentsCommand({\r\n            id: documentInfo.id,\r\n            conventions: this.conventions\r\n        });\r\n\r\n        await this._requestExecutor.execute(command, this._sessionInfo);\r\n        const commandResult = command.result.results[0];\r\n        this._refreshInternal(entity, commandResult, documentInfo);\r\n    }\r\n\r\n    private async _refreshEntitiesInternal<TEntity extends object>(entities: TEntity[]): Promise<void> {\r\n        const idsEntitiesPairs = this._buildEntityDocInfoByIdHolder(entities);\r\n\r\n        this.incrementRequestCount();\r\n\r\n        const command = new GetDocumentsCommand({\r\n            ids: Array.from(idsEntitiesPairs.keys()),\r\n            includes: null,\r\n            metadataOnly: false,\r\n            conventions: this.conventions\r\n        });\r\n        await this._requestExecutor.execute(command, this.sessionInfo);\r\n\r\n        this._refreshEntities(command, idsEntitiesPairs);\r\n    }\r\n\r\n\r\n    /**\r\n     * Check if document exists without loading it\r\n     */\r\n    public async exists(id: string): Promise<boolean> {\r\n        if (!id) {\r\n            throwError(\"InvalidArgumentException\", \"id cannot be null\");\r\n        }\r\n\r\n        if (this._knownMissingIds.has(id)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.documentsById.getValue(id)) {\r\n            return true;\r\n        }\r\n\r\n        const command = new HeadDocumentCommand(id, null);\r\n\r\n        await this._requestExecutor.execute(command, this._sessionInfo);\r\n        return !TypeUtil.isNullOrUndefined(command.result);\r\n    }\r\n\r\n    public async loadStartingWith<TEntity extends object>(\r\n        idPrefix: string): Promise<TEntity[]>;\r\n    public async loadStartingWith<TEntity extends object>(\r\n        idPrefix: string,\r\n        opts: SessionLoadStartingWithOptions<TEntity>): Promise<TEntity[]>;\r\n    public async loadStartingWith<TEntity extends object>(\r\n        idPrefix: string,\r\n        opts?: SessionLoadStartingWithOptions<TEntity>): Promise<TEntity[]> {\r\n\r\n        const loadStartingWithOperation = new LoadStartingWithOperation(this);\r\n\r\n        opts ||= {};\r\n\r\n        await this._loadStartingWithInternal(idPrefix, loadStartingWithOperation, opts);\r\n        return loadStartingWithOperation.getDocuments<TEntity>(opts.documentType);\r\n    }\r\n\r\n    public async loadStartingWithIntoStream<TEntity extends object>(\r\n        idPrefix: string,\r\n        writable: Writable): Promise<void>;\r\n    public async loadStartingWithIntoStream<TEntity extends object>(\r\n        idPrefix: string,\r\n        writable: Writable,\r\n        opts: SessionLoadStartingWithOptions<TEntity>): Promise<void>;\r\n    public async loadStartingWithIntoStream<TEntity extends object>(\r\n        idPrefix: string,\r\n        writable: Writable,\r\n        opts?: SessionLoadStartingWithOptions<TEntity>): Promise<void> {\r\n\r\n        if (!writable) {\r\n            throwError(\"InvalidArgumentException\", \"writable cannot be null.\");\r\n        }\r\n        if (!idPrefix) {\r\n            throwError(\"InvalidArgumentException\", \"idPrefix cannot be null.\");\r\n        }\r\n\r\n        const loadStartingWithOperation = new LoadStartingWithOperation(this);\r\n\r\n        opts ||= {};\r\n        await this._loadStartingWithInternal(idPrefix, loadStartingWithOperation, opts, writable);\r\n    }\r\n\r\n    public async loadIntoStream(\r\n        ids: string[], writable: Writable): Promise<void> {\r\n        return this._loadInternal(ids, new LoadOperation(this), writable);\r\n    }\r\n\r\n    private async _loadStartingWithInternal<TEntity extends object>(\r\n        idPrefix: string,\r\n        operation: LoadStartingWithOperation,\r\n        opts: SessionLoadStartingWithOptions<TEntity>,\r\n        writable?: Writable): Promise<GetDocumentsCommand> {\r\n        const { matches, start, pageSize, exclude, startAfter } =\r\n        opts || {} as SessionLoadStartingWithOptions<TEntity>;\r\n        operation.withStartWith(idPrefix, {\r\n            matches, start, pageSize, exclude, startAfter\r\n        });\r\n\r\n        const command = operation.createRequest();\r\n        if (command) {\r\n            await this._requestExecutor.execute(command, this._sessionInfo);\r\n            if (writable) {\r\n                return pipelineAsync(\r\n                    stringToReadable(JSON.stringify(command.result)),\r\n                    writable);\r\n            } else {\r\n                operation.setResult(command.result);\r\n            }\r\n        }\r\n\r\n        return command;\r\n    }\r\n\r\n    public async loadInternal<TResult extends object>(\r\n        ids: string[], opts: SessionLoadInternalParameters<TResult>):\r\n        Promise<EntitiesCollectionObject<TResult>> {\r\n        if (!ids) {\r\n            throwError(\"InvalidArgumentException\", \"Ids cannot be null\");\r\n        }\r\n\r\n        opts = opts || {};\r\n\r\n        const loadOperation = new LoadOperation(this);\r\n        loadOperation.byIds(ids);\r\n\r\n        loadOperation.withIncludes(opts.includes);\r\n\r\n        if (opts.includeAllCounters) {\r\n            loadOperation.withAllCounters();\r\n        } else {\r\n            loadOperation.withCounters(opts.counterIncludes);\r\n        }\r\n\r\n        loadOperation.withRevisions(opts.revisionIncludesByChangeVector);\r\n        loadOperation.withRevisions(opts.revisionsToIncludeByDateTime);\r\n        loadOperation.withTimeSeries(opts.timeSeriesIncludes);\r\n        loadOperation.withCompareExchange(opts.compareExchangeValueIncludes);\r\n\r\n        const command = loadOperation.createRequest();\r\n        if (command) {\r\n            await this._requestExecutor.execute(command, this._sessionInfo);\r\n            loadOperation.setResult(command.result);\r\n        }\r\n\r\n        const clazz = this.conventions.getJsTypeByDocumentType(opts.documentType);\r\n        return loadOperation.getDocuments(clazz);\r\n    }\r\n\r\n    /**\r\n     * Begin a load while including the specified path\r\n     */\r\n    public include(path: string): ILoaderWithInclude {\r\n        return new MultiLoaderWithInclude(this).include(path);\r\n    }\r\n\r\n    public increment<T extends object, UValue>(id: string, path: string, valueToAdd: UValue): void;\r\n    public increment<T extends object, UValue>(entity: T, path: string, valueToAdd: UValue): void;\r\n    public increment<T extends object, UValue>(entityOrId: T | string, path: string, valueToAdd: UValue): void {\r\n        let id: string;\r\n        if (TypeUtil.isString(entityOrId)) {\r\n            id = entityOrId;\r\n        } else {\r\n            const metadata = this.getMetadataFor(entityOrId as T);\r\n            id = metadata[\"@id\"];\r\n        }\r\n\r\n        const patchRequest = new PatchRequest();\r\n        const variable = `this.${path}`;\r\n        const value = `args.val_${this._valsCount}`;\r\n        patchRequest.script = `${variable} = ${variable} ? ${variable} + ${value} : ${value};`;\r\n        const valKey = \"val_\" + this._valsCount;\r\n        patchRequest.values = { [valKey]: valueToAdd };\r\n\r\n        this._valsCount++;\r\n\r\n        if (!this._tryMergePatches(id, patchRequest)) {\r\n            this.defer(new PatchCommandData(id, null, patchRequest, null));\r\n        }\r\n    }\r\n\r\n    public addOrIncrement<T extends object, UValue>(id: string, entity: T, pathToObject: string, valToAdd: UValue) {\r\n        const variable = \"this.\" + pathToObject;\r\n        const value = \"args.val_\" + this._valsCount;\r\n\r\n        const patchRequest = new PatchRequest();\r\n        patchRequest.script = variable + \" = \" + variable + \" ? \" + variable + \" + \" + value + \" : \" + value;\r\n        patchRequest.values = {\r\n            [\"val_\" + this._valsCount]: valToAdd\r\n        };\r\n\r\n        const collectionName = this._requestExecutor.conventions.getCollectionNameForEntity(entity);\r\n\r\n        const metadataAsDictionary = MetadataDictionary.create();\r\n        metadataAsDictionary[CONSTANTS.Documents.Metadata.COLLECTION] = collectionName;\r\n\r\n        const descriptor = this._requestExecutor.conventions.getTypeDescriptorByEntity(entity);\r\n        const jsType = this._requestExecutor.conventions.getJsTypeName(descriptor);\r\n        if (jsType) {\r\n            metadataAsDictionary[CONSTANTS.Documents.Metadata.RAVEN_JS_TYPE] = jsType;\r\n        }\r\n\r\n        const documentInfo = new DocumentInfo();\r\n        documentInfo.id = id;\r\n        documentInfo.collection = collectionName;\r\n        documentInfo.metadataInstance = metadataAsDictionary;\r\n\r\n\r\n        const newInstance = this.entityToJson.convertEntityToJson(entity, documentInfo);\r\n        this._valsCount++;\r\n\r\n        const patchCommandData = new PatchCommandData(id, null, patchRequest);\r\n        patchCommandData.createIfMissing = newInstance;\r\n        this.defer(patchCommandData);\r\n    }\r\n\r\n    public addOrPatchArray<T extends object, UValue>(id: string, entity: T, pathToArray: string, arrayAdder: (array: JavaScriptArray<UValue>) => void) {\r\n        const scriptArray = new JavaScriptArray(this._customCount++, pathToArray);\r\n\r\n        arrayAdder(scriptArray);\r\n\r\n        const patchRequest = new PatchRequest();\r\n        patchRequest.script = scriptArray.script;\r\n        patchRequest.values = scriptArray.parameters;\r\n\r\n        const collectionName = this._requestExecutor.conventions.getCollectionNameForEntity(entity);\r\n\r\n        const metadataAsDictionary = MetadataDictionary.create();\r\n        metadataAsDictionary[CONSTANTS.Documents.Metadata.COLLECTION] = collectionName;\r\n\r\n        const descriptor = this._requestExecutor.conventions.getTypeDescriptorByEntity(entity);\r\n        const jsType = this._requestExecutor.conventions.getJsTypeName(descriptor);\r\n        if (jsType) {\r\n            metadataAsDictionary[CONSTANTS.Documents.Metadata.RAVEN_JS_TYPE] = jsType;\r\n        }\r\n\r\n        const documentInfo = new DocumentInfo();\r\n        documentInfo.id = id;\r\n        documentInfo.collection = collectionName;\r\n        documentInfo.metadataInstance = metadataAsDictionary;\r\n\r\n        const newInstance = this.entityToJson.convertEntityToJson(entity, documentInfo);\r\n\r\n        this._valsCount++;\r\n\r\n        const patchCommandData = new PatchCommandData(id, null, patchRequest);\r\n        patchCommandData.createIfMissing = newInstance;\r\n        this.defer(patchCommandData);\r\n    }\r\n\r\n    public addOrPatch<T extends object, UValue>(id: string, entity: T, pathToObject: string, value: UValue) {\r\n        const patchRequest = new PatchRequest();\r\n        patchRequest.script = \"this.\" + pathToObject + \" = args.val_\" + this._valsCount;\r\n        patchRequest.values = {\r\n            [\"val_\" + this._valsCount]: value\r\n        };\r\n\r\n        const collectionName = this._requestExecutor.conventions.getCollectionNameForEntity(entity);\r\n\r\n        const metadataAsDictionary = MetadataDictionary.create();\r\n        metadataAsDictionary[CONSTANTS.Documents.Metadata.COLLECTION] = collectionName;\r\n\r\n        const descriptor = this._requestExecutor.conventions.getTypeDescriptorByEntity(entity);\r\n        const jsType = this._requestExecutor.conventions.getJsTypeName(descriptor);\r\n        if (jsType) {\r\n            metadataAsDictionary[CONSTANTS.Documents.Metadata.RAVEN_JS_TYPE] = jsType;\r\n        }\r\n\r\n        const documentInfo = new DocumentInfo();\r\n        documentInfo.id = id;\r\n        documentInfo.collection = collectionName;\r\n        documentInfo.metadataInstance = metadataAsDictionary;\r\n\r\n\r\n        const newInstance = this.entityToJson.convertEntityToJson(entity, documentInfo);\r\n        this._valsCount++;\r\n\r\n        const patchCommandData = new PatchCommandData(id, null, patchRequest);\r\n        patchCommandData.createIfMissing = newInstance;\r\n        this.defer(patchCommandData);\r\n    }\r\n\r\n    private _valsCount: number = 0;\r\n    private _customCount: number = 0;\r\n\r\n    public patch<TEntity extends object, UValue>(\r\n        id: string, path: string, value: UValue): void;\r\n    public patch<TEntity extends object, UValue>(\r\n        entity: TEntity, path: string, value: UValue): void;\r\n    public patch<TEntity extends object, UValue>(\r\n        entityOrId: TEntity | string, path: string,\r\n        value: UValue): void {\r\n\r\n        let id: string;\r\n        if (TypeUtil.isString(entityOrId)) {\r\n            id = entityOrId;\r\n        } else {\r\n            const metadata = this.getMetadataFor(entityOrId as TEntity);\r\n            id = metadata[\"@id\"];\r\n        }\r\n\r\n        const patchRequest = new PatchRequest();\r\n        patchRequest.script = \"this.\" + path + \" = args.val_\" + this._valsCount + \";\";\r\n        const valKey = \"val_\" + this._valsCount;\r\n        patchRequest.values = {};\r\n        patchRequest.values[valKey] = value;\r\n\r\n        this._valsCount++;\r\n\r\n        if (!this._tryMergePatches(id, patchRequest)) {\r\n            this.defer(new PatchCommandData(id, null, patchRequest, null));\r\n        }\r\n    }\r\n\r\n    public patchArray<TEntity extends object, UValue>(\r\n        id: string, pathToArray: string, arrayAdder: (array: JavaScriptArray<UValue>) => void): void;\r\n    public patchArray<TEntity extends object, UValue>(\r\n        entity: TEntity, pathToArray: string, arrayAdder: (array: JavaScriptArray<UValue>) => void): void;\r\n    public patchArray<TEntity extends object, UValue>(\r\n        entityOrId: TEntity | string, path: string,\r\n        arrayAdder: (array: JavaScriptArray<UValue>) => void): void {\r\n\r\n        let id: string;\r\n        if (TypeUtil.isString(entityOrId)) {\r\n            id = entityOrId;\r\n        } else {\r\n            const metadata = this.getMetadataFor(entityOrId as TEntity);\r\n            id = metadata[\"@id\"];\r\n        }\r\n\r\n        const scriptArray = new JavaScriptArray(this._customCount++, path);\r\n        arrayAdder(scriptArray);\r\n\r\n        const patchRequest = new PatchRequest();\r\n        patchRequest.script = scriptArray.script;\r\n        patchRequest.values = scriptArray.parameters;\r\n\r\n        if (!this._tryMergePatches(id, patchRequest)) {\r\n            this.defer(new PatchCommandData(id, null, patchRequest, null));\r\n        }\r\n    }\r\n\r\n    patchObject<TEntity extends object, TKey, TValue>(\r\n        entity: TEntity, pathToObject: string, mapAdder: (map: JavaScriptMap<TKey, TValue>) => void): void;\r\n    patchObject<TEntity extends object, TKey, TValue>(\r\n        id: string, pathToObject: string, mapAdder: (map: JavaScriptMap<TKey, TValue>) => void): void;\r\n    patchObject<TEntity extends object, TKey, TValue>(\r\n        idOrEntity: string | TEntity, pathToObject: string, mapAdder: (map: JavaScriptMap<TKey, TValue>) => void): void {\r\n        if (TypeUtil.isString(idOrEntity)) {\r\n            const scriptMap = new JavaScriptMap(this._customCount++, pathToObject);\r\n\r\n            mapAdder(scriptMap);\r\n\r\n            const patchRequest = new PatchRequest();\r\n            patchRequest.script = scriptMap.getScript();\r\n            patchRequest.values = scriptMap.parameters;\r\n\r\n            if (!this._tryMergePatches(idOrEntity, patchRequest)) {\r\n                this.defer(new PatchCommandData(idOrEntity, null, patchRequest, null));\r\n            }\r\n        } else {\r\n            const metadata = this.getMetadataFor(idOrEntity);\r\n            const id = metadata[CONSTANTS.Documents.Metadata.ID];\r\n            this.patchObject(id, pathToObject, mapAdder);\r\n        }\r\n    }\r\n\r\n    private _tryMergePatches(id: string, patchRequest: PatchRequest): boolean {\r\n        const command = this.deferredCommandsMap.get(IdTypeAndName.keyFor(id, \"PATCH\", null));\r\n        if (!command) {\r\n            return false;\r\n        }\r\n\r\n        const commandIdx = this._deferredCommands.indexOf(command);\r\n        if (commandIdx > -1) {\r\n            this._deferredCommands.splice(commandIdx, 1);\r\n        }\r\n\r\n        // We'll overwrite the deferredCommandsMap when calling Defer\r\n        // No need to call deferredCommandsMap.remove((id, CommandType.PATCH, null));\r\n\r\n        const oldPatch = command as PatchCommandData;\r\n        const newScript = oldPatch.patch.script + \"\\n\" + patchRequest.script;\r\n        const newVals = {};\r\n\r\n        for (const key of Object.keys(oldPatch.patch.values)) {\r\n            newVals[key] = oldPatch.patch.values[key];\r\n        }\r\n\r\n        for (const key of Object.keys(patchRequest.values)) {\r\n            newVals[key] = patchRequest.values[key];\r\n        }\r\n\r\n        const newPatchRequest = new PatchRequest();\r\n        newPatchRequest.script = newScript;\r\n        newPatchRequest.values = newVals;\r\n\r\n        this.defer(new PatchCommandData(id, null, newPatchRequest, null));\r\n        return true;\r\n    }\r\n\r\n    public rawQuery<TEntity extends object>(\r\n        query: string, documentType?: DocumentType<TEntity>): IRawDocumentQuery<TEntity> {\r\n        if (documentType) {\r\n            this.conventions.tryRegisterJsType(documentType);\r\n        }\r\n\r\n        return new RawDocumentQuery(this, query, documentType);\r\n    }\r\n\r\n    public query<TEntity extends object>(documentType: DocumentType<TEntity>): IDocumentQuery<TEntity>;\r\n    public query<TEntity extends object>(documentType: DocumentType<TEntity>, index: new () => AbstractCommonApiForIndexes): IDocumentQuery<TEntity>;\r\n    public query<TEntity extends object>(opts: DocumentQueryOptions<TEntity>): IDocumentQuery<TEntity>;\r\n    public query<TEntity extends object>(\r\n        docTypeOrOpts: DocumentType<TEntity> | DocumentQueryOptions<TEntity>, index?: new () => AbstractCommonApiForIndexes): IDocumentQuery<TEntity> {\r\n        if (TypeUtil.isDocumentType(docTypeOrOpts)) {\r\n            return this.documentQuery({\r\n                documentType: docTypeOrOpts as DocumentType<TEntity>,\r\n                index\r\n            });\r\n        }\r\n\r\n        return this.documentQuery(docTypeOrOpts as DocumentQueryOptions<TEntity>);\r\n    }\r\n\r\n    public documentQuery<T extends object>(opts: AdvancedDocumentQueryOptions<T>): IDocumentQuery<T>;\r\n    public documentQuery<T extends object>(documentType: DocumentType<T>): IDocumentQuery<T>;\r\n    public documentQuery<T extends object>(\r\n        documentTypeOrOpts: DocumentType<T> | AdvancedDocumentQueryOptions<T>): IDocumentQuery<T> {\r\n        let opts: AdvancedDocumentQueryOptions<T>;\r\n        if (TypeUtil.isDocumentType(documentTypeOrOpts)) {\r\n            opts = { documentType: documentTypeOrOpts as DocumentType<T> };\r\n        } else {\r\n            opts = documentTypeOrOpts as AdvancedDocumentQueryOptions<T>;\r\n\r\n            const { index, ...restOpts } = opts;\r\n            if (index) {\r\n                opts = {\r\n                    ...restOpts,\r\n                    indexName: new opts.index().getIndexName()\r\n                }\r\n            }\r\n        }\r\n\r\n        if (opts.documentType) {\r\n            this.conventions.tryRegisterJsType(opts.documentType);\r\n        }\r\n\r\n        const { indexName, collection } = this._processQueryParameters(opts, this.conventions);\r\n        return new DocumentQuery(opts.documentType, this, indexName, collection, !!opts.isMapReduce);\r\n    }\r\n\r\n    protected _processQueryParameters<T extends object>(\r\n        opts: AdvancedDocumentQueryOptions<T>, conventions: DocumentConventions) {\r\n        let { collection } = opts;\r\n        const { indexName } = opts;\r\n        const isIndex = !!indexName;\r\n        const isCollection = !!collection;\r\n\r\n        if (isIndex && isCollection) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Parameters indexName and collectionName are mutually exclusive. Please specify only one of them.\");\r\n        }\r\n\r\n        if (!isIndex && !isCollection) {\r\n            const entityType = this.conventions.getJsTypeByDocumentType(opts.documentType);\r\n            collection = this.conventions.getCollectionNameForType(entityType)\r\n                || CONSTANTS.Documents.Metadata.ALL_DOCUMENTS_COLLECTION;\r\n        }\r\n\r\n        return { indexName, collection };\r\n    }\r\n\r\n    private _attachments: IAttachmentsSessionOperations;\r\n\r\n    public get attachments(): IAttachmentsSessionOperations {\r\n        if (!this._attachments) {\r\n            this._attachments = new DocumentSessionAttachments(this);\r\n        }\r\n\r\n        return this._attachments;\r\n    }\r\n\r\n    private _revisions: IRevisionsSessionOperations;\r\n\r\n    public get revisions(): IRevisionsSessionOperations {\r\n        if (!this._revisions) {\r\n            this._revisions = new DocumentSessionRevisions(this);\r\n        }\r\n\r\n        return this._revisions;\r\n    }\r\n\r\n    private _clusterTransaction: ClusterTransactionOperations;\r\n\r\n    public get clusterTransaction(): IClusterTransactionOperations {\r\n        if (!this._clusterTransaction) {\r\n            this._clusterTransaction = new ClusterTransactionOperations(this);\r\n        }\r\n        return this._clusterTransaction;\r\n    }\r\n\r\n    protected _hasClusterSession(): boolean {\r\n        return !!this._clusterTransaction;\r\n    }\r\n\r\n    protected _clearClusterSession(): void {\r\n        if (!this._hasClusterSession()) {\r\n            return;\r\n        }\r\n\r\n        this.clusterSession.clear();\r\n    }\r\n\r\n    public get clusterSession(): ClusterTransactionOperationsBase {\r\n        if (!this._clusterTransaction) {\r\n            this._clusterTransaction = new ClusterTransactionOperations(this);\r\n        }\r\n        return this._clusterTransaction;\r\n    }\r\n\r\n    public get lazily(): ILazySessionOperations {\r\n        return new LazySessionOperations(this);\r\n    }\r\n\r\n    public get eagerly(): IEagerSessionOperations {\r\n        return this;\r\n    }\r\n\r\n    public async executeAllPendingLazyOperations(): Promise<ResponseTimeInformation> {\r\n        const requests: GetRequest[] = [];\r\n        for (let i = this._pendingLazyOperations.length - 1; i >= 0; i -= 1) {\r\n            const op = this._pendingLazyOperations[i];\r\n            const req = op.createRequest();\r\n            if (!req) {\r\n                this._pendingLazyOperations.splice(i, 1);\r\n                continue;\r\n            }\r\n\r\n            requests.unshift(req);\r\n        }\r\n\r\n        if (!requests.length) {\r\n            return new ResponseTimeInformation();\r\n        }\r\n\r\n        try {\r\n            const sw = Stopwatch.createStarted();\r\n            const responseTimeDuration: ResponseTimeInformation = new ResponseTimeInformation();\r\n            while (await this._executeLazyOperationsSingleStep(responseTimeDuration, requests, sw)) {\r\n                await delay(100);\r\n            }\r\n\r\n            responseTimeDuration.computeServerTotal();\r\n            sw.stop();\r\n            responseTimeDuration.totalClientDuration = sw.elapsed;\r\n            return responseTimeDuration;\r\n        } finally {\r\n            this._pendingLazyOperations.length = 0;\r\n        }\r\n    }\r\n\r\n    private async _executeLazyOperationsSingleStep(\r\n        responseTimeInformation: ResponseTimeInformation, requests: GetRequest[], sw: Stopwatch): Promise<boolean> {\r\n        const multiGetOperation = new MultiGetOperation(this);\r\n        const multiGetCommand = multiGetOperation.createRequest(requests);\r\n        try {\r\n            await this.requestExecutor.execute(multiGetCommand, this._sessionInfo);\r\n            const responses: GetResponse[] = multiGetCommand.result;\r\n\r\n            if (!multiGetCommand.aggressivelyCached) {\r\n                this.incrementRequestCount();\r\n            }\r\n\r\n            for (let i = 0; i < this._pendingLazyOperations.length; i++) {\r\n                const response = responses[i];\r\n                const tempReqTime = response.headers[HEADERS.REQUEST_TIME];\r\n                response.elapsed = sw.elapsed;\r\n                const totalTime = tempReqTime ? Number.parseInt(tempReqTime, 10) : 0;\r\n                const timeItem = {\r\n                    url: requests[i].urlAndQuery,\r\n                    duration: totalTime\r\n                };\r\n\r\n                responseTimeInformation.durationBreakdown.push(timeItem);\r\n                if (response.requestHasErrors()) {\r\n                    throwError(\r\n                        \"InvalidOperationException\",\r\n                        \"Got an error from server, status code: \" + response.statusCode + EOL + response.result);\r\n                }\r\n\r\n                await this._pendingLazyOperations[i].handleResponseAsync(response);\r\n                if (this._pendingLazyOperations[i].requiresRetry) {\r\n                    return true;\r\n                }\r\n            }\r\n        } finally {\r\n            multiGetCommand.dispose();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public addLazyOperation<TLazyResult>(operation: ILazyOperation): Lazy<TLazyResult> {\r\n        this._pendingLazyOperations.push(operation);\r\n        return new Lazy<TLazyResult>(async () => {\r\n            await this.executeAllPendingLazyOperations();\r\n            return operation.result as TLazyResult;\r\n        });\r\n    }\r\n\r\n    public addLazyCountOperation(operation: ILazyOperation): Lazy<number> {\r\n        this._pendingLazyOperations.push(operation);\r\n        return new Lazy(async () => {\r\n            await this.executeAllPendingLazyOperations();\r\n            return operation.queryResult.totalResults;\r\n        });\r\n    }\r\n\r\n    public lazyLoadInternal<TResult extends object>(\r\n        ids: string[],\r\n        includes: string[],\r\n        clazz: ObjectTypeDescriptor<TResult>): Lazy<EntitiesCollectionObject<TResult>> {\r\n\r\n        if (this.checkIfIdAlreadyIncluded(ids, includes)) {\r\n            return new Lazy(() => this.load(ids, { documentType: clazz }));\r\n        }\r\n\r\n        const loadOperation = new LoadOperation(this)\r\n            .byIds(ids)\r\n            .withIncludes(includes);\r\n\r\n        const lazyOp = new LazyLoadOperation<TResult>(this, loadOperation, clazz)\r\n            .byIds(ids)\r\n            .withIncludes(includes);\r\n\r\n        return this.addLazyOperation(lazyOp);\r\n    }\r\n\r\n    public async stream<T extends object>(query: IDocumentQuery<T>): Promise<DocumentResultStream<T>>;\r\n    public async stream<T extends object>(\r\n        query: IDocumentQuery<T>,\r\n        streamQueryStats: StreamQueryStatisticsCallback)\r\n        : Promise<DocumentResultStream<T>>;\r\n    public async stream<T extends object>(query: IRawDocumentQuery<T>)\r\n        : Promise<DocumentResultStream<T>>;\r\n    public async stream<T extends object>(\r\n        query: IRawDocumentQuery<T>,\r\n        streamQueryStats: StreamQueryStatisticsCallback)\r\n        : Promise<DocumentResultStream<T>>;\r\n    public async stream<T extends object>(idPrefix: string)\r\n        : Promise<DocumentResultStream<T>>;\r\n    public async stream<T extends object>(idPrefix: string, opts: SessionLoadStartingWithOptions<T>)\r\n        : Promise<DocumentResultStream<T>>;\r\n    public async stream<T extends object>(\r\n        queryOrIdPrefix: string | IDocumentQuery<T> | IRawDocumentQuery<T>,\r\n        optsOrStatsCallback?: SessionLoadStartingWithOptions<T> | StreamQueryStatisticsCallback)\r\n        : Promise<DocumentResultStream<T>> {\r\n        if (TypeUtil.isString(queryOrIdPrefix)) {\r\n            return this._streamStartingWith<T>(\r\n                queryOrIdPrefix as string, optsOrStatsCallback as object);\r\n        }\r\n\r\n        if (arguments.length > 1 && typeof optsOrStatsCallback !== \"function\") {\r\n            throwError(\"InvalidArgumentException\", \"Statistics callback must be a function.\");\r\n        }\r\n\r\n        return this._streamQueryResults(\r\n            queryOrIdPrefix as unknown as (AbstractDocumentQuery<T, any>),\r\n            optsOrStatsCallback as StreamQueryStatisticsCallback);\r\n    }\r\n\r\n\r\n    private async _streamStartingWith<T extends object>(\r\n        idPrefix: string,\r\n        opts: SessionLoadStartingWithOptions<T>)\r\n        : Promise<DocumentResultStream<T>> {\r\n        const streamOperation = new StreamOperation(this);\r\n        const command = streamOperation.createRequest(idPrefix, opts);\r\n\r\n        await this.requestExecutor.execute(command, this.sessionInfo);\r\n        const docsReadable = streamOperation.setResult(command.result);\r\n        let clazz = null;\r\n        if (opts && \"documentType\" in opts) {\r\n            clazz = this.conventions.getJsTypeByDocumentType(opts.documentType);\r\n        }\r\n\r\n        const result = this._getStreamResultTransform(this, clazz, null, false);\r\n\r\n        result.on(\"newListener\", (event, listener) => {\r\n            if (event === \"data\") {\r\n                result.resume();\r\n            }\r\n        });\r\n\r\n        result.on(\"removeListener\", (event, listener) => {\r\n            if (event === \"data\") {\r\n                result.pause();\r\n            }\r\n        });\r\n\r\n        return pipeline(docsReadable, result, TypeUtil.NOOP) as unknown as DocumentResultStream<T>;\r\n    }\r\n\r\n    private async _streamQueryResults<T extends object>(\r\n        query: AbstractDocumentQuery<T, any>,\r\n        streamQueryStatsCallback?: StreamQueryStatisticsCallback)\r\n        : Promise<DocumentResultStream<T>> {\r\n        const streamOperation = new StreamOperation(this);\r\n        const command = streamOperation.createRequest(query.getIndexQuery());\r\n\r\n        await this.requestExecutor.execute(command, this.sessionInfo);\r\n        const docsReadable = streamOperation.setResult(command.result);\r\n\r\n        const result = this._getStreamResultTransform(\r\n            this, (query as any).getQueryType(), (query as any).fieldsToFetchToken, query.isProjectInto);\r\n\r\n        docsReadable.once(\"stats\", stats => {\r\n            (streamQueryStatsCallback || TypeUtil.NOOP)(stats);\r\n            result.emit(\"stats\", stats);\r\n        });\r\n\r\n        result.on(\"newListener\", (event, listener) => {\r\n            if (event === \"data\") {\r\n                result.resume();\r\n            }\r\n        });\r\n\r\n        result.on(\"removeListener\", (event, listener) => {\r\n            if (event === \"data\") {\r\n                result.pause();\r\n            }\r\n        });\r\n\r\n        return pipeline(docsReadable, result, TypeUtil.NOOP) as unknown as DocumentResultStream<T>;\r\n    }\r\n\r\n    private _getStreamResultTransform<TEntity extends object>(\r\n        session: DocumentSession,\r\n        clazz: ObjectTypeDescriptor<TEntity>,\r\n        fieldsToFetchToken: any,\r\n        isProjectInto: boolean) {\r\n        return new Transform({\r\n            objectMode: true,\r\n            transform(chunk: object, encoding: string, callback: TransformCallback) {\r\n                const doc = chunk[\"value\"];\r\n                const metadata = doc[CONSTANTS.Documents.Metadata.KEY];\r\n                let changeVector: string = null;\r\n                // MapReduce indexes return reduce results that don't have @id property\r\n                const id = metadata[CONSTANTS.Documents.Metadata.ID] || null;\r\n                //TODO: pass timeseries fields!\r\n                const entity = QueryOperation.deserialize(\r\n                    id, doc, metadata, fieldsToFetchToken || null, true, session, clazz, isProjectInto);\r\n                if (id) {\r\n                    changeVector = metadata[CONSTANTS.Documents.Metadata.CHANGE_VECTOR];\r\n                }\r\n                callback(null, {\r\n                    changeVector,\r\n                    metadata,\r\n                    id,\r\n                    document: entity\r\n                } as StreamResult<TEntity>);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  Returns the results of a query directly into stream\r\n     */\r\n    public async streamInto<T extends object>(query: IDocumentQuery<T>, writable: Writable): Promise<void>;\r\n    /**\r\n     *  Returns the results of a query directly into stream\r\n     */\r\n    public async streamInto<T extends object>(query: IRawDocumentQuery<T>, writable: Writable): Promise<void>;\r\n    /**\r\n     *  Returns the results of a query directly into stream\r\n     */\r\n    public async streamInto<T extends object>(\r\n        query: IRawDocumentQuery<T> | IDocumentQuery<T>,\r\n        writable: Writable): Promise<void> {\r\n        const streamOperation = new StreamOperation(this);\r\n        const command = streamOperation.createRequest(query.getIndexQuery());\r\n        await this.requestExecutor.execute(command, this._sessionInfo);\r\n        return streamResultsIntoStream(command.result.stream, this.conventions, writable);\r\n    }\r\n\r\n    public countersFor(documentId: string): ISessionDocumentCounters;\r\n    public countersFor(entity: object): ISessionDocumentCounters;\r\n    public countersFor(entityOrId: string | object): ISessionDocumentCounters {\r\n        return new SessionDocumentCounters(this, entityOrId as any);\r\n    }\r\n\r\n    public timeSeriesFor(documentId: string, name: string): ISessionDocumentTimeSeries;\r\n    public timeSeriesFor(entity:any, name: string): ISessionDocumentTimeSeries;\r\n    public timeSeriesFor<T extends object>(documentId: string, clazz: ClassConstructor<T>): ISessionDocumentTypedTimeSeries<T>;\r\n    public timeSeriesFor<T extends object>(documentId: string, name: string, clazz: ClassConstructor<T>): ISessionDocumentTypedTimeSeries<T>;\r\n    public timeSeriesFor<T extends object>(entity: object, clazz: ClassConstructor<T>): ISessionDocumentTypedTimeSeries<T>;\r\n    public timeSeriesFor<T extends object>(entity: object, name: string, clazz: ClassConstructor<T>): ISessionDocumentTypedTimeSeries<T>;\r\n    public timeSeriesFor<T extends object>(entityOrDocumentId: string | object, nameOrClass: string | ClassConstructor<T>, clazz?: ClassConstructor<T>): ISessionDocumentTypedTimeSeries<T> | ISessionDocumentTimeSeries {\r\n        if (clazz) {\r\n            const name = nameOrClass as string;\r\n            const tsName = name ?? TimeSeriesOperations.getTimeSeriesName(clazz, this.conventions);\r\n            InMemoryDocumentSessionOperations.validateTimeSeriesName(tsName);\r\n            return new SessionDocumentTypedTimeSeries(this, entityOrDocumentId, tsName, clazz);\r\n        }\r\n\r\n        if (TypeUtil.isString(nameOrClass)) {\r\n            return new SessionDocumentTimeSeries(this, entityOrDocumentId, nameOrClass);\r\n        } else {\r\n            const tsName = TimeSeriesOperations.getTimeSeriesName(nameOrClass, this.conventions);\r\n            InMemoryDocumentSessionOperations.validateTimeSeriesName(tsName);\r\n            return new SessionDocumentTypedTimeSeries(this, entityOrDocumentId, tsName, nameOrClass);\r\n        }\r\n    }\r\n\r\n    timeSeriesRollupFor<T extends object>(entity: object, policy: string, clazz: ClassConstructor<T>): ISessionDocumentRollupTypedTimeSeries<T>;\r\n    timeSeriesRollupFor<T extends object>(entity: object, policy: string, raw: string, clazz: ClassConstructor<T>): ISessionDocumentRollupTypedTimeSeries<T>;\r\n    timeSeriesRollupFor<T extends object>(documentId: string, policy: string, clazz: ClassConstructor<T>): ISessionDocumentRollupTypedTimeSeries<T>;\r\n    timeSeriesRollupFor<T extends object>(documentId: string, policy: string, raw: string, clazz: ClassConstructor<T>): ISessionDocumentRollupTypedTimeSeries<T>;\r\n    timeSeriesRollupFor<T extends object>(entityOrDocumentId: string | object, policy: string, rawOrClass: string | ClassConstructor<T>, clazz?: ClassConstructor<T>): ISessionDocumentRollupTypedTimeSeries<T> {\r\n        if (clazz) {\r\n            const name = rawOrClass as string;\r\n            const tsName = name ?? TimeSeriesOperations.getTimeSeriesName(clazz, this.conventions);\r\n            return new SessionDocumentRollupTypedTimeSeries(this, entityOrDocumentId, tsName + TIME_SERIES_ROLLUP_SEPARATOR + policy, clazz);\r\n        }\r\n\r\n        const tsName = TimeSeriesOperations.getTimeSeriesName(rawOrClass as ClassConstructor<T>, this.conventions);\r\n        return new SessionDocumentRollupTypedTimeSeries(this, entityOrDocumentId, tsName + TIME_SERIES_ROLLUP_SEPARATOR + policy, rawOrClass as ClassConstructor<T>);\r\n    }\r\n\r\n    public incrementalTimeSeriesFor(documentId: string, name: string): ISessionDocumentIncrementalTimeSeries;\r\n    public incrementalTimeSeriesFor(entity: object, name: string): ISessionDocumentIncrementalTimeSeries;\r\n    public incrementalTimeSeriesFor<T extends object>(documentId: string, clazz: ClassConstructor<T>): ISessionDocumentTypedIncrementalTimeSeries<T>;\r\n    public incrementalTimeSeriesFor<T extends object>(documentId: string, name: string, clazz: ClassConstructor<T>): ISessionDocumentTypedIncrementalTimeSeries<T>;\r\n    public incrementalTimeSeriesFor<T extends object>(entity: object, clazz: ClassConstructor<T>): ISessionDocumentTypedIncrementalTimeSeries<T>;\r\n    public incrementalTimeSeriesFor<T extends object>(entity: object, name: string, clazz: ClassConstructor<T>): ISessionDocumentTypedIncrementalTimeSeries<T>;\r\n    public incrementalTimeSeriesFor<T extends object>(entityOrDocumentId: string | object,\r\n                                                      nameOrClass: string | ClassConstructor<T>,\r\n                                                      clazz?: ClassConstructor<T>\r\n    ): ISessionDocumentTypedIncrementalTimeSeries<T> | ISessionDocumentIncrementalTimeSeries {\r\n        if (clazz) {\r\n            const name = nameOrClass as string;\r\n            const tsName = name ?? TimeSeriesOperations.getTimeSeriesName(clazz, this.conventions);\r\n            InMemoryDocumentSessionOperations.validateIncrementalTimeSeriesName(tsName);\r\n            return new SessionDocumentTypedTimeSeries(this, entityOrDocumentId, tsName, clazz);\r\n        }\r\n\r\n        if (TypeUtil.isString(nameOrClass)) {\r\n            InMemoryDocumentSessionOperations.validateIncrementalTimeSeriesName(nameOrClass);\r\n            return new SessionDocumentTimeSeries(this, entityOrDocumentId, nameOrClass);\r\n        } else {\r\n            const tsName = TimeSeriesOperations.getTimeSeriesName(nameOrClass, this.conventions);\r\n            InMemoryDocumentSessionOperations.validateIncrementalTimeSeriesName(tsName);\r\n            return new SessionDocumentTypedTimeSeries(this, entityOrDocumentId, tsName, nameOrClass);\r\n        }\r\n    }\r\n\r\n    async conditionalLoad<T extends object>(id: string, changeVector: string, clazz: ClassConstructor<T>): Promise<ConditionalLoadResult<T>> {\r\n        if (StringUtil.isNullOrEmpty(id)) {\r\n            throwError(\"InvalidArgumentException\", \"Id cannot be null\");\r\n        }\r\n\r\n        if (this.advanced.isLoaded(id)) {\r\n            const entity = await this.load(id, clazz);\r\n            if (!entity) {\r\n                return {\r\n                    entity: null,\r\n                    changeVector: null\r\n                }\r\n            }\r\n\r\n            const cv = this.advanced.getChangeVectorFor(entity);\r\n            return {\r\n                entity,\r\n                changeVector: cv\r\n            };\r\n        }\r\n\r\n        if (StringUtil.isNullOrEmpty(changeVector)) {\r\n            throwError(\"InvalidArgumentException\", \"The requested document with id '\" + id + \"' is not loaded into the session and could not conditional load when changeVector is null or empty.\");\r\n        }\r\n\r\n        this.incrementRequestCount();\r\n\r\n        const cmd = new ConditionalGetDocumentsCommand(id, changeVector, this.conventions);\r\n        await this.advanced.requestExecutor.execute(cmd);\r\n\r\n        switch (cmd.statusCode) {\r\n            case StatusCodes.NotModified: {\r\n                return {\r\n                    entity: null, // value not changed\r\n                    changeVector\r\n                }\r\n            }\r\n            case StatusCodes.NotFound: {\r\n                this.registerMissing(id);\r\n                return {\r\n                    entity: null,\r\n                    changeVector: null // value is missing\r\n                }\r\n            }\r\n        }\r\n\r\n        const documentInfo = DocumentInfo.getNewDocumentInfo(cmd.result.results[0]);\r\n        const r = this.trackEntity(clazz, documentInfo);\r\n        return {\r\n            entity: r,\r\n            changeVector: cmd.result.changeVector\r\n        };\r\n    }\r\n}\r\n"]}