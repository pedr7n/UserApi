{"version":3,"file":"LazyMultiLoaderWithInclude.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Loaders/LazyMultiLoaderWithInclude.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAErC,MAAM,OAAO,0BAA0B;IAClB,QAAQ,CAAuB;IAC/B,SAAS,GAAa,EAAE,CAAC;IAE1C,YAAmB,OAA6B;QAC5C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAED;;OAEG;IACI,OAAO,CAAC,IAAY;QACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC;IAChB,CAAC;IAOM,IAAI,CAAyB,GAAsB,EAAE,KAAqC;QAE7F,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CACzC,UAAU,CAAC,CAAC,CAAC,GAAe,CAAC,CAAC,CAAC,CAAC,GAAG,CAAa,EAChD,IAAI,CAAC,SAAS,EACd,KAAK,CAAC,CAAC;QAEX,IAAI,UAAU,EAAE,CAAC;YACb,OAAO,MAAM,CAAC;QAClB,CAAC;QAED,OAAO,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE;YACvB,MAAM,CAAC,GAAG,MAAM,MAAM,CAAC,QAAQ,EAAE,CAAC;YAClC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;CACJ","sourcesContent":["import { ILazyLoaderWithInclude } from \"./ILazyLoaderWithInclude.js\";\r\nimport { IDocumentSessionImpl } from \"../IDocumentSession.js\";\r\nimport { ObjectTypeDescriptor, EntitiesCollectionObject } from \"../../../Types/index.js\";\r\nimport { Lazy } from \"../../Lazy.js\";\r\n\r\nexport class LazyMultiLoaderWithInclude implements ILazyLoaderWithInclude {\r\n    private readonly _session: IDocumentSessionImpl;\r\n    private readonly _includes: string[] = [];\r\n\r\n    public constructor(session: IDocumentSessionImpl) {\r\n        this._session = session;\r\n    }\r\n\r\n    /**\r\n     * Includes the specified path.\r\n     */\r\n    public include(path: string): ILazyLoaderWithInclude {\r\n        this._includes.push(path);\r\n        return this;\r\n    }\r\n\r\n    public load<TResult extends object>(ids: string[]): Lazy<EntitiesCollectionObject<TResult>>;\r\n    public load<TResult extends object>(\r\n        ids: string[], clazz: ObjectTypeDescriptor<TResult>): Lazy<EntitiesCollectionObject<TResult>>;\r\n    public load<TResult extends object>(id: string): Lazy<TResult | null>;\r\n    public load<TResult extends object>(id: string, clazz?: ObjectTypeDescriptor<TResult>): Lazy<TResult | null>;\r\n    public load<TResult extends object>(ids: string | string[], clazz?: ObjectTypeDescriptor<TResult>):\r\n        Lazy<TResult | null | EntitiesCollectionObject<TResult>> {\r\n        const isMultiple = Array.isArray(ids);\r\n        const result = this._session.lazyLoadInternal(\r\n            isMultiple ? ids as string[] : [ids] as string[],\r\n            this._includes,\r\n            clazz);\r\n\r\n        if (isMultiple) {\r\n            return result;\r\n        }\r\n\r\n        return new Lazy(async () => {\r\n            const x = await result.getValue();\r\n            return x[Object.keys(x)[0]];\r\n        });\r\n    }\r\n}\r\n"]}