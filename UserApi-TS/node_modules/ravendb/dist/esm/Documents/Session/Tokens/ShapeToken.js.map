{"version":3,"file":"ShapeToken.js","sourceRoot":"","sources":["../../../../../src/Documents/Session/Tokens/ShapeToken.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C,MAAM,OAAO,UAAW,SAAQ,UAAU;IAErB,MAAM,CAAS;IAEhC,YAAoB,KAAa;QAC7B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAEM,MAAM,CAAC,MAAM,CAChB,mBAA2B,EAC3B,qBAA6B,EAC7B,sBAA8B,EAC9B,WAAyB;QACzB,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,OAAO,IAAI,UAAU,CACjB,kBAAkB;kBAChB,mBAAmB;kBACnB,KAAK,GAAG,qBAAqB;kBAC7B,KAAK,GAAG,sBAAsB,GAAG,GAAG,CAAC,CAAC;QAChD,CAAC;QAED,IAAI,WAAW,KAAK,YAAY,EAAE,CAAC;YAC/B,OAAO,IAAI,UAAU,CACjB,kBAAkB,GAAG,mBAAmB;kBACtC,KAAK,GAAG,qBAAqB;kBAC7B,KAAK,GAAG,sBAAsB;kBAC9B,iBAAiB,CAAC,CAAC;QAC7B,CAAC;QAED,OAAO,IAAI,UAAU,CACjB,kBAAkB;cAChB,mBAAmB;cACnB,KAAK,GAAG,qBAAqB;cAC7B,KAAK,GAAG,sBAAsB;cAC9B,YAAY,CAAC,CAAC;IACxB,CAAC;IAEM,MAAM,CAAC,GAAG,CAAC,qBAA6B,EAAE,KAAmB;QAChE,IAAI,CAAC,KAAK,EAAE,CAAC;YACT,OAAO,IAAI,UAAU,CAAC,eAAe,GAAG,qBAAqB,GAAG,GAAG,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,KAAK,KAAK,YAAY,EAAE,CAAC;YACzB,OAAO,IAAI,UAAU,CAAC,eAAe,GAAG,qBAAqB,GAAG,iBAAiB,CAAC,CAAC;QACvF,CAAC;QAED,OAAO,IAAI,UAAU,CAAC,eAAe,GAAG,qBAAqB,GAAG,YAAY,CAAC,CAAC;IAClF,CAAC;IAEM,OAAO,CAAC,MAAM;QACjB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;CACJ","sourcesContent":["import { QueryToken } from \"./QueryToken.js\";\r\nimport { SpatialUnits } from \"../../Indexes/Spatial.js\";\r\n\r\nexport class ShapeToken extends QueryToken {\r\n\r\n    private readonly _shape: string;\r\n\r\n    private constructor(shape: string) {\r\n        super();\r\n        this._shape = shape;\r\n    }\r\n\r\n    public static circle(\r\n        radiusParameterName: string,\r\n        latitudeParameterName: string,\r\n        longitudeParameterName: string,\r\n        radiusUnits: SpatialUnits): ShapeToken {\r\n        if (!radiusUnits) {\r\n            return new ShapeToken(\r\n                \"spatial.circle($\"\r\n                + radiusParameterName\r\n                + \", $\" + latitudeParameterName\r\n                + \", $\" + longitudeParameterName + \")\");\r\n        }\r\n\r\n        if (radiusUnits === \"Kilometers\") {\r\n            return new ShapeToken(\r\n                \"spatial.circle($\" + radiusParameterName\r\n                + \", $\" + latitudeParameterName\r\n                + \", $\" + longitudeParameterName\r\n                + \", 'Kilometers')\");\r\n        }\r\n\r\n        return new ShapeToken(\r\n            \"spatial.circle($\"\r\n            + radiusParameterName\r\n            + \", $\" + latitudeParameterName\r\n            + \", $\" + longitudeParameterName\r\n            + \", 'Miles')\");\r\n    }\r\n\r\n    public static wkt(shapeWktParameterName: string, units: SpatialUnits): ShapeToken {\r\n        if (!units) {\r\n            return new ShapeToken(\"spatial.wkt($\" + shapeWktParameterName + \")\");\r\n        }\r\n\r\n        if (units === \"Kilometers\") {\r\n            return new ShapeToken(\"spatial.wkt($\" + shapeWktParameterName + \", 'Kilometers')\");\r\n        }\r\n\r\n        return new ShapeToken(\"spatial.wkt($\" + shapeWktParameterName + \", 'Miles')\");\r\n    }\r\n\r\n    public writeTo(writer): void {\r\n        writer.append(this._shape);\r\n    }\r\n}\r\n"]}