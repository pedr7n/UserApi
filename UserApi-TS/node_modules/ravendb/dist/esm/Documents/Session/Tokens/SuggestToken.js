import { QueryToken } from "./QueryToken.js";
import { throwError } from "../../../Exceptions/index.js";
import { StringUtil } from "../../../Utility/StringUtil.js";
import { QueryFieldUtil } from "../../Queries/QueryFieldUtil.js";
export class SuggestToken extends QueryToken {
    _fieldName;
    _alias;
    _termParameterName;
    _optionsParameterName;
    constructor(fieldName, alias, termParameterName, optionsParameterName) {
        super();
        if (!fieldName) {
            throwError("InvalidArgumentException", "fieldName cannot be null");
        }
        if (!termParameterName) {
            throwError("InvalidArgumentException", "termParameterName cannot be null");
        }
        this._fieldName = fieldName;
        this._alias = alias;
        this._termParameterName = termParameterName;
        this._optionsParameterName = optionsParameterName;
    }
    static create(fieldName, alias, termParameterName, optionsParameterName) {
        return new SuggestToken(fieldName, QueryFieldUtil.escapeIfNecessary(alias), termParameterName, optionsParameterName);
    }
    get fieldName() {
        return this._fieldName;
    }
    writeTo(writer) {
        writer
            .append("suggest(")
            .append(this._fieldName)
            .append(", $")
            .append(this._termParameterName);
        if (this._optionsParameterName) {
            writer
                .append(", $")
                .append(this._optionsParameterName);
        }
        writer.append(")");
        if (StringUtil.isNullOrWhitespace(this._alias) || this.fieldName === this._alias) {
            return;
        }
        writer
            .append(" as ")
            .append(this._alias);
    }
}
//# sourceMappingURL=SuggestToken.js.map