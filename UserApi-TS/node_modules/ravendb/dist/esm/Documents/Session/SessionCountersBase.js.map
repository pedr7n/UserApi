{"version":3,"file":"SessionCountersBase.js","sourceRoot":"","sources":["../../../../src/Documents/Session/SessionCountersBase.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AACrD,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAEpD,OAAO,EAAE,wBAAwB,EAAE,MAAM,iDAAiD,CAAC;AAC3F,OAAO,EAAE,gBAAgB,EAAE,MAAM,4CAA4C,CAAC;AAE9E;;GAEG;AACH,MAAM,OAAgB,mBAAmB;IAC3B,MAAM,CAAS;IACf,QAAQ,CAAoC;IAEtD,YACI,OAA0C,EAAE,UAA2B;QACvE,IAAI,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YAChC,MAAM,QAAQ,GAAG,OAAO,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC3D,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACZ,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;gBAC1C,OAAO;YACX,CAAC;YAED,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,EAAE,CAAC;QAC9B,CAAC;aAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACvC,IAAI,CAAC,UAAU,EAAE,CAAC;gBACd,UAAU,CAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;YAC1E,CAAC;YAED,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;QAC7B,CAAC;aAAM,CAAC;YACJ,UAAU,CAAC,0BAA0B,EAAE,8DAA8D,CAAC,CAAC;QAC3G,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAIM,SAAS,CAAC,OAAe,EAAE,KAAK,GAAG,CAAC;QACvC,IAAI,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;YACzC,UAAU,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACzC,SAAS,CAAC,IAAI,GAAG,WAAmC,CAAC;QACrD,SAAS,CAAC,WAAW,GAAG,OAAO,CAAC;QAChC,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;QACxB,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvE,IAAI,YAAY,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;YAC9E,mBAAmB,CAAC,qCAAqC,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACpF,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,GAAG,CACjD,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;QAEzD,IAAI,OAAO,EAAE,CAAC;YACV,MAAM,wBAAwB,GAAG,OAAmC,CAAC;YACrE,IAAI,wBAAwB,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC9C,mBAAmB,CAAC,wCAAwC,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YACvF,CAAC;YAED,wBAAwB,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjE,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,wBAAwB,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;QAC9E,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,OAAe;QACzB,IAAI,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;YACzC,UAAU,CAAC,0BAA0B,EAAE,sBAAsB,CAAC,CAAC;QACnE,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,GAAG,CACrC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC;YACrD,OAAO,CAAC,QAAQ;QACpB,CAAC;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvE,IAAI,YAAY,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;YAC9E,OAAO,CAAE,OAAO;QACpB,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACzC,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC1B,SAAS,CAAC,WAAW,GAAG,OAAO,CAAC;QAChC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,GAAG,CACjD,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;QACzD,IAAI,OAAO,EAAE,CAAC;YACV,MAAM,wBAAwB,GAAG,OAAmC,CAAC;YACrE,IAAI,wBAAwB,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC;gBACjD,mBAAmB,CAAC,wCAAwC,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YACvF,CAAC;YAED,wBAAwB,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjE,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,wBAAwB,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;QAC9E,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7D,IAAI,KAAK,EAAE,CAAC;YACR,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC/B,CAAC;IACL,CAAC;IAES,wBAAwB,CAAC,MAAc;QAC7C,UAAU,CACN,0BAA0B,EAC1B,uEAAuE;YACvE,2DAA2D,CAAC,CAAC;IACrE,CAAC;IAEO,MAAM,CAAC,wCAAwC,CAAC,UAAkB,EAAE,OAAe;QACvF,UAAU,CACN,2BAA2B,EAC3B,0BAA0B,GAAG,OAAO;cAClC,eAAe,GAAG,UAAU;cAC5B,kFAAkF,CAAC,CAAC;IAC9F,CAAC;IAEO,MAAM,CAAC,wCAAwC,CAAC,UAAkB,EAAE,OAAe;QACvF,UAAU,CAAC,2BAA2B,EAClC,uBAAuB,GAAG,OAAO;cAC/B,eAAe,GAAG,UAAU;cAC5B,qFAAqF,CAAC,CAAC;IACjG,CAAC;IAEO,MAAM,CAAC,qCAAqC,CAAC,UAAkB,EAAE,OAAe;QACpF,UAAU,CACN,2BAA2B,EAC3B,0BAA0B,GAAG,OAAO;cAClC,eAAe,GAAG,UAAU;cAC5B,qDAAqD,CAAC,CAAC;IACjE,CAAC;CACJ","sourcesContent":["import { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { IdTypeAndName } from \"../IdTypeAndName.js\";\r\nimport { CounterOperationType } from \"../Operations/Counters/CounterOperationType.js\";\r\nimport { CountersBatchCommandData } from \"../Commands/Batches/CountersBatchCommandData.js\";\r\nimport { CounterOperation } from \"../Operations/Counters/CounterOperation.js\";\r\n\r\n/**\r\n * Abstract implementation for in memory session operations\r\n */\r\nexport abstract class SessionCountersBase {\r\n    protected _docId: string;\r\n    protected _session: InMemoryDocumentSessionOperations;\r\n\r\n    protected constructor(\r\n        session: InMemoryDocumentSessionOperations, entityOrId: string | object) {\r\n        if (TypeUtil.isObject(entityOrId)) {\r\n            const document = session.documentsByEntity.get(entityOrId);\r\n            if (!document) {\r\n                this._throwEntityNotInSession(entityOrId);\r\n                return;\r\n            }\r\n\r\n            this._docId = document.id;\r\n        } else if (TypeUtil.isString(entityOrId)) {\r\n            if (!entityOrId) {\r\n                throwError(\"InvalidArgumentException\", \"DocumentId cannot be empty.\");\r\n            }\r\n\r\n            this._docId = entityOrId;\r\n        } else {\r\n            throwError(\"InvalidArgumentException\", \"Document ID or entity argument is neither string nor entity.\");\r\n        }\r\n\r\n        this._session = session;\r\n    }\r\n\r\n    public increment(counter: string): void;\r\n    public increment(counter: string, delta: number): void;\r\n    public increment(counter: string, delta = 1): void {\r\n        if (StringUtil.isNullOrWhitespace(counter)) {\r\n            throwError(\"InvalidArgumentException\", \"Counter cannot be empty.\");\r\n        }\r\n\r\n        const counterOp = new CounterOperation();\r\n        counterOp.type = \"Increment\" as CounterOperationType;\r\n        counterOp.counterName = counter;\r\n        counterOp.delta = delta;\r\n        const documentInfo = this._session.documentsById.getValue(this._docId);\r\n        if (documentInfo && this._session.deletedEntities.contains(documentInfo.entity)) {\r\n            SessionCountersBase._throwDocumentAlreadyDeletedInSession(this._docId, counter);\r\n        }\r\n\r\n        const command = this._session.deferredCommandsMap.get(\r\n            IdTypeAndName.keyFor(this._docId, \"Counters\", null));\r\n\r\n        if (command) {\r\n            const countersBatchCommandData = command as CountersBatchCommandData;\r\n            if (countersBatchCommandData.hasDelete(counter)) {\r\n                SessionCountersBase._throwIncrementCounterAfterDeleteAttempt(this._docId, counter);\r\n            }\r\n\r\n            countersBatchCommandData.counters.operations.push(counterOp);\r\n        } else {\r\n            this._session.defer(new CountersBatchCommandData(this._docId, counterOp));\r\n        }\r\n    }\r\n\r\n    public delete(counter: string): void {\r\n        if (StringUtil.isNullOrWhitespace(counter)) {\r\n            throwError(\"InvalidArgumentException\", \"Counter is required.\");\r\n        }\r\n\r\n        if (this._session.deferredCommandsMap.has(\r\n            IdTypeAndName.keyFor(this._docId, \"DELETE\", null))) {\r\n            return; // no-op\r\n        }\r\n\r\n        const documentInfo = this._session.documentsById.getValue(this._docId);\r\n        if (documentInfo && this._session.deletedEntities.contains(documentInfo.entity)) {\r\n            return;  //no-op\r\n        }\r\n\r\n        const counterOp = new CounterOperation();\r\n        counterOp.type = \"Delete\";\r\n        counterOp.counterName = counter;\r\n        const command = this._session.deferredCommandsMap.get(\r\n            IdTypeAndName.keyFor(this._docId, \"Counters\", null));\r\n        if (command) {\r\n            const countersBatchCommandData = command as CountersBatchCommandData;\r\n            if (countersBatchCommandData.hasIncrement(counter)) {\r\n                SessionCountersBase._throwDeleteCounterAfterIncrementAttempt(this._docId, counter);\r\n            }\r\n\r\n            countersBatchCommandData.counters.operations.push(counterOp);\r\n        } else {\r\n            this._session.defer(new CountersBatchCommandData(this._docId, counterOp));\r\n        }\r\n\r\n        const cache = this._session.countersByDocId.get(this._docId);\r\n        if (cache) {\r\n            cache.data.delete(counter);\r\n        }\r\n    }\r\n    \r\n    protected _throwEntityNotInSession(entity: object): void {\r\n        throwError(\r\n            \"InvalidArgumentException\",\r\n            `Entity is not associated with the session, cannot add counter to it. ` +\r\n            \"Use documentId instead of track the entity in the session\");\r\n    }\r\n\r\n    private static _throwIncrementCounterAfterDeleteAttempt(documentId: string, counter: string): void {\r\n        throwError(\r\n            \"InvalidOperationException\",\r\n            \"Can't increment counter \" + counter\r\n            + \" of document \" + documentId\r\n            + \", there is a deferred command registered to delete a counter with the same name.\");\r\n    }\r\n\r\n    private static _throwDeleteCounterAfterIncrementAttempt(documentId: string, counter: string): void {\r\n        throwError(\"InvalidOperationException\",\r\n            \"Can't delete counter \" + counter\r\n            + \" of document \" + documentId\r\n            + \", there is a deferred command registered to increment a counter with the same name.\");\r\n    }\r\n\r\n    private static _throwDocumentAlreadyDeletedInSession(documentId: string, counter: string): void {\r\n        throwError(\r\n            \"InvalidOperationException\",\r\n            \"Can't increment counter \" + counter\r\n            + \" of document \" + documentId\r\n            + \", the document was already deleted in this session.\");\r\n    }\r\n}\r\n"]}