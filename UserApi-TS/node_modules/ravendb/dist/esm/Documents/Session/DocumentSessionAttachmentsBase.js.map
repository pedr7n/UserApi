{"version":3,"file":"DocumentSessionAttachmentsBase.js","sourceRoot":"","sources":["../../../../src/Documents/Session/DocumentSessionAttachmentsBase.ts"],"names":[],"mappings":"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","sourcesContent":["import { AdvancedSessionExtensionBase } from \"./AdvancedSessionExtensionBase.js\";\r\nimport { AttachmentName, AttachmentData } from \"./../Attachments/index.js\";\r\nimport { CONSTANTS } from \"./../../Constants.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"./InMemoryDocumentSessionOperations.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { IdTypeAndName } from \"../IdTypeAndName.js\";\r\nimport { DocumentInfo } from \"./DocumentInfo.js\";\r\nimport { PutAttachmentCommandData } from \"../Commands/Batches/PutAttachmentCommandData.js\";\r\nimport { DeleteAttachmentCommandData } from \"../Commands/Batches/DeleteAttachmentCommandData.js\";\r\nimport { MoveAttachmentCommandData } from \"../Commands/Batches/MoveAttachmentCommandData.js\";\r\nimport { CopyAttachmentCommandData } from \"../Commands/Batches/CopyAttachmentCommandData.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\n\r\nexport abstract class DocumentSessionAttachmentsBase extends AdvancedSessionExtensionBase {\r\n    protected constructor(session: InMemoryDocumentSessionOperations) {\r\n        super(session);\r\n    }\r\n\r\n    public getNames(entity: object): AttachmentName[] {\r\n        if (!entity) {\r\n            return [];\r\n        }\r\n\r\n        if (TypeUtil.isString(entity)) {\r\n            throwError(\"InvalidArgumentException\", \"getNames requires a tracked entity object, other types such as documentId are not valid.\");\r\n        }\r\n\r\n        const document = this._session.documentsByEntity.get(entity);\r\n        if (!document) {\r\n            this._throwEntityNotInSession(entity);\r\n        }\r\n\r\n        const results = document.metadata[CONSTANTS.Documents.Metadata.ATTACHMENTS] as AttachmentName[];\r\n        return results || [];\r\n    }\r\n\r\n    public store(documentId: string, name: string, stream: AttachmentData): void;\r\n    public store(documentId: string, name: string, stream: AttachmentData, contentType: string): void;\r\n    public store(entity: object, name: string, stream: AttachmentData): void;\r\n    public store(entity: object, name: string, stream: AttachmentData, contentType: string): void;\r\n    public store(\r\n        documentIdOrEntity: string | object,\r\n        name: string,\r\n        stream: AttachmentData,\r\n        contentType: string = null): void {\r\n\r\n        if (typeof documentIdOrEntity === \"object\") {\r\n            return this._storeAttachmentByEntity(documentIdOrEntity, name, stream, contentType);\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(documentIdOrEntity)) {\r\n            throwError(\"InvalidArgumentException\", \"DocumentId cannot be null\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(name)) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null\");\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(IdTypeAndName.keyFor(documentIdOrEntity, \"DELETE\", null))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                documentIdOrEntity, name, \"store\", \"delete\");\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(IdTypeAndName.keyFor(documentIdOrEntity, \"AttachmentPUT\", name))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                documentIdOrEntity, name, \"store\", \"create\");\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(IdTypeAndName.keyFor(documentIdOrEntity, \"AttachmentDELETE\", name))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                documentIdOrEntity, name, \"store\", \"delete\");\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(IdTypeAndName.keyFor(documentIdOrEntity, \"AttachmentMOVE\", name))) {\r\n           DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n               documentIdOrEntity, name, \"store\", \"rename\");\r\n        }\r\n\r\n        const documentInfo: DocumentInfo = this._documentsById.getValue(documentIdOrEntity);\r\n        if (documentInfo && this._session.deletedEntities.contains(documentInfo.entity)) {\r\n            DocumentSessionAttachmentsBase._throwDocumentAlreadyDeleted(\r\n                documentIdOrEntity, name, \"store\", null, documentIdOrEntity);\r\n        }\r\n\r\n        this.defer(new PutAttachmentCommandData(documentIdOrEntity, name, stream, contentType, null));\r\n    }\r\n\r\n    private _storeAttachmentByEntity(\r\n        entity: object, name: string, stream: AttachmentData, contentType: string): void {\r\n        const document: DocumentInfo = this._session.documentsByEntity.get(entity);\r\n        if (!document) {\r\n            this._throwEntityNotInSessionOrMissingId(entity);\r\n        }\r\n\r\n        return this.store(document.id, name, stream, contentType);\r\n    }\r\n\r\n    protected _throwEntityNotInSessionOrMissingId(entity: object): never {\r\n        return throwError(\"InvalidArgumentException\",\r\n            entity\r\n            + \" is not associated with the session. Use documentId instead or track the entity in the session.\");\r\n    }\r\n\r\n    protected _throwEntityNotInSession(entity: object): never {\r\n        return throwError(\"InvalidArgumentException\",\r\n            entity\r\n            + \" is not associated with the session. You need to track the entity in the session\");\r\n    }\r\n\r\n    private _deleteAttachmentByEntity(entity: object, name: string): void {\r\n        const document: DocumentInfo = this._session.documentsByEntity.get(entity);\r\n        if (!document) {\r\n            this._throwEntityNotInSessionOrMissingId(entity);\r\n        }\r\n\r\n        return this.delete(document.id, name);\r\n    }\r\n\r\n    public delete(entity: object, name: string): void;\r\n    public delete(documentId: string, name: string): void;\r\n    public delete(entityOrId: string | object, name: string): void {\r\n        if (typeof entityOrId !== \"string\") {\r\n            return this._deleteAttachmentByEntity(entityOrId, name);\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(entityOrId)) {\r\n            throwError(\"InvalidArgumentException\", \"DocumentId cannot be null\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(name)) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null\");\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(IdTypeAndName.keyFor(entityOrId, \"DELETE\", null)) ||\r\n            this._deferredCommandsMap.has(IdTypeAndName.keyFor(entityOrId, \"AttachmentDELETE\", name))) {\r\n            return; // no-op\r\n        }\r\n\r\n        const documentInfo = this._documentsById.getValue(entityOrId);\r\n        if (documentInfo && this._session.deletedEntities.contains(documentInfo.entity)) {\r\n            return;  //no-op\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(IdTypeAndName.keyFor(entityOrId, \"AttachmentPUT\", name))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(entityOrId, name, \"delete\", \"create\");\r\n        }\r\n        \r\n        if (this._deferredCommandsMap.has(IdTypeAndName.keyFor(entityOrId, \"AttachmentMOVE\", name))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                entityOrId, name, \"delete\", \"rename\");\r\n        }\r\n\r\n        this.defer(new DeleteAttachmentCommandData(entityOrId, name, null));\r\n    }\r\n\r\n    public rename(documentId: string, name: string, newName: string): void;\r\n    public rename(entity: object, name: string, newName: string): void;\r\n    public rename(entityOrId: object | string, name: string, newName: string): void {\r\n        this.move(entityOrId as any, name, entityOrId as any, newName);\r\n    }\r\n\r\n    public move(\r\n        sourceEntity: object, \r\n        sourceName: string, \r\n        destinationEntity: object, \r\n        destinationName: string): void;\r\n    public move(\r\n        sourceDocumentId: string, \r\n        sourceName: string, \r\n        destinationDocumentId: string, \r\n        destinationName: string): void;\r\n    public move(\r\n        sourceEntityOrId: object | string, \r\n        sourceName: string, \r\n        destinationEntityOrId: object | string, \r\n        destinationName: string): void {\r\n            return typeof sourceEntityOrId === \"string\"\r\n                ? this._moveByEntityIds(\r\n                    sourceEntityOrId, sourceName, destinationEntityOrId as string, destinationName)\r\n                : this._moveByEntities(\r\n                    sourceEntityOrId as object, sourceName, destinationEntityOrId as object, destinationName);\r\n    }\r\n\r\n    private _moveByEntities(\r\n        sourceEntity: object, sourceName: string, destinationEntity: object, destinationName: string): void {\r\n        if (!sourceEntity) {\r\n            throwError(\"InvalidArgumentException\", \"SourceEntity cannot be null\");\r\n        }\r\n\r\n        if (!destinationEntity) {\r\n            throwError(\"InvalidArgumentException\", \"DestinationEntity cannot be null\");\r\n        }\r\n\r\n        const sourceDocument = this._session.documentsByEntity.get(sourceEntity);\r\n        if (!sourceDocument) {\r\n            this._throwEntityNotInSessionOrMissingId(sourceEntity);\r\n        }\r\n\r\n        const destinationDocument = this._session.documentsByEntity.get(destinationEntity);\r\n        if (!destinationDocument) {\r\n            this._throwEntityNotInSessionOrMissingId(destinationEntity);\r\n        }\r\n\r\n        this._moveByEntityIds(sourceDocument.id, sourceName, destinationDocument.id, destinationName);\r\n    }\r\n\r\n    private _moveByEntityIds(\r\n        sourceDocumentId: string, sourceName: string, destinationDocumentId: string, destinationName: string) {\r\n        if (StringUtil.isNullOrWhitespace(sourceDocumentId)) {\r\n            throwError(\"InvalidArgumentException\", \"SourceDocumentId is required.\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(sourceName)) {\r\n            throwError(\"InvalidArgumentException\", \"SourceName is required.\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(destinationDocumentId)) {\r\n            throwError(\"InvalidArgumentException\", \"DestinationDocumentId is required.\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(destinationName)) {\r\n            throwError(\"InvalidArgumentException\", \"DestinationName is required.\");\r\n        }\r\n        \r\n        if (StringUtil.equalsIgnoreCase(sourceDocumentId, destinationDocumentId)\r\n            && sourceName === destinationName) {\r\n            return; // no-op\r\n        }\r\n\r\n        const sourceDocument = this._documentsById.getValue(sourceDocumentId);\r\n        if (sourceDocument && this._session.deletedEntities.contains(sourceDocument.entity)) {\r\n            DocumentSessionAttachmentsBase._throwDocumentAlreadyDeleted(\r\n                sourceDocumentId, sourceName, \"move\", destinationDocumentId, sourceDocumentId);\r\n        }\r\n\r\n        const destinationDocument = this._documentsById.getValue(destinationDocumentId);\r\n        if (destinationDocument && this._session.deletedEntities.contains(destinationDocument.entity)) {\r\n            DocumentSessionAttachmentsBase._throwDocumentAlreadyDeleted(\r\n                sourceDocumentId, sourceName, \"move\", destinationDocumentId, destinationDocumentId);\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(\r\n            IdTypeAndName.keyFor(sourceDocumentId, \"AttachmentDELETE\", sourceName))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                sourceDocumentId, sourceName, \"rename\", \"delete\");\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(\r\n            IdTypeAndName.keyFor(sourceDocumentId, \"AttachmentMOVE\", sourceName))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                sourceDocumentId, sourceName, \"rename\", \"rename\");\r\n        }\r\n        \r\n        if (this._deferredCommandsMap.has(\r\n            IdTypeAndName.keyFor(destinationDocumentId, \"AttachmentDELETE\", destinationName))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                sourceDocumentId, destinationName, \"rename\", \"delete\");\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(\r\n            IdTypeAndName.keyFor(destinationDocumentId, \"AttachmentMOVE\", destinationName))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                sourceDocumentId, destinationName, \"rename\", \"rename\");\r\n        }\r\n\r\n        const cmdData = new MoveAttachmentCommandData(\r\n            sourceDocumentId, sourceName, destinationDocumentId, destinationName, null);\r\n        this.defer(cmdData);\r\n    }\r\n\r\n    public copy(\r\n        sourceEntity: object, \r\n        sourceName: string, \r\n        destinationEntity: object, \r\n        destinationName: string): void;\r\n    public copy(\r\n        sourceId: string, \r\n        sourceName: string, \r\n        destinationId: string, \r\n        destinationName: string): void;\r\n    public copy(\r\n        sourceEntityOrId: object | string, \r\n        sourceName: string, \r\n        destinationEntityOrId: object | string, \r\n        destinationName: string): void {\r\n            return typeof sourceEntityOrId === \"string\"\r\n                ? this._copyByEntityIds(\r\n                    sourceEntityOrId, sourceName, destinationEntityOrId as string, destinationName)\r\n                : this._copyByEntities(\r\n                    sourceEntityOrId as object, sourceName, destinationEntityOrId as object, destinationName);\r\n    }\r\n\r\n    private _copyByEntities(\r\n        sourceEntity: object, \r\n        sourceName: string, \r\n        destinationEntity: object, \r\n        destinationName: string): void {\r\n        if (!sourceEntity) {\r\n            throwError(\"InvalidArgumentException\", \"SourceEntity cannot be null\");\r\n        }\r\n\r\n        if (!destinationEntity) {\r\n            throwError(\"InvalidArgumentException\", \"DestinationEntity cannot be null\");\r\n        }\r\n\r\n        const sourceDocument = this._session.documentsByEntity.get(sourceEntity);\r\n        if (!sourceDocument) {\r\n            this._throwEntityNotInSessionOrMissingId(sourceEntity);\r\n        }\r\n\r\n        const destinationDocument = this._session.documentsByEntity.get(destinationEntity);\r\n        if (!destinationDocument) {\r\n            this._throwEntityNotInSessionOrMissingId(destinationEntity);\r\n        }\r\n        \r\n        this.copy(sourceDocument.id, sourceName, destinationDocument.id, destinationName);\r\n    }\r\n\r\n    private _copyByEntityIds(\r\n        sourceDocumentId: string, \r\n        sourceName: string, \r\n        destinationDocumentId: string, \r\n        destinationName: string): void {\r\n        if (StringUtil.isNullOrWhitespace(sourceDocumentId)) {\r\n            throwError(\"InvalidArgumentException\", \"SourceDocumentId is required.\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(sourceName)) {\r\n            throwError(\"InvalidArgumentException\", \"SourceName is required.\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(destinationDocumentId)) {\r\n            throwError(\"InvalidArgumentException\", \"DestinationDocumentId is required.\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(destinationName)) {\r\n            throwError(\"InvalidArgumentException\", \"DestinationName is required.\");\r\n        }\r\n\r\n        if (StringUtil.equalsIgnoreCase(sourceDocumentId, destinationDocumentId) \r\n            && sourceName === destinationName) {\r\n            return; // no-op\r\n        }\r\n\r\n        const sourceDocument = this._documentsById.getValue(sourceDocumentId);\r\n        if (sourceDocument && this._session.deletedEntities.contains(sourceDocument.entity)) {\r\n            DocumentSessionAttachmentsBase._throwDocumentAlreadyDeleted(\r\n                sourceDocumentId, sourceName, \"copy\", destinationDocumentId, sourceDocumentId);\r\n        }\r\n\r\n        const destinationDocument = this._documentsById.getValue(destinationDocumentId);\r\n        if (destinationDocument && this._session.deletedEntities.contains(destinationDocument.entity)) {\r\n            DocumentSessionAttachmentsBase._throwDocumentAlreadyDeleted(\r\n                sourceDocumentId, sourceName, \"copy\", destinationDocumentId, destinationDocumentId);\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(\r\n            IdTypeAndName.keyFor(sourceDocumentId, \"AttachmentDELETE\", sourceName))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                sourceDocumentId, sourceName, \"copy\", \"delete\");\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(\r\n            IdTypeAndName.keyFor(sourceDocumentId, \"AttachmentMOVE\", sourceName))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                sourceDocumentId, sourceName, \"copy\", \"rename\");\r\n        }\r\n        \r\n        if (this._deferredCommandsMap.has(\r\n            IdTypeAndName.keyFor(destinationDocumentId, \"AttachmentDELETE\", destinationName))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                sourceDocumentId, destinationName, \"copy\", \"delete\");\r\n        }\r\n\r\n        if (this._deferredCommandsMap.has(\r\n            IdTypeAndName.keyFor(destinationDocumentId, \"AttachmentMOVE\", destinationName))) {\r\n            DocumentSessionAttachmentsBase._throwOtherDeferredCommandException(\r\n                sourceDocumentId, destinationName, \"copy\", \"rename\");\r\n        }\r\n\r\n        const cmdData = new CopyAttachmentCommandData(\r\n            sourceDocumentId, sourceName, destinationDocumentId, destinationName, null);\r\n        this.defer(cmdData);\r\n    }\r\n\r\n    private static _throwDocumentAlreadyDeleted(\r\n        documentId: string, \r\n        name: string, \r\n        operation: string, \r\n        destinationDocumentId: string, \r\n        deletedDocumentId: string): void {\r\n        throwError(\"InvalidOperationException\", \r\n            \"Can't \" + operation + \" attachment '\" + name + \"' of document '\" + documentId + \"' \" +\r\n                (destinationDocumentId ? \" to '\" + destinationDocumentId + \"'\" : \"\") +\r\n                \", the document '\" + deletedDocumentId + \"' was already deleted in this session\");\r\n    }\r\n\r\n    private static _throwOtherDeferredCommandException(\r\n         documentId: string, \r\n         name: string, \r\n         operation: string, \r\n         previousOperation: string): void {\r\n        throwError(\"InvalidOperationException\",\r\n            \"Can't \" + operation + \" attachment '\" + name + \"' of document '\"\r\n            + documentId + \"', there is a deferred command registered to \" \r\n            + previousOperation + \" an attachment with '\" + name + \"' name.\");\r\n    }\r\n}\r\n"]}