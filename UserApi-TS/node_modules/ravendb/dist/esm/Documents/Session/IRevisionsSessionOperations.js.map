{"version":3,"file":"IRevisionsSessionOperations.js","sourceRoot":"","sources":["../../../../src/Documents/Session/IRevisionsSessionOperations.ts"],"names":[],"mappings":"","sourcesContent":["import { RevisionsCollectionObject } from \"../../Types/index.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { ForceRevisionStrategy } from \"./ForceRevisionStrategy.js\";\r\nimport { ILazyRevisionsOperations } from \"./ILazyRevisionsOperations.js\";\r\nimport { IMetadataDictionary } from \"./IMetadataDictionary.js\";\r\n\r\n/**\r\n * Revisions advanced session operations\r\n */\r\nexport interface IRevisionsSessionOperations {\r\n\r\n    /**\r\n     * Returns all previous document revisions for specified document\r\n     *  ordered by most recent revisions first.\r\n     */\r\n    getFor<TEntity extends object>(id: string): Promise<TEntity[]>;\r\n\r\n    /**\r\n     * Returns previous document revisions for specified document (with optional paging)\r\n     *  ordered by most recent revisions first.\r\n     */\r\n    getFor<TEntity extends object>(\r\n        id: string, options: SessionRevisionsOptions<TEntity>): Promise<TEntity[]>;\r\n\r\n    /**\r\n     * Returns metadata of all previous document revisions for specified document\r\n     *  ordered by most recent revisions first.\r\n     */\r\n    getMetadataFor(id: string): Promise<IMetadataDictionary[]>;\r\n\r\n    /**\r\n     * Returns metadata of previous document revisions for specified document (with optional paging)\r\n     *  ordered by most recent revisions first.\r\n     */\r\n    getMetadataFor(id: string, options: SessionRevisionsMetadataOptions): Promise<IMetadataDictionary[]>;\r\n\r\n    /**\r\n     * Returns a document revision by date.\r\n     */\r\n    get<TEntity extends object>(id: string, date: Date): Promise<TEntity>;\r\n\r\n    /**\r\n     * Returns a document revision by date.\r\n     */\r\n    get<TEntity extends object>(id: string, date: Date, documentType: DocumentType<TEntity>): Promise<TEntity>;\r\n\r\n    /**\r\n     * Returns a document revision by change vector.\r\n     */\r\n    get<TEntity extends object>(changeVector: string): Promise<TEntity>;\r\n\r\n    /**\r\n     * Returns a document revision by change vector.\r\n     */\r\n    get<TEntity extends object>(changeVector: string, documentType: DocumentType<TEntity>): Promise<TEntity>;\r\n\r\n    /**\r\n     * Returns a document revision by change vectors.\r\n     */\r\n    get<TEntity extends object>(changeVectors: string[]): Promise<RevisionsCollectionObject<TEntity>>;\r\n\r\n    /**\r\n     * Returns a document revision by change vectors.\r\n     */\r\n    get<TEntity extends object>(changeVectors: string[],\r\n                                documentType: DocumentType<TEntity>)\r\n        : Promise<RevisionsCollectionObject<TEntity>>;\r\n\r\n    /**\r\n     * Make the session create a revision for the specified entity.\r\n     * Can be used with tracked entities only.\r\n     * Revision will be created Even If:\r\n     *\r\n     * 1. Revisions configuration is Not set for the collection\r\n     * 2. Document was Not modified\r\n     */\r\n    forceRevisionCreationFor<T extends object>(entity: T): void;\r\n\r\n    /**\r\n     * Make the session create a revision for the specified entity.\r\n     * Can be used with tracked entities only.\r\n     * Revision will be created Even If:\r\n     *\r\n     * 1. Revisions configuration is Not set for the collection\r\n     * 2. Document was Not modified\r\n     */\r\n    forceRevisionCreationFor<T extends object>(entity: T, strategy: ForceRevisionStrategy): void;\r\n\r\n    /**\r\n     * Make the session create a revision for the specified document id.\r\n     * Revision will be created Even If:\r\n     *\r\n     * 1. Revisions configuration is Not set for the collection\r\n     * 2. Document was Not modified\r\n     * @param id Document id to use\r\n     */\r\n    forceRevisionCreationFor(id: string);\r\n\r\n    /**\r\n     * Make the session create a revision for the specified document id.\r\n     * Revision will be created Even If:\r\n     *\r\n     * 1. Revisions configuration is Not set for the collection\r\n     * 2. Document was Not modified\r\n     * @param id Document id to use\r\n     * @param strategy Strategy to use\r\n     */\r\n    forceRevisionCreationFor(id: string, strategy: ForceRevisionStrategy): void;\r\n\r\n\r\n    /**\r\n     * Returns the number of revisions for specified document.\r\n     * @param id Document id to use\r\n     */\r\n    getCountFor(id: string): Promise<number>;\r\n\r\n    /**\r\n     * Access the lazy revisions operations\r\n     */\r\n    lazily: ILazyRevisionsOperations;\r\n}\r\n\r\nexport interface SessionRevisionsOptions<T extends object> {\r\n    start?: number;\r\n    pageSize?: number;\r\n    documentType?: DocumentType<T>;\r\n}\r\n\r\nexport interface SessionRevisionsMetadataOptions {\r\n    start?: number;\r\n    pageSize?: number;\r\n}\r\n"]}