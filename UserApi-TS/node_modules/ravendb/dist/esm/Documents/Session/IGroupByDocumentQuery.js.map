{"version":3,"file":"IGroupByDocumentQuery.js","sourceRoot":"","sources":["../../../../src/Documents/Session/IGroupByDocumentQuery.ts"],"names":[],"mappings":"","sourcesContent":["import { GroupByField } from \"./GroupByField.js\";\r\nimport { IDocumentQuery } from \"./IDocumentQuery.js\";\r\nimport { IFilterFactory } from \"../Queries/IFilterFactory.js\";\r\n\r\nexport interface IGroupByDocumentQuery<T extends object> {\r\n\r\n    selectKey(): IGroupByDocumentQuery<T>;\r\n    selectKey(fieldName: string): IGroupByDocumentQuery<T>;\r\n    selectKey(fieldName: string, projectedName: string): IGroupByDocumentQuery<T>;\r\n\r\n    selectSum(field: GroupByField, ...fields: GroupByField[]): IDocumentQuery<T>;\r\n\r\n    selectCount(): IDocumentQuery<T>;\r\n    selectCount(projectedName: string): IDocumentQuery<T>;\r\n\r\n    filter(builder: (factory: IFilterFactory<T>) => void): IGroupByDocumentQuery<T>;\r\n    filter(builder: (factory: IFilterFactory<T>) => void, limit: number): IGroupByDocumentQuery<T>;\r\n}\r\n"]}