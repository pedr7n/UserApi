{"version":3,"file":"HashCalculator.js","sourceRoot":"","sources":["../../../../src/Documents/Queries/HashCalculator.ts"],"names":[],"mappings":"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","sourcesContent":["import { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { ITypesAwareObjectMapper } from \"../../Mapping/ObjectMapper.js\";\r\nimport { createHash } from \"node:crypto\";\r\nimport { Buffer } from \"node:buffer\";\r\n\r\nconst typeSignatures = {\r\n    bigint: Buffer.from([1]),\r\n    boolean: Buffer.from([2]),\r\n    function: Buffer.from([3]),\r\n    number: Buffer.from([4]),\r\n    object: Buffer.from([5]),\r\n    string: Buffer.from([6]),\r\n    symbol: Buffer.from([7]),\r\n    undefined: Buffer.from([8]),\r\n};\r\n\r\nexport class HashCalculator {\r\n\r\n    private _buffers: Buffer[] = [];\r\n\r\n    public getHash(): string {\r\n        const buffer= Buffer.concat(this._buffers);\r\n        return createHash(\"md5\").update(buffer).digest(\"hex\");\r\n    }\r\n\r\n    //TBD 4.1 public void Write(HighlightedField[] highlightedFields)\r\n\r\n    public write(o: any, mapper?: ITypesAwareObjectMapper) {\r\n        if (TypeUtil.isNullOrUndefined(o)) {\r\n            this._buffers.push(Buffer.from(\"null\"));\r\n            return;\r\n        }\r\n        \r\n        // Push a byte that identifies the type, to differentiate strings, numbers, and bools\r\n        this._buffers.push(typeSignatures[typeof o] || typeSignatures.undefined);\r\n\r\n        if (typeof o === \"number\") {\r\n            this._buffers.push(Buffer.from(String(o)));\r\n        } else if (typeof o === \"string\") {\r\n            this._buffers.push(Buffer.from(o));\r\n        } else if (typeof o === \"boolean\") {\r\n            this._buffers.push(Buffer.from(o ? [1] : [2]));\r\n        } else if (Array.isArray(o)) {\r\n            for (const item of o) {\r\n                this.write(item, mapper);\r\n            }\r\n            this.write(o.length);\r\n        } else if (typeof o === \"object\") {\r\n            for (const key of Object.keys(o)) {\r\n                this.write(\"key\");\r\n                this.write(key, mapper)\r\n                this.write(\"value\");\r\n                this.write(o[key], mapper);\r\n            }\r\n        } else {\r\n            this.write(mapper.toObjectLiteral(o), mapper);\r\n        }\r\n    }\r\n}\r\n"]}