{"version":3,"file":"SuggestionQueryBase.js","sourceRoot":"","sources":["../../../../../src/Documents/Queries/Suggestions/SuggestionQueryBase.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAE1D,OAAO,EAAE,YAAY,EAAE,MAAM,gCAAgC,CAAC;AAE9D,OAAO,EAAE,4BAA4B,EAAE,MAAM,+DAA+D,CAAC;AAC7G,OAAO,EAAE,cAAc,EAAE,MAAM,4CAA4C,CAAC;AAC5E,OAAO,EAAE,UAAU,EAAE,MAAM,gCAAgC,CAAC;AAO5D,MAAM,OAAgB,mBAAmB;IAEpB,QAAQ,CAAoC;IACrD,MAAM,CAAa;IACnB,SAAS,CAAY;IAE7B,YAAsB,OAA0C;QAC5D,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,OAAO;QAChB,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,aAAa,EAAE,CAAC;QAC3C,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC;QACtC,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAErD,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IAEO,eAAe,CAAC,WAAwB;QAC5C,IAAI,CAAC,yBAAyB,CAAC,WAAW,CAAC,CAAC;QAE5C,MAAM,OAAO,GAAG,EAA+B,CAAC;QAChD,KAAK,MAAM,MAAM,IAAI,WAAW,CAAC,OAAO,EAAE,CAAC;YAEvC,MAAM,iBAAiB,GAAG,UAAU,CAAC,mBAAmB,CAAC,MAAM,EAAE;gBAC7D,gBAAgB,EAAE,UAAU,CAAC,KAAK;aACrC,CAAqB,CAAC;YAEvB,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC;QACxD,CAAC;QAED,cAAc,CAAC,kBAAkB,CAAC,WAAW,EACzC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvE,OAAO,OAAO,CAAC;IACnB,CAAC;IAEM,WAAW;QACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAEpC,OAAQ,IAAI,CAAC,QAA4B,CAAC,gBAAgB,CACtD,IAAI,4BAA4B,CAC5B,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,MAAM,EACX,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,EAChD,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAC3C,CAAC,CAAC;IACX,CAAC;IAMO,WAAW;QACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAEpC,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE;YAChD,gBAAgB,EAAE,KAAK;YACvB,YAAY,EAAE,KAAK;SACtB,CAAC,CAAC;IACP,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;IACjD,CAAC;CAEJ","sourcesContent":["import { Stopwatch } from \"../../../Utility/Stopwatch.js\";\r\nimport { QueryResult } from \"../QueryResult.js\";\r\nimport { QueryCommand } from \"../../Commands/QueryCommand.js\";\r\nimport { Lazy } from \"../../Lazy.js\";\r\nimport { LazySuggestionQueryOperation } from \"../../Session/Operations/Lazy/LazySuggestionQueryOperation.js\";\r\nimport { QueryOperation } from \"../../Session/Operations/QueryOperation.js\";\r\nimport { ObjectUtil } from \"../../../Utility/ObjectUtil.js\";\r\nimport { SuggestionResult } from \"./SuggestionResult.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"../../Session/InMemoryDocumentSessionOperations.js\";\r\nimport { IndexQuery } from \"../IndexQuery.js\";\r\nimport { SuggestionsResponseObject } from \"../../../Types/index.js\";\r\nimport { DocumentSession } from \"../../Session/DocumentSession.js\";\r\n\r\nexport abstract class SuggestionQueryBase {\r\n\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n    private _query: IndexQuery;\r\n    private _duration: Stopwatch;\r\n\r\n    protected constructor(session: InMemoryDocumentSessionOperations) {\r\n        this._session = session;\r\n    }\r\n\r\n    public async execute(): Promise<SuggestionsResponseObject> {\r\n        const command = this._getCommand();\r\n\r\n        this._duration = Stopwatch.createStarted();\r\n        this._session.incrementRequestCount();\r\n        await this._session.requestExecutor.execute(command);\r\n\r\n        return this._processResults(command.result);\r\n    }\r\n\r\n    private _processResults(queryResult: QueryResult) {\r\n        this._invokeAfterQueryExecuted(queryResult);\r\n\r\n        const results = {} as SuggestionsResponseObject;\r\n        for (const result of queryResult.results) {\r\n\r\n            const transformedResult = ObjectUtil.transformObjectKeys(result, {\r\n                defaultTransform: ObjectUtil.camel\r\n            }) as SuggestionResult;\r\n\r\n            results[transformedResult.name] = transformedResult;\r\n        }\r\n\r\n        QueryOperation.ensureIsAcceptable(queryResult,\r\n            this._query.waitForNonStaleResults, this._duration, this._session);\r\n        return results;\r\n    }\r\n\r\n    public executeLazy(): Lazy<SuggestionsResponseObject> {\r\n        this._query = this._getIndexQuery();\r\n\r\n        return (this._session as DocumentSession).addLazyOperation(\r\n            new LazySuggestionQueryOperation(\r\n                this._session,\r\n                this._query,\r\n                result => this._invokeAfterQueryExecuted(result),\r\n                (result) => this._processResults(result)\r\n            ));\r\n    }\r\n\r\n    protected abstract _getIndexQuery(updateAfterQueryExecuted?: boolean): IndexQuery;\r\n\r\n    protected abstract _invokeAfterQueryExecuted(result: QueryResult): void;\r\n\r\n    private _getCommand(): QueryCommand {\r\n        this._query = this._getIndexQuery();\r\n\r\n        return new QueryCommand(this._session, this._query, {\r\n            indexEntriesOnly: false,\r\n            metadataOnly: false\r\n        });\r\n    }\r\n\r\n    public toString(): string {\r\n        return this._getIndexQuery(false).toString();\r\n    }\r\n\r\n}\r\n"]}