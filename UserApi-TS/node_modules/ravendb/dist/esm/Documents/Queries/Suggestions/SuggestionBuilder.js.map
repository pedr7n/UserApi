{"version":3,"file":"SuggestionBuilder.js","sourceRoot":"","sources":["../../../../../src/Documents/Queries/Suggestions/SuggestionBuilder.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAC7D,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAKxD,MAAM,OAAO,iBAAiB;IAElB,KAAK,CAAqB;IAC1B,MAAM,CAAsB;IAE7B,eAAe,CAAC,WAAmB;QACtC,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,WAAW,CAAC;QAC3C,OAAO,IAAI,CAAC;IAChB,CAAC;IAIM,OAAO,CAAC,SAAmB,EAAE,WAA8B;QAC9D,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,UAAU,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,UAAU,CAAC,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;YAChC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;gBACtB,UAAU,CAAC,0BAA0B,EAAE,qCAAqC,CAAC,CAAC;YAClF,CAAC;YAED,IAAI,CAAC,MAAM,GAAG,IAAI,mBAAmB,CAAC,SAAS,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC;QAEpC,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,KAAK,GAAG,IAAI,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAC/C,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,WAAW,CAAC;QAClC,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,WAAW,CAAC,OAA0B;QACzC,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;QAElC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,UAAU;QACjB,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,OAAO,IAAI,CAAC,KAAK,CAAC;QACtB,CAAC;QAED,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;CACJ","sourcesContent":["import { ISuggestionBuilder } from \"./ISuggestionBuilder.js\";\r\nimport { ISuggestionOperations } from \"./ISuggestionOperations.js\";\r\nimport { SuggestionWithTerm } from \"./SuggestionWithTerm.js\";\r\nimport { SuggestionWithTerms } from \"./SuggestionWithTerms.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { SuggestionOptions } from \"./SuggestionOptions.js\";\r\nimport { SuggestionBase } from \"./SuggestionBase.js\";\r\nimport { Field } from \"../../../Types/index.js\";\r\n\r\nexport class SuggestionBuilder<T> implements ISuggestionBuilder<T>, ISuggestionOperations<T> {\r\n\r\n    private _term: SuggestionWithTerm;\r\n    private _terms: SuggestionWithTerms;\r\n\r\n    public withDisplayName(displayName: string): ISuggestionOperations<T> {\r\n        this.suggestion.displayField = displayName;\r\n        return this;\r\n    }\r\n\r\n    public byField(fieldName: Field<T>, term: string): ISuggestionOperations<T>;\r\n    public byField(fieldName: Field<T>, terms: string[]): ISuggestionOperations<T>;\r\n    public byField(fieldName: Field<T>, termOrTerms: string | string[]): ISuggestionOperations<T> {\r\n        if (!fieldName) {\r\n            throwError(\"InvalidArgumentException\", \"fieldName cannot be null\");\r\n        }\r\n\r\n        if (!termOrTerms) {\r\n            throwError(\"InvalidArgumentException\", \"term cannot be null\");\r\n        }\r\n\r\n        if (TypeUtil.isArray(termOrTerms)) {\r\n            if (!termOrTerms.length) {\r\n                throwError(\"InvalidArgumentException\", \"Terms cannot be an empty collection\");\r\n            }\r\n\r\n            this._terms = new SuggestionWithTerms(fieldName);\r\n            this._terms.terms = termOrTerms;\r\n\r\n        } else {\r\n            this._term = new SuggestionWithTerm(fieldName);\r\n            this._term.term = termOrTerms;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public withOptions(options: SuggestionOptions): ISuggestionOperations<T> {\r\n        this.suggestion.options = options;\r\n\r\n        return this;\r\n    }\r\n\r\n    public get suggestion(): SuggestionBase {\r\n        if (this._term) {\r\n            return this._term;\r\n        }\r\n\r\n        return this._terms;\r\n    }\r\n}\r\n"]}