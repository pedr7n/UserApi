{"version":3,"file":"SuggestionDocumentQuery.js","sourceRoot":"","sources":["../../../../../src/Documents/Queries/Suggestions/SuggestionDocumentQuery.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAK/D,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AAErD,OAAO,EAAE,iBAAiB,EAAE,MAAM,wBAAwB,CAAC;AAE3D,MAAM,OAAO,uBACT,SAAQ,mBAAmB;IAEV,OAAO,CAAmB;IAE3C,YAAmB,MAAwB;QACvC,KAAK,CAAC,MAAM,CAAC,OAAmD,CAAC,CAAC;QAElE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAES,cAAc,CAAC,2BAAoC,IAAI;QAC7D,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;IACxC,CAAC;IAES,yBAAyB,CAAC,MAAmB;QACnD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC;IAID,eAAe,CAAC,mBAA0E;QACtF,IAAI,mBAAmB,YAAY,cAAc,EAAE,CAAC;YAChD,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QACpD,CAAC;aAAM,CAAC;YACJ,MAAM,CAAC,GAAG,IAAI,iBAAiB,EAAE,CAAC;YAClC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;QAC5C,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;CAGJ","sourcesContent":["import { ISuggestionDocumentQuery } from \"./ISuggestionDocumentQuery.js\";\r\nimport { SuggestionQueryBase } from \"./SuggestionQueryBase.js\";\r\nimport { QueryResult } from \"../QueryResult.js\";\r\nimport { DocumentQuery } from \"../../Session/DocumentQuery.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"../../Session/InMemoryDocumentSessionOperations.js\";\r\nimport { IndexQuery } from \"../IndexQuery.js\";\r\nimport { SuggestionBase } from \"./SuggestionBase.js\";\r\nimport { ISuggestionBuilder } from \"./ISuggestionBuilder.js\";\r\nimport { SuggestionBuilder } from \"./SuggestionBuilder.js\";\r\n\r\nexport class SuggestionDocumentQuery<T extends object>\r\n    extends SuggestionQueryBase implements ISuggestionDocumentQuery<T> {\r\n\r\n    private readonly _source: DocumentQuery<T>;\r\n\r\n    public constructor(source: DocumentQuery<T>) {\r\n        super(source.session as any as InMemoryDocumentSessionOperations);\r\n\r\n        this._source = source;\r\n    }\r\n\r\n    protected _getIndexQuery(updateAfterQueryExecuted: boolean = true): IndexQuery {\r\n        return this._source.getIndexQuery();\r\n    }\r\n\r\n    protected _invokeAfterQueryExecuted(result: QueryResult) {\r\n        this._source.emit(\"afterQueryExecuted\", result);\r\n    }\r\n\r\n    andSuggestUsing(suggestion: SuggestionBase): ISuggestionDocumentQuery<T>;\r\n    andSuggestUsing(builder: (b: ISuggestionBuilder<T>) => void): ISuggestionDocumentQuery<T>;\r\n    andSuggestUsing(suggestionOrBuilder: SuggestionBase | ((b: ISuggestionBuilder<T>) => void)): ISuggestionDocumentQuery<T> {\r\n        if (suggestionOrBuilder instanceof SuggestionBase) {\r\n            this._source._suggestUsing(suggestionOrBuilder);\r\n        } else {\r\n            const f = new SuggestionBuilder();\r\n            suggestionOrBuilder(f);\r\n            this._source.suggestUsing(f.suggestion);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n}\r\n"]}