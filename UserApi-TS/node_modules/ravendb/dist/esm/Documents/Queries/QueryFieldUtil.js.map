{"version":3,"file":"QueryFieldUtil.js","sourceRoot":"","sources":["../../../../src/Documents/Queries/QueryFieldUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { CONSTANTS } from \"../../Constants.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\n\r\nexport class QueryFieldUtil {\r\n\r\n    private static _shouldEscape(s: string, isPath = false): boolean {\r\n        let escape = false;\r\n        let insideEscaped = false;\r\n\r\n        for (let i = 0; i < s.length; i++) {\r\n            const c = s.charAt(i);\r\n\r\n            if (c === \"'\" || c === \"\\\"\") {\r\n                insideEscaped = !insideEscaped;\r\n                continue;\r\n            }\r\n\r\n            if (i === 0) {\r\n                if (!StringUtil.isLetter(c) && c !== \"_\" && c !== \"@\" && !insideEscaped) {\r\n                    escape = true;\r\n                    break;\r\n                }\r\n            } else {\r\n                if (!StringUtil.isLetterOrDigit(c) && c !== \"_\" && c !== \"-\" && c !== \"@\" && c !== \".\" && c !== \"[\" && c !== \"]\" && !insideEscaped) {\r\n                    escape = true;\r\n                    break;\r\n                }\r\n                if (isPath && c === \".\" && !insideEscaped) {\r\n                    escape = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        escape = escape || insideEscaped;\r\n        return escape;\r\n    }\r\n\r\n    public static escapeIfNecessary(name: string, isPath: boolean = false): string {\r\n        //TODO: write / make sure we have test for this logic\r\n        if (!name ||\r\n            CONSTANTS.Documents.Indexing.Fields.DOCUMENT_ID_FIELD_NAME === name ||\r\n            CONSTANTS.Documents.Indexing.Fields.REDUCE_KEY_HASH_FIELD_NAME === name ||\r\n            CONSTANTS.Documents.Indexing.Fields.REDUCE_KEY_KEY_VALUE_FIELD_NAME === name ||\r\n            CONSTANTS.Documents.Indexing.Fields.SPATIAL_SHAPE_FIELD_NAME === name) {\r\n            return name;\r\n        }\r\n\r\n        if (!QueryFieldUtil._shouldEscape(name, isPath)) {\r\n            return name;\r\n        }\r\n\r\n        let sb = name;\r\n\r\n        let needEndQuote = false;\r\n        let lastTermStart = 0;\r\n\r\n        for (let i = 0; i < sb.length; i++) {\r\n            const c = sb.charAt(i);\r\n            if (i === 0 && !StringUtil.isLetter(c) && c !== \"_\" && c !== \"@\") {\r\n                sb = StringUtil.splice(sb, lastTermStart, 0, \"'\");\r\n                needEndQuote = true;\r\n                continue;\r\n            }\r\n\r\n            if (isPath && c === \".\") {\r\n                if (needEndQuote) {\r\n                    needEndQuote = false;\r\n                    sb = StringUtil.splice(sb, i, 0, \"'\");\r\n                    i++;\r\n                }\r\n\r\n                lastTermStart = i + 1;\r\n                continue;\r\n            }\r\n\r\n            if (!StringUtil.isLetterOrDigit(c) && c !== \"_\" && c !== \"-\" && c !== \"@\" && c !== \".\" && c !== \"[\" && c !== \"]\" && !needEndQuote) {\r\n                sb = StringUtil.splice(sb, 0, lastTermStart, \"'\");\r\n                needEndQuote = true;\r\n                continue;\r\n            }\r\n        }\r\n\r\n        if (needEndQuote) {\r\n            sb += \"'\";\r\n        }\r\n\r\n        return sb;\r\n    }\r\n}\r\n"]}