{"version":3,"file":"FacetBuilder.js","sourceRoot":"","sources":["../../../../../src/Documents/Queries/Facets/FacetBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { IFacetBuilder } from \"./IFacetBuilder.js\";\r\nimport { IFacetOperations } from \"./IFacetOperations.js\";\r\nimport { GenericRangeFacet } from \"./GenericRangeFacet.js\";\r\nimport { Facet } from \"./Facet.js\";\r\nimport { RangeBuilder } from \"./RangeBuilder.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { FacetOptions } from \"./index.js\";\r\nimport { FacetBase } from \"./FacetBase.js\";\r\nimport { FacetAggregationField } from \"./FacetAggregationField.js\";\r\nimport { Field } from \"../../../Types/index.js\";\r\n\r\nexport class FacetBuilder<T> implements IFacetBuilder<T>, IFacetOperations<T> {\r\n    private _range: GenericRangeFacet;\r\n    private _default: Facet;\r\n\r\n    private static _rqlKeywords: Set<string> = new Set([\r\n        \"as\",\r\n        \"select\",\r\n        \"where\",\r\n        \"load\",\r\n        \"group\",\r\n        \"order\",\r\n        \"include\",\r\n        \"update\"\r\n    ]);\r\n\r\n    public byRanges(range: RangeBuilder, ...ranges: RangeBuilder[]): IFacetOperations<T> {\r\n        if (!range) {\r\n            throwError(\"InvalidArgumentException\", \"Range cannot be null\");\r\n        }\r\n\r\n        if (!this._range) {\r\n            this._range = new GenericRangeFacet();\r\n        }\r\n\r\n        this._range.ranges.push(range);\r\n        if (ranges) {\r\n            this._range.ranges.push(...ranges);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public byField(fieldName: Field<T>): IFacetOperations<T> {\r\n        if (!this._default) {\r\n            this._default = new Facet();\r\n        }\r\n\r\n        if (FacetBuilder._rqlKeywords.has(fieldName)) {\r\n            fieldName = `'${fieldName}'`;\r\n        }\r\n\r\n        this._default.fieldName = fieldName;\r\n        return this;\r\n    }\r\n\r\n    public allResults(): IFacetOperations<T> {\r\n        if (!this._default) {\r\n            this._default = new Facet();\r\n        }\r\n\r\n        this._default.fieldName = null;\r\n        return this;\r\n    }\r\n\r\n    public withOptions(options: FacetOptions): IFacetOperations<T> {\r\n        const facet = this.getFacet();\r\n        if (facet instanceof Facet) {\r\n            facet.options = options;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public withDisplayName(displayName: string): IFacetOperations<T> {\r\n        this.getFacet().displayFieldName = displayName;\r\n        return this;\r\n    }\r\n\r\n    public sumOn(path: string): IFacetOperations<T>\r\n    public sumOn(path: string, displayName: string): IFacetOperations<T>\r\n    public sumOn(path: string, displayName?: string): IFacetOperations<T> {\r\n        const aggregationsMap = this.getFacet().aggregations;\r\n        if (!aggregationsMap.has(\"Sum\")) {\r\n            aggregationsMap.set(\"Sum\", new Set<FacetAggregationField>());\r\n        }\r\n\r\n        const aggregations = aggregationsMap.get(\"Sum\");\r\n\r\n        const aggregationField = new FacetAggregationField();\r\n        aggregationField.name = path;\r\n        aggregationField.displayName = displayName;\r\n\r\n        aggregations.add(aggregationField);\r\n\r\n        return this;\r\n    }\r\n\r\n    public minOn(path: string): IFacetOperations<T>;\r\n    public minOn(path: string, displayName: string): IFacetOperations<T>;\r\n    public minOn(path: string, displayName?: string): IFacetOperations<T> {\r\n        const aggregationsMap = this.getFacet().aggregations;\r\n        if (!aggregationsMap.has(\"Min\")) {\r\n            aggregationsMap.set(\"Min\", new Set<FacetAggregationField>());\r\n        }\r\n\r\n        const aggregations = aggregationsMap.get(\"Min\");\r\n\r\n        const aggregationField = new FacetAggregationField();\r\n        aggregationField.name = path;\r\n        aggregationField.displayName = displayName;\r\n\r\n        aggregations.add(aggregationField);\r\n\r\n        return this;\r\n    }\r\n\r\n    public maxOn(path: string): IFacetOperations<T>\r\n    public maxOn(path: string, displayName: string): IFacetOperations<T>\r\n    public maxOn(path: string, displayName?: string): IFacetOperations<T> {\r\n        const aggregationsMap = this.getFacet().aggregations;\r\n        if (!aggregationsMap.has(\"Max\")) {\r\n            aggregationsMap.set(\"Max\", new Set<FacetAggregationField>());\r\n        }\r\n\r\n        const aggregations = aggregationsMap.get(\"Max\");\r\n\r\n        const aggregationField = new FacetAggregationField();\r\n        aggregationField.name = path;\r\n        aggregationField.displayName = displayName;\r\n\r\n        aggregations.add(aggregationField);\r\n\r\n        return this;\r\n    }\r\n\r\n    public averageOn(path: string): IFacetOperations<T>\r\n    public averageOn(path: string, displayName: string): IFacetOperations<T>\r\n    public averageOn(path: string, displayName?: string): IFacetOperations<T> {\r\n        const aggregationsMap = this.getFacet().aggregations;\r\n        if (!aggregationsMap.has(\"Average\")) {\r\n            aggregationsMap.set(\"Average\", new Set<FacetAggregationField>());\r\n        }\r\n\r\n        const aggregations = aggregationsMap.get(\"Average\");\r\n\r\n        const aggregationField = new FacetAggregationField();\r\n        aggregationField.name = path;\r\n        aggregationField.displayName = displayName;\r\n\r\n        aggregations.add(aggregationField);\r\n\r\n        return this;\r\n    }\r\n\r\n    public getFacet(): FacetBase {\r\n        if (this._default) {\r\n            return this._default;\r\n        }\r\n\r\n        return this._range;\r\n    }\r\n}\r\n"]}