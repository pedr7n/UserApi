{"version":3,"file":"AggregationQueryBase.js","sourceRoot":"","sources":["../../../../../src/Documents/Queries/Facets/AggregationQueryBase.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAC1D,OAAO,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AAEzC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qCAAqC,CAAC;AAExE,OAAO,EAAE,cAAc,EAAE,MAAM,4CAA4C,CAAC;AAG5E,OAAO,EAAE,6BAA6B,EAAE,MAAM,gEAAgE,CAAC;AAM/G,MAAM,OAAgB,oBAAoB;IAErB,QAAQ,CAAoC;IACrD,MAAM,CAAa;IACnB,SAAS,CAAY;IAE7B,YAAsB,OAA0C;QAC5D,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,OAAO;QAChB,MAAM,OAAO,GAAiB,IAAI,CAAC,WAAW,EAAE,CAAC;QAEjD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,aAAa,EAAE,CAAC;QAC3C,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC;QACtC,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAErD,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IAEM,WAAW;QACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACpC,OAAQ,IAAI,CAAC,QAA4B;aACpC,gBAAgB,CACb,IAAI,6BAA6B,CAC7B,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,MAAM,EACX,IAAI,EACJ,CAAC,WAAwB,EAAE,EAAE,CACzB,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IAMO,eAAe,CAAC,WAAwB;QAC5C,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;QAC7C,MAAM,OAAO,GAAsB,EAAE,CAAC;QACtC,KAAK,MAAM,MAAM,IAAI,WAAW,CAAC,OAAO,EAAE,CAAC;YACvC,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,WAAW,EAAE,EAAE,MAAM,CAAC,CAAC;YAC7D,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC;QAC5C,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAErD,cAAc,CAAC,kBAAkB,CAC7B,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEpF,OAAO,OAAO,CAAC;IACnB,CAAC;IAEO,WAAW;QACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACpC,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE;YACrD,YAAY,EAAE,KAAK;YACnB,gBAAgB,EAAE,KAAK;SAC1B,CAAC,CAAC;IACP,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;IACjD,CAAC;CACJ","sourcesContent":["import { InMemoryDocumentSessionOperations } from \"../../Session/InMemoryDocumentSessionOperations.js\";\r\nimport { IndexQuery } from \"../IndexQuery.js\";\r\nimport { Stopwatch } from \"../../../Utility/Stopwatch.js\";\r\nimport { FacetResult } from \"./index.js\";\r\nimport { QueryCommand } from \"../../Commands/QueryCommand.js\";\r\nimport { FacetQueryCommand } from \"../../Commands/FacetQueryCommand.js\";\r\nimport { QueryResult } from \"../QueryResult.js\";\r\nimport { QueryOperation } from \"../../Session/Operations/QueryOperation.js\";\r\nimport { Lazy } from \"../../Lazy.js\";\r\nimport { DocumentSession } from \"../../Session/DocumentSession.js\";\r\nimport { LazyAggregationQueryOperation } from \"../../Session/Operations/Lazy/LazyAggregationQueryOperation.js\";\r\n\r\nexport interface FacetResultObject {\r\n    [key: string]: FacetResult;\r\n}\r\n\r\nexport abstract class AggregationQueryBase {\r\n\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n    private _query: IndexQuery;\r\n    private _duration: Stopwatch;\r\n\r\n    protected constructor(session: InMemoryDocumentSessionOperations) {\r\n        this._session = session;\r\n    }\r\n\r\n    public async execute(): Promise<FacetResultObject> {\r\n        const command: QueryCommand = this._getCommand();\r\n\r\n        this._duration = Stopwatch.createStarted();\r\n        this._session.incrementRequestCount();\r\n        await this._session.requestExecutor.execute(command);\r\n\r\n        return this._processResults(command.result);\r\n    }\r\n\r\n    public executeLazy(): Lazy<FacetResultObject> {\r\n        this._query = this._getIndexQuery();\r\n        return (this._session as DocumentSession)\r\n            .addLazyOperation(\r\n                new LazyAggregationQueryOperation(\r\n                    this._session,\r\n                    this._query,\r\n                    this,\r\n                    (queryResult: QueryResult) =>\r\n                        this._processResults(queryResult)));\r\n    }\r\n\r\n    protected abstract _getIndexQuery(updateAfterQueryExecuted?: boolean): IndexQuery;\r\n\r\n    public abstract emit(evtName: \"afterQueryExecuted\", queryResult: QueryResult);\r\n\r\n    private _processResults(queryResult: QueryResult): FacetResultObject {\r\n        this.emit(\"afterQueryExecuted\", queryResult);\r\n        const results: FacetResultObject = {};\r\n        for (const result of queryResult.results) {\r\n            const facetResult = Object.assign(new FacetResult(), result);\r\n            results[facetResult.name] = facetResult;\r\n        }\r\n\r\n        this._session.registerIncludes(queryResult.includes);\r\n\r\n        QueryOperation.ensureIsAcceptable(\r\n            queryResult, this._query.waitForNonStaleResults, this._duration, this._session);\r\n\r\n        return results;\r\n    }\r\n\r\n    private _getCommand(): QueryCommand {\r\n        this._query = this._getIndexQuery();\r\n        return new FacetQueryCommand(this._session, this._query, {\r\n            metadataOnly: false,\r\n            indexEntriesOnly: false\r\n        });\r\n    }\r\n\r\n    public toString(): string {\r\n        return this._getIndexQuery(false).toString();\r\n    }\r\n}\r\n"]}