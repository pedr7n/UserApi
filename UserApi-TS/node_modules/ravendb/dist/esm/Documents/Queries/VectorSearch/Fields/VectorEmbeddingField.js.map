{"version":3,"file":"VectorEmbeddingField.js","sourceRoot":"","sources":["../../../../../../src/Documents/Queries/VectorSearch/Fields/VectorEmbeddingField.ts"],"names":[],"mappings":"AAIA,MAAM,OAAO,oBAAoB;IAGtB,SAAS,CAAS;IAClB,sBAAsB,CAAsB;IAC5C,2BAA2B,CAAsB;IACjD,eAAe,CAAU;IACzB,kCAAkC,GAAW,EAAE,CAAC;IAEvD,YAAY,SAAmB,EACnB,yBAA8C,QAAQ,EACtD,kBAA2B,KAAK;QACxC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;QACrD,IAAI,CAAC,2BAA2B,GAAG,sBAAsB,CAAC;QAC1D,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC3C,CAAC;IAGM,kBAAkB,CAAC,2BAAgD;QACtE,IAAI,2BAA2B,KAAK,MAAM,EAAE,CAAC;YACzC,MAAM,IAAI,KAAK,CAAC,kGAAkG,CAAC,CAAC;QACxH,CAAC;QAED,IAAI,CAAC,2BAA2B,GAAG,2BAA2B,CAAC;QAE/D,IAAI,CAAC,IAAI,CAAC,sBAAsB,KAAK,MAAM;YACtC,IAAI,CAAC,sBAAsB,KAAK,QAAQ,CAAC;YACzC,IAAI,CAAC,2BAA2B,KAAK,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACpE,MAAM,IAAI,KAAK,CAAC,+EAA+E,IAAI,CAAC,sBAAsB,gCAAgC,IAAI,CAAC,2BAA2B,GAAG,CAAC,CAAC;QACnM,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { IVectorEmbeddingField, IVectorEmbeddingFieldFactoryAccessor } from \"../../../Session/VectorFieldFactory.js\";\r\nimport {VectorEmbeddingType} from \"../VectorEmbeddingType.js\";\r\nimport { Field } from \"../../../../Types/index.js\";\r\n\r\nexport class VectorEmbeddingField<T> implements\r\n    IVectorEmbeddingField, \r\n    IVectorEmbeddingFieldFactoryAccessor<T> {\r\n    public fieldName: string;\r\n    public sourceQuantizationType: VectorEmbeddingType;\r\n    public destinationQuantizationType: VectorEmbeddingType;\r\n    public isBase64Encoded: boolean;\r\n    public embeddingsGenerationTaskIdentifier: string = \"\";\r\n\r\n    constructor(fieldName: Field<T>,\r\n                sourceQuantizationType: VectorEmbeddingType = \"Single\",\r\n                isBase64Encoded: boolean = false) {\r\n        this.fieldName = fieldName;\r\n        this.sourceQuantizationType = sourceQuantizationType;\r\n        this.destinationQuantizationType = sourceQuantizationType;\r\n        this.isBase64Encoded = isBase64Encoded;\r\n    }\r\n\r\n\r\n    public targetQuantization(targetEmbeddingQuantization: VectorEmbeddingType): IVectorEmbeddingField {\r\n        if (targetEmbeddingQuantization === \"Text\") {\r\n            throw new Error(\"Cannot quantize the embedding to Text. This option is only available for sourceQuantizationType.\");\r\n        }\r\n\r\n        this.destinationQuantizationType = targetEmbeddingQuantization;\r\n\r\n        if ((this.sourceQuantizationType === \"Int8\" ||\r\n             this.sourceQuantizationType === \"Binary\") &&\r\n             this.destinationQuantizationType !== this.sourceQuantizationType) {\r\n            throw new Error(`Cannot quantize already quantized embeddings. Source VectorEmbeddingType is ${this.sourceQuantizationType}; however the destination is ${this.destinationQuantizationType}.`);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n"]}