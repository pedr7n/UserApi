{"version":3,"file":"IndexQuery.js","sourceRoot":"","sources":["../../../../src/Documents/Queries/IndexQuery.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AACzE,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AAErD,OAAO,EAAE,cAAc,EAAE,MAAM,kCAAkC,CAAC;AAQlE,MAAM,OAAO,UAAW,SAAQ,wBAA8C;IAI1E,YAAmB,KAAc;QAC7B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED;;;OAGG;IACI,cAAc,CAAU;IAExB,YAAY,CAAC,MAA+B;QAC/C,MAAM,MAAM,GAAG,IAAI,cAAc,EAAE,CAAC;QACpC,IAAI,CAAC;YACD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACzC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,6BAA6B,IAAI,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;YAC3C,OAAO,MAAM,CAAC,OAAO,EAAE,CAAC;QAC5B,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,UAAU,CAAC,gBAAgB,EAAE,0BAA0B,EAAE,GAAG,CAAC,CAAC;QAClE,CAAC;IACL,CAAC;CACJ;AAED,MAAM,UAAU,eAAe,CAAC,WAAgC,EAAE,UAAsB;IACpF,MAAM,MAAM,GAAG;QACX,KAAK,EAAE,UAAU,CAAC,KAAK;KACE,CAAC;IAE9B,IAAI,UAAU,CAAC,sBAAsB,EAAE,CAAC;QACpC,MAAM,CAAC,sBAAsB,GAAG,UAAU,CAAC,sBAAsB,CAAC;IACtE,CAAC;IAED,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC,6BAA6B,CAAC,EAAE,CAAC;QACxE,MAAM,CAAC,6BAA6B,GAAG,UAAU,CAAC,6BAA6B,CAAC;IACpF,CAAC;IAED,IAAI,UAAU,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,CAAC,cAAc,GAAG,UAAU,CAAC,cAAc,CAAC;IACtD,CAAC;IAED,IAAI,UAAU,CAAC,qBAAqB,EAAE,CAAC;QACnC,MAAM,CAAC,qBAAqB,GAAG,UAAU,CAAC,qBAAqB,CAAC;IACpE,CAAC;IAED,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;QAC9B,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC;IAClC,CAAC;SAAM,CAAC;QACJ,MAAM,CAAC,eAAe,GAAG,UAAU,CAAC,eAAe,CAAC;IACxD,CAAC;IAED,IAAI,UAAU,CAAC,kBAAkB,IAAI,UAAU,CAAC,kBAAkB,KAAK,SAAS,EAAE,CAAC;QAC/E,MAAM,CAAC,kBAAkB,GAAG,UAAU,CAAC,kBAAkB,CAAC;IAC9D,CAAC;IAED,OAAO,cAAc,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AACzD,CAAC","sourcesContent":["import { throwError } from \"../../Exceptions/index.js\";\r\nimport { IndexQueryWithParameters } from \"./IndexQueryWithParameters.js\";\r\nimport { HashCalculator } from \"./HashCalculator.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { JsonSerializer } from \"../../Mapping/Json/Serializer.js\";\r\nimport { ITypesAwareObjectMapper } from \"../../Mapping/ObjectMapper.js\";\r\nimport { ServerCasing } from \"../../Types/index.js\";\r\n\r\nexport interface IndexQueryParameters {\r\n    [key: string]: object;\r\n}\r\n\r\nexport class IndexQuery extends IndexQueryWithParameters<IndexQueryParameters> {\r\n\r\n    public constructor();\r\n    public constructor(query?: string);\r\n    public constructor(query?: string) {\r\n        super();\r\n        this.query = query;\r\n    }\r\n\r\n    /**\r\n     * Indicates if query results should be read from cache (if cached previously)\r\n     * or added to cache (if there were no cached items prior)\r\n     */\r\n    public disableCaching: boolean;\r\n\r\n    public getQueryHash(mapper: ITypesAwareObjectMapper): string {\r\n        const hasher = new HashCalculator();\r\n        try {\r\n            hasher.write(this.query, mapper);\r\n            hasher.write(this.waitForNonStaleResults);\r\n            hasher.write(this.skipDuplicateChecking);\r\n            hasher.write(this.skipStatistics);\r\n            hasher.write(this.waitForNonStaleResultsTimeout || 0);\r\n            hasher.write(this.queryParameters, mapper);\r\n            return hasher.getHash();\r\n        } catch (err) {\r\n            throwError(\"RavenException\", \"Unable to calculate hash\", err);\r\n        }\r\n    }\r\n}\r\n\r\nexport function writeIndexQuery(conventions: DocumentConventions, indexQuery: IndexQuery): string {\r\n    const result = {\r\n        Query: indexQuery.query\r\n    } as ServerCasing<IndexQuery>;\r\n\r\n    if (indexQuery.waitForNonStaleResults) {\r\n        result.WaitForNonStaleResults = indexQuery.waitForNonStaleResults;\r\n    }\r\n\r\n    if (!TypeUtil.isNullOrUndefined(indexQuery.waitForNonStaleResultsTimeout)) {\r\n        result.WaitForNonStaleResultsTimeout = indexQuery.waitForNonStaleResultsTimeout;\r\n    }\r\n\r\n    if (indexQuery.disableCaching) {\r\n        result.DisableCaching = indexQuery.disableCaching;\r\n    }\r\n\r\n    if (indexQuery.skipDuplicateChecking) {\r\n        result.SkipDuplicateChecking = indexQuery.skipDuplicateChecking;\r\n    }\r\n\r\n    if (!indexQuery.queryParameters) {\r\n        result.QueryParameters = null;\r\n    } else {\r\n        result.QueryParameters = indexQuery.queryParameters;\r\n    }\r\n\r\n    if (indexQuery.projectionBehavior && indexQuery.projectionBehavior !== \"Default\") {\r\n        result.ProjectionBehavior = indexQuery.projectionBehavior;\r\n    }\r\n\r\n    return JsonSerializer.getDefault().serialize(result);\r\n}\r\n"]}