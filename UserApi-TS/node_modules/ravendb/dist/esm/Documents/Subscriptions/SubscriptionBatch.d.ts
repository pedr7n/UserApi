import { IDocumentStore } from "../IDocumentStore.js";
import { SubscriptionBatchBase } from "./SubscriptionBatchBase.js";
import { IDocumentSession } from "../Session/IDocumentSession.js";
import { SessionOptions } from "../Session/SessionOptions.js";
import { DocumentType } from "../DocumentAbstractions.js";
import { RequestExecutor } from "../../Http/RequestExecutor.js";
import { BatchFromServer } from "./BatchFromServer.js";
export declare class SubscriptionBatch<T extends object> extends SubscriptionBatchBase<T> {
    private readonly _store;
    private readonly _generateEntityIdOnTheClient;
    private _sessionOpened;
    constructor(documentType: DocumentType, revisions: boolean, requestExecutor: RequestExecutor, store: IDocumentStore, dbName: string);
    initialize(batch: BatchFromServer): void;
    openSession(): IDocumentSession;
    openSession(options: SessionOptions): IDocumentSession;
    private _openSessionInternal;
    private throwSessionCanBeOpenedOnlyOnce;
    private static _validateSessionOptions;
    private _loadDataToSession;
    protected ensureDocumentId(item: T, id: string): void;
}
//# sourceMappingURL=SubscriptionBatch.d.ts.map