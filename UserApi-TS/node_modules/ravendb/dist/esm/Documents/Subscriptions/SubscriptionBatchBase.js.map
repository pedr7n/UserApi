{"version":3,"file":"SubscriptionBatchBase.js","sourceRoot":"","sources":["../../../../src/Documents/Subscriptions/SubscriptionBatchBase.ts"],"names":[],"mappings":"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","sourcesContent":["import { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { getLogger } from \"../../Utility/LogUtil.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { CONSTANTS } from \"../../Constants.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { createMetadataDictionary } from \"../../Mapping/MetadataAsDictionary.js\";\r\nimport { RequestExecutor } from \"../../Http/RequestExecutor.js\";\r\nimport { BatchFromServer, CounterIncludeItem } from \"./BatchFromServer.js\";\r\nimport { IMetadataDictionary } from \"../Session/IMetadataDictionary.js\";\r\nimport { EntityToJson } from \"../Session/EntityToJson.js\";\r\nimport { EOL } from \"../../Utility/OsUtil.js\";\r\n\r\nexport abstract class SubscriptionBatchBase<T extends object> {\r\n\r\n    private readonly _documentType: DocumentType;\r\n    private readonly _revisions: boolean;\r\n\r\n    public lastSentChangeVectorInBatch: string;\r\n\r\n    protected readonly _requestExecutor: RequestExecutor;\r\n    protected readonly _dbName: string;\r\n\r\n    private readonly _logger = getLogger({ module: \"SubscriptionBatch\" });\r\n\r\n    private readonly _items = [] as Item<T>[];\r\n\r\n    protected _includes: object[];\r\n    protected _counterIncludes: CounterIncludeItem[];\r\n    protected _timeSeriesIncludes: any[];\r\n\r\n\r\n    public get items() {\r\n        return this._items;\r\n    }\r\n\r\n    protected abstract ensureDocumentId(item: T, id: string): void;\r\n\r\n\r\n    public getNumberOfItemsInBatch() {\r\n        return this._items ? this._items.length : 0;\r\n    }\r\n\r\n    public getNumberOfIncludes() {\r\n        return this._includes ? this._includes.length : 0;\r\n    }\r\n\r\n    public constructor(documentType: DocumentType, revisions: boolean, requestExecutor: RequestExecutor, dbName: string) {\r\n        this._documentType = documentType;\r\n        this._revisions = revisions;\r\n        this._requestExecutor = requestExecutor;\r\n        this._dbName = dbName;\r\n    }\r\n\r\n    public initialize(batch: BatchFromServer): void {\r\n        this._includes = batch.includes;\r\n        this._counterIncludes = batch.counterIncludes;\r\n        this._timeSeriesIncludes = batch.timeSeriesIncludes;\r\n        this._items.length = 0;\r\n\r\n        let lastReceivedChangeVector: string;\r\n\r\n        for (const item of batch.messages) {\r\n            const curDoc = item.data;\r\n            const metadata = curDoc[CONSTANTS.Documents.Metadata.KEY];\r\n            if (!metadata) {\r\n                SubscriptionBatchBase._throwRequired(\"@metadata field\");\r\n            }\r\n            const id = metadata[CONSTANTS.Documents.Metadata.ID];\r\n\r\n            if (!id) {\r\n                SubscriptionBatchBase._throwRequired(\"@id field\");\r\n            }\r\n\r\n            const changeVector: string = metadata[CONSTANTS.Documents.Metadata.CHANGE_VECTOR];\r\n            if (!changeVector) {\r\n                SubscriptionBatchBase._throwRequired(\"@change-vector field\");\r\n            }\r\n\r\n            lastReceivedChangeVector = changeVector;\r\n\r\n            const projection = metadata[CONSTANTS.Documents.Metadata.PROJECTION] ?? false;\r\n\r\n            this._logger.info(\"Got \" + id + \" (change vector: [\" + lastReceivedChangeVector + \"]\");\r\n\r\n            let instance: T = null;\r\n\r\n            if (!item.exception) {\r\n                instance = EntityToJson.convertToEntity(this._documentType, id, curDoc, this._requestExecutor.conventions);\r\n\r\n                if (!StringUtil.isNullOrEmpty(id)) {\r\n                    this.ensureDocumentId(instance, id);\r\n                }\r\n\r\n                // TODO: check if something's missing here\r\n                // https://github.com/ravendb/ravendb-jvm-client/blob/v4.1/src/main/java/net/ravendb/client/documents/subscriptions/SubscriptionBatch.java#L222\r\n            }\r\n\r\n            const itemToAdd = new Item<T>();\r\n            itemToAdd.changeVector = changeVector;\r\n            itemToAdd.id = id;\r\n            itemToAdd.rawResult = curDoc;\r\n            itemToAdd.rawMetadata = metadata;\r\n            itemToAdd.result = instance;\r\n            itemToAdd.exceptionMessage = item.exception;\r\n            itemToAdd.projection = projection;\r\n            itemToAdd.revision = this._revisions;\r\n            itemToAdd.metadata = createMetadataDictionary({ raw: metadata });\r\n\r\n            this._items.push(itemToAdd);\r\n        }\r\n    }\r\n\r\n    private static _throwRequired(name: string) {\r\n        throwError(\"InvalidOperationException\", \"Document must have a \" + name);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a single item in a subscription batch results.\r\n */\r\nexport class Item<T> {\r\n\r\n    private _result: T;\r\n    public exceptionMessage: string;\r\n    public id: string;\r\n    public changeVector: string;\r\n    public projection: boolean;\r\n    public revision: boolean;\r\n    public metadata: IMetadataDictionary;\r\n\r\n    private _throwItemProcessError() {\r\n        throwError(\"InvalidOperationException\",\r\n            \"Failed to process document \" + this.id + \" with Change Vector \"\r\n            + this.changeVector + \" because: \" + EOL + this.exceptionMessage);\r\n    }\r\n\r\n    public get result() {\r\n        if (this.exceptionMessage) {\r\n            this._throwItemProcessError();\r\n        }\r\n\r\n        return this._result;\r\n    }\r\n\r\n    public set result(result: T) {\r\n        this._result = result;\r\n    }\r\n\r\n    public rawResult: any;\r\n    public rawMetadata: any;\r\n}\r\n"]}