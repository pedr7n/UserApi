{"version":3,"file":"SubscriptionBatch.js","sourceRoot":"","sources":["../../../../src/Documents/Subscriptions/SubscriptionBatch.ts"],"names":[],"mappings":"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","sourcesContent":["import { IDocumentStore } from \"../IDocumentStore.js\";\r\nimport { SubscriptionBatchBase } from \"./SubscriptionBatchBase.js\";\r\nimport { GenerateEntityIdOnTheClient } from \"../Identity/GenerateEntityIdOnTheClient.js\";\r\nimport { IDocumentSession } from \"../Session/IDocumentSession.js\";\r\nimport { SessionOptions } from \"../Session/SessionOptions.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { RequestExecutor } from \"../../Http/RequestExecutor.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"../Session/InMemoryDocumentSessionOperations.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { BatchFromServer } from \"./BatchFromServer.js\";\r\nimport { DocumentInfo } from \"../Session/DocumentInfo.js\";\r\n\r\nexport class SubscriptionBatch<T extends object> extends SubscriptionBatchBase<T> {\r\n    private readonly _store: IDocumentStore;\r\n    private readonly _generateEntityIdOnTheClient: GenerateEntityIdOnTheClient;\r\n\r\n    private _sessionOpened = false;\r\n\r\n    public constructor(documentType: DocumentType, revisions: boolean, requestExecutor: RequestExecutor,\r\n                       store: IDocumentStore, dbName: string) {\r\n        super(documentType, revisions, requestExecutor, dbName)\r\n        this._store = store;\r\n\r\n        this._generateEntityIdOnTheClient = new GenerateEntityIdOnTheClient(this._requestExecutor.conventions,\r\n            () => throwError(\"InvalidOperationException\", \"Shouldn't be generating new ids here\"));\r\n    }\r\n\r\n    initialize(batch: BatchFromServer): void {\r\n        this._sessionOpened = false;\r\n\r\n        super.initialize(batch);\r\n    }\r\n\r\n    public openSession(): IDocumentSession;\r\n    public openSession(options: SessionOptions): IDocumentSession;\r\n    public openSession(options?: SessionOptions): IDocumentSession {\r\n        if (options) {\r\n            SubscriptionBatch._validateSessionOptions(options);\r\n        }\r\n\r\n        options = options || {} as SessionOptions;\r\n        options.database = this._dbName;\r\n        options.requestExecutor = this._requestExecutor;\r\n\r\n        return this._openSessionInternal(options);\r\n    }\r\n\r\n    private _openSessionInternal(options: SessionOptions): IDocumentSession {\r\n        if (this._sessionOpened) {\r\n            this.throwSessionCanBeOpenedOnlyOnce();\r\n        }\r\n        this._sessionOpened = true;\r\n        const s = this._store.openSession(options);\r\n        this._loadDataToSession(s as any as InMemoryDocumentSessionOperations);\r\n        return s;\r\n    }\r\n\r\n    private throwSessionCanBeOpenedOnlyOnce(): void {\r\n        throwError(\"InvalidOperationException\", \"Session can only be opened once per each Subscription batch\");\r\n    }\r\n\r\n    private static _validateSessionOptions(options: SessionOptions): void {\r\n        if (options.database) {\r\n            throwError(\r\n                \"InvalidOperationException\", \"Cannot set Database when session is opened in subscription.\");\r\n        }\r\n\r\n        if (options.requestExecutor) {\r\n            throwError(\r\n                \"InvalidOperationException\", \"Cannot set RequestExecutor when session is opened in subscription.\");\r\n        }\r\n\r\n        if (options.transactionMode !== \"SingleNode\") {\r\n            throwError(\r\n                \"InvalidOperationException\",\r\n                \"Cannot set TransactionMode when session is opened in subscription. Only 'SingleNode' is supported.\");\r\n        }\r\n    }\r\n\r\n    private _loadDataToSession(session: InMemoryDocumentSessionOperations): void {\r\n        if (session.noTracking) {\r\n            return;\r\n        }\r\n\r\n        if (this._includes && this._includes.length) {\r\n            for (const item of this._includes) {\r\n                session.registerIncludes(item);\r\n            }\r\n        }\r\n\r\n        if (this._counterIncludes && this._counterIncludes.length) {\r\n            for (const item of this._counterIncludes) {\r\n                session.registerCounters(item.includes, item.counterIncludes);\r\n            }\r\n        }\r\n\r\n        if (this._timeSeriesIncludes && this._timeSeriesIncludes.length > 0) {\r\n            for (const item of this._timeSeriesIncludes) {\r\n                session.registerTimeSeries(item);\r\n            }\r\n        }\r\n\r\n        for (const item of this.items) {\r\n            if (item.projection || item.revision) {\r\n                continue;\r\n            }\r\n            const documentInfo = new DocumentInfo();\r\n            documentInfo.id = item.id;\r\n            documentInfo.document = item.rawResult;\r\n            documentInfo.metadata = item.rawMetadata;\r\n            documentInfo.metadataInstance = item.metadata;\r\n            documentInfo.changeVector = item.changeVector;\r\n            documentInfo.entity = item.result;\r\n            documentInfo.newDocument = false;\r\n            session.registerExternalLoadedIntoTheSession(documentInfo);\r\n        }\r\n    }\r\n\r\n    protected ensureDocumentId(item: T, id: string) {\r\n        this._generateEntityIdOnTheClient.trySetIdentity(item, id);\r\n    }\r\n}\r\n"]}