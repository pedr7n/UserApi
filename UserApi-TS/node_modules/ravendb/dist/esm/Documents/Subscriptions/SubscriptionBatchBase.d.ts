import { DocumentType } from "../DocumentAbstractions.js";
import { RequestExecutor } from "../../Http/RequestExecutor.js";
import { BatchFromServer, CounterIncludeItem } from "./BatchFromServer.js";
import { IMetadataDictionary } from "../Session/IMetadataDictionary.js";
export declare abstract class SubscriptionBatchBase<T extends object> {
    private readonly _documentType;
    private readonly _revisions;
    lastSentChangeVectorInBatch: string;
    protected readonly _requestExecutor: RequestExecutor;
    protected readonly _dbName: string;
    private readonly _logger;
    private readonly _items;
    protected _includes: object[];
    protected _counterIncludes: CounterIncludeItem[];
    protected _timeSeriesIncludes: any[];
    get items(): Item<T>[];
    protected abstract ensureDocumentId(item: T, id: string): void;
    getNumberOfItemsInBatch(): number;
    getNumberOfIncludes(): number;
    constructor(documentType: DocumentType, revisions: boolean, requestExecutor: RequestExecutor, dbName: string);
    initialize(batch: BatchFromServer): void;
    private static _throwRequired;
}
/**
 * Represents a single item in a subscription batch results.
 */
export declare class Item<T> {
    private _result;
    exceptionMessage: string;
    id: string;
    changeVector: string;
    projection: boolean;
    revision: boolean;
    metadata: IMetadataDictionary;
    private _throwItemProcessError;
    get result(): T;
    set result(result: T);
    rawResult: any;
    rawMetadata: any;
}
//# sourceMappingURL=SubscriptionBatchBase.d.ts.map