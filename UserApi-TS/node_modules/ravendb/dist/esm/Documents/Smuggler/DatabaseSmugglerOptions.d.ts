import { IDatabaseSmugglerOptions } from "./IDatabaseSmugglerOptions.js";
import { DatabaseItemType } from "./DatabaseItemType.js";
import { DatabaseRecordItemType } from "./DatabaseRecordItemType.js";
export declare class DatabaseSmugglerOptions implements IDatabaseSmugglerOptions {
    static readonly DEFAULT_OPERATE_ON_TYPES: DatabaseItemType[];
    static readonly DEFAULT_OPERATE_ON_DATABASE_RECORD_TYPES: DatabaseRecordItemType[];
    private static readonly DEFAULT_MAX_STEPS_FOR_TRANSFORM_SCRIPT;
    operateOnTypes: DatabaseItemType[];
    operateOnDatabaseRecordType: DatabaseRecordItemType[];
    includeExpired: boolean;
    includeArtificial: boolean;
    includeArchived: boolean;
    removeAnalyzers: boolean;
    transformScript: string;
    maxStepsForTransformScript: number;
    skipRevisionCreation: boolean;
    encryptionKey: string;
    collections: string[];
    /**
     * In case the database is corrupted (for example, Compression Dictionaries are lost), it is possible to export all the remaining data.
     */
    skipCorruptedData: boolean;
    constructor();
}
//# sourceMappingURL=DatabaseSmugglerOptions.d.ts.map