{"version":3,"file":"DatabaseSmuggler.js","sourceRoot":"","sources":["../../../../src/Documents/Smuggler/DatabaseSmuggler.ts"],"names":[],"mappings":"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","sourcesContent":["import { IDocumentStore } from \"../IDocumentStore.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { DatabaseSmugglerImportOptions } from \"./DatabaseSmugglerImportOptions.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { HttpRequestParameters, HttpResponse } from \"../../Primitives/Http.js\";\r\nimport { DatabaseSmugglerExportOptions } from \"./DatabaseSmugglerExportOptions.js\";\r\nimport { HttpCache } from \"../../Http/HttpCache.js\";\r\nimport { HeadersBuilder } from \"../../Utility/HttpUtil.js\";\r\nimport { DatabaseSmugglerOptions } from \"./DatabaseSmugglerOptions.js\";\r\nimport { pipelineAsync } from \"../../Utility/StreamUtil.js\";\r\nimport { dirname, resolve, extname } from \"node:path\";\r\nimport { BackupUtils } from \"./BackupUtils.js\";\r\nimport { RequestExecutor } from \"../../Http/RequestExecutor.js\";\r\nimport { OperationCompletionAwaiter } from \"../Operations/OperationCompletionAwaiter.js\";\r\nimport { GetNextOperationIdCommand } from \"../Commands/GetNextOperationIdCommand.js\";\r\nimport { RavenCommand, ResponseDisposeHandling } from \"../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { Readable } from \"node:stream\";\r\nimport { Dispatcher } from \"undici-types\";\r\n\r\nexport class DatabaseSmuggler {\r\n    private readonly _store: IDocumentStore;\r\n    private readonly _databaseName: string;\r\n    private readonly _requestExecutor: RequestExecutor;\r\n\r\n    public constructor(store: IDocumentStore)\r\n    public constructor(store: IDocumentStore, databaseName: string)\r\n    public constructor(store: IDocumentStore, databaseName?: string) {\r\n        this._store = store;\r\n        this._databaseName = databaseName ?? store.database;\r\n        if (this._databaseName) {\r\n            this._requestExecutor = store.getRequestExecutor(this._databaseName);\r\n        } else {\r\n            this._requestExecutor = null;\r\n        }\r\n    }\r\n\r\n    public forDatabase(databaseName: string): DatabaseSmuggler {\r\n        if (StringUtil.equalsIgnoreCase(databaseName, this._databaseName)) {\r\n            return this;\r\n        }\r\n\r\n        return new DatabaseSmuggler(this._store, databaseName);\r\n    }\r\n\r\n    public async export(options: DatabaseSmugglerExportOptions, toFile: string): Promise<OperationCompletionAwaiter> {\r\n        const directory = dirname(resolve(toFile));\r\n        const { existsSync, mkdirSync , createWriteStream} = await import(\"node:fs\");\r\n        if (!existsSync(directory)) {\r\n            mkdirSync(directory, { recursive: true });\r\n        }\r\n\r\n        return await this._export(options, async response => {\r\n            const fileStream = createWriteStream(toFile);\r\n            await pipelineAsync(response, fileStream);\r\n        });\r\n\r\n    }\r\n\r\n    private async _export(options: DatabaseSmugglerExportOptions, handleStreamResponse: (stream: Readable) => Promise<void>) {\r\n        if (!options) {\r\n            throwError(\"InvalidArgumentException\", \"Options cannot be null\");\r\n        }\r\n\r\n        if (!this._requestExecutor) {\r\n            throwError(\"InvalidOperationException\", \"Cannot use smuggler without a database defined, did you forget to call 'forDatabase'?\");\r\n        }\r\n\r\n        const getOperationIdCommand = new GetNextOperationIdCommand();\r\n        await this._requestExecutor.execute(getOperationIdCommand);\r\n\r\n        const operationId = getOperationIdCommand.result;\r\n\r\n        const command = new ExportCommand(this._requestExecutor.conventions, options, handleStreamResponse, operationId, getOperationIdCommand.nodeTag);\r\n\r\n        await this._requestExecutor.execute(command);\r\n\r\n        return new OperationCompletionAwaiter(this._requestExecutor, this._requestExecutor.conventions, operationId, getOperationIdCommand.nodeTag);\r\n    }\r\n\r\n    public async importIncremental(options: DatabaseSmugglerImportOptions, fromDirectory: string) {\r\n        const { statSync, readdirSync } = await import(\"node:fs\");\r\n        const mProvider = f => statSync(f).mtimeMs;\r\n        const files = readdirSync(fromDirectory)\r\n            .filter(x => BackupUtils.BACKUP_FILE_SUFFIXES.includes(\".\" + extname(x)))\r\n            .sort((a, b) => BackupUtils.comparator(a, b, mProvider));\r\n\r\n        if (!files.length) {\r\n            return;\r\n        }\r\n\r\n        const oldOperateOnTypes = DatabaseSmuggler.configureOptionsFromIncrementalImport(options);\r\n\r\n        for (let i = 0; i < files.length - 1; i++) {\r\n            const filePath = files[i];\r\n            await this.import(options, resolve(filePath));\r\n        }\r\n\r\n        options.operateOnTypes = oldOperateOnTypes;\r\n\r\n        const lastFile = files.at(-1);\r\n        await this.import(options, resolve(lastFile));\r\n    }\r\n\r\n    public static configureOptionsFromIncrementalImport(options: DatabaseSmugglerOptions) {\r\n        options.operateOnTypes.push(\"Tombstones\");\r\n        options.operateOnTypes.push(\"CompareExchangeTombstones\");\r\n\r\n        // we import the indexes and Subscriptions from the last file only,\r\n\r\n        const oldOperateOnTypes = [ ...options.operateOnTypes ];\r\n\r\n        options.operateOnTypes = options.operateOnTypes.filter(x => x !== \"Indexes\" && x !== \"Subscriptions\");\r\n\r\n        return oldOperateOnTypes;\r\n    }\r\n\r\n    public async import(options: DatabaseSmugglerImportOptions, fromFile: string): Promise<OperationCompletionAwaiter> {\r\n        let countOfFileParts = 0;\r\n\r\n        const { existsSync } = await import(\"node:fs\");\r\n\r\n        let result: OperationCompletionAwaiter;\r\n\r\n        do {\r\n            result = await this._import(options, fromFile);\r\n\r\n            countOfFileParts++;\r\n            fromFile = StringUtil.format(\"{0}.part{1}\", fromFile, countOfFileParts);\r\n        } while (existsSync(fromFile));\r\n\r\n        return result;\r\n    }\r\n\r\n    private async _import(options: DatabaseSmugglerImportOptions, file: string): Promise<OperationCompletionAwaiter> {\r\n        if (!options) {\r\n            throwError(\"InvalidArgumentException\", \"Options cannot be null\");\r\n        }\r\n\r\n        if (!file) {\r\n            throwError(\"InvalidArgumentException\", \"File cannot be null\");\r\n        }\r\n\r\n        if (!this._requestExecutor) {\r\n            throwError(\"InvalidOperationException\", \"Cannot use smuggler without a database defined, did you forget to call 'forDatabase'?\");\r\n        }\r\n\r\n        const getOperationIdCommand = new GetNextOperationIdCommand();\r\n        await this._requestExecutor.execute(getOperationIdCommand);\r\n\r\n        const operationId = getOperationIdCommand.result;\r\n\r\n        const command = new ImportCommand(this._requestExecutor.conventions, options, file, operationId, getOperationIdCommand.nodeTag);\r\n\r\n        await this._requestExecutor.execute(command);\r\n\r\n        return new OperationCompletionAwaiter(this._requestExecutor, this._requestExecutor.conventions, operationId, getOperationIdCommand.nodeTag);\r\n    }\r\n}\r\n\r\nclass ExportCommand extends RavenCommand<void> {\r\n    private readonly _options: object;\r\n    private readonly _handleStreamResponse: (stream: Readable) => Promise<void>;\r\n    private readonly _operationId: number;\r\n\r\n    public constructor(conventions: DocumentConventions, options: DatabaseSmugglerExportOptions,\r\n                       handleStreamResponse: (stream: Readable) => Promise<void>, operationId: number, nodeTag: string) {\r\n        super();\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n        if (!options) {\r\n            throwError(\"InvalidArgumentException\", \"Options cannot be null\");\r\n        }\r\n        if (!handleStreamResponse) {\r\n            throwError(\"InvalidArgumentException\", \"HandleStreamResponse cannot be null\");\r\n        }\r\n\r\n        this._handleStreamResponse = handleStreamResponse;\r\n\r\n        const { operateOnTypes, ...restOptions } = options;\r\n\r\n        this._options = conventions.objectMapper.toObjectLiteral({\r\n            operateOnTypes: operateOnTypes.join(\",\"),\r\n            ...restOptions\r\n        });\r\n        this._operationId = operationId;\r\n        this._selectedNodeTag = nodeTag;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/smuggler/export?operationId=\" + this._operationId;\r\n\r\n        const body = this._serializer.serialize(this._options);\r\n\r\n        const headers = HeadersBuilder.create()\r\n            .typeAppJson().build();\r\n\r\n        return {\r\n            method: \"POST\",\r\n            uri,\r\n            body,\r\n            headers\r\n        };\r\n    }\r\n\r\n    async processResponse(cache: HttpCache, response: HttpResponse, bodyStream: Readable, url: string): Promise<ResponseDisposeHandling> {\r\n        await this._handleStreamResponse(bodyStream);\r\n\r\n        return \"Automatic\";\r\n    }\r\n}\r\n\r\nclass ImportCommand extends RavenCommand<void> {\r\n    private readonly _options: object;\r\n    private readonly _file: string;\r\n    private readonly _operationId: number;\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public constructor(conventions: DocumentConventions,\r\n                       options: DatabaseSmugglerImportOptions,\r\n                       file: string,\r\n                       operationId: number,\r\n                       nodeTag: string) {\r\n        super();\r\n\r\n        this._responseType = \"Empty\";\r\n\r\n        if (!file) {\r\n            throwError(\"InvalidArgumentException\", \"File cannot be null\");\r\n        }\r\n\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n\r\n        if (!options) {\r\n            throwError(\"InvalidArgumentException\", \"Options cannot be null\");\r\n        }\r\n\r\n        this._file = file;\r\n\r\n        const { operateOnTypes, ...restOptions } = options;\r\n        this._options = conventions.objectMapper.toObjectLiteral({\r\n            operateOnTypes: operateOnTypes.join(\",\"),\r\n            ...restOptions\r\n        });\r\n        this._operationId = operationId;\r\n        this._selectedNodeTag = nodeTag;\r\n    }\r\n\r\n    async send(agent: Dispatcher, requestOptions: HttpRequestParameters): Promise<{\r\n        response: HttpResponse;\r\n        bodyStream: Readable\r\n    }> {\r\n        const { body } = requestOptions;\r\n\r\n        const { readFileSync } = await import(\"node:fs\");\r\n\r\n        if (body instanceof FormData) {\r\n            const buffer = readFileSync(this._file);\r\n            body.append(\"name\", new Blob([buffer], { type: \"text/plain\" }));\r\n        }\r\n        return super.send(agent, requestOptions);\r\n    }\r\n\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/smuggler/import?operationId=\" + this._operationId;\r\n\r\n        const multipart = new FormData();\r\n        multipart.append(\"importOptions\", this._serializer.serialize(this._options));\r\n        // we append file in send method\r\n\r\n        return {\r\n            method: \"POST\",\r\n            uri,\r\n            body: multipart,\r\n        };\r\n    }\r\n\r\n}\r\n"]}