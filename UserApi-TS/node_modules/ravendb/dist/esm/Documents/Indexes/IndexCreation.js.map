{"version":3,"file":"IndexCreation.js","sourceRoot":"","sources":["../../../../src/Documents/Indexes/IndexCreation.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AAGrD,OAAO,EAAE,mBAAmB,EAAE,MAAM,8CAA8C,CAAC;AAInF,MAAM,GAAG,GAAG,SAAS,CAAC,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC;AAEnD,MAAM,OAAO,aAAa;IASf,MAAM,CAAC,KAAK,CAAC,aAAa,CAC7B,OAAqC,EACrC,KAAqB,EACrB,WAAiC;QAEjC,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;QACpC,CAAC;QAED,IAAI,CAAC;YACD,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YACnE,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,mBAAmB,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;QAC3E,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,GAAG,CAAC,IAAI,CAAC,GAAG,EACR,+EAA+E,CAAC,CAAC;YAErF,kFAAkF;YAClF,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE,CAAC;gBAC1B,MAAM,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAC5C,CAAC;QACL,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,kBAAkB,CAC5B,kBAAgD,EAAE,WAAgC;QAElF,OAAO,kBAAkB;aACpB,GAAG,CAAC,CAAC,CAAC,EAAE;YACL,MAAM,cAAc,GAAG,CAAC,CAAC,WAAW,CAAC;YACrC,IAAI,CAAC;gBACD,CAAC,CAAC,WAAW,GAAG,WAAW,CAAC;gBAC5B,MAAM,UAAU,GAAG,CAAC,CAAC,qBAAqB,EAAE,CAAC;gBAC7C,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC;gBACnC,UAAU,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC;gBAC7C,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,QAAQ,CAAC;gBACvC,OAAO,UAAU,CAAC;YACtB,CAAC;oBAAS,CAAC;gBACP,CAAC,CAAC,WAAW,GAAG,cAAc,CAAC;YACnC,CAAC;QACL,CAAC,CAAC,CAAC;IACX,CAAC;CACJ","sourcesContent":["import { getLogger } from \"../../Utility/LogUtil.js\";\r\nimport { IDocumentStore } from \"../IDocumentStore.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { PutIndexesOperation } from \"../Operations/Indexes/PutIndexesOperation.js\";\r\nimport { IndexDefinition } from \"./IndexDefinition.js\";\r\nimport { IAbstractIndexCreationTask } from \"./IAbstractIndexCreationTask.js\";\r\n\r\nconst log = getLogger({ module: \"DocumentStore\" });\r\n\r\nexport class IndexCreation {\r\n\r\n    public static async createIndexes(\r\n        indexes: IAbstractIndexCreationTask[],\r\n        store: IDocumentStore): Promise<void>;\r\n    public static async createIndexes(\r\n        indexes: IAbstractIndexCreationTask[],\r\n        store: IDocumentStore,\r\n        conventions: DocumentConventions): Promise<void>;\r\n    public static async createIndexes(\r\n        indexes: IAbstractIndexCreationTask[],\r\n        store: IDocumentStore,\r\n        conventions?: DocumentConventions): Promise<void> {\r\n\r\n        if (!conventions) {\r\n            conventions = store.conventions;\r\n        }\r\n\r\n        try {\r\n            const indexesToAdd = this.createIndexesToAdd(indexes, conventions);\r\n            await store.maintenance.send(new PutIndexesOperation(...indexesToAdd));\r\n        } catch (err) {\r\n            log.warn(err,\r\n                \"Could not create indexes in one shot (maybe using older version of RavenDB ?)\");\r\n\r\n            // For old servers that don't have the new endpoint for executing multiple indexes\r\n            for (const index of indexes) {\r\n                await index.execute(store, conventions);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static createIndexesToAdd(\r\n        indexCreationTasks: IAbstractIndexCreationTask[], conventions: DocumentConventions)\r\n        : IndexDefinition[] {\r\n        return indexCreationTasks\r\n            .map(x => {\r\n                const oldConventions = x.conventions;\r\n                try {\r\n                    x.conventions = conventions;\r\n                    const definition = x.createIndexDefinition();\r\n                    definition.name = x.getIndexName();\r\n                    definition.priority = x.priority || \"Normal\";\r\n                    definition.state = x.state || \"Normal\";\r\n                    return definition;\r\n                } finally {\r\n                    x.conventions = oldConventions;\r\n                }\r\n            });\r\n    }\r\n}\r\n"]}