{"version":3,"file":"AbstractJavaScriptMultiMapIndexCreationTask.js","sourceRoot":"","sources":["../../../../src/Documents/Indexes/AbstractJavaScriptMultiMapIndexCreationTask.ts"],"names":[],"mappings":"AAAA,OAAO,EAAmB,sBAAsB,EAAE,MAAM,sBAAsB,CAAC;AAC/E,OAAO,EACH,oBAAoB,EAGM,YAAY,EACzC,MAAM,oBAAoB,CAAC;AAE5B,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AACrD,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AACzD,OAAO,EAAE,mBAAmB,EAAE,MAAM,uCAAuC,CAAC;AAC5E,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAC;AAC/D,OAAO,EAAE,+BAA+B,EAAE,MAAM,sCAAsC,CAAC;AACvF,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AAEzD,MAAM,OAAO,2CACT,SAAQ,+BAA0D;IAE1D,KAAK,GAAa,EAAE,CAAC;IACrB,OAAO,CAAS;IAExB;QACI,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,GAAG,IAAI,mBAAmB,EAAE,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACI,GAAG,CACN,wBAA0D,EAAE,UAAwD;QAEpH,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,wBAAwB,CAAC;YAC1D,CAAC,CAAC,wBAAwB;YAC1B,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,CAAC;QAEpE,MAAM,iBAAiB,GAAG,IAAI,aAAa,EAAE,CAAC;QAC9C,UAAU,CAAC,YAAY,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;QACvD,MAAM,MAAM,GAAG,QAAQ,iBAAiB,CAAC,QAAQ,EAAE,MAAM,UAAU,GAAG,CAAC;QACvE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,SAA+C;QACzD,MAAM,SAAS,GAAG,SAAS,CAAC,IAAI,oBAAoB,EAAc,CAAC,CAAC,MAAM,EAAE,CAAC;QAC7E,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACnE,CAAC;IAED,wDAAwD;IACjD,SAAS,CAAC,IAAY,EAAE,MAAgB;QAC3C,IAAI,CAAC,iBAAiB,KAAK,EAAE,CAAC;QAE9B,MAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAEzC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YACvC,UAAU,CAAC,2BAA2B,EAAE,+EAA+E,CAAC,CAAC;QAC7H,CAAC;QAED,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;IACrD,CAAC;IAED;;OAEG;IACI,QAAQ;QACX,OAAO,IAAI,YAAY,EAAE,CAAC;IAC9B,CAAC;IAED,IAAW,WAAW;QAClB,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;IACzB,CAAC;IAEM,qBAAqB;QACxB,MAAM,sBAAsB,GAAG,IAAI,sBAAsB,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAC/E,sBAAsB,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC5D,sBAAsB,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAChE,sBAAsB,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7C,sBAAsB,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAC1D,sBAAsB,CAAC,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAClE,sBAAsB,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QACpE,sBAAsB,CAAC,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAC;QACtE,sBAAsB,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC;QAC1E,sBAAsB,CAAC,wBAAwB,GAAG,IAAI,CAAC,wBAAwB,CAAC;QAChF,sBAAsB,CAAC,4CAA4C,GAAG,IAAI,CAAC,4CAA4C,CAAC;QACxH,sBAAsB,CAAC,+BAA+B,GAAG,IAAI,CAAC,+BAA+B,CAAC;QAC9F,sBAAsB,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAClE,sBAAsB,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;QACxE,sBAAsB,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAC1D,sBAAsB,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAChD,sBAAsB,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAChD,sBAAsB,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1C,sBAAsB,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAE5D,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,sBAAsB,CAAC,aAAa,CAAC,OAAO,CAAC,kCAAkC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC7G,CAAC;aAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC;YACxD,sBAAsB,CAAC,aAAa,CAAC,OAAO,CAAC,kCAAkC,CAAC,GAAG,OAAO,CAAC;QAC/F,CAAC;QAED,MAAM,eAAe,GAAG,sBAAsB,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAC1F,eAAe,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE3C,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ","sourcesContent":["import { IndexDefinition, IndexDefinitionBuilder } from \"./IndexDefinition.js\";\r\nimport {\r\n    IndexingGroupResults,\r\n    IndexingMapDefinition,\r\n    IndexingMapUtils,\r\n    IndexingReduceDefinition, StubMapUtils\r\n} from \"./StronglyTyped.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { StringBuilder } from \"../../Utility/StringBuilder.js\";\r\nimport { BaseJavaScriptIndexCreationTask } from \"./BaseJavaScriptIndexCreationTask.js\";\r\nimport { INDEXES } from \"../../Constants.js\";\r\nimport { ObjectUtil } from \"../../Utility/ObjectUtil.js\";\r\n\r\nexport class AbstractJavaScriptMultiMapIndexCreationTask<TMapResult extends object = any>\r\n    extends BaseJavaScriptIndexCreationTask<keyof TMapResult & string> {\r\n\r\n    private _maps: string[] = [];\r\n    private _reduce: string;\r\n\r\n    protected constructor() {\r\n        super();\r\n\r\n        this.conventions = new DocumentConventions();\r\n    }\r\n\r\n    /**\r\n     * Register map\r\n     * @param collectionOrDocumentType Collection name to index over\r\n     * @param definition Index definition that maps to the indexed properties\r\n     */\r\n    public map<TDocument extends object>(\r\n        collectionOrDocumentType: string | DocumentType<TDocument>, definition: IndexingMapDefinition<TDocument, TMapResult>) {\r\n\r\n        const collection = TypeUtil.isString(collectionOrDocumentType)\r\n            ? collectionOrDocumentType\r\n            : this.conventions.findCollectionName(collectionOrDocumentType);\r\n\r\n        const escapedCollection = new StringBuilder();\r\n        StringUtil.escapeString(escapedCollection, collection);\r\n        const rawMap = `map('${escapedCollection.toString()}', ${definition})`;\r\n        this._maps.push(this.postProcessDefinition(rawMap, \"map\"));\r\n    }\r\n\r\n    /**\r\n     * Sets the index definition reduce\r\n     * @param mapReduce Reduce definition\r\n     */\r\n    public reduce(mapReduce: IndexingReduceDefinition<TMapResult>) {\r\n        const rawReduce = mapReduce(new IndexingGroupResults<TMapResult>()).format();\r\n        this._reduce = this.postProcessDefinition(rawReduce, \"reduce\");\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    public addSource(name: string, source: Function): void {\r\n        this.additionalSources ??= {};\r\n\r\n        const sourceAsString = source.toString();\r\n\r\n        if (!sourceAsString.includes(\"function\")) {\r\n            throwError(\"InvalidOperationException\", \"Additional sources require named function. Arrow functions are not supported.\");\r\n        }\r\n\r\n        this.additionalSources[name] = source.toString();\r\n    }\r\n\r\n    /**\r\n     * No implementation is required here, the interface is purely meant to expose map helper methods such as `load(id, collection)` etc\r\n     */\r\n    public mapUtils(): IndexingMapUtils {\r\n        return new StubMapUtils();\r\n    }\r\n\r\n    public get isMapReduce(): boolean {\r\n        return !!this.reduce;\r\n    }\r\n\r\n    public createIndexDefinition(): IndexDefinition {\r\n        const indexDefinitionBuilder = new IndexDefinitionBuilder(this.getIndexName());\r\n        indexDefinitionBuilder.indexesStrings = this.indexesStrings;\r\n        indexDefinitionBuilder.analyzersStrings = this.analyzersStrings;\r\n        indexDefinitionBuilder.reduce = this._reduce;\r\n        indexDefinitionBuilder.storesStrings = this.storesStrings;\r\n        indexDefinitionBuilder.suggestionsOptions = this.indexSuggestions;\r\n        indexDefinitionBuilder.termVectorsStrings = this.termVectorsStrings;\r\n        indexDefinitionBuilder.vectorFieldStrings = this.vectorOptionsStrings;\r\n        indexDefinitionBuilder.spatialIndexesStrings = this.spatialOptionsStrings;\r\n        indexDefinitionBuilder.outputReduceToCollection = this.outputReduceToCollection;\r\n        indexDefinitionBuilder.patternForOutputReduceToCollectionReferences = this.patternForOutputReduceToCollectionReferences;\r\n        indexDefinitionBuilder.patternReferencesCollectionName = this.patternReferencesCollectionName;\r\n        indexDefinitionBuilder.additionalSources = this.additionalSources;\r\n        indexDefinitionBuilder.additionalAssemblies = this.additionalAssemblies;\r\n        indexDefinitionBuilder.configuration = this.configuration;\r\n        indexDefinitionBuilder.lockMode = this.lockMode;\r\n        indexDefinitionBuilder.priority = this.priority;\r\n        indexDefinitionBuilder.state = this.state;\r\n        indexDefinitionBuilder.deploymentMode = this.deploymentMode;\r\n\r\n        if (this.searchEngineType) {\r\n            indexDefinitionBuilder.configuration[INDEXES.INDEXING_STATIC_SEARCH_ENGINE_TYPE] = this.searchEngineType;\r\n        } else if (!ObjectUtil.isEmpty(this.vectorOptionsStrings)) {\r\n            indexDefinitionBuilder.configuration[INDEXES.INDEXING_STATIC_SEARCH_ENGINE_TYPE] = \"Corax\";\r\n        }\r\n\r\n        const indexDefinition = indexDefinitionBuilder.toIndexDefinition(this.conventions, false);\r\n        indexDefinition.maps = new Set(this._maps);\r\n\r\n        return indexDefinition;\r\n    }\r\n}\r\n"]}