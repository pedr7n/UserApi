{"version":3,"file":"AbstractGenericTimeSeriesIndexCreationTask.js","sourceRoot":"","sources":["../../../../../src/Documents/Indexes/TimeSeries/AbstractGenericTimeSeriesIndexCreationTask.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,6BAA6B,EAAE,MAAM,qCAAqC,CAAC;AAEpF,OAAO,EAAkB,qBAAqB,EAAE,MAAM,eAAe,CAAC;AACtE,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAGlD;;GAEG;AACH,MAAM,OAAgB,0CAA2C,SAAQ,6BAAwD;IACnH,OAAO,CAAS;IAEhB,cAAc,CAA+B;IAC7C,eAAe,CAAgC;IAC/C,iBAAiB,CAAyB;IAC1C,iBAAiB,CAAc;IAC/B,mBAAmB,CAAkC;IACrD,sBAAsB,CAAiC;IACvD,qBAAqB,CAAqC;IAE1D,yBAAyB,CAAS;IAClC,6CAA6C,CAAS;IACtD,gCAAgC,CAAS;IAEnD;QACI,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,EAAU,CAAC;QAC3C,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,IAAI,WAAW;QACX,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IAC1B,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,KAAa,EAAE,QAAuB;QAClD,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;IAC3C,CAAC;IAED;;OAEG;IACO,OAAO,CAAC,KAAa,EAAE,QAAuE;QACpG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,IAAI,qBAAqB,EAAE,CAAC,CAAC;IAC/E,CAAC;IAED,gGAAgG;IAEtF,cAAc,CAAC,OAAqB;QAC1C,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;IAClF,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,KAAa,EAAE,OAAqB;QAChD,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IACzC,CAAC;IAED;;OAEG;IACO,OAAO,CAAC,KAAa,EAAE,QAAgB;QAC7C,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;IAC7C,CAAC;IAED;;OAEG;IACO,UAAU,CAAC,KAAa,EAAE,UAA2B;QAC3D,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC;IACjD,CAAC;IAES,UAAU,CAAC,KAAa;QAC9B,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAES,WAAW,CAAC,KAAa,EAAE,MAA0B;QAC3D,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;IAC/C,CAAC;CACJ","sourcesContent":["import { TimeSeriesIndexDefinition } from \"./TimeSeriesIndexDefinition.js\";\r\nimport { AbstractIndexCreationTaskBase } from \"../AbstractIndexCreationTaskBase.js\";\r\nimport { FieldIndexing, FieldStorage, FieldTermVector } from \"../Enums.js\";\r\nimport { SpatialOptions, SpatialOptionsFactory } from \"../Spatial.js\";\r\nimport { CONSTANTS } from \"../../../Constants.js\";\r\nimport { FieldVectorOptions } from \"../../Queries/VectorSearch/VectorSearchOptions.js\";\r\n\r\n/**\r\n * Abstract class used to provide infrastructure service for actual creation tasks\r\n */\r\nexport abstract class AbstractGenericTimeSeriesIndexCreationTask extends AbstractIndexCreationTaskBase<TimeSeriesIndexDefinition> {\r\n    protected _reduce: string;\r\n\r\n    protected _storesStrings: Record<string, FieldStorage>;\r\n    protected _indexesStrings: Record<string, FieldIndexing>;\r\n    protected _analyzersStrings: Record<string, string>;\r\n    protected _indexSuggestions: Set<string>;\r\n    protected _termVectorsStrings: Record<string, FieldTermVector>;\r\n    protected _spatialOptionsStrings: Record<string, SpatialOptions>;\r\n    protected _vectorOptionsStrings: Record<string, FieldVectorOptions>;\r\n\r\n    protected _outputReduceToCollection: string;\r\n    protected _patternForOutputReduceToCollectionReferences: string;\r\n    protected _patternReferencesCollectionName: string;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this._storesStrings = {};\r\n        this._indexesStrings = {};\r\n        this._analyzersStrings = {};\r\n        this._indexSuggestions = new Set<string>();\r\n        this._termVectorsStrings = {};\r\n        this._spatialOptionsStrings = {};\r\n        this._vectorOptionsStrings = {};\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating whether this instance is map reduce index definition\r\n     */\r\n    get isMapReduce(): boolean {\r\n        return !!this._reduce;\r\n    }\r\n\r\n    /**\r\n     * Register a field to be indexed\r\n     */\r\n    protected index(field: string, indexing: FieldIndexing): void {\r\n        this._indexesStrings[field] = indexing;\r\n    }\r\n\r\n    /**\r\n     * Register a field to be spatially indexed\r\n     */\r\n    protected spatial(field: string, indexing: (spatialOptsFactory: SpatialOptionsFactory) => SpatialOptions): void {\r\n        this._spatialOptionsStrings[field] = indexing(new SpatialOptionsFactory());\r\n    }\r\n\r\n    // TBD protected void Store(Expression<Func<TReduceResult, object>> field, FieldStorage storage)\r\n\r\n    protected storeAllFields(storage: FieldStorage): void {\r\n        this._storesStrings[CONSTANTS.Documents.Indexing.Fields.ALL_FIELDS] = storage;\r\n    }\r\n\r\n    /**\r\n     * Register a field to be stored\r\n     */\r\n    protected store(field: string, storage: FieldStorage): void {\r\n        this._storesStrings[field] = storage;\r\n    }\r\n\r\n    /**\r\n     * Register a field to be analyzed\r\n     */\r\n    protected analyze(field: string, analyzer: string): void {\r\n        this._analyzersStrings[field] = analyzer;\r\n    }\r\n\r\n    /**\r\n     * Register a field to have term vectors\r\n     */\r\n    protected termVector(field: string, termVector: FieldTermVector): void {\r\n        this._termVectorsStrings[field] = termVector;\r\n    }\r\n\r\n    protected suggestion(field: string): void {\r\n        this._indexSuggestions.add(field);\r\n    }\r\n\r\n    protected vectorField(field: string, vector: FieldVectorOptions): void {\r\n        this._vectorOptionsStrings[field] = vector;\r\n    }\r\n}\r\n"]}