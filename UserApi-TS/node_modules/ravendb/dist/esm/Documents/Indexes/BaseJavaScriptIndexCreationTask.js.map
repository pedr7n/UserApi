{"version":3,"file":"BaseJavaScriptIndexCreationTask.js","sourceRoot":"","sources":["../../../../src/Documents/Indexes/BaseJavaScriptIndexCreationTask.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gCAAgC,EAAE,MAAM,uCAAuC,CAAC;AAEzF,OAAO,EAAE,qBAAqB,EAAE,MAAM,4BAA4B,CAAC;AACnE,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AAGrD,MAAM,OAAgB,+BAAgE,SAAQ,gCAAwC;IAExH,gBAAgB,GAAkB,EAAE,CAAC;IAE/C;;;;;OAKG;IACO,qBAAqB,CAAC,UAAkB,EAAE,MAAwB;QACxE,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;YAC/B,KAAK,MAAM,cAAc,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACjD,MAAM,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;gBAC/C,MAAM,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,WAAW,GAAG,GAAG,CAAC;gBACvG,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,cAAc,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;YAC7E,CAAC;QACL,CAAC;QAED,OAAO,UAAU,CAAC;IACtB,CAAC;IAES,YAAY,CAAC,QAA+B;QAClD,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;QACzB,MAAM,YAAY,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAEzC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;YACvB,UAAU,EAAE,qBAAqB,CAAC,mBAAmB,CAAC,YAAY,CAAC;YACnE,WAAW,EAAE,KAAK;SACrB,CAAC,CAAC;IACP,CAAC;CACJ","sourcesContent":["import { AbstractGenericIndexCreationTask } from \"./AbstractGenericIndexCreationTask.js\";\r\nimport { EnumMapping } from \"./Enums.js\";\r\nimport { IndexDefinitionHelper } from \"./IndexDefinitionHelper.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\n\r\n\r\nexport abstract class BaseJavaScriptIndexCreationTask<TField extends string = string> extends AbstractGenericIndexCreationTask<TField> {\r\n\r\n    protected _registeredEnums: EnumMapping[] = [];\r\n\r\n    /**\r\n     * This extension point to tweak strongly typed index definitions\r\n     * @param definition original index definition\r\n     * @param origin origin of definition: map or reduce\r\n     * @protected\r\n     */\r\n    protected postProcessDefinition(definition: string, origin: \"map\" | \"reduce\") {\r\n        if (this._registeredEnums.length) {\r\n            for (const transformation of this._registeredEnums) {\r\n                const actualValue = transformation.actualValue;\r\n                const escapedValue = TypeUtil.isNumber(actualValue) ? actualValue.toString() : '\"' + actualValue + '\"';\r\n                definition = definition.replace(transformation.sourceCode, escapedValue);\r\n            }\r\n        }\r\n\r\n        return definition;\r\n    }\r\n\r\n    protected registerEnum(provider: () => string | number) {\r\n        const value = provider();\r\n        const functionBody = provider.toString();\r\n\r\n        this._registeredEnums.push({\r\n            sourceCode: IndexDefinitionHelper.extractEnumNotation(functionBody),\r\n            actualValue: value\r\n        });\r\n    }\r\n}\r\n"]}