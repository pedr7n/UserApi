import { throwError } from "../../Exceptions/index.js";
import { StringUtil } from "../../Utility/StringUtil.js";
export class AdditionalAssembly {
    assemblyName;
    assemblyPath;
    packageName;
    packageVersion;
    packageSourceUrl;
    usings;
    constructor() {
        // empty
    }
    static onlyUsings(usings) {
        if (!usings || usings.length === 0) {
            throwError("InvalidArgumentException", "Using cannot be null or empty");
        }
        const additionalAssembly = new AdditionalAssembly();
        additionalAssembly.usings = usings;
        return additionalAssembly;
    }
    static fromRuntime(assemblyName, usings = null) {
        if (StringUtil.isNullOrWhitespace(assemblyName)) {
            throwError("InvalidArgumentException", "AssemblyName cannot be null or whitespace.");
        }
        const additionalAssembly = new AdditionalAssembly();
        additionalAssembly.assemblyName = assemblyName;
        additionalAssembly.usings = usings;
        return additionalAssembly;
    }
    static fromPath(assemblyPath, usings = null) {
        if (StringUtil.isNullOrWhitespace(assemblyPath)) {
            throwError("InvalidArgumentException", "AssemblyPath cannot be null or whitespace.");
        }
        const additionalAssembly = new AdditionalAssembly();
        additionalAssembly.assemblyPath = assemblyPath;
        additionalAssembly.usings = usings;
        return additionalAssembly;
    }
    static fromNuGet(packageName, packageVersion, packageSourceUrl = null, usings = null) {
        if (StringUtil.isNullOrWhitespace(packageName)) {
            throwError("InvalidArgumentException", "PackageName cannot be null or whitespace.");
        }
        if (StringUtil.isNullOrWhitespace(packageVersion)) {
            throwError("InvalidArgumentException", "PackageVersion cannot be null or whitespace.");
        }
        const additionalAssembly = new AdditionalAssembly();
        additionalAssembly.packageName = packageName;
        additionalAssembly.packageVersion = packageVersion;
        additionalAssembly.packageSourceUrl = packageSourceUrl;
        additionalAssembly.usings = usings;
        return additionalAssembly;
    }
}
//# sourceMappingURL=AdditionalAssembly.js.map