import { IndexQuery, writeIndexQuery } from "../Queries/IndexQuery.js";
import { throwError } from "../../Exceptions/index.js";
import { RavenCommand } from "../../Http/RavenCommand.js";
import { TypeUtil } from "../../Utility/TypeUtil.js";
import { StringBuilder } from "../../Utility/StringBuilder.js";
export class DeleteByQueryOperation {
    get resultType() {
        return "OperationId";
    }
    _queryToDelete;
    _options;
    constructor(queryToDelete, options) {
        if (!queryToDelete) {
            throwError("InvalidArgumentException", "QueryToDelete cannot be null");
        }
        this._queryToDelete = TypeUtil.isString(queryToDelete) ? new IndexQuery(queryToDelete) : queryToDelete;
        this._options = options;
    }
    getCommand(store, conventions, cache) {
        return new DeleteByIndexCommand(conventions, this._queryToDelete, this._options);
    }
}
export class DeleteByIndexCommand extends RavenCommand {
    _conventions;
    _queryToDelete;
    _options;
    constructor(conventions, queryToDelete, options) {
        super();
        this._conventions = conventions;
        this._queryToDelete = queryToDelete;
        this._options = options || {};
    }
    createRequest(node) {
        const path = new StringBuilder(node.url)
            .append("/databases/")
            .append(node.database)
            .append("/queries")
            .append("?allowStale=")
            .append(this._options.allowStale || "");
        if (!TypeUtil.isNullOrUndefined(this._options.maxOpsPerSecond)) {
            path.append("&maxOpsPerSec=")
                .append(this._options.maxOpsPerSecond);
        }
        path
            .append("&details=")
            .append(this._options.retrieveDetails || "");
        if (this._options.staleTimeout) {
            path.append("&staleTimeout=")
                .append(this._options.staleTimeout);
        }
        const body = writeIndexQuery(this._conventions, this._queryToDelete);
        const headers = this._headers().typeAppJson().build();
        const uri = path.toString();
        return {
            uri,
            body,
            method: "DELETE",
            headers
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
    get isReadRequest() {
        return false;
    }
}
//# sourceMappingURL=DeleteByQueryOperation.js.map