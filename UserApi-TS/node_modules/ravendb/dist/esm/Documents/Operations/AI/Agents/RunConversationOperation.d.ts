import { IMaintenanceOperation, OperationResultType } from "../../OperationAbstractions.js";
import type { AiAgentActionResponse } from "./AiAgentActionResponse.js";
import type { AiConversationCreationOptions } from "./AiConversationCreationOptions.js";
import type { ConversationResult } from "./ConversationResult.js";
import { RavenCommand } from "../../../../Http/RavenCommand.js";
import { DocumentConventions } from "../../../Conventions/DocumentConventions.js";
export declare class RunConversationOperation<TAnswer> implements IMaintenanceOperation<ConversationResult<TAnswer>> {
    private readonly _agentId;
    private readonly _conversationId;
    private readonly _userPrompt?;
    private readonly _actionResponses?;
    private readonly _options?;
    private readonly _changeVector?;
    constructor(agentId: string, conversationId: string, userPrompt?: string, actionResponses?: AiAgentActionResponse[], options?: AiConversationCreationOptions, changeVector?: string);
    get resultType(): OperationResultType;
    getCommand(conventions: DocumentConventions): RavenCommand<ConversationResult<TAnswer>>;
}
//# sourceMappingURL=RunConversationOperation.d.ts.map