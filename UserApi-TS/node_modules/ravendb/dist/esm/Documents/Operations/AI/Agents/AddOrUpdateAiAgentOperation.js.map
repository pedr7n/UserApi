{"version":3,"file":"AddOrUpdateAiAgentOperation.js","sourceRoot":"","sources":["../../../../../../src/Documents/Operations/AI/Agents/AddOrUpdateAiAgentOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../../OperationAbstractions.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport type { AiAgentConfiguration } from \"./config/AiAgentConfiguration.js\";\r\nimport type { AiAgentConfigurationResult } from \"./AiAgentConfigurationResult.js\";\r\nimport { RavenCommand } from \"../../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../../Conventions/DocumentConventions.js\";\r\nimport { IRaftCommand } from \"../../../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../../Primitives/Http.js\";\r\nimport { RaftIdGenerator } from \"../../../../Utility/RaftIdGenerator.js\";\r\nimport { throwError } from \"../../../../Exceptions/index.js\";\r\nimport { HeadersBuilder } from \"../../../../Utility/HttpUtil.js\";\r\n\r\nfunction hasNoSampleObjectAndSchema(configuration: AiAgentConfiguration) {\r\n    return (!configuration.outputSchema || configuration.outputSchema.trim() === \"\")\r\n        && (!configuration.sampleObject || configuration.sampleObject.trim() === \"\");\r\n}\r\n\r\nexport class AddOrUpdateAiAgentOperation implements IMaintenanceOperation<AiAgentConfigurationResult> {\r\n    private readonly _configuration: AiAgentConfiguration;\r\n    private readonly _sampleObject?: unknown;\r\n\r\n    public constructor(configuration: AiAgentConfiguration, sampleObject?: any) {\r\n        if (!configuration) {\r\n            throwError(\"InvalidArgumentException\", \"configuration cannot be null or undefined.\");\r\n        }\r\n\r\n        if (hasNoSampleObjectAndSchema(configuration) && !sampleObject) {\r\n            throwError(\"InvalidArgumentException\", \"Please provide a non-empty value for either outputSchema or sampleObject.\");\r\n        }\r\n        this._configuration = configuration;\r\n        if (sampleObject) {\r\n            this._sampleObject = sampleObject;\r\n        }\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<AiAgentConfigurationResult> {\r\n        return new AddOrUpdateAiAgentCommand(this._configuration, this._sampleObject, conventions);\r\n    }\r\n}\r\n\r\n\r\nclass AddOrUpdateAiAgentCommand extends RavenCommand<AiAgentConfigurationResult> implements IRaftCommand {\r\n    private readonly _configuration: AiAgentConfiguration;\r\n    private readonly _conventions: DocumentConventions;\r\n    private readonly _sampleSchema?: any;\r\n\r\n    public constructor(configuration: AiAgentConfiguration, sampleSchema: any, conventions: DocumentConventions) {\r\n        super();\r\n        if (hasNoSampleObjectAndSchema(configuration)) {\r\n            throwError(\"InvalidArgumentException\", \"Please provide a non-empty value for either outputSchema or sampleObject.\");\r\n        }\r\n        this._configuration = configuration;\r\n        this._sampleSchema = sampleSchema;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/ai/agent\";\r\n\r\n        if (!this._configuration && this._sampleSchema) {\r\n            this._configuration.sampleObject = this._sampleSchema;\r\n        }\r\n\r\n        const body = this._serializer.serialize(this._configuration);\r\n\r\n        const headers = HeadersBuilder\r\n            .create()\r\n            .typeAppJson()\r\n            .build();\r\n\r\n        return {\r\n            method: \"PUT\",\r\n            uri,\r\n            body,\r\n            headers\r\n        } as HttpRequestParameters;\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n}\r\n"]}