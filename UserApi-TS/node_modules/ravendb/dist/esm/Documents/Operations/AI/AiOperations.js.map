{"version":3,"file":"AiOperations.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/AI/AiOperations.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,2BAA2B,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAC;AAE9G,OAAO,EAAE,UAAU,EAAE,MAAM,gCAAgC,CAAC;AAC5D,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AAErD,MAAM,OAAO,YAAY;IACJ,MAAM,CAAiB;IACvB,aAAa,CAAS;IACtB,SAAS,CAA+B;IAEzD;;OAEG;IACH,YAAmB,KAAqB,EAAE,YAAqB;QAC3D,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,aAAa,GAAG,YAAY,IAAI,KAAK,CAAC,QAAQ,CAAC;QACpD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC7E,CAAC;IAED;;OAEG;IACI,WAAW,CAAC,YAAoB;QACnC,IAAI,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,YAAY,CAAC,EAAE,CAAC;YAChE,OAAO,IAAI,CAAC;QAChB,CAAC;QACD,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,WAAW,CACpB,aAAmC,EACnC,YAAsB;QAEtB,MAAM,SAAS,GAAG,IAAI,2BAA2B,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;QAC/E,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ,CAAC,OAAe;QACjC,MAAM,SAAS,GAAG,IAAI,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACpD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtD,OAAO,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC3F,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,SAAS;QAClB,MAAM,SAAS,GAAG,IAAI,oBAAoB,EAAE,CAAC;QAC7C,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,WAAW,CAAC,UAAkB;QACvC,MAAM,SAAS,GAAG,IAAI,sBAAsB,CAAC,UAAU,CAAC,CAAC;QACzD,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,OAAe,EAAE,cAAsB,EAAE,eAA+C,EAAE,YAAqB;QAC/H,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;IACvH,CAAC;CACJ","sourcesContent":["import type { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport type { AiAgentConfiguration } from \"./Agents/config/AiAgentConfiguration.js\";\r\nimport type { AiAgentConfigurationResult } from \"./Agents/AiAgentConfigurationResult.js\";\r\nimport type { GetAiAgentsResponse } from \"./Agents/GetAiAgentsResponse.js\";\r\nimport type { AiConversationCreationOptions } from \"./Agents/AiConversationCreationOptions.js\";\r\nimport { AddOrUpdateAiAgentOperation, DeleteAiAgentOperation, GetAiAgentsOperation } from \"./Agents/index.js\";\r\nimport { MaintenanceOperationExecutor } from \"../MaintenanceOperationExecutor.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { AiConversation } from \"./AiConversation.js\";\r\n\r\nexport class AiOperations {\r\n    private readonly _store: IDocumentStore;\r\n    private readonly _databaseName: string;\r\n    private readonly _executor: MaintenanceOperationExecutor;\r\n\r\n    /**\r\n     * Initializes a new instance of AiOperations for a given document store and optional database name.\r\n     */\r\n    public constructor(store: IDocumentStore, databaseName?: string) {\r\n        this._store = store;\r\n        this._databaseName = databaseName || store.database;\r\n        this._executor = this._store.maintenance.forDatabase(this._databaseName);\r\n    }\r\n\r\n    /**\r\n     * Returns an AiOperations instance for a different database.\r\n     */\r\n    public forDatabase(databaseName: string): AiOperations {\r\n        if (StringUtil.equalsIgnoreCase(this._databaseName, databaseName)) {\r\n            return this;\r\n        }\r\n        return new AiOperations(this._store, databaseName);\r\n    }\r\n\r\n    /**\r\n     * Creates or updates an AI agent configuration (with the given schema) on the database.\r\n     */\r\n    public async createAgent<TSchema>(\r\n        configuration: AiAgentConfiguration,\r\n        sampleObject?: TSchema\r\n    ): Promise<AiAgentConfigurationResult> {\r\n        const operation = new AddOrUpdateAiAgentOperation(configuration, sampleObject);\r\n        return await this._executor.send(operation);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the AI agent configuration for a specific agent.\r\n     */\r\n    public async getAgent(agentId: string): Promise<AiAgentConfiguration | null> {\r\n        const operation = new GetAiAgentsOperation(agentId);\r\n        const response = await this._executor.send(operation);\r\n        return response.aiAgents && response.aiAgents.length > 0 ? response.aiAgents[0] : null;\r\n    }\r\n\r\n    /**\r\n     * Retrieves all AI agents and their configurations.\r\n     */\r\n    public async getAgents(): Promise<GetAiAgentsResponse> {\r\n        const operation = new GetAiAgentsOperation();\r\n        return await this._executor.send(operation);\r\n    }\r\n\r\n    /**\r\n     * Deletes an AI agent configuration.\r\n     */\r\n    public async deleteAgent(identifier: string): Promise<AiAgentConfigurationResult> {\r\n        const operation = new DeleteAiAgentOperation(identifier);\r\n        return await this._executor.send(operation);\r\n    }\r\n\r\n    /**\r\n     * Opens an AI conversation for an agent.\r\n     */\r\n    public conversation(agentId: string, conversationId: string, creationOptions?: AiConversationCreationOptions, changeVector?: string): AiConversation {\r\n        return new AiConversation(this._store, this._databaseName, agentId, conversationId, creationOptions, changeVector);\r\n    }\r\n}"]}