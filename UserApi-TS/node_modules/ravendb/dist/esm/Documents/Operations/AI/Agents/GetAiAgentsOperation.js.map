{"version":3,"file":"GetAiAgentsOperation.js","sourceRoot":"","sources":["../../../../../../src/Documents/Operations/AI/Agents/GetAiAgentsOperation.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,YAAY,EAAE,MAAM,kCAAkC,CAAC;AAIhE,MAAM,OAAO,oBAAoB;IACZ,QAAQ,CAAU;IAEnC,YAAmB,OAAgB;QAC/B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAC9D,CAAC;CACJ;AAED,MAAM,kBAAmB,SAAQ,YAAiC;IAC7C,QAAQ,CAAU;IAClB,YAAY,CAAsB;IAEnD,YAAmB,OAA2B,EAAE,WAAgC;QAC5E,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,cAAc,IAAI,CAAC,QAAQ,iBAAiB,CAAC;QAElE,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,GAAG,IAAI,YAAY,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC3D,CAAC;QAED,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;SACN,CAAC;IACN,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../../OperationAbstractions.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport type { GetAiAgentsResponse } from \"./GetAiAgentsResponse.js\";\r\nimport { DocumentConventions } from \"../../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../../Primitives/Http.js\";\r\n\r\nexport class GetAiAgentsOperation implements IMaintenanceOperation<GetAiAgentsResponse> {\r\n    private readonly _agentId?: string;\r\n\r\n    public constructor(agentId?: string) {\r\n        this._agentId = agentId;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<GetAiAgentsResponse> {\r\n        return new GetAiAgentsCommand(this._agentId, conventions);\r\n    }\r\n}\r\n\r\nclass GetAiAgentsCommand extends RavenCommand<GetAiAgentsResponse> {\r\n    private readonly _agentId?: string;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(agentId: string | undefined, conventions: DocumentConventions) {\r\n        super();\r\n        this._agentId = agentId;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = `${node.url}/databases/${node.database}/admin/ai/agent`;\r\n\r\n        if (this._agentId) {\r\n            uri += `?agentId=${encodeURIComponent(this._agentId)}`;\r\n        }\r\n\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        };\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n}\r\n"]}