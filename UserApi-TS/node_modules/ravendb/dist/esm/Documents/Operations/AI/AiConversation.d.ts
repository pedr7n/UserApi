import type { AiAgentActionRequest } from "./Agents/AiAgentActionRequest.js";
import type { AiConversationCreationOptions } from "./Agents/AiConversationCreationOptions.js";
import type { AiAnswer } from "./AiAnswer.js";
import type { IDocumentStore } from "../../IDocumentStore.js";
export declare enum AiHandleErrorStrategy {
    SendErrorsToModel = "SendErrorsToModel",
    RaiseImmediately = "RaiseImmediately"
}
export type ActionInvocation = (request: AiAgentActionRequest) => Promise<void>;
export declare class AiConversation {
    private readonly _store;
    private readonly _databaseName;
    private readonly _agentId;
    private _conversationId;
    private readonly _options?;
    private _actionRequests;
    private readonly _actionResponses;
    private _userPrompt?;
    private readonly _invocations;
    constructor(store: IDocumentStore, databaseName: string, agentId: string, conversationId: string, options?: AiConversationCreationOptions, changeVector?: string);
    private _changeVector;
    get changeVector(): string;
    get id(): string;
    requiredActions(): AiAgentActionRequest[];
    addActionResponse<TResponse>(toolId: string, actionResponse: TResponse | string): void;
    setUserPrompt(userPrompt: string): void;
    handle<TArgs = any>(actionName: string, action: (request: AiAgentActionRequest, args: TArgs) => Promise<object> | object, aiHandleError?: AiHandleErrorStrategy): void;
    receive<TArgs = any>(actionName: string, action: (request: AiAgentActionRequest, args: TArgs) => Promise<void> | void, aiHandleError?: AiHandleErrorStrategy): void;
    run<TAnswer>(): Promise<AiAnswer<TAnswer>>;
    private _runInternal;
    private _parseArgs;
    private _createErrorMessageForLlm;
}
//# sourceMappingURL=AiConversation.d.ts.map