{"version":3,"file":"OperationExecutor.js","sourceRoot":"","sources":["../../../../src/Documents/Operations/OperationExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import { OperationCompletionAwaiter } from \"./OperationCompletionAwaiter.js\";\r\nimport {\r\n    IOperation,\r\n    AwaitableOperation,\r\n    OperationIdResult\r\n} from \"./OperationAbstractions.js\";\r\nimport { RequestExecutor } from \"../../Http/RequestExecutor.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { DocumentStoreBase } from \"../DocumentStoreBase.js\";\r\nimport { SessionInfo } from \"../Session/IDocumentSession.js\";\r\nimport { PatchOperation, PatchOperationResult } from \"./PatchOperation.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { PatchResult } from \"./PatchResult.js\";\r\nimport { IDocumentStore } from \"../IDocumentStore.js\";\r\nimport { StatusCodes } from \"../../Http/StatusCode.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\n\r\nexport class OperationExecutor {\r\n\r\n    private readonly _store: IDocumentStore;\r\n    private readonly _databaseName: string;\r\n    private _requestExecutor: RequestExecutor;\r\n\r\n    public constructor(store: DocumentStoreBase);\r\n    public constructor(store: IDocumentStore, databaseName?: string);\r\n    public constructor(store: DocumentStoreBase, databaseName?: string) {\r\n        this._store = store;\r\n        this._databaseName = databaseName ?? store.database;\r\n        if (!StringUtil.isNullOrWhitespace(this._databaseName)) {\r\n            this._requestExecutor = store.getRequestExecutor(this._databaseName);\r\n        } else {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Cannot use operations without a database defined, did you forget to call forDatabase?\");\r\n        }\r\n    }\r\n\r\n    private getRequestExecutor() {\r\n        if (this._requestExecutor) {\r\n            return this._requestExecutor;\r\n        }\r\n\r\n        this._requestExecutor = this._databaseName ? this._store.getRequestExecutor(this._databaseName) : null;\r\n        return this._requestExecutor;\r\n    }\r\n\r\n    public forDatabase(databaseName: string): OperationExecutor {\r\n        if (!databaseName) {\r\n            throwError(\"InvalidArgumentException\", `Argument 'databaseName' is invalid: ${databaseName}.`);\r\n        }\r\n        if (this._databaseName.toLowerCase() === databaseName.toLowerCase()) {\r\n            return this;\r\n        }\r\n\r\n        return new OperationExecutor(\r\n            this._store as IDocumentStore, \r\n            databaseName);\r\n    }\r\n\r\n    public async send(operation: AwaitableOperation): Promise<OperationCompletionAwaiter>;\r\n    public async send(operation: AwaitableOperation, sessionInfo?: SessionInfo): Promise<OperationCompletionAwaiter>;\r\n    public async send<TResult extends object>(\r\n        patchOperation: PatchOperation): Promise<PatchOperationResult<TResult>>;\r\n    public async send<TResult extends object>(\r\n        patchOperation: PatchOperation,\r\n        sessionInfo: SessionInfo): Promise<PatchOperationResult<TResult>>;\r\n    public async send<TResult extends object>(\r\n        patchOperation: PatchOperation,\r\n        sessionInfo: SessionInfo,\r\n        resultType: DocumentType<TResult>): Promise<PatchOperationResult<TResult>>;\r\n    public async send<TResult>(operation: IOperation<TResult>): Promise<TResult>;\r\n    public async send<TResult>(\r\n        operation: IOperation<TResult>,\r\n        sessionInfo?: SessionInfo): Promise<TResult>;\r\n    public async send<TResult extends object>(\r\n        operation: AwaitableOperation | IOperation<TResult>,\r\n        sessionInfo?: SessionInfo,\r\n        documentType?: DocumentType<TResult>)\r\n        : Promise<OperationCompletionAwaiter | TResult | PatchOperationResult<TResult>> {\r\n\r\n        const command =\r\n            operation.getCommand(this._store, this.getRequestExecutor().conventions, this.getRequestExecutor().cache);\r\n\r\n        await this.getRequestExecutor().execute(command as RavenCommand<TResult>, sessionInfo);\r\n\r\n        if (operation.resultType === \"OperationId\") {\r\n            const idResult = command.result as OperationIdResult;\r\n            return new OperationCompletionAwaiter(\r\n                this.getRequestExecutor(),\r\n                this.getRequestExecutor().conventions,\r\n                idResult.operationId,\r\n                command.selectedNodeTag || idResult.operationNodeTag);\r\n\r\n        } else if (operation.resultType === \"PatchResult\") {\r\n            const patchOperationResult = new PatchOperationResult<TResult>();\r\n            if (command.statusCode === StatusCodes.NotModified) {\r\n                patchOperationResult.status = \"NotModified\";\r\n                return patchOperationResult;\r\n            }\r\n\r\n            if (command.statusCode === StatusCodes.NotFound) {\r\n                patchOperationResult.status = \"DocumentDoesNotExist\";\r\n                return patchOperationResult;\r\n            }\r\n\r\n            const patchResult = command.result as any as PatchResult;\r\n            patchOperationResult.status = patchResult.status;\r\n            const { conventions } = this.getRequestExecutor();\r\n            conventions.tryRegisterJsType(documentType);\r\n            const entityType = conventions.getJsTypeByDocumentType(documentType);\r\n            patchOperationResult.document = conventions.deserializeEntityFromJson(\r\n                entityType, patchResult.modifiedDocument) as TResult;\r\n            return patchOperationResult;\r\n        }\r\n\r\n        return command.result as TResult;\r\n    }\r\n}\r\n"]}