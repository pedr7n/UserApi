import { throwError } from "../../../Exceptions/index.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
export class StartIndexOperation {
    _indexName;
    constructor(indexName) {
        if (!indexName) {
            throwError("InvalidArgumentException", "Index name cannot be null");
        }
        this._indexName = indexName;
    }
    getCommand(conventions) {
        return new StartIndexCommand(this._indexName);
    }
    get resultType() {
        return "CommandResult";
    }
}
export class StartIndexCommand extends RavenCommand {
    _indexName;
    constructor(indexName) {
        super();
        if (!indexName) {
            throwError("InvalidArgumentException", "Index name cannot be null");
        }
        this._indexName = indexName;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/admin/indexes/start?name="
            + encodeURIComponent(this._indexName);
        return { method: "POST", uri };
    }
    get isReadRequest() {
        return false;
    }
}
//# sourceMappingURL=StartIndexOperation.js.map