import { IMaintenanceOperation, OperationResultType } from "../OperationAbstractions.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { DocumentConventions } from "../../Conventions/DocumentConventions.js";
import { HttpRequestParameters } from "../../../Primitives/Http.js";
import { Stream } from "node:stream";
import { ServerNode } from "../../../Http/ServerNode.js";
export declare class GetTermsOperation implements IMaintenanceOperation<string[]> {
    private readonly _indexName;
    private readonly _field;
    private readonly _fromValue;
    private readonly _pageSize;
    constructor(indexName: string, field: string, fromValue: string);
    constructor(indexName: string, field: string, fromValue: string, pageSize: number);
    getCommand(conventions: DocumentConventions): RavenCommand<string[]>;
    get resultType(): OperationResultType;
}
export declare class GetTermsCommand extends RavenCommand<string[]> {
    private readonly _indexName;
    private readonly _field;
    private readonly _fromValue;
    private readonly _pageSize;
    constructor(indexName: string, field: string, fromValue: string);
    constructor(indexName: string, field: string, fromValue: string, pageSize: number);
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
    get isReadRequest(): boolean;
}
export interface TermsQueryResult {
    terms: string[];
    resultEtag: number;
    indexName: string;
}
//# sourceMappingURL=GetTermsOperation.d.ts.map