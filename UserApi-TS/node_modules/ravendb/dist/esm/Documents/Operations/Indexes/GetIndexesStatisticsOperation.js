import { CollectionStats } from "../../Indexes/IndexStats.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
export class GetIndexesStatisticsOperation {
    get resultType() {
        return "CommandResult";
    }
    getCommand(conventions) {
        return new GetIndexesStatisticsCommand(conventions);
    }
}
const typeInfo = {
    nestedTypes: {
        "results[].collections": "Map",
        "results[].collections$MAP": "CollectionStats"
    }
};
const knownTypes = new Map([[CollectionStats.name, CollectionStats]]);
export class GetIndexesStatisticsCommand extends RavenCommand {
    _conventions;
    constructor(conventions) {
        super();
        this._conventions = conventions;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/indexes/stats";
        return { uri };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        let body = null;
        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);
        for (const r of results["results"]) {
            r.collections = Object.keys(r.collections)
                .reduce((result, next) => [...result, [next, result[next]]], []);
        }
        const obj = this._reviveResultTypes(results, this._conventions, typeInfo, knownTypes);
        this.result = obj["results"];
        return body;
    }
    get isReadRequest() {
        return true;
    }
}
//# sourceMappingURL=GetIndexesStatisticsOperation.js.map