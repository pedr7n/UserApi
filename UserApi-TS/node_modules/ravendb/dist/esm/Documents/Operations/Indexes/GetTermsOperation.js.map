{"version":3,"file":"GetTermsOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/GetTermsOperation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAM7D,MAAM,OAAO,iBAAiB;IAET,UAAU,CAAS;IACnB,MAAM,CAAS;IACf,UAAU,CAAS;IACnB,SAAS,CAAS;IAInC,YAAmB,SAAiB,EAAE,KAAa,EAAE,SAAiB,EAAE,WAAmB,IAAI;QAC3F,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,UAAU,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,KAAK,EAAE,CAAC;YACT,UAAU,CAAC,0BAA0B,EAAE,sBAAsB,CAAC,CAAC;QACnE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC9F,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CAEJ;AAED,MAAM,OAAO,eAAgB,SAAQ,YAAsB;IAEtC,UAAU,CAAS;IACnB,MAAM,CAAS;IACf,UAAU,CAAS;IACnB,SAAS,CAAS;IAInC,YAAmB,SAAiB,EAAE,KAAa,EAAE,SAAiB,EAAE,WAAmB,IAAI;QAC3F,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,UAAU,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,KAAK,EAAE,CAAC;YACT,UAAU,CAAC,0BAA0B,EAAE,sBAAsB,CAAC,CAAC;QACnE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC9C,sBAAsB,GAAG,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC;cAC5D,SAAS,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC;cAC3C,aAAa,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC;cACvC,YAAY,GAAG,CAAC,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC;QAE5C,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/E,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class GetTermsOperation implements IMaintenanceOperation<string[]> {\r\n\r\n    private readonly _indexName: string;\r\n    private readonly _field: string;\r\n    private readonly _fromValue: string;\r\n    private readonly _pageSize: number;\r\n\r\n    public constructor(indexName: string, field: string, fromValue: string);\r\n    public constructor(indexName: string, field: string, fromValue: string, pageSize: number);\r\n    public constructor(indexName: string, field: string, fromValue: string, pageSize: number = null) {\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"IndexName cannot be null\");\r\n        }\r\n\r\n        if (!field) {\r\n            throwError(\"InvalidArgumentException\", \"Field cannot be null\");\r\n        }\r\n\r\n        this._indexName = indexName;\r\n        this._field = field;\r\n        this._fromValue = fromValue;\r\n        this._pageSize = pageSize;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<string[]> {\r\n        return new GetTermsCommand(this._indexName, this._field, this._fromValue, this._pageSize);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n}\r\n\r\nexport class GetTermsCommand extends RavenCommand<string[]> {\r\n\r\n    private readonly _indexName: string;\r\n    private readonly _field: string;\r\n    private readonly _fromValue: string;\r\n    private readonly _pageSize: number;\r\n\r\n    public constructor(indexName: string, field: string, fromValue: string);\r\n    public constructor(indexName: string, field: string, fromValue: string, pageSize: number);\r\n    public constructor(indexName: string, field: string, fromValue: string, pageSize: number = null) {\r\n        super();\r\n\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"IndexName cannot be null\");\r\n        }\r\n\r\n        if (!field) {\r\n            throwError(\"InvalidArgumentException\", \"Field cannot be null\");\r\n        }\r\n\r\n        this._indexName = indexName;\r\n        this._field = field;\r\n        this._fromValue = fromValue;\r\n        this._pageSize = pageSize;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database\r\n            + \"/indexes/terms?name=\" + encodeURIComponent(this._indexName)\r\n            + \"&field=\" + encodeURIComponent(this._field)\r\n            + \"&fromValue=\" + (this._fromValue || \"\")\r\n            + \"&pageSize=\" + (this._pageSize || \"\");\r\n\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n        this.result = results[\"terms\"];\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport interface TermsQueryResult {\r\n    terms: string[];\r\n    resultEtag: number;\r\n    indexName: string;\r\n}\r\n"]}