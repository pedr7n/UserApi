import { IndexDefinition } from "../../Indexes/IndexDefinition.js";
import { throwError } from "../../../Exceptions/index.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { ObjectUtil } from "../../../Utility/ObjectUtil.js";
export class GetIndexOperation {
    _indexName;
    constructor(indexName) {
        if (!indexName) {
            throwError("InvalidArgumentException", "IndexName cannot be null.");
        }
        this._indexName = indexName;
    }
    getCommand(conventions) {
        return new GetIndexCommand(this._indexName, conventions);
    }
    get resultType() {
        return "CommandResult";
    }
}
export class GetIndexCommand extends RavenCommand {
    _indexName;
    _conventions;
    constructor(indexName, conventions) {
        super();
        if (!indexName) {
            throwError("InvalidArgumentException", "IndexName cannot be null.");
        }
        this._indexName = indexName;
        this._conventions = conventions;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/indexes?name="
            + encodeURIComponent(this._indexName);
        return { uri };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            return;
        }
        let body = null;
        const result = await this._pipeline()
            .collectBody(b => body = b)
            .parseJsonSync()
            .objectKeysTransform({
            defaultTransform: ObjectUtil.camel,
            ignorePaths: [/fields\.[^.]+$/i, /configuration\./i]
        })
            .process(bodyStream);
        const indexDefTypeInfo = {
            nestedTypes: {
                "results[]": "IndexDefinition",
                "results[].maps": "Set"
            },
        };
        const knownTypes = new Map([[IndexDefinition.name, IndexDefinition]]);
        const allResults = this._reviveResultTypes(result, this._conventions, indexDefTypeInfo, knownTypes);
        this.result = allResults["results"][0] || null;
        return body;
    }
    get isReadRequest() {
        return true;
    }
}
//# sourceMappingURL=GetIndexOperation.js.map