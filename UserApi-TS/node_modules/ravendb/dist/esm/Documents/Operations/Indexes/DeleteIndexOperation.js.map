{"version":3,"file":"DeleteIndexOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/DeleteIndexOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAG7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAEtE,MAAM,OAAO,oBAAoB;IACZ,UAAU,CAAS;IAEpC,YAAmB,SAAiB;QAChC,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,UAAU,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnD,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAED,MAAM,OAAO,kBAAmB,SAAQ,YAAkB;IACrC,UAAU,CAAS;IAEpC,YAAmB,SAAiB;QAChC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAE7B,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,UAAU,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC9C,gBAAgB,GAAG,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7D,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC;IACrC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,sBAAsB;QACzB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class DeleteIndexOperation implements IMaintenanceOperation<void> {\r\n    private readonly _indexName: string;\r\n\r\n    public constructor(indexName: string) {\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"Index name cannot be null.\");\r\n        }\r\n\r\n        this._indexName = indexName;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new DeleteIndexCommand(this._indexName);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nexport class DeleteIndexCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _indexName: string;\r\n\r\n    public constructor(indexName: string) {\r\n        super();\r\n\r\n        this._responseType = \"Empty\";\r\n\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"Index name cannot be null.\");\r\n        }\r\n\r\n        this._indexName = indexName;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database\r\n            + \"/indexes?name=\" + encodeURIComponent(this._indexName);\r\n        return { method: \"DELETE\", uri };\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}