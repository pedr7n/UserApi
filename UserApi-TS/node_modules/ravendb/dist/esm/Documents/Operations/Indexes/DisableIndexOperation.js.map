{"version":3,"file":"DisableIndexOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/DisableIndexOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAG7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAEtE,MAAM,OAAO,qBAAqB;IAEb,UAAU,CAAS;IACnB,YAAY,CAAU;IAEvC,YAAmB,SAAiB,EAAE,cAAuB,KAAK;QAC9D,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,UAAU,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IACvE,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CAEJ;AAED,MAAM,OAAO,mBAAoB,SAAQ,YAAkB;IAEvD,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEgB,UAAU,CAAS;IACnB,YAAY,CAAU;IAEvC,YAAmB,SAAiB,EAAE,WAAoB;QACtD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,UAAU,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG;cACd,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC7B,8BAA8B,GAAG,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC;cACpE,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC;QAE1C,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;IACnC,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class DisableIndexOperation implements IMaintenanceOperation<void> {\r\n\r\n    private readonly _indexName: string;\r\n    private readonly _clusterWide: boolean;\r\n\r\n    public constructor(indexName: string, clusterWide: boolean = false) {\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"IndexName cannot be null\");\r\n        }\r\n\r\n        this._indexName = indexName;\r\n        this._clusterWide = clusterWide;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions) {\r\n        return new DisableIndexCommand(this._indexName, this._clusterWide);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n}\r\n\r\nexport class DisableIndexCommand extends RavenCommand<void> implements IRaftCommand {\r\n\r\n    public get isReadRequest() {\r\n        return false;\r\n    }\r\n\r\n    private readonly _indexName: string;\r\n    private readonly _clusterWide: boolean;\r\n\r\n    public constructor(indexName: string, clusterWide: boolean) {\r\n        super();\r\n\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"IndexName cannot be null\");\r\n        }\r\n\r\n        this._responseType = \"Empty\";\r\n        this._indexName = indexName;\r\n        this._clusterWide = clusterWide;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url\r\n            + \"/databases/\" + node.database\r\n            + \"/admin/indexes/disable?name=\" + encodeURIComponent(this._indexName)\r\n            + \"&clusterWide=\" + this._clusterWide;\r\n\r\n        return { method: \"POST\", uri };\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}