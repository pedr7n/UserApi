{"version":3,"file":"GetIndexesStatisticsOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/GetIndexesStatisticsOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAc,eAAe,EAAE,MAAM,6BAA6B,CAAC;AAG1E,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAG7D,MAAM,OAAO,6BAA6B;IAEtC,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,2BAA2B,CAAC,WAAW,CAAC,CAAC;IACxD,CAAC;CAEJ;AAED,MAAM,QAAQ,GAAG;IACb,WAAW,EAAE;QACT,uBAAuB,EAAE,KAAK;QAC9B,2BAA2B,EAAE,iBAAiB;KACjD;CACJ,CAAC;AAEF,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC;AAEtE,MAAM,OAAO,2BAA4B,SAAQ,YAA0B;IACtD,YAAY,CAAsB;IACnD,YAAmB,WAAgC;QAC/C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC;QACxE,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/E,KAAK,MAAM,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;YACjC,CAAC,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC;iBACrC,MAAM,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAE,GAAG,MAAM,EAAE,CAAE,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,CAAC;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAC/B,OAAO,EACP,IAAI,CAAC,YAAY,EACjB,QAAQ,EACR,UAAU,CAAC,CAAC;QAEhB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { IndexStats, CollectionStats } from \"../../Indexes/IndexStats.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class GetIndexesStatisticsOperation implements IMaintenanceOperation<IndexStats[]> {\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<IndexStats[]> {\r\n        return new GetIndexesStatisticsCommand(conventions);\r\n    }\r\n\r\n}\r\n\r\nconst typeInfo = {\r\n    nestedTypes: {\r\n        \"results[].collections\": \"Map\",\r\n        \"results[].collections$MAP\": \"CollectionStats\"\r\n    }\r\n};\r\n\r\nconst knownTypes = new Map([[CollectionStats.name, CollectionStats]]);\r\n\r\nexport class GetIndexesStatisticsCommand extends RavenCommand<IndexStats[]> {\r\n    private readonly _conventions: DocumentConventions;\r\n    public constructor(conventions: DocumentConventions) {\r\n        super();\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/indexes/stats\";\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n        for (const r of results[\"results\"]) {\r\n            r.collections = Object.keys(r.collections)\r\n                .reduce((result, next) => [ ...result, [ next, result[next] ]], []);\r\n        }\r\n\r\n        const obj = this._reviveResultTypes(\r\n            results,\r\n            this._conventions,\r\n            typeInfo,\r\n            knownTypes);\r\n\r\n        this.result = obj[\"results\"];\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}