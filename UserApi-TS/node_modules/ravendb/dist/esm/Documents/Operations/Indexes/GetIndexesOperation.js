import { RavenCommand } from "../../../Http/RavenCommand.js";
import { IndexDefinition } from "../../Indexes/IndexDefinition.js";
import { ObjectUtil } from "../../../Utility/ObjectUtil.js";
export class GetIndexesOperation {
    _start;
    _pageSize;
    constructor(start, pageSize) {
        this._start = start;
        this._pageSize = pageSize;
    }
    getCommand(conventions) {
        return new GetIndexesCommand(this._start, this._pageSize, conventions);
    }
    get resultType() {
        return "CommandResult";
    }
}
const indexDefTypeInfo = {
    nestedTypes: {
        "results[]": "IndexDefinition",
        "results[].maps": "Set"
    },
};
const knownTypes = new Map([[IndexDefinition.name, IndexDefinition]]);
export class GetIndexesCommand extends RavenCommand {
    _start;
    _pageSize;
    _conventions;
    constructor(start, pageSize, conventions) {
        super();
        this._start = start;
        this._pageSize = pageSize;
        this._conventions = conventions;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database
            + "/indexes?start=" + this._start + "&pageSize=" + this._pageSize;
        return { uri };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        let body = null;
        const result = await this._pipeline()
            .collectBody(b => body = b)
            .parseJsonSync()
            .objectKeysTransform({
            defaultTransform: ObjectUtil.camel,
            ignorePaths: [/fields\.[^.]+$/i, /results\.\[]\.configuration\./i]
        })
            .process(bodyStream);
        this.result = this._reviveResultTypes(result, this._conventions, indexDefTypeInfo, knownTypes)["results"];
        return body;
    }
    get isReadRequest() {
        return true;
    }
}
//# sourceMappingURL=GetIndexesOperation.js.map