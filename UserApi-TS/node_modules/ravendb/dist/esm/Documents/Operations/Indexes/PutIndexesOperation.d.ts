import { IMaintenanceOperation, OperationResultType } from "../OperationAbstractions.js";
import { IndexDefinition } from "../../Indexes/IndexDefinition.js";
import { DocumentConventions } from "../../Conventions/DocumentConventions.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { HttpRequestParameters } from "../../../Primitives/Http.js";
import { Stream } from "node:stream";
import { ServerNode } from "../../../Http/ServerNode.js";
import { IRaftCommand } from "../../../Http/IRaftCommand.js";
export interface PutIndexResult {
    index: string;
    raftCommandIndex: number;
}
export declare class PutIndexesOperation implements IMaintenanceOperation<PutIndexResult[]> {
    get resultType(): OperationResultType;
    private readonly _indexToAdd;
    constructor(...indexToAdd: IndexDefinition[]);
    getCommand(conventions: DocumentConventions): RavenCommand<PutIndexResult[]>;
}
export declare class PutIndexesCommand extends RavenCommand<PutIndexResult[]> implements IRaftCommand {
    private readonly _indexToAdd;
    private _allJavaScriptIndexes;
    private readonly _conventions;
    constructor(conventions: DocumentConventions, indexesToAdd: IndexDefinition[]);
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
    get isReadRequest(): boolean;
    getRaftUniqueRequestId(): string;
}
//# sourceMappingURL=PutIndexesOperation.d.ts.map