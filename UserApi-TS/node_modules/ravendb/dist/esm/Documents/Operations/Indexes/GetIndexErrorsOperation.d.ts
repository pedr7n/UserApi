import { IMaintenanceOperation, OperationResultType } from "../OperationAbstractions.js";
import { IndexErrors } from "../../Indexes/Errors.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { DocumentConventions } from "../../Conventions/DocumentConventions.js";
import { ServerNode } from "../../../Http/ServerNode.js";
import { HttpRequestParameters } from "../../../Primitives/Http.js";
import { Stream } from "node:stream";
export declare class GetIndexErrorsOperation implements IMaintenanceOperation<IndexErrors[]> {
    private readonly _indexNames;
    constructor();
    constructor(indexNames: string[]);
    getCommand(conventions: DocumentConventions): RavenCommand<IndexErrors[]>;
    get resultType(): OperationResultType;
}
export declare class GetIndexErrorsCommand extends RavenCommand<IndexErrors[]> {
    private readonly _indexNames;
    private readonly _conventions;
    constructor(indexNames: string[], conventions: DocumentConventions);
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
    get isReadRequest(): boolean;
}
//# sourceMappingURL=GetIndexErrorsOperation.d.ts.map