import { throwError } from "../../../Exceptions/index.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
export class GetTermsOperation {
    _indexName;
    _field;
    _fromValue;
    _pageSize;
    constructor(indexName, field, fromValue, pageSize = null) {
        if (!indexName) {
            throwError("InvalidArgumentException", "IndexName cannot be null");
        }
        if (!field) {
            throwError("InvalidArgumentException", "Field cannot be null");
        }
        this._indexName = indexName;
        this._field = field;
        this._fromValue = fromValue;
        this._pageSize = pageSize;
    }
    getCommand(conventions) {
        return new GetTermsCommand(this._indexName, this._field, this._fromValue, this._pageSize);
    }
    get resultType() {
        return "CommandResult";
    }
}
export class GetTermsCommand extends RavenCommand {
    _indexName;
    _field;
    _fromValue;
    _pageSize;
    constructor(indexName, field, fromValue, pageSize = null) {
        super();
        if (!indexName) {
            throwError("InvalidArgumentException", "IndexName cannot be null");
        }
        if (!field) {
            throwError("InvalidArgumentException", "Field cannot be null");
        }
        this._indexName = indexName;
        this._field = field;
        this._fromValue = fromValue;
        this._pageSize = pageSize;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database
            + "/indexes/terms?name=" + encodeURIComponent(this._indexName)
            + "&field=" + encodeURIComponent(this._field)
            + "&fromValue=" + (this._fromValue || "")
            + "&pageSize=" + (this._pageSize || "");
        return { uri };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        let body = null;
        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);
        this.result = results["terms"];
        return body;
    }
    get isReadRequest() {
        return true;
    }
}
//# sourceMappingURL=GetTermsOperation.js.map