{"version":3,"file":"GetIndexStatisticsOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Indexes/GetIndexStatisticsOperation.ts"],"names":[],"mappings":"AACA,OAAO,EAAc,eAAe,EAAE,MAAM,6BAA6B,CAAC;AAC1E,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAM7D,MAAM,OAAO,2BAA2B;IACnB,UAAU,CAAS;IAEpC,YAAmB,SAAiB;QAChC,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,UAAU,CAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,yBAAyB,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IACvE,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CAEJ;AAED,MAAM,OAAO,yBAA0B,SAAQ,YAAwB;IAClD,UAAU,CAAS;IACnB,YAAY,CAAsB;IAEnD,YAAmB,SAAiB,EAAE,WAAgC;QAClE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,UAAU,CAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC9C,sBAAsB,GAAG,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnE,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aACrD,OAAO,CAAC,UAAU,CAAC,CAAC;QACzB,KAAK,MAAM,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;YACjC,CAAC,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC;iBACrC,MAAM,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAE,GAAG,MAAM,EAAE,CAAE,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5E,CAAC;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CACvC,OAAO,EACP,IAAI,CAAC,YAAY,EACjB;YACI,WAAW,EAAE;gBACT,uBAAuB,EAAE,KAAK;gBAC9B,2BAA2B,EAAE,iBAAiB;aACjD;SACJ,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;QAE3D,MAAM,iBAAiB,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC;QACjD,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC;YAC5B,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { IndexStats, CollectionStats } from \"../../Indexes/IndexStats.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class GetIndexStatisticsOperation implements IMaintenanceOperation<IndexStats> {\r\n    private readonly _indexName: string;\r\n\r\n    public constructor(indexName: string) {\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"IndexName cannot be null.\");\r\n        }\r\n\r\n        this._indexName = indexName;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<IndexStats> {\r\n        return new GetIndexStatisticsCommand(this._indexName, conventions);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n}\r\n\r\nexport class GetIndexStatisticsCommand extends RavenCommand<IndexStats> {\r\n    private readonly _indexName: string;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(indexName: string, conventions: DocumentConventions) {\r\n        super();\r\n\r\n        if (!indexName) {\r\n            throwError(\"InvalidArgumentException\", \"IndexName cannot be null.\");\r\n        }\r\n\r\n        this._indexName = indexName;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database\r\n            + \"/indexes/stats?name=\" + encodeURIComponent(this._indexName);\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _)\r\n            .process(bodyStream);\r\n        for (const r of results[\"results\"]) {\r\n            r.collections = Object.keys(r.collections)\r\n                .reduce((result, next) => [ ...result, [ next, result[next] ]], []);\r\n        }\r\n        const responseObj = this._reviveResultTypes(\r\n            results,\r\n            this._conventions,\r\n            {\r\n                nestedTypes: {\r\n                    \"results[].collections\": \"Map\",\r\n                    \"results[].collections$MAP\": \"CollectionStats\"\r\n                }\r\n            }, new Map([[CollectionStats.name, CollectionStats]]));\r\n\r\n        const indexStatsResults = responseObj[\"results\"];\r\n        if (!indexStatsResults.length) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        this.result = indexStatsResults[0];\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}