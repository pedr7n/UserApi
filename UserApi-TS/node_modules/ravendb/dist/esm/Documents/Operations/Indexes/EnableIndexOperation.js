import { throwError } from "../../../Exceptions/index.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { RaftIdGenerator } from "../../../Utility/RaftIdGenerator.js";
export class EnableIndexOperation {
    _indexName;
    _clusterWide;
    constructor(indexName, clusterWide = false) {
        if (!indexName) {
            throwError("InvalidArgumentException", "IndexName cannot be null");
        }
        this._indexName = indexName;
        this._clusterWide = clusterWide;
    }
    getCommand(conventions) {
        return new EnableIndexCommand(this._indexName, this._clusterWide);
    }
    get resultType() {
        return "CommandResult";
    }
}
export class EnableIndexCommand extends RavenCommand {
    _indexName;
    _clusterWide;
    constructor(indexName, clusterWide) {
        super();
        if (!indexName) {
            throwError("InvalidArgumentException", "IndexName cannot be null");
        }
        this._indexName = indexName;
        this._clusterWide = clusterWide || false;
        this._responseType = "Empty";
    }
    createRequest(node) {
        const uri = node.url
            + "/databases/" + node.database
            + "/admin/indexes/enable?name=" + encodeURIComponent(this._indexName)
            + "&clusterWide=" + this._clusterWide;
        return {
            method: "POST",
            uri
        };
    }
    get isReadRequest() {
        return false;
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator.newId();
    }
}
//# sourceMappingURL=EnableIndexOperation.js.map