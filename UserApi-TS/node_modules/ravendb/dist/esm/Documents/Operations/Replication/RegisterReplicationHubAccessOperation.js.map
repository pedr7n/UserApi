{"version":3,"file":"RegisterReplicationHubAccessOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Replication/RegisterReplicationHubAccessOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,gCAAgC,CAAC;AAC5D,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,YAAY,EAA2B,MAAM,+BAA+B,CAAC;AAEtF,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAKtE,OAAO,EAAE,WAAW,EAAE,MAAM,6BAA6B,CAAC;AAE1D,MAAM,OAAO,qCAAqC;IAC7B,QAAQ,CAAS;IACjB,OAAO,CAAuB;IAE/C,YAAmB,OAAe,EAAE,MAA4B;QAC5D,IAAI,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;YACzC,UAAU,CAAC,0BAA0B,EAAE,uCAAuC,CAAC,CAAC;QACpF,CAAC;QAED,IAAI,CAAC,MAAM,EAAE,CAAC;YACV,UAAU,CAAC,0BAA0B,EAAE,uBAAuB,CAAC,CAAC;QACpE,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAGM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,mCAAmC,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAChF,CAAC;CAEJ;AAED,MAAM,mCAAoC,SAAQ,YAAkB;IAC/C,QAAQ,CAAS;IACjB,OAAO,CAAuB;IAE/C,YAAmB,OAAe,EAAE,MAA4B;QAC5D,KAAK,EAAE,CAAC;QAER,IAAI,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;YACzC,UAAU,CAAC,0BAA0B,EAAE,uCAAuC,CAAC,CAAC;QACpF,CAAC;QAED,IAAI,CAAC,MAAM,EAAE,CAAC;YACV,UAAU,CAAC,0BAA0B,EAAE,uBAAuB,CAAC,CAAC;QACpE,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IACjC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,gDAAgD,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEzI,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QACtD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEtD,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;YACb,OAAO;YACP,IAAI;SACP,CAAA;IACL,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,KAAgB,EAAE,QAAsB,EAAE,UAAoB,EAAE,GAAW;QAC7F,IAAI,QAAQ,CAAC,MAAM,KAAK,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC3C,UAAU,CAAC,iCAAiC,EACxC,sBAAsB,GAAG,IAAI,CAAC,QAAQ,GAAG,oEAAoE,CAAC,CAAC;QACvH,CAAC;QACD,OAAO,WAAW,CAAC;IACvB,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { ReplicationHubAccess } from \"./ReplicationHubAccess.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand, ResponseDisposeHandling } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters, HttpResponse } from \"../../../Primitives/Http.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { Readable } from \"node:stream\";\r\nimport { StatusCodes } from \"../../../Http/StatusCode.js\";\r\n\r\nexport class RegisterReplicationHubAccessOperation implements IMaintenanceOperation<void> {\r\n    private readonly _hubName: string;\r\n    private readonly _access: ReplicationHubAccess;\r\n\r\n    public constructor(hubName: string, access: ReplicationHubAccess) {\r\n        if (StringUtil.isNullOrWhitespace(hubName)) {\r\n            throwError(\"InvalidArgumentException\", \"HubName cannot be null or whitespace.\");\r\n        }\r\n\r\n        if (!access) {\r\n            throwError(\"InvalidArgumentException\", \"Access cannot be null\");\r\n        }\r\n\r\n        this._hubName = hubName;\r\n        this._access = access;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new RegisterReplicationHubAccessCommand(this._hubName, this._access);\r\n    }\r\n\r\n}\r\n\r\nclass RegisterReplicationHubAccessCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _hubName: string;\r\n    private readonly _access: ReplicationHubAccess;\r\n\r\n    public constructor(hubName: string, access: ReplicationHubAccess) {\r\n        super();\r\n\r\n        if (StringUtil.isNullOrWhitespace(hubName)) {\r\n            throwError(\"InvalidArgumentException\", \"HubName cannot be null or whitespace.\");\r\n        }\r\n\r\n        if (!access) {\r\n            throwError(\"InvalidArgumentException\", \"Access cannot be null\");\r\n        }\r\n\r\n        this._hubName = hubName;\r\n        this._access = access;\r\n        this._responseType = \"Empty\";\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/tasks/pull-replication/hub/access?name=\" + this._urlEncode(this._hubName);\r\n\r\n        const headers = this._headers().typeAppJson().build();\r\n        const body = this._serializer.serialize(this._access);\r\n\r\n        return {\r\n            uri,\r\n            method: \"PUT\",\r\n            headers,\r\n            body\r\n        }\r\n    }\r\n\r\n    async processResponse(cache: HttpCache, response: HttpResponse, bodyStream: Readable, url: string): Promise<ResponseDisposeHandling> {\r\n        if (response.status === StatusCodes.NotFound) {\r\n            throwError(\"ReplicationHubNotFoundException\",\r\n                \"The replication hub \" + this._hubName + \" was not found on the database. Did you forget to define it first?\");\r\n        }\r\n        return \"Automatic\";\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n\r\n"]}