{"version":3,"file":"PutPullReplicationAsHubOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Replication/PutPullReplicationAsHubOperation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,gCAAgC,CAAC;AAC5D,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAGxD,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAK7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAEtE,MAAM,OAAO,gCAAgC;IACxB,0BAA0B,CAA4B;IAIvE,YAAmB,gBAAoD;QACnE,IAAI,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC;YACtC,MAAM,IAAI,GAAG,gBAAgB,CAAC;YAC9B,IAAI,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC;gBACjC,UAAU,CAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;YAC3E,CAAC;YAED,IAAI,CAAC,0BAA0B,GAAG;gBAC9B,IAAI;aACP,CAAA;QACL,CAAC;aAAM,CAAC;YACJ,MAAM,yBAAyB,GAAG,gBAAgB,CAAC;YACnD,IAAI,UAAU,CAAC,aAAa,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC3D,UAAU,CAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;YAC3E,CAAC;YAED,IAAI,CAAC,0BAA0B,GAAG,yBAAyB,CAAC;QAChE,CAAC;IACL,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,sCAAsC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACvF,CAAC;CACJ;AAED,MAAM,sCAAuC,SAAQ,YAAqC;IACrE,0BAA0B,CAA4B;IAEvE,YAAmB,yBAAoD;QACnE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,0BAA0B,GAAG,yBAAyB,CAAC;IAChE,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,mCAAmC,CAAC;QAE3F,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAEzE,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;YACH,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,IAAI;SACP,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { PullReplicationDefinition } from \"./PullReplicationDefinition.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { ModifyOngoingTaskResult } from \"../../../ServerWide/ModifyOnGoingTaskResult.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class PutPullReplicationAsHubOperation implements IMaintenanceOperation<ModifyOngoingTaskResult> {\r\n    private readonly _pullReplicationDefinition: PullReplicationDefinition;\r\n\r\n    public constructor(name: string)\r\n    public constructor(pullReplicationDefinition: PullReplicationDefinition)\r\n    public constructor(nameOrDefinition: string | PullReplicationDefinition) {\r\n        if (TypeUtil.isString(nameOrDefinition)) {\r\n            const name = nameOrDefinition;\r\n            if (StringUtil.isNullOrEmpty(name)) {\r\n                throwError(\"InvalidArgumentException\", \"Name cannot be null or empty\");\r\n            }\r\n\r\n            this._pullReplicationDefinition = {\r\n                name\r\n            }\r\n        } else {\r\n            const pullReplicationDefinition = nameOrDefinition;\r\n            if (StringUtil.isNullOrEmpty(pullReplicationDefinition.name)) {\r\n                throwError(\"InvalidArgumentException\", \"Name cannot be null or empty\");\r\n            }\r\n\r\n            this._pullReplicationDefinition = pullReplicationDefinition;\r\n        }\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<ModifyOngoingTaskResult> {\r\n        return new UpdatePullReplicationDefinitionCommand(this._pullReplicationDefinition);\r\n    }\r\n}\r\n\r\nclass UpdatePullReplicationDefinitionCommand extends RavenCommand<ModifyOngoingTaskResult> implements IRaftCommand {\r\n    private readonly _pullReplicationDefinition: PullReplicationDefinition;\r\n\r\n    public constructor(pullReplicationDefinition: PullReplicationDefinition) {\r\n        super();\r\n        this._pullReplicationDefinition = pullReplicationDefinition;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/tasks/pull-replication/hub\";\r\n\r\n        const body = this._serializer.serialize(this._pullReplicationDefinition);\r\n\r\n        return {\r\n            method: \"PUT\",\r\n            uri,\r\n            headers: this._headers().typeAppJson().build(),\r\n            body\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}