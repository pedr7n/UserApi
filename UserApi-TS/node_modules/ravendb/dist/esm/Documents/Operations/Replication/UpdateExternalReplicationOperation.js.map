{"version":3,"file":"UpdateExternalReplicationOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Replication/UpdateExternalReplicationOperation.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAK7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AACtE,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,MAAM,OAAO,kCAAkC;IAE1B,WAAW,CAAsB;IAElD,YAAmB,UAA+B;QAC9C,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,gCAAgC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAClE,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAED,MAAM,OAAO,gCAAiC,SAAQ,YAAqC;IACtE,WAAW,CAAsB;IAElD,YAAmB,UAA+B;QAC9C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,mCAAmC,CAAC;QAE3F,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE;aAC1B,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QACvE,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG;YACH,OAAO;YACP,IAAI;SACP,CAAC;IACN,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAEM,sBAAsB;QACzB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { ModifyOngoingTaskResult } from \"../../../ServerWide/ModifyOnGoingTaskResult.js\";\r\nimport { ExternalReplication } from \"../../Replication/ExternalReplication.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\n\r\nexport class UpdateExternalReplicationOperation implements IMaintenanceOperation<ModifyOngoingTaskResult> {\r\n\r\n    private readonly _newWatcher: ExternalReplication;\r\n\r\n    public constructor(newWatcher: ExternalReplication) {\r\n        if (!newWatcher) {\r\n            throwError(\"InvalidArgumentException\", \"NewWatcher cannot be null\");\r\n        }\r\n        this._newWatcher = newWatcher;\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<ModifyOngoingTaskResult> {\r\n        return new UpdateExternalReplicationCommand(this._newWatcher);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nexport class UpdateExternalReplicationCommand extends RavenCommand<ModifyOngoingTaskResult> implements IRaftCommand {\r\n    private readonly _newWatcher: ExternalReplication;\r\n\r\n    public constructor(newWatcher: ExternalReplication) {\r\n        super();\r\n        this._newWatcher = newWatcher;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/tasks/external-replication\";\r\n\r\n        const headers = this._headers()\r\n            .typeAppJson().build();\r\n        const body = this._serializer.serialize({ watcher: this._newWatcher });\r\n        return {\r\n            method: \"POST\",\r\n            uri,\r\n            headers,\r\n            body\r\n        };\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}