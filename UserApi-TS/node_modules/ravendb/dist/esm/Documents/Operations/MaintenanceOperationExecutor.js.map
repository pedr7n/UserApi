{"version":3,"file":"MaintenanceOperationExecutor.js","sourceRoot":"","sources":["../../../../src/Documents/Operations/MaintenanceOperationExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import { OperationCompletionAwaiter } from \"./OperationCompletionAwaiter.js\";\r\nimport { DocumentStoreBase } from \"../DocumentStoreBase.js\";\r\nimport { IMaintenanceOperation, AwaitableMaintenanceOperation, OperationIdResult } from \"./OperationAbstractions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerOperationExecutor } from \"./ServerOperationExecutor.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { RequestExecutor } from \"../../Http/RequestExecutor.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\n\r\nexport class MaintenanceOperationExecutor {\r\n\r\n    private readonly _store: DocumentStoreBase;\r\n    private _nodeTag: string;\r\n    private _shardNumber: number;\r\n    private readonly _databaseName: string;\r\n    private _requestExecutor: RequestExecutor;\r\n    private _serverOperationExecutor: ServerOperationExecutor;\r\n\r\n    public constructor(store: DocumentStoreBase, databaseName?: string)\r\n    public constructor(store: DocumentStoreBase, databaseName: string, nodeTag: string, shardNumber: number)\r\n    public constructor(store: DocumentStoreBase, databaseName?: string, nodeTag?: string, shardNumber?: number) {\r\n        this._store = store;\r\n        this._databaseName = databaseName || store.database;\r\n        this._nodeTag = nodeTag;\r\n        this._shardNumber = shardNumber;\r\n    }\r\n\r\n    private get requestExecutor() {\r\n        if (this._requestExecutor) {\r\n            return this._requestExecutor;\r\n        }\r\n\r\n        this._requestExecutor = this._databaseName ? this._store.getRequestExecutor(this._databaseName) : null;\r\n        return this.requestExecutor;\r\n    }\r\n\r\n    public get server(): ServerOperationExecutor {\r\n        if (!this._serverOperationExecutor) {\r\n            this._serverOperationExecutor = new ServerOperationExecutor(this._store);\r\n        }\r\n\r\n        return this._serverOperationExecutor;\r\n    }\r\n\r\n    public forDatabase(databaseName: string): MaintenanceOperationExecutor {\r\n        if (this._databaseName\r\n            && this._databaseName.toLowerCase() === (databaseName || \"\").toLowerCase()) {\r\n            return this;\r\n        }\r\n\r\n        return new MaintenanceOperationExecutor(this._store, databaseName, this._nodeTag, this._shardNumber);\r\n    }\r\n\r\n    public async send(operation: AwaitableMaintenanceOperation): Promise<OperationCompletionAwaiter>;\r\n    public async send<TResult>(operation: IMaintenanceOperation<TResult>): Promise<TResult>;\r\n    public async send<TResult>(\r\n        operation: AwaitableMaintenanceOperation | IMaintenanceOperation<TResult>)\r\n        : Promise<OperationCompletionAwaiter | TResult> {\r\n\r\n        this._assertDatabaseNameSet();\r\n        const command = operation.getCommand(this.requestExecutor.conventions);\r\n\r\n        this.applyNodeTagAndShardNumberToCommandIfSet(command);\r\n\r\n        await this.requestExecutor.execute(command as RavenCommand<TResult>);\r\n\r\n        if (operation.resultType === \"OperationId\") {\r\n            const idResult = command.result as OperationIdResult;\r\n            return new OperationCompletionAwaiter(\r\n                this.requestExecutor, this.requestExecutor.conventions, idResult.operationId,\r\n                command.selectedNodeTag || idResult.operationNodeTag);\r\n        }\r\n\r\n        return command.result as TResult;\r\n    }\r\n\r\n    private _assertDatabaseNameSet(): void {\r\n        if (!this._databaseName) {\r\n            throwError(\"InvalidOperationException\",\r\n                \"Cannot use maintenance without a database defined, did you forget to call forDatabase?\");\r\n        }\r\n    }\r\n\r\n    private applyNodeTagAndShardNumberToCommandIfSet(command: RavenCommand<unknown>) {\r\n        if (this._nodeTag) {\r\n            command.selectedNodeTag = this._nodeTag;\r\n        }\r\n        if (!TypeUtil.isNullOrUndefined(this._shardNumber)) {\r\n            command.selectedShardNumber = this._shardNumber;\r\n        }\r\n    }\r\n}\r\n"]}