{"version":3,"file":"DeleteSorterOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Sorters/DeleteSorterOperation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAK7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAEtE,MAAM,OAAO,qBAAqB;IACb,WAAW,CAAS;IAErC,YAAmB,UAAkB;QACjC,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;CACJ;AAED,MAAM,mBAAoB,SAAQ,YAAkB;IAC/B,WAAW,CAAS;IAErC,YAAmB,UAAkB;QACjC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,sBAAsB,GAAG,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAErH,OAAO;YACH,GAAG;YACH,MAAM,EAAE,QAAQ;SACnB,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,sBAAsB;QACzB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class DeleteSorterOperation implements IMaintenanceOperation<void> {\r\n    private readonly _sorterName: string;\r\n\r\n    public constructor(sorterName: string) {\r\n        if (!sorterName) {\r\n            throwError(\"InvalidArgumentException\", \"SorterName cannot be null\");\r\n        }\r\n\r\n        this._sorterName = sorterName;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new DeleteSorterCommand(this._sorterName);\r\n    }\r\n}\r\n\r\nclass DeleteSorterCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _sorterName: string;\r\n\r\n    public constructor(sorterName: string) {\r\n        super();\r\n\r\n        if (!sorterName) {\r\n            throwError(\"InvalidArgumentException\", \"IndexName cannot be null\");\r\n        }\r\n\r\n        this._sorterName = sorterName;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/sorters?name=\" + encodeURIComponent(this._sorterName);\r\n\r\n        return {\r\n            uri,\r\n            method: \"DELETE\"\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}"]}