import { throwError } from "../../../Exceptions/index.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { RaftIdGenerator } from "../../../Utility/RaftIdGenerator.js";
export class PutSortersOperation {
    _sortersToAdd;
    constructor(...sortersToAdd) {
        if (!sortersToAdd || !sortersToAdd.length) {
            throwError("InvalidArgumentException", "SortersToAdd cannot be null or empty");
        }
        this._sortersToAdd = sortersToAdd;
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(conventions) {
        return new PutSortersCommand(conventions, this._sortersToAdd);
    }
}
class PutSortersCommand extends RavenCommand {
    _sortersToAdd;
    constructor(conventions, sortersToAdd) {
        super();
        if (!conventions) {
            throwError("InvalidArgumentException", "Conventions cannot be null");
        }
        if (!sortersToAdd) {
            throwError("InvalidArgumentException", "SortersToAdd cannot be null");
        }
        if (sortersToAdd.some(x => !x)) {
            throwError("InvalidArgumentException", "Sorter cannot be null");
        }
        this._sortersToAdd = sortersToAdd;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/admin/sorters";
        const body = this._serializer.serialize({
            sorters: this._sortersToAdd
        });
        return {
            uri,
            method: "PUT",
            headers: this._headers().typeAppJson().build(),
            body
        };
    }
    get isReadRequest() {
        return false;
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator.newId();
    }
}
//# sourceMappingURL=PutSortersOperation.js.map