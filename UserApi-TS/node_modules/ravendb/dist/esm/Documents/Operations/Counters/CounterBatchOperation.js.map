{"version":3,"file":"CounterBatchOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Counters/CounterBatchOperation.ts"],"names":[],"mappings":"AAMA,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAC7D,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAK1D,MAAM,OAAO,qBAAqB;IAE9B,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEgB,aAAa,CAAe;IAE7C,YAAmB,YAA0B;QACzC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAEM,UAAU,CACb,KAAqB,EAAE,WAAgC,EAAE,KAAgB;QACzE,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACvD,CAAC;CACJ;AAED,MAAM,OAAO,mBAAoB,SAAQ,YAA4B;IAChD,aAAa,CAAe;IAE7C,YAAmB,YAA0B;QACzC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,UAAU,CAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACrC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;QACnE,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC;QAC5D,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG;YACH,IAAI;YACJ,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;SACjD,CAAC;IACN,CAAC;IACU,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO;QACX,CAAC;QAED,OAAO,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IAC7D,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ","sourcesContent":["import { IOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { CountersDetail } from \"./CountersDetail.js\";\r\nimport { CounterBatch } from \"./CounterBatch.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class CounterBatchOperation implements IOperation<CountersDetail> {\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    private readonly _counterBatch: CounterBatch;\r\n\r\n    public constructor(counterBatch: CounterBatch) {\r\n        this._counterBatch = counterBatch;\r\n    }\r\n\r\n    public getCommand(\r\n        store: IDocumentStore, conventions: DocumentConventions, cache: HttpCache): RavenCommand<CountersDetail> {\r\n        return new CounterBatchCommand(this._counterBatch);\r\n    }\r\n}\r\n\r\nexport class CounterBatchCommand extends RavenCommand<CountersDetail> {\r\n    private readonly _counterBatch: CounterBatch;\r\n\r\n    public constructor(counterBatch: CounterBatch) {\r\n        super();\r\n        if (!counterBatch) {\r\n            throwError(\"InvalidArgumentException\", \"CounterBatch cannot be null.\");\r\n        }\r\n\r\n        this._counterBatch = counterBatch;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n    const uri = node.url + \"/databases/\" + node.database + \"/counters\";\r\n    const body = JSON.stringify(this._counterBatch.serialize());\r\n    return {\r\n        method: \"POST\",\r\n        uri,\r\n        body,\r\n        headers: this._headers().typeAppJson().build()\r\n    };\r\n}\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        return await this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n}\r\n"]}