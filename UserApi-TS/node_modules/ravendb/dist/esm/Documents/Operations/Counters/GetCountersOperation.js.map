{"version":3,"file":"GetCountersOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Counters/GetCountersOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { CountersDetail } from \"./CountersDetail.js\";\r\nimport { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { DocumentCountersOperation } from \"./DocumentCountersOperation.js\";\r\nimport { CounterOperation } from \"./CounterOperation.js\";\r\nimport { CounterBatch } from \"./CounterBatch.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { StringBuilder } from \"../../../Utility/StringBuilder.js\";\r\n\r\nexport class GetCountersOperation implements IOperation<CountersDetail> {\r\n    private readonly _docId: string;\r\n    private readonly _counters: string[];\r\n    private readonly _returnFullResults: boolean;\r\n\r\n    public constructor(docId: string);\r\n    public constructor(docId: string, counters: string[]);\r\n    public constructor(docId: string, counters: string[], returnFullResults: boolean);\r\n    public constructor(docId: string, counter: string);\r\n    public constructor(docId: string, counter: string, returnFullResults: boolean);\r\n    public constructor(docId: string, counters?: string | string[], returnFullResults: boolean = false) {\r\n        this._docId = docId;\r\n        if (counters) {\r\n            this._counters = Array.isArray(counters) ? counters : [counters];\r\n        } else {\r\n            this._counters = [];\r\n        }\r\n\r\n        this._returnFullResults = returnFullResults;\r\n    }\r\n\r\n    public getCommand(\r\n        store: IDocumentStore, conventions: DocumentConventions, cache: HttpCache): RavenCommand<CountersDetail> {\r\n        return new GetCounterValuesCommand(\r\n            this._docId, this._counters, this._returnFullResults, conventions);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n}\r\n\r\nexport class GetCounterValuesCommand extends RavenCommand<CountersDetail> {\r\n    private readonly _docId: string;\r\n    private readonly _counters: string[];\r\n    private readonly _returnFullResults: boolean;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(\r\n        docId: string, counters: string[], returnFullResults: boolean, conventions: DocumentConventions) {\r\n        super();\r\n\r\n        if (!docId) {\r\n            throwError(\"InvalidArgumentException\", \"DocId cannot be null\");\r\n        }\r\n\r\n        this._docId = docId;\r\n        this._counters = counters;\r\n        this._returnFullResults = returnFullResults;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const pathBuilder = new StringBuilder(node.url);\r\n        pathBuilder.append(\"/databases/\")\r\n            .append(node.database)\r\n            .append(\"/counters?docId=\")\r\n            .append(encodeURIComponent(this._docId));\r\n\r\n        let req = { uri: null, method: \"GET\" } as HttpRequestParameters;\r\n        if (this._counters.length > 0) {\r\n\r\n            if (this._counters && this._counters.length > 1) {\r\n                req = this._prepareRequestWithMultipleCounters(pathBuilder, req);\r\n            } else {\r\n                pathBuilder.append(\"&counter=\")\r\n                    .append(encodeURIComponent(this._counters[0]));\r\n            }\r\n        }\r\n\r\n        if (this._returnFullResults && req.method === \"GET\") {\r\n            // if we dropped to Post, _returnFullResults is part of the request content\r\n            pathBuilder.append(\"&full=true\");\r\n        }\r\n\r\n        req.uri = pathBuilder.toString();\r\n        return req;\r\n    }\r\n\r\n    private _prepareRequestWithMultipleCounters(\r\n        pathBuilder: StringBuilder, request: HttpRequestParameters): HttpRequestParameters {\r\n        const [uniqueNames, sumLength] = this._getOrderedUniqueNames();\r\n\r\n        // if it is too big, we drop to POST (note that means that we can't use the HTTP cache any longer)\r\n        // we are fine with that, such requests are going to be rare\r\n        if (sumLength < 1024) {\r\n            for (const uniqueName of uniqueNames) {\r\n                pathBuilder\r\n                    .append(\"&counter=\")\r\n                    .append(encodeURIComponent(uniqueName || \"\"));\r\n            }\r\n        } else {\r\n            request = { method: \"POST\" } as any;\r\n            const docOps = new DocumentCountersOperation();\r\n            docOps.documentId = this._docId;\r\n            docOps.operations = [];\r\n            for (const counter of uniqueNames) {\r\n                const counterOperation = new CounterOperation();\r\n                counterOperation.type = \"Get\";\r\n                counterOperation.counterName = counter;\r\n                docOps.operations.push(counterOperation);\r\n            }\r\n\r\n            const batch = new CounterBatch();\r\n            batch.documents = [docOps];\r\n            batch.replyWithAllNodesValues = this._returnFullResults;\r\n            request.body = JSON.stringify(batch.serialize());\r\n            request.headers = this._headers().typeAppJson().build();\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    private _getOrderedUniqueNames(): [string[], number] {\r\n        const uniqueNames = new Set<string>();\r\n        const orderedUniqueNames = [];\r\n\r\n        let sum = 0;\r\n\r\n        for (const counter of this._counters) {\r\n            const containsCounter = uniqueNames.has(counter);\r\n            if (!containsCounter) {\r\n                uniqueNames.add(counter);\r\n                orderedUniqueNames.push(counter);\r\n                sum += counter?.length || 0;\r\n            }\r\n        }\r\n\r\n        return [orderedUniqueNames, sum];\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return true;\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return;\r\n        }\r\n\r\n        let body = \"\";\r\n        this.result = await this._defaultPipeline(_ => body += _).process(bodyStream);\r\n        return body;\r\n    }\r\n}\r\n"]}