import { SqlConnectionString, RavenConnectionString, OlapConnectionString, ElasticSearchConnectionString, QueueConnectionString } from "../Etl/ConnectionString.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
export class GetConnectionStringsOperation {
    _connectionStringName;
    _type;
    constructor(connectionStringName, type) {
        this._connectionStringName = connectionStringName;
        this._type = type;
    }
    getCommand(conventions) {
        return new GetConnectionStringCommand(this._connectionStringName, this._type);
    }
    get resultType() {
        return "CommandResult";
    }
}
export class GetConnectionStringCommand extends RavenCommand {
    _connectionStringName;
    _type;
    constructor(connectionStringName, type) {
        super();
        this._connectionStringName = connectionStringName;
        this._type = type;
    }
    get isReadRequest() {
        return true;
    }
    createRequest(node) {
        let uri = node.url + "/databases/" + node.database + "/admin/connection-strings";
        if (this._connectionStringName) {
            uri += "?connectionStringName=" + encodeURIComponent(this._connectionStringName) + "&type=" + this._type;
        }
        return {
            method: "GET",
            uri
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            return;
        }
        let body = "";
        this.result = await this._defaultPipeline(_ => body += _).process(bodyStream);
        if (this.result.ravenConnectionStrings) {
            this.result.ravenConnectionStrings = Object.entries(this.result.ravenConnectionStrings)
                .reduce(((previousValue, currentValue) => {
                previousValue[currentValue[0]] = Object.assign(new RavenConnectionString(), currentValue[1]);
                return previousValue;
            }), {});
        }
        if (this.result.sqlConnectionStrings) {
            this.result.sqlConnectionStrings = Object.entries(this.result.sqlConnectionStrings)
                .reduce(((previousValue, currentValue) => {
                previousValue[currentValue[0]] = Object.assign(new SqlConnectionString(), currentValue[1]);
                return previousValue;
            }), {});
        }
        if (this.result.elasticSearchConnectionStrings) {
            this.result.elasticSearchConnectionStrings = Object.entries(this.result.elasticSearchConnectionStrings)
                .reduce(((previousValue, currentValue) => {
                previousValue[currentValue[0]] = Object.assign(new ElasticSearchConnectionString(), currentValue[1]);
                return previousValue;
            }), {});
        }
        if (this.result.queueConnectionStrings) {
            this.result.queueConnectionStrings = Object.entries(this.result.queueConnectionStrings)
                .reduce(((previousValue, currentValue) => {
                previousValue[currentValue[0]] = Object.assign(new QueueConnectionString(), currentValue[1]);
                return previousValue;
            }), {});
        }
        if (this.result.olapConnectionStrings) {
            this.result.olapConnectionStrings = Object.entries(this.result.olapConnectionStrings)
                .reduce(((previousValue, currentValue) => {
                previousValue[currentValue[0]] = Object.assign(new OlapConnectionString(), currentValue[1]);
                return previousValue;
            }), {});
        }
        return body;
    }
}
//# sourceMappingURL=GetConnectionStringsOperation.js.map