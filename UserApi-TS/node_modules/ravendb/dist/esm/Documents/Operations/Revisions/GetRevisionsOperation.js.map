{"version":3,"file":"GetRevisionsOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Revisions/GetRevisionsOperation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAKvD,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAC7D,OAAO,EAAE,mBAAmB,EAAE,MAAM,uCAAuC,CAAC;AAK5E,MAAM,OAAO,qBAAqB;IACb,WAAW,CAA4B;IACvC,GAAG,CAAS;IAE7B,YAAmB,EAAU,EAAE,aAAwC,EAAE;QACrE,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAGD,UAAU,CAAC,KAAqB,EAAE,WAAgC,EAAE,SAAoB;QACpF,OAAO,IAAI,yBAAyB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAClF,CAAC;CACJ;AACD,MAAM,yBAA4C,SAAQ,YAAgC;IACrE,WAAW,CAA4B;IACvC,WAAW,CAAsB;IACjC,GAAG,CAAS;IACZ,IAAI,CAAsB;IAE3C,YAAmB,EAAU,EAAE,UAAqC,EAAE,WAAgC;QAClG,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,mBAAmB,CAAC,WAAW,EAAE,EAAE,EAAE,UAAU,CAAC,KAAK,IAAI,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;IACrG,CAAC;IAED,IAAI,aAAa;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAQ;QACZ,CAAC;QAED,IAAI,IAAY,CAAC;QAEjB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,SAAS,EAAO;aAC3C,aAAa,EAAE;aACf,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAC1B,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzB,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;YACxB,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC;QAEvC,MAAM,KAAK,GAAG,YAAY,CAAC,YAAY,CAAC;QAExC,MAAM,MAAM,GAAG,IAAI,eAAe,EAAK,CAAC;QACxC,MAAM,CAAC,YAAY,GAAG,KAAK,CAAC;QAC5B,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YAC9C,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YAC3F,OAAO,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;CACJ","sourcesContent":["import { IOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { RevisionsResult } from \"./RevisionsResult.js\";\r\nimport { DocumentType } from \"../../DocumentAbstractions.js\";\r\nimport { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { GetRevisionsCommand } from \"../../Commands/GetRevisionsCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class GetRevisionsOperation<T extends object> implements IOperation<RevisionsResult<T>> {\r\n    private readonly _parameters: GetRevisionsParameters<T>;\r\n    private readonly _id: string;\r\n\r\n    public constructor(id: string, parameters: GetRevisionsParameters<T> = {}) {\r\n        this._id = id;\r\n        this._parameters = parameters;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n\r\n    getCommand(store: IDocumentStore, conventions: DocumentConventions, httpCache: HttpCache): RavenCommand<RevisionsResult<T>> {\r\n        return new GetRevisionsResultCommand(this._id, this._parameters, conventions);\r\n    }\r\n}\r\nclass GetRevisionsResultCommand<T extends object> extends RavenCommand<RevisionsResult<T>> {\r\n    private readonly _parameters: GetRevisionsParameters<T>;\r\n    private readonly conventions: DocumentConventions;\r\n    private readonly _id: string;\r\n    private readonly _cmd: GetRevisionsCommand;\r\n\r\n    public constructor(id: string, parameters: GetRevisionsParameters<T>, conventions: DocumentConventions) {\r\n        super();\r\n        this.conventions = conventions;\r\n        this._id = id;\r\n        this._parameters = parameters;\r\n        this._cmd = new GetRevisionsCommand(conventions, id, parameters.start || 0, parameters.pageSize);\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        return this._cmd.createRequest(node);\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return ;\r\n        }\r\n\r\n        let body: string;\r\n\r\n        const responseNode = await this._pipeline<any>()\r\n            .parseJsonSync()\r\n            .collectBody(b => body = b)\r\n            .process(bodyStream);\r\n\r\n        if (!responseNode.Results) {\r\n            return body;\r\n        }\r\n\r\n        const revisions = responseNode.Results;\r\n\r\n        const total = responseNode.TotalResults;\r\n\r\n        const result = new RevisionsResult<T>();\r\n        result.totalResults = total;\r\n        result.results = revisions.filter(x => x).map(x => {\r\n            const entityType = this.conventions.getJsTypeByDocumentType(this._parameters.documentType);\r\n            return this.conventions.deserializeEntityFromJson(entityType, x);\r\n        });\r\n\r\n        this.result = result;\r\n    }\r\n}\r\n\r\nexport interface GetRevisionsParameters<T extends object> {\r\n    documentType?: DocumentType<T>;\r\n    start?: number;\r\n    pageSize?: number;\r\n}"]}