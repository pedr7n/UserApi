import { RavenCommand } from "../../../Http/RavenCommand.js";
export class EnforceRevisionsConfigurationOperation {
    _parameters;
    constructor(parameters) {
        this._parameters = parameters ?? {
            collections: null,
            includeForceCreated: false
        };
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(store, conventions, httpCache) {
        return new EnforceRevisionsConfigurationCommand(this._parameters, conventions);
    }
}
class EnforceRevisionsConfigurationCommand extends RavenCommand {
    _parameters;
    _conventions;
    constructor(parameters, conventions) {
        super();
        this._parameters = parameters;
        this._conventions = conventions;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/admin/revisions/config/enforce";
        const headers = this._headers()
            .typeAppJson()
            .build();
        const body = this._serializer.serialize(this._parameters);
        return {
            method: "POST",
            uri,
            headers,
            body
        };
    }
    get isReadRequest() {
        return false;
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
}
//# sourceMappingURL=EnforceRevisionsConfigurationOperation.js.map