{"version":3,"file":"PutAnalyzersOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Analyzers/PutAnalyzersOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAI7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AACtE,OAAO,EAAE,cAAc,EAAE,MAAM,8BAA8B,CAAC;AAE9D,MAAM,OAAO,qBAAqB;IACb,eAAe,CAAuB;IAEvD,YAAmB,GAAG,cAAoC;QACtD,IAAI,CAAC,cAAc,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjD,UAAU,CAAC,0BAA0B,EAAE,wCAAwC,CAAC,CAAC;QACrF,CAAC;QAED,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IAC1C,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACtE,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAED,MAAM,mBAAoB,SAAQ,YAAkB;IAC/B,eAAe,CAAW;IAE3C,YAAmB,WAAgC,EAAE,cAAoC;QACrF,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,EAAE,CAAC;YACf,UAAU,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,cAAc,EAAE,CAAC;YAClB,UAAU,CAAC,0BAA0B,EAAE,iCAAiC,CAAC,CAAC;QAC9E,CAAC;QAED,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAE1B,KAAK,MAAM,kBAAkB,IAAI,cAAc,EAAE,CAAC;YAC9C,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;gBAC3B,UAAU,CAAC,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;YAClE,CAAC;YAED,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC5F,CAAC;IACL,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC;QAE1E,MAAM,OAAO,GAAG,cAAc;aACzB,MAAM,EAAE;aACR,WAAW,EAAE;aACb,KAAK,EAAE,CAAC;QAEb,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW;aACxB,SAAS,CAAC;YACP,SAAS,EAAE,IAAI,CAAC,eAAe;SAClC,CAAC,CAAC;QAEP,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;YACb,OAAO;YACP,IAAI;SACP,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { AnalyzerDefinition } from \"../../Indexes/Analysis/AnalyzerDefinition.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { HeadersBuilder } from \"../../../Utility/HttpUtil.js\";\r\n\r\nexport class PutAnalyzersOperation implements IMaintenanceOperation<void> {\r\n    private readonly _analyzersToAdd: AnalyzerDefinition[];\r\n\r\n    public constructor(...analyzersToAdd: AnalyzerDefinition[]) {\r\n        if (!analyzersToAdd || analyzersToAdd.length === 0) {\r\n            throwError(\"InvalidArgumentException\", \"AnalyzersToAdd cannot be null or empty\");\r\n        }\r\n\r\n        this._analyzersToAdd = analyzersToAdd;\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new PutAnalyzersCommand(conventions, this._analyzersToAdd);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nclass PutAnalyzersCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _analyzersToAdd: object[];\r\n\r\n    public constructor(conventions: DocumentConventions, analyzersToAdd: AnalyzerDefinition[]) {\r\n        super();\r\n        if (!conventions) {\r\n            throwError(\"InvalidArgumentException\", \"Conventions cannot be null\");\r\n        }\r\n\r\n        if (!analyzersToAdd) {\r\n            throwError(\"InvalidArgumentException\", \"Analyzers to add cannot be null\");\r\n        }\r\n\r\n        this._analyzersToAdd = [];\r\n\r\n        for (const analyzerDefinition of analyzersToAdd) {\r\n            if (!analyzerDefinition.name) {\r\n                throwError(\"InvalidArgumentException\", \"Name cannot be null\");\r\n            }\r\n\r\n            this._analyzersToAdd.push(conventions.objectMapper.toObjectLiteral(analyzerDefinition));\r\n        }\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/analyzers\";\r\n\r\n        const headers = HeadersBuilder\r\n            .create()\r\n            .typeAppJson()\r\n            .build();\r\n\r\n        const body = this._serializer\r\n            .serialize({\r\n                Analyzers: this._analyzersToAdd\r\n            });\r\n\r\n        return {\r\n            uri,\r\n            method: \"PUT\",\r\n            headers,\r\n            body\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}"]}