{"version":3,"file":"DeleteAnalyzerOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Analyzers/DeleteAnalyzerOperation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAI7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAEtE,MAAM,OAAO,uBAAuB;IACf,aAAa,CAAS;IAEvC,YAAmB,YAAoB;QACnC,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,UAAU,CAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACzD,CAAC;CACJ;AAED,MAAM,qBAAsB,SAAQ,YAAkB;IACjC,aAAa,CAAS;IAEvC,YAAmB,YAAoB;QACnC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,UAAU,CAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,wBAAwB,GAAG,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEzH,OAAO;YACH,GAAG;YACH,MAAM,EAAE,QAAQ;SACnB,CAAA;IACL,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class DeleteAnalyzerOperation implements IMaintenanceOperation<void> {\r\n    private readonly _analyzerName: string;\r\n\r\n    public constructor(analyzerName: string) {\r\n        if (!analyzerName) {\r\n            throwError(\"InvalidArgumentException\", \"AnalyzerName cannot be null\");\r\n        }\r\n\r\n        this._analyzerName = analyzerName;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<void> {\r\n        return new DeleteAnalyzerCommand(this._analyzerName);\r\n    }\r\n}\r\n\r\nclass DeleteAnalyzerCommand extends RavenCommand<void> implements IRaftCommand {\r\n    private readonly _analyzerName: string;\r\n\r\n    public constructor(analyzerName: string) {\r\n        super();\r\n        if (!analyzerName) {\r\n            throwError(\"InvalidArgumentException\", \"AnalyzerName cannot be null\");\r\n        }\r\n\r\n        this._analyzerName = analyzerName;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/analyzers?name=\" + encodeURIComponent(this._analyzerName);\r\n\r\n        return {\r\n            uri,\r\n            method: \"DELETE\"\r\n        }\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}"]}