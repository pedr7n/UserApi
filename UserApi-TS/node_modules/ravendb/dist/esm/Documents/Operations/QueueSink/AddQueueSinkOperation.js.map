{"version":3,"file":"AddQueueSinkOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/QueueSink/AddQueueSinkOperation.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAI7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAGtE,MAAM,OAAO,qBAAqB;IACb,cAAc,CAAyB;IAGxD,YAAY,aAAqC;QAC7C,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACrE,CAAC;CACJ;AAED,MAAM,mBAAoB,SAAQ,YAAyC;IACtD,cAAc,CAAyB;IACvC,YAAY,CAAsB;IAGnD,YAAY,WAAgC,EAAE,aAAqC;QAC/E,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,mBAAmB,CAAC;QAE3E,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QACtD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE7D,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;YACH,IAAI;YACJ,OAAO;SACV,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { ConnectionString } from \"../Etl/ConnectionString.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { AddQueueSinkOperationResult } from \"./AddQueueSinkOperationResult.js\";\r\nimport { QueueSinkConfiguration } from \"./QueueSinkConfiguration.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class AddQueueSinkOperation<T extends ConnectionString> implements IMaintenanceOperation<AddQueueSinkOperationResult> {\r\n    private readonly _configuration: QueueSinkConfiguration;\r\n\r\n\r\n    constructor(configuration: QueueSinkConfiguration) {\r\n        this._configuration = configuration;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<AddQueueSinkOperationResult> {\r\n        return new AddQueueSinkCommand(conventions, this._configuration);\r\n    }\r\n}\r\n\r\nclass AddQueueSinkCommand extends RavenCommand<AddQueueSinkOperationResult> implements IRaftCommand {\r\n    private readonly _configuration: QueueSinkConfiguration;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n\r\n    constructor(conventions: DocumentConventions, configuration: QueueSinkConfiguration) {\r\n        super();\r\n        this._conventions = conventions;\r\n        this._configuration = configuration;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/queue-sink\";\r\n\r\n        const headers = this._headers().typeAppJson().build();\r\n        const body = this._serializer.serialize(this._configuration);\r\n\r\n        return {\r\n            method: \"PUT\",\r\n            uri,\r\n            body,\r\n            headers\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}"]}