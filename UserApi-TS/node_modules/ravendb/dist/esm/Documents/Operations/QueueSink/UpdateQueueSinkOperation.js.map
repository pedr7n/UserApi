{"version":3,"file":"UpdateQueueSinkOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/QueueSink/UpdateQueueSinkOperation.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAK7D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAEtE,MAAM,OAAO,wBAAwB;IAChB,OAAO,CAAS;IAChB,cAAc,CAAyB;IAGxD,YAAY,MAAc,EAAE,aAAqC;QAC7D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAED,UAAU,CAAC,WAAgC;QACvC,OAAO,IAAI,sBAAsB,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACtF,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAGD,MAAM,sBAAuB,SAAQ,YAA4C;IAC5D,OAAO,CAAS;IAChB,cAAc,CAAyB;IACvC,YAAY,CAAsB;IAGnD,YAAY,WAAgC,EAAE,MAAc,EAAE,aAAqC;QAC/F,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,uBAAuB,GAAG,IAAI,CAAC,OAAO,CAAC;QAE9F,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QACtD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE7D,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;YACH,IAAI;YACJ,OAAO;SACV,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { UpdateQueueSinkOperationResult } from \"./UpdateQueueSinkOperationResult.js\";\r\nimport { ConnectionString } from \"../Etl/ConnectionString.js\";\r\nimport { QueueSinkConfiguration } from \"./QueueSinkConfiguration.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class UpdateQueueSinkOperation<T extends ConnectionString> implements IMaintenanceOperation<UpdateQueueSinkOperationResult> {\r\n    private readonly _taskId: number;\r\n    private readonly _configuration: QueueSinkConfiguration;\r\n\r\n\r\n    constructor(taskId: number, configuration: QueueSinkConfiguration) {\r\n        this._taskId = taskId;\r\n        this._configuration = configuration;\r\n    }\r\n\r\n    getCommand(conventions: DocumentConventions): RavenCommand<UpdateQueueSinkOperationResult> {\r\n        return new UpdateQueueSinkCommand(conventions, this._taskId, this._configuration);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\n\r\nclass UpdateQueueSinkCommand extends RavenCommand<UpdateQueueSinkOperationResult> implements IRaftCommand {\r\n    private readonly _taskId: number;\r\n    private readonly _configuration: QueueSinkConfiguration;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n\r\n    constructor(conventions: DocumentConventions, taskId: number, configuration: QueueSinkConfiguration) {\r\n        super();\r\n        this._taskId = taskId;\r\n        this._configuration = configuration;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/admin/queue-sink?id=\" + this._taskId;\r\n\r\n        const headers = this._headers().typeAppJson().build();\r\n        const body = this._serializer.serialize(this._configuration);\r\n\r\n        return {\r\n            method: \"PUT\",\r\n            uri,\r\n            body,\r\n            headers\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}