import { Stream } from "node:stream";
import { ServerNode } from "../../../Http/ServerNode.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { HttpRequestParameters } from "../../../Primitives/Http.js";
import { ClientConfiguration } from "./ClientConfiguration.js";
import { DocumentConventions } from "../../Conventions/DocumentConventions.js";
import { IMaintenanceOperation, OperationResultType } from "../OperationAbstractions.js";
export declare class GetClientConfigurationOperation implements IMaintenanceOperation<GetClientConfigurationOperationResult> {
    get resultType(): OperationResultType;
    getCommand(conventions: DocumentConventions): RavenCommand<GetClientConfigurationOperationResult>;
}
export declare class GetClientConfigurationCommand extends RavenCommand<GetClientConfigurationOperationResult> {
    constructor();
    get isReadRequest(): boolean;
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
}
export interface GetClientConfigurationOperationResult {
    etag: string;
    configuration: ClientConfiguration;
}
//# sourceMappingURL=GetClientConfigurationOperation.d.ts.map