{"version":3,"file":"GetClientConfigurationOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Configuration/GetClientConfigurationOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAM7D,MAAM,OAAO,+BAA+B;IAExC,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEM,UAAU,CAAC,WAAgC;QAC9C,OAAO,IAAI,6BAA6B,EAAE,CAAC;IAC/C,CAAC;CACJ;AAED,MAAM,OAAO,6BAA8B,SAAQ,YAAmD;IAElG;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,GAAI,IAAI,CAAC,GAAI,cAAe,IAAI,CAAC,QAAS,uBAAuB,CAAC;QAC9E,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QAE/D,iGAAiG;QACjG,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;QAChD,IAAI,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { Stream } from \"node:stream\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { ClientConfiguration } from \"./ClientConfiguration.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\n\r\nexport class GetClientConfigurationOperation implements IMaintenanceOperation<GetClientConfigurationOperationResult> {\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<GetClientConfigurationOperationResult> {\r\n        return new GetClientConfigurationCommand();\r\n    }\r\n}\r\n\r\nexport class GetClientConfigurationCommand extends RavenCommand<GetClientConfigurationOperationResult> {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = `${ node.url }/databases/${ node.database }/configuration/client`;\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        const body = await this._parseResponseDefaultAsync(bodyStream);\r\n\r\n        // since server can send etag bigger than Number.MAX_SAFE_INTEGER we need to parse Etag as string\r\n        const match = body.match(\"\\\"Etag\\\":(-?[0-9]+)\");\r\n        if (match) {\r\n            this.result.etag = match[1];\r\n        }\r\n\r\n        return body;\r\n    }\r\n}\r\n\r\nexport interface GetClientConfigurationOperationResult {\r\n    etag: string;\r\n    configuration: ClientConfiguration;\r\n}\r\n"]}