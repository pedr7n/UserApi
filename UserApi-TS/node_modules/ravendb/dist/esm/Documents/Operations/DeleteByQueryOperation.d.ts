import { HttpRequestParameters } from "../../Primitives/Http.js";
import { IOperation, OperationIdResult, OperationResultType } from "./OperationAbstractions.js";
import { IndexQuery } from "../Queries/IndexQuery.js";
import { HttpCache } from "../../Http/HttpCache.js";
import { DocumentConventions } from "../Conventions/DocumentConventions.js";
import { IDocumentStore } from "../IDocumentStore.js";
import { RavenCommand } from "../../Http/RavenCommand.js";
import { ServerNode } from "../../Http/ServerNode.js";
import { QueryOperationOptions } from "../Queries/QueryOperationOptions.js";
import { Stream } from "node:stream";
export declare class DeleteByQueryOperation implements IOperation<OperationIdResult> {
    get resultType(): OperationResultType;
    protected _queryToDelete: IndexQuery;
    private readonly _options;
    constructor(queryToDelete: string);
    constructor(queryToDelete: IndexQuery);
    constructor(queryToDelete: IndexQuery, options: QueryOperationOptions);
    getCommand(store: IDocumentStore, conventions: DocumentConventions, cache: HttpCache): RavenCommand<OperationIdResult>;
}
export declare class DeleteByIndexCommand extends RavenCommand<OperationIdResult> {
    private readonly _conventions;
    private readonly _queryToDelete;
    private _options;
    constructor(conventions: DocumentConventions, queryToDelete: IndexQuery, options: QueryOperationOptions);
    createRequest(node: ServerNode): HttpRequestParameters;
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
    get isReadRequest(): boolean;
}
//# sourceMappingURL=DeleteByQueryOperation.d.ts.map