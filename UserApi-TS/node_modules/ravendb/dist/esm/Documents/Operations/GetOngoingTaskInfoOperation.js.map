{"version":3,"file":"GetOngoingTaskInfoOperation.js","sourceRoot":"","sources":["../../../../src/Documents/Operations/GetOngoingTaskInfoOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"./OperationAbstractions.js\";\r\nimport { OngoingTask } from \"./OngoingTasks/OngoingTask.js\";\r\nimport { OngoingTaskType } from \"./OngoingTasks/OngoingTaskType.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { NestedTypes } from \"../../Mapping/ObjectMapper.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { RavenEtlConfiguration } from \"./Etl/RavenEtlConfiguration.js\";\r\nimport { SqlEtlConfiguration } from \"./Etl/Sql/SqlEtlConfiguration.js\";\r\nimport { OlapEtlConfiguration } from \"./Etl/Olap/OlapEtlConfiguration.js\";\r\nimport { ElasticSearchEtlConfiguration } from \"./Etl/ElasticSearch/ElasticSearchEtlConfiguration.js\";\r\nimport { QueueEtlConfiguration } from \"./Etl/Queue/QueueEtlConfiguration.js\";\r\nimport { Transformation } from \"./Etl/Transformation.js\";\r\n\r\nexport class GetOngoingTaskInfoOperation implements IMaintenanceOperation<OngoingTask> {\r\n    private readonly _taskName: string;\r\n    private readonly _taskId: number;\r\n    private readonly _type: OngoingTaskType;\r\n\r\n    public constructor(taskId: number, type: OngoingTaskType)\r\n    public constructor(taskName: string, type: OngoingTaskType)\r\n    public constructor(taskIdOrName: number | string, type: OngoingTaskType) {\r\n        if (TypeUtil.isString(taskIdOrName)) {\r\n            this._taskName = taskIdOrName;\r\n        } else {\r\n            this._taskId = taskIdOrName;\r\n        }\r\n\r\n        this._type = type;\r\n\r\n        if (type === \"PullReplicationAsHub\") {\r\n            throwError(\"InvalidArgumentException\", \"PullReplicationAsHub type is not supported. \" +\r\n                \"Please use GetPullReplicationTasksInfoOperation instead.\");\r\n        }\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<OngoingTask> {\r\n        return new GetOngoingTaskInfoCommand(this._taskName || this._taskId, this._type, conventions);\r\n    }\r\n}\r\n\r\nclass GetOngoingTaskInfoCommand extends RavenCommand<OngoingTask> {\r\n    private readonly _taskName: string;\r\n    private readonly _taskId: number;\r\n    private readonly _type: OngoingTaskType;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(taskIdOrName: number | string, type: OngoingTaskType, documentConventions: DocumentConventions) {\r\n        super();\r\n\r\n        if (TypeUtil.isString(taskIdOrName)) {\r\n            this._taskName = taskIdOrName;\r\n        } else {\r\n            this._taskId = taskIdOrName;\r\n        }\r\n\r\n        this._type = type;\r\n        this._conventions = documentConventions;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = this._taskName\r\n            ? node.url + \"/databases/\" + node.database + \"/task?taskName=\" + encodeURIComponent(this._taskName) + \"&type=\" + this._type\r\n            : node.url + \"/databases/\" + node.database + \"/task?key=\" + this._taskId + \"&type=\" + this._type;\r\n\r\n        return {\r\n            uri,\r\n            method: \"GET\"\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _)\r\n            .process(bodyStream);\r\n        let nestedTypes: NestedTypes = {};\r\n\r\n        switch (this._type) {\r\n            case \"Replication\": {\r\n                // nothing to do\r\n                break;\r\n            }\r\n            case \"RavenEtl\": {\r\n                nestedTypes = {\r\n                    configuration: \"RavenEtlConfiguration\",\r\n                    \"configuration.transforms\": \"Transformation\"\r\n                };\r\n                break;\r\n            }\r\n            case \"SqlEtl\": {\r\n                nestedTypes = {\r\n                    configuration: \"SqlEtlConfiguration\",\r\n                    \"configuration.transforms\": \"Transformation\"\r\n                };\r\n                break;\r\n            }\r\n            case \"Subscription\": {\r\n                nestedTypes = {\r\n                    lastBatchAckTime: \"date\",\r\n                    lastClientConnectionTime: \"date\"\r\n                }\r\n                break;\r\n            }\r\n            case \"OlapEtl\": {\r\n                nestedTypes = {\r\n                    configuration: \"OlapEtlConfiguration\",\r\n                    \"configuration.transforms\": \"Transformation\"\r\n                }\r\n                break;\r\n            }\r\n            case \"ElasticSearchEtl\": {\r\n                nestedTypes = {\r\n                    configuration: \"ElasticSearchEtlConfiguration\",\r\n                    \"configuration.transforms\": \"Transformation\"\r\n                }\r\n                break;\r\n            }\r\n            case \"QueueEtl\": {\r\n                nestedTypes = {\r\n                    configuration: \"QueueEtlConfiguration\",\r\n                    \"configuration.transforms\": \"Transformation\"\r\n                }\r\n                break;\r\n            }\r\n            case \"PullReplicationAsSink\": {\r\n                break;\r\n            }\r\n            case \"PullReplicationAsHub\": {\r\n                break;\r\n            }\r\n            case \"QueueSink\": {\r\n                break;\r\n            }\r\n            case \"Backup\": {\r\n                nestedTypes = {\r\n                    lastFullBackup: \"date\",\r\n                    delayUntil: \"date\",\r\n                    originalBackupTime: \"date\",\r\n                    lastIncrementalBackup: \"date\",\r\n                    \"onGoingBackup.startTime\": \"date\",\r\n                    \"nextBackup.dateTime\": \"date\",\r\n                    \"nextBackup.originalBackupTime\": \"date\",\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.result = this._reviveResultTypes<OngoingTask>(\r\n            results,\r\n            this._conventions,\r\n            {\r\n                nestedTypes\r\n            },\r\n            knownTypes);\r\n        return body;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nconst knownTypes = new Map<string, any>([\r\n    [RavenEtlConfiguration.name, RavenEtlConfiguration],\r\n    [SqlEtlConfiguration.name, SqlEtlConfiguration],\r\n    [OlapEtlConfiguration.name, OlapEtlConfiguration],\r\n    [ElasticSearchEtlConfiguration.name, ElasticSearchEtlConfiguration],\r\n    [QueueEtlConfiguration.name, QueueEtlConfiguration],\r\n    [Transformation.name, Transformation],\r\n]);\r\n"]}