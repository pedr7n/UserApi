import { CompareExchangeResult } from "./CompareExchangeResult.js";
import { RavenCommand } from "../../../Http/RavenCommand.js";
import { throwError } from "../../../Exceptions/index.js";
import { RaftIdGenerator } from "../../../Utility/RaftIdGenerator.js";
export class DeleteCompareExchangeValueOperation {
    _key;
    _index;
    _clazz;
    constructor(key, index, clazz) {
        this._key = key;
        this._index = index;
        this._clazz = clazz;
    }
    getCommand(store, conventions, cache) {
        return new RemoveCompareExchangeCommand(this._key, this._index, conventions, this._clazz);
    }
    get resultType() {
        return "CommandResult";
    }
}
export class RemoveCompareExchangeCommand extends RavenCommand {
    _key;
    _index;
    _clazz;
    _conventions;
    constructor(key, index, conventions, clazz) {
        super();
        if (!key) {
            throwError("InvalidArgumentException", "The key argument must have value.");
        }
        this._clazz = clazz;
        this._key = key;
        this._index = index;
        this._conventions = conventions;
    }
    get isReadRequest() {
        return true;
    }
    createRequest(node) {
        const uri = node.url + "/databases/" + node.database + "/cmpxchg?key=" + encodeURIComponent(this._key)
            + "&index=" + this._index;
        return {
            method: "DELETE",
            uri
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        let body = null;
        const resObj = await this._pipeline()
            .collectBody(_ => body = _)
            .parseJsonSync()
            .process(bodyStream);
        this.result = CompareExchangeResult.parseFromObject(resObj, this._conventions, this._clazz);
        return body;
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator.newId();
    }
}
//# sourceMappingURL=DeleteCompareExchangeValueOperation.js.map