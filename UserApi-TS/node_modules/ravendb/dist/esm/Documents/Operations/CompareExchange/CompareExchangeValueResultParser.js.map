{"version":3,"file":"CompareExchangeValueResultParser.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/CompareExchange/CompareExchangeValueResultParser.ts"],"names":[],"mappings":"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","sourcesContent":["import { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { CompareExchangeValue } from \"./CompareExchangeValue.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { ObjectUtil } from \"../../../Utility/ObjectUtil.js\";\r\nimport { COMPARE_EXCHANGE, CONSTANTS } from \"../../../Constants.js\";\r\nimport { MetadataAsDictionary, MetadataDictionary } from \"../../../Mapping/MetadataAsDictionary.js\";\r\nimport { CompareExchangeResultClass, EntityConstructor } from \"../../../Types/index.js\";\r\n\r\nexport interface CompareExchangeResultItem {\r\n    index: number;\r\n    key: string;\r\n    value: { Object: object, \"@metadata\"?: any };\r\n    changeVector: string;\r\n}\r\n\r\nexport const ObjectNodeMarker = Symbol(\"ObjectNodeMarker\");\r\n\r\nexport interface GetCompareExchangeValuesResponse {\r\n    results: CompareExchangeResultItem[];\r\n}\r\n\r\nexport class CompareExchangeValueResultParser {\r\n\r\n    public static getValues<T>(\r\n        responseObj: GetCompareExchangeValuesResponse,\r\n        materializeMetadata: boolean,\r\n        conventions: DocumentConventions,\r\n        clazz?: CompareExchangeResultClass<T>)\r\n        : { [key: string]: CompareExchangeValue<T> } {\r\n\r\n        const items = responseObj.results;\r\n        if (!items) {\r\n            throwError(\"InvalidOperationException\", \"Response is invalid. Results is missing.\");\r\n        }\r\n\r\n        const results = {};\r\n        for (const item of items) {\r\n            if (!item) {\r\n                throwError(\"InvalidOperationException\", \"Response is invalid. Item is null\");\r\n            }\r\n\r\n            const value: CompareExchangeValue<T> = CompareExchangeValueResultParser.getSingleValue(item, materializeMetadata, conventions, clazz);\r\n            results[value.key] = value;\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    public static getValue<T>(\r\n        response: GetCompareExchangeValuesResponse,\r\n        materializeMetadata: boolean,\r\n        conventions: DocumentConventions,\r\n        clazz: CompareExchangeResultClass<T>): CompareExchangeValue<T> {\r\n        if (!response) {\r\n            return null;\r\n        }\r\n\r\n        const values = CompareExchangeValueResultParser.getValues<T>(response, materializeMetadata, conventions, clazz);\r\n        const itemsKeys = Object.keys(values);\r\n        if (!values || !itemsKeys.length) {\r\n            return null;\r\n        }\r\n        return Object.values(values)[0];\r\n    }\r\n\r\n    public static getSingleValue<T>(\r\n        item: CompareExchangeResultItem,\r\n        materializeMetadata: boolean,\r\n        conventions: DocumentConventions,\r\n        clazz: CompareExchangeResultClass<T>) {\r\n\r\n        if (!item) {\r\n            return null;\r\n        }\r\n\r\n        const key = item.key || throwError(\"InvalidOperationException\", \"Response is invalid. Key is missing.\");\r\n\r\n        const index = item.index;\r\n        if (TypeUtil.isNullOrUndefined(index)) {\r\n            throwError(\"InvalidOperationException\", `Response is invalid. Index is ${item.index}.`);\r\n        }\r\n\r\n        const raw = item.value;\r\n\r\n        const cv = item.changeVector;\r\n\r\n        if (TypeUtil.isNullOrUndefined(raw)) {\r\n            return new CompareExchangeValue(key, index, null, cv, null);\r\n        }\r\n\r\n        let metadata: MetadataAsDictionary;\r\n        const metadataRaw = raw[CONSTANTS.Documents.Metadata.KEY];\r\n        if (metadataRaw && TypeUtil.isObject(metadataRaw)) {\r\n            metadata = !materializeMetadata ? MetadataDictionary.create(metadataRaw) : MetadataDictionary.materializeFromJson(metadataRaw);\r\n        }\r\n\r\n        const value = CompareExchangeValueResultParser.deserializeObject(raw, conventions, clazz);\r\n        return new CompareExchangeValue(key, index, value, cv, metadata);\r\n\r\n    }\r\n\r\n    public static deserializeObject<T>(raw: object, conventions: DocumentConventions, clazz: CompareExchangeResultClass<T>) {\r\n        if (TypeUtil.isNullOrUndefined(raw)) {\r\n            return null;\r\n        }\r\n\r\n        const rawValue = raw[COMPARE_EXCHANGE.OBJECT_FIELD_NAME];\r\n        if (clazz && TypeUtil.isPrimitiveType(clazz)) {\r\n            return rawValue;\r\n        }\r\n\r\n        if (clazz === ObjectNodeMarker) {\r\n            if (TypeUtil.isNullOrUndefined(rawValue)) {\r\n                return null;\r\n            }\r\n\r\n            return TypeUtil.isObject(rawValue) ? rawValue : raw;\r\n        }\r\n\r\n        if (TypeUtil.isPrimitive(rawValue)) {\r\n            return rawValue;\r\n        }\r\n\r\n        if (TypeUtil.isArray(rawValue)) {\r\n            return ObjectUtil.deepJsonClone(rawValue);\r\n        }\r\n\r\n        let value = (TypeUtil.isObject(raw) && COMPARE_EXCHANGE.OBJECT_FIELD_NAME in raw) ? rawValue : raw;\r\n\r\n        const entityType = conventions.getJsTypeByDocumentType(clazz as EntityConstructor);\r\n        if (conventions.serverToLocalFieldNameConverter) {\r\n            value = ObjectUtil.transformObjectKeys(\r\n                value, {\r\n                    defaultTransform: conventions.serverToLocalFieldNameConverter,\r\n                    recursive: true,\r\n                    arrayRecursive: true\r\n                });\r\n        }\r\n        const entity = conventions.deserializeEntityFromJson(entityType, value);\r\n        return entity;\r\n\r\n    }\r\n}\r\n"]}