{"version":3,"file":"GetCompareExchangeValueOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/CompareExchange/GetCompareExchangeValueOperation.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAI7D,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAG1D,OAAO,EAAE,gCAAgC,EAAoC,MAAM,uCAAuC,CAAC;AAE3H,OAAO,EAAE,+BAA+B,EAAE,MAAM,wCAAwC,CAAC;AAEzF,MAAM,OAAO,gCAAgC;IAExB,IAAI,CAAS;IACb,oBAAoB,CAAU;IAC9B,MAAM,CAAgC;IAEvD,YAAmB,GAAW,EAAE,KAAqC,EAAE,sBAA+B,IAAI;QACtG,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;IACpD,CAAC;IAEM,UAAU,CACb,KAAqB,EACrB,WAAgC,EAChC,KAAgB;QAChB,OAAO,IAAI,8BAA8B,CAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,oBAAoB,EAAE,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACjH,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AAED,MAAM,OAAO,8BAAkC,SAAQ,YAAqC;IACvE,IAAI,CAAS;IACb,MAAM,CAAgC;IACtC,oBAAoB,CAAU;IAC9B,YAAY,CAAsB;IAEnD,YAAmB,GAAW,EAAE,mBAA4B,EAAE,WAAgC,EAAE,KAAqC;QACjI,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,GAAG,EAAE,CAAC;YACP,UAAU,CAAC,0BAA0B,EAAE,kCAAkC,CAAC,CAAC;QAC/E,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;QAChD,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,eAAe,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvG,OAAO,EAAC,GAAG,EAAC,CAAC;IACjB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,SAAS,EAAkE;aACjG,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAC1B,aAAa,EAAE;aACf,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzB,MAAM,WAAW,GAAG,+BAA+B,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAE9E,IAAI,CAAC,MAAM,GAAG,gCAAgC,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAChI,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { IOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { CompareExchangeValue } from \"./CompareExchangeValue.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { CompareExchangeResultClass, ServerCasing, ServerResponse } from \"../../../Types/index.js\";\r\nimport { CompareExchangeValueResultParser, GetCompareExchangeValuesResponse } from \"./CompareExchangeValueResultParser.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { GetCompareExchangeValuesCommand } from \"./GetCompareExchangeValuesOperation.js\";\r\n\r\nexport class GetCompareExchangeValueOperation<T> implements IOperation<CompareExchangeValue<T>> {\r\n\r\n    private readonly _key: string;\r\n    private readonly _materializeMetadata: boolean;\r\n    private readonly _clazz: CompareExchangeResultClass<T>;\r\n\r\n    public constructor(key: string, clazz?: CompareExchangeResultClass<T>, materializeMetadata: boolean = true) {\r\n        this._key = key;\r\n        this._clazz = clazz;\r\n        this._materializeMetadata = materializeMetadata;\r\n    }\r\n\r\n    public getCommand(\r\n        store: IDocumentStore,\r\n        conventions: DocumentConventions,\r\n        cache: HttpCache): RavenCommand<CompareExchangeValue<T>> {\r\n        return new GetCompareExchangeValueCommand<T>(this._key, this._materializeMetadata, conventions, this._clazz);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n}\r\n\r\nexport class GetCompareExchangeValueCommand<T> extends RavenCommand<CompareExchangeValue<T>> {\r\n    private readonly _key: string;\r\n    private readonly _clazz: CompareExchangeResultClass<T>;\r\n    private readonly _materializeMetadata: boolean;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(key: string, materializeMetadata: boolean, conventions: DocumentConventions, clazz?: CompareExchangeResultClass<T>) {\r\n        super();\r\n\r\n        if (!key) {\r\n            throwError(\"InvalidArgumentException\", \"The key argument must have value\");\r\n        }\r\n\r\n        this._key = key;\r\n        this._clazz = clazz;\r\n        this._materializeMetadata = materializeMetadata;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/cmpxchg?key=\" + encodeURIComponent(this._key);\r\n        return {uri};\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            return null;\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._pipeline<ServerCasing<ServerResponse<GetCompareExchangeValuesResponse>>>()\r\n            .collectBody(x => body = x)\r\n            .parseJsonSync()\r\n            .process(bodyStream);\r\n\r\n        const localObject = GetCompareExchangeValuesCommand.mapToLocalObject(results);\r\n\r\n        this.result = CompareExchangeValueResultParser.getValue(localObject, this._materializeMetadata, this._conventions, this._clazz);\r\n        return body;\r\n    }\r\n}\r\n"]}