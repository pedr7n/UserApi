{"version":3,"file":"CompareExchangeSessionValue.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/CompareExchange/CompareExchangeSessionValue.ts"],"names":[],"mappings":"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","sourcesContent":["import { CompareExchangeValue } from \"./CompareExchangeValue.js\";\r\nimport { ICompareExchangeValue } from \"./ICompareExchangeValue.js\";\r\nimport { CompareExchangeValueState } from \"./CompareExchangeValueState.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\nimport { CompareExchangeResultClass } from \"../../../Types/index.js\";\r\nimport { CompareExchangeValueJsonConverter } from \"./CompareExchangeValueJsonConverter.js\";\r\nimport { COMPARE_EXCHANGE, CONSTANTS } from \"../../../Constants.js\";\r\nimport { StringUtil } from \"../../../Utility/StringUtil.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { EntityToJson } from \"../../Session/EntityToJson.js\";\r\nimport { ICommandData } from \"../../Commands/CommandData.js\";\r\nimport { PutCompareExchangeCommandData } from \"../../Commands/Batches/PutCompareExchangeCommandData.js\";\r\nimport { DeleteCompareExchangeCommandData } from \"../../Commands/Batches/DeleteCompareExchangeCommandData.js\";\r\nimport { ITypesAwareObjectMapper } from \"../../../Mapping/ObjectMapper.js\";\r\nimport { IMetadataDictionary } from \"../../Session/IMetadataDictionary.js\";\r\nimport { CompareExchangeValueResultParser } from \"./CompareExchangeValueResultParser.js\";\r\n\r\nexport class CompareExchangeSessionValue {\r\n    private readonly _key: string;\r\n    private _index: number;\r\n    private _originalValue: CompareExchangeValue<any>;\r\n\r\n    private _value: ICompareExchangeValue;\r\n    private _state: CompareExchangeValueState;\r\n\r\n    public constructor(key: string, index: number, state: CompareExchangeValueState);\r\n    public constructor(value: CompareExchangeValue<any>);\r\n    public constructor(keyOrValue: string | CompareExchangeValue<object>, index?: number, state?: CompareExchangeValueState) {\r\n        if (!keyOrValue) {\r\n            throwError(\"InvalidArgumentException\", \"Key cannot be null\");\r\n        }\r\n\r\n        if (TypeUtil.isString(keyOrValue)) {\r\n            this._key = keyOrValue;\r\n            this._index = index;\r\n            this._state = state;\r\n        } else {\r\n            this._key = keyOrValue.key;\r\n            this._index = keyOrValue.index;\r\n            this._state = keyOrValue.index >= 0 ? \"None\" : \"Missing\";\r\n\r\n            if (keyOrValue.index > 0) {\r\n                this._originalValue = keyOrValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getValue<T>(clazz: CompareExchangeResultClass<T>, conventions: DocumentConventions): CompareExchangeValue<T> {\r\n        switch (this._state) {\r\n            case \"None\":\r\n            case \"Created\": {\r\n                if (this._value instanceof CompareExchangeValue) {\r\n                    return this._value;\r\n                }\r\n\r\n                if (this._value) {\r\n                    throwError(\"InvalidOperationException\", \"Value cannot be null\");\r\n                }\r\n\r\n                let entity: T;\r\n\r\n                if (this._originalValue && !TypeUtil.isNullOrUndefined(this._originalValue.value)) {\r\n                    entity = CompareExchangeValueResultParser.deserializeObject(this._originalValue.value, conventions, clazz) as T;\r\n                }\r\n\r\n                const value = new CompareExchangeValue(this._key, this._index, entity, null);\r\n                this._value = value;\r\n\r\n                return value;\r\n            }\r\n            case \"Missing\":\r\n            case \"Deleted\": {\r\n                return null;\r\n            }\r\n            default: {\r\n                throwError(\"NotSupportedException\", \"Not supported state: \" + this._state);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public create<T>(item: T): CompareExchangeValue<T> {\r\n        this._assertState();\r\n\r\n        if (this._value) {\r\n            throwError(\"InvalidOperationException\", \"The compare exchange value with key '\" + this._key + \"' is already tracked.\");\r\n        }\r\n\r\n        this._index = 0;\r\n        const value = new CompareExchangeValue(this._key, this._index, item, null);\r\n        this._value = value;\r\n        this._state = \"Created\";\r\n        return value;\r\n    }\r\n\r\n    public delete(index: number) {\r\n        this._assertState();\r\n\r\n        this._index = index;\r\n        this._state = \"Deleted\";\r\n    }\r\n\r\n    private _assertState() {\r\n        switch (this._state) {\r\n            case \"None\":\r\n            case \"Missing\": {\r\n                return;\r\n            }\r\n            case \"Created\": {\r\n                throwError(\"InvalidOperationException\", \"The compare exchange value with key '\" + this._key + \"' was already stored.\");\r\n                break;\r\n            }\r\n            case \"Deleted\": {\r\n                throwError(\"InvalidOperationException\", \"The compare exchange value with key '\" + this._key + \"' was already deleted.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): ICommandData {\r\n        switch (this._state) {\r\n            case \"None\":\r\n            case \"Created\": {\r\n                if (!this._value) {\r\n                    return null;\r\n                }\r\n\r\n                const entity = CompareExchangeValueJsonConverter.convertToJson(this._value.value, conventions);\r\n\r\n                let entityJson = TypeUtil.isObject(entity) ? entity : null;\r\n                let metadata: any;\r\n\r\n                if (this._value.hasMetadata() && Object.keys(this._value.metadata)) {\r\n                    metadata = CompareExchangeSessionValue.prepareMetadataForPut(this._key, this._value.metadata, conventions);\r\n                }\r\n\r\n                let entityToInsert = null;\r\n                if (TypeUtil.isNullOrUndefined(entityJson)) {\r\n                    entityJson = entityToInsert = this._convertEntity(this._key, entity, conventions.objectMapper, metadata);\r\n                }\r\n\r\n                const newValue = new CompareExchangeValue(this._key, this._index, entityJson, null);\r\n                const hasChanged = TypeUtil.isNullOrUndefined(this._originalValue) || this.hasChanged(this._originalValue, newValue);\r\n\r\n                this._originalValue = newValue;\r\n\r\n                if (!hasChanged) {\r\n                    return null;\r\n                }\r\n\r\n                if (TypeUtil.isNullOrUndefined(entityToInsert)) {\r\n                    entityToInsert = this._convertEntity(this._key, entity, conventions.objectMapper, metadata);\r\n                }\r\n\r\n                return new PutCompareExchangeCommandData(newValue.key, entityToInsert, newValue.index);\r\n            }\r\n            case \"Deleted\": {\r\n                return new DeleteCompareExchangeCommandData(this._key, this._index);\r\n            }\r\n            case \"Missing\": {\r\n                return null;\r\n            }\r\n            default: {\r\n                throwError(\"InvalidOperationException\", \"Not supported state: \" + this._state);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _convertEntity(key: string, entity: any, objectMapper: ITypesAwareObjectMapper, metadata: any) {\r\n        return {\r\n            [COMPARE_EXCHANGE.OBJECT_FIELD_NAME]: entity,\r\n            [CONSTANTS.Documents.Metadata.KEY]: metadata ?? undefined\r\n        }\r\n    }\r\n\r\n    public hasChanged(originalValue: CompareExchangeValue<unknown>, newValue: CompareExchangeValue<unknown>) {\r\n        if (originalValue === newValue) {\r\n            return false;\r\n        }\r\n\r\n        if (!StringUtil.equalsIgnoreCase(originalValue.key, newValue.key)) {\r\n            throwError(\"InvalidOperationException\", \"Keys do not match. Expected '\" + originalValue.key + \" but was: \" + newValue.key);\r\n        }\r\n\r\n        if (originalValue.index !== newValue.index) {\r\n            return true;\r\n        }\r\n\r\n        return JSON.stringify(originalValue.value) !== JSON.stringify(newValue.value);\r\n    }\r\n\r\n    public updateState(index: number) {\r\n        this._index = index;\r\n        this._state = \"None\";\r\n\r\n        if (this._originalValue) {\r\n            this._originalValue.index = index;\r\n        }\r\n\r\n        if (this._value) {\r\n            this._value.index = index;\r\n        }\r\n    }\r\n\r\n    public updateValue(value: CompareExchangeValue<object>, mapper: ITypesAwareObjectMapper) {\r\n        this._index = value.index;\r\n        this._state = value.index >= 0 ? \"None\" : \"Missing\";\r\n\r\n        this._originalValue = value;\r\n\r\n        if (this._value) {\r\n            this._value.index = this._index;\r\n\r\n            if (!TypeUtil.isNullOrUndefined(this._value.value)) {\r\n                EntityToJson.populateEntity(this._value.value, value.value, mapper);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static prepareMetadataForPut(key: string, metadataDictionary: IMetadataDictionary, conventions: DocumentConventions) {\r\n        if (CONSTANTS.Documents.Metadata.EXPIRES in metadataDictionary) {\r\n            const obj = metadataDictionary[CONSTANTS.Documents.Metadata.EXPIRES];\r\n            if (!obj) {\r\n                CompareExchangeSessionValue._throwInvalidExpiresMetadata(\r\n                    \"The value of \" + CONSTANTS.Documents.Metadata.EXPIRES + \" metadata for compare exchange '\" + key + \" is null.\");\r\n            }\r\n\r\n            if (!TypeUtil.isDate(obj) && !TypeUtil.isString(obj)) {\r\n                CompareExchangeSessionValue._throwInvalidExpiresMetadata(\"The class of \" + CONSTANTS.Documents.Metadata.EXPIRES + \" metadata for compare exchange '\" + key + \"' is not valid. Use the following type: Date or string\");\r\n            }\r\n        }\r\n\r\n        return conventions.objectMapper.toObjectLiteral(metadataDictionary);\r\n    }\r\n\r\n    private static _throwInvalidExpiresMetadata(message: string) {\r\n        throwError(\"InvalidArgumentException\", message);\r\n    }\r\n}\r\n\r\n"]}