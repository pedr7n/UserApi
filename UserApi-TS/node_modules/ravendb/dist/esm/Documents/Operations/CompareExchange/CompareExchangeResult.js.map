{"version":3,"file":"CompareExchangeResult.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/CompareExchange/CompareExchangeResult.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAG1D,OAAO,EAAE,gCAAgC,EAAE,MAAM,uCAAuC,CAAC;AAUzF,MAAM,OAAO,qBAAqB;IAEvB,KAAK,CAAI;IACT,KAAK,CAAS;IACd,UAAU,CAAU;IAEpB,MAAM,CAAC,eAAe,CACzB,QAAqE,EACrE,WAAgC,EAChC,KAAqC;QACrC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YAClB,UAAU,CAAC,2BAA2B,EAAE,uCAAuC,CAAC,CAAC;QACrF,CAAC;QAED,IAAI,KAAK,EAAE,CAAC;YACR,WAAW,CAAC,iBAAiB,CAAC,KAAqB,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC3B,MAAM,MAAM,GAAG,gCAAgC,CAAC,iBAAiB,CAAC,GAAG,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;QAE3F,MAAM,cAAc,GAAG,IAAI,qBAAqB,EAAK,CAAC;QACtD,cAAc,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QACtC,cAAc,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;QAChD,cAAc,CAAC,KAAK,GAAG,MAAW,CAAC;QAEnC,OAAO,cAAc,CAAC;IAC1B,CAAC;CAEJ","sourcesContent":["import { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { CompareExchangeResultClass, ServerCasing, ServerResponse } from \"../../../Types/index.js\";\r\nimport { DocumentType } from \"../../DocumentAbstractions.js\";\r\nimport { CompareExchangeValueResultParser } from \"./CompareExchangeValueResultParser.js\";\r\n\r\nexport interface CompareExchangeResultResponse {\r\n    index: number;\r\n    successful: boolean;\r\n    value: {\r\n        object: object\r\n    };\r\n}\r\n\r\nexport class CompareExchangeResult<T> {\r\n\r\n    public value: T;\r\n    public index: number;\r\n    public successful: boolean;\r\n\r\n    public static parseFromObject<T>(\r\n        response: ServerCasing<ServerResponse<CompareExchangeResultResponse>>,\r\n        conventions: DocumentConventions,\r\n        clazz?: CompareExchangeResultClass<T>): CompareExchangeResult<T> {\r\n        if (!response.Index) {\r\n            throwError(\"InvalidOperationException\", \"Response is invalid. Index is missing\");\r\n        }\r\n\r\n        if (clazz) {\r\n            conventions.tryRegisterJsType(clazz as DocumentType);\r\n        }\r\n\r\n        const raw = response.Value;\r\n        const result = CompareExchangeValueResultParser.deserializeObject(raw, conventions, clazz);\r\n\r\n        const exchangeResult = new CompareExchangeResult<T>();\r\n        exchangeResult.index = response.Index;\r\n        exchangeResult.successful = response.Successful;\r\n        exchangeResult.value = result as T;\r\n\r\n        return exchangeResult;\r\n    }\r\n\r\n}\r\n"]}