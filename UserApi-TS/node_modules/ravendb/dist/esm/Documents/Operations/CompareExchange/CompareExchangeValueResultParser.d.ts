import { DocumentConventions } from "../../Conventions/DocumentConventions.js";
import { CompareExchangeValue } from "./CompareExchangeValue.js";
import { CompareExchangeResultClass } from "../../../Types/index.js";
export interface CompareExchangeResultItem {
    index: number;
    key: string;
    value: {
        Object: object;
        "@metadata"?: any;
    };
    changeVector: string;
}
export declare const ObjectNodeMarker: unique symbol;
export interface GetCompareExchangeValuesResponse {
    results: CompareExchangeResultItem[];
}
export declare class CompareExchangeValueResultParser {
    static getValues<T>(responseObj: GetCompareExchangeValuesResponse, materializeMetadata: boolean, conventions: DocumentConventions, clazz?: CompareExchangeResultClass<T>): {
        [key: string]: CompareExchangeValue<T>;
    };
    static getValue<T>(response: GetCompareExchangeValuesResponse, materializeMetadata: boolean, conventions: DocumentConventions, clazz: CompareExchangeResultClass<T>): CompareExchangeValue<T>;
    static getSingleValue<T>(item: CompareExchangeResultItem, materializeMetadata: boolean, conventions: DocumentConventions, clazz: CompareExchangeResultClass<T>): CompareExchangeValue<any>;
    static deserializeObject<T>(raw: object, conventions: DocumentConventions, clazz: CompareExchangeResultClass<T>): any;
}
//# sourceMappingURL=CompareExchangeValueResultParser.d.ts.map