{"version":3,"file":"DeleteCompareExchangeValueOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/CompareExchange/DeleteCompareExchangeValueOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,qBAAqB,EAAiC,MAAM,4BAA4B,CAAC;AAKlG,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAC7D,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAI1D,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAEtE,MAAM,OAAO,mCAAmC;IAE3B,IAAI,CAAS;IACb,MAAM,CAAS;IACf,MAAM,CAAgC;IAEvD,YAAmB,GAAW,EAAE,KAAa,EAAE,KAAqC;QAChF,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAEM,UAAU,CAAC,KAAqB,EAAE,WAAgC,EAAE,KAAgB;QAEvF,OAAO,IAAI,4BAA4B,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9F,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;CAEJ;AAED,MAAM,OAAO,4BAAgC,SAAQ,YAAsC;IACtE,IAAI,CAAS;IACb,MAAM,CAAS;IACf,MAAM,CAAgC;IACtC,YAAY,CAAsB;IAEnD,YAAmB,GAAW,EAAE,KAAa,EAAE,WAAgC,EAAE,KAAqC;QAClH,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,GAAG,EAAE,CAAC;YACP,UAAU,CAAC,0BAA0B,EAAE,mCAAmC,CAAC,CAAC;QAChF,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,eAAe,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;cAChG,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;QAC9B,OAAO;YACH,MAAM,EAAE,QAAQ;YAChB,GAAG;SACN,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAA+D;aAC7F,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;aAC1B,aAAa,EAAE;aACf,OAAO,CAAC,UAAU,CAAC,CAAC;QAEzB,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5F,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,sBAAsB;QACzB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { IOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { CompareExchangeResult, CompareExchangeResultResponse } from \"./CompareExchangeResult.js\";\r\nimport { CompareExchangeResultClass, ServerCasing, ServerResponse } from \"../../../Types/index.js\";\r\nimport { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class DeleteCompareExchangeValueOperation<T> implements IOperation<CompareExchangeResult<T>> {\r\n\r\n    private readonly _key: string;\r\n    private readonly _index: number;\r\n    private readonly _clazz: CompareExchangeResultClass<T>;\r\n\r\n    public constructor(key: string, index: number, clazz?: CompareExchangeResultClass<T>) {\r\n        this._key = key;\r\n        this._index = index;\r\n        this._clazz = clazz;\r\n    }\r\n\r\n    public getCommand(store: IDocumentStore, conventions: DocumentConventions, cache: HttpCache)\r\n        : RavenCommand<CompareExchangeResult<T>> {\r\n        return new RemoveCompareExchangeCommand(this._key, this._index, conventions, this._clazz);\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n}\r\n\r\nexport class RemoveCompareExchangeCommand<T> extends RavenCommand<CompareExchangeResult<T>> implements IRaftCommand {\r\n    private readonly _key: string;\r\n    private readonly _index: number;\r\n    private readonly _clazz: CompareExchangeResultClass<T>;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(key: string, index: number, conventions: DocumentConventions, clazz?: CompareExchangeResultClass<T>) {\r\n        super();\r\n\r\n        if (!key) {\r\n            throwError(\"InvalidArgumentException\", \"The key argument must have value.\");\r\n        }\r\n\r\n        this._clazz = clazz;\r\n        this._key = key;\r\n        this._index = index;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/cmpxchg?key=\" + encodeURIComponent(this._key)\r\n            + \"&index=\" + this._index;\r\n        return {\r\n            method: \"DELETE\",\r\n            uri\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        let body: string = null;\r\n        const resObj = await this._pipeline<ServerCasing<ServerResponse<CompareExchangeResultResponse>>>()\r\n            .collectBody(_ => body = _)\r\n            .parseJsonSync()\r\n            .process(bodyStream);\r\n\r\n        this.result = CompareExchangeResult.parseFromObject(resObj, this._conventions, this._clazz);\r\n        return body;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}