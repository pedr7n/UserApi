{"version":3,"file":"GetPeriodicBackupStatusOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/Backups/GetPeriodicBackupStatusOperation.ts"],"names":[],"mappings":"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","sourcesContent":["import { IMaintenanceOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { GetPeriodicBackupStatusOperationResult } from \"./GetPeriodicBackupStatusOperationResult.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { PeriodicBackupStatus } from \"./PeriodicBackupStatus.js\";\r\nimport { ServerResponse } from \"../../../Types/index.js\";\r\nimport {\r\n    BackupStatus,\r\n    LocalBackup,\r\n    UpdateToGoogleCloud,\r\n    UploadToAzure,\r\n    UploadToFtp, UploadToGlacier,\r\n    UploadToS3\r\n} from \"./BackupStatus.js\";\r\nimport { DateUtil } from \"../../../Utility/DateUtil.js\";\r\n\r\nexport class GetPeriodicBackupStatusOperation implements IMaintenanceOperation<GetPeriodicBackupStatusOperationResult> {\r\n    private readonly _taskId: number;\r\n\r\n    public constructor(taskId: number) {\r\n        this._taskId = taskId;\r\n    }\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public getCommand(conventions: DocumentConventions): RavenCommand<GetPeriodicBackupStatusOperationResult> {\r\n        return new GetPeriodicBackupStatusCommand(this._taskId, conventions);\r\n    }\r\n}\r\n\r\nclass GetPeriodicBackupStatusCommand extends RavenCommand<GetPeriodicBackupStatusOperationResult> {\r\n    private readonly _taskId: number;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(taskId: number, conventions: DocumentConventions) {\r\n        super();\r\n\r\n        this._taskId = taskId;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/periodic-backup/status?name=\" + node.database + \"&taskId=\" + this._taskId;\r\n\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline<ServerResponse<GetPeriodicBackupStatusOperationResult>>(_ => body = _)\r\n            .process(bodyStream);\r\n\r\n\r\n        this.result = {\r\n            ...results,\r\n            status: revivePeriodicBackupStatus(results.status)\r\n        }\r\n\r\n        if (this.result.isSharded) {\r\n            throw new Error(\"Database is sharded, can't use GetPeriodicBackupStatusOperation. Use GetShardedPeriodicBackupStatusOperation instead.\");\r\n        }\r\n        return body;\r\n    }\r\n}\r\n\r\nexport function revivePeriodicBackupStatus(status: ServerResponse<PeriodicBackupStatus>): PeriodicBackupStatus {\r\n    if (!status) {\r\n        return null;\r\n    }\r\n\r\n    return {\r\n        ...status,\r\n        lastFullBackup: DateUtil.utc.parse(status.lastFullBackup),\r\n        delayUntil: DateUtil.utc.parse(status.delayUntil),\r\n        originalBackupTime: DateUtil.utc.parse(status.originalBackupTime),\r\n        lastIncrementalBackup: DateUtil.utc.parse(status.lastIncrementalBackup),\r\n        lastFullBackupInternal: DateUtil.utc.parse(status.lastFullBackupInternal),\r\n        lastIncrementalBackupInternal: DateUtil.utc.parse(status.lastIncrementalBackupInternal),\r\n        localBackup: reviveUploadStatus<LocalBackup>(status.localBackup),\r\n        error: status.error ? {\r\n            ...status.error,\r\n            at: DateUtil.utc.parse(status.error.at)\r\n        } : null,\r\n        uploadToS3: reviveUploadStatus<UploadToS3>(status.uploadToS3),\r\n        uploadToFtp: reviveUploadStatus<UploadToFtp>(status.uploadToFtp),\r\n        updateToGoogleCloud: reviveUploadStatus<UpdateToGoogleCloud>(status.updateToGoogleCloud),\r\n        uploadToAzure: reviveUploadStatus<UploadToAzure>(status.uploadToAzure),\r\n        uploadToGlacier: reviveUploadStatus<UploadToGlacier>(status.uploadToGlacier)\r\n    }\r\n}\r\n\r\nfunction reviveUploadStatus<T extends BackupStatus>(status: ServerResponse<T>): T {\r\n    if (!status) {\r\n        return null;\r\n    }\r\n    return {\r\n        ...status,\r\n        lastFullBackup: DateUtil.utc.parse(status.lastFullBackup),\r\n        lastIncrementalBackup: DateUtil.utc.parse(status.lastIncrementalBackup),\r\n    } as T;\r\n}\r\n"]}