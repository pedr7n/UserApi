import { RavenCommand } from "../../../Http/RavenCommand.js";
import { TypeUtil } from "../../../Utility/TypeUtil.js";
import { RaftIdGenerator } from "../../../Utility/RaftIdGenerator.js";
export class ToggleOngoingTaskStateOperation {
    _taskId;
    _taskName;
    _type;
    _disable;
    constructor(taskNameOrTaskId, type, disable) {
        if (TypeUtil.isString(taskNameOrTaskId)) {
            this._taskId = 0;
            this._taskName = taskNameOrTaskId;
        }
        else {
            this._taskId = taskNameOrTaskId;
            this._taskName = null;
        }
        this._type = type;
        this._disable = disable;
    }
    get resultType() {
        return "CommandResult";
    }
    getCommand(conventions) {
        return new ToggleTaskStateCommand(this._taskId, this._taskName, this._type, this._disable);
    }
}
class ToggleTaskStateCommand extends RavenCommand {
    _taskId;
    _taskName;
    _type;
    _disable;
    constructor(taskId, taskName, type, disable) {
        super();
        this._taskId = taskId;
        this._taskName = taskName;
        this._type = type;
        this._disable = disable;
    }
    createRequest(node) {
        let uri = node.url + "/databases/"
            + node.database + "/admin/tasks/state?key="
            + this._taskId + "&type=" + this._type
            + "&disable=" + (this._disable ? "true" : "false");
        if (this._taskName) {
            uri += "&taskName=" + encodeURIComponent(this._taskName);
        }
        return {
            uri,
            method: "POST"
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (bodyStream) {
            return this._parseResponseDefaultAsync(bodyStream);
        }
        return null;
    }
    get isReadRequest() {
        return false;
    }
    getRaftUniqueRequestId() {
        return RaftIdGenerator.newId();
    }
}
//# sourceMappingURL=ToggleOngoingTaskStateOperation.js.map