{"version":3,"file":"TimeSeriesBatchOperation.js","sourceRoot":"","sources":["../../../../../src/Documents/Operations/TimeSeries/TimeSeriesBatchOperation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAK1D,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAG7D,MAAM,OAAO,wBAAwB;IAChB,WAAW,CAAS;IACpB,UAAU,CAAsB;IAEjD,IAAW,UAAU;QACjB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,YAAmB,UAAkB,EAAE,SAA8B;QACjE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;YACb,UAAU,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAED,UAAU,CAAC,KAAqB,EAAE,WAAgC,EAAE,SAAoB;QACpF,OAAO,IAAI,sBAAsB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IACtF,CAAC;CACJ;AAED,MAAM,sBAAuB,SAAQ,YAAkB;IAClC,WAAW,CAAS;IACpB,UAAU,CAAsB;IAChC,YAAY,CAAsB;IAEnD,YAAmB,UAAkB,EAAE,SAA8B,EAAE,WAAgC;QACnG,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEhH,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAEjD,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG;YACH,IAAI;YACJ,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;SACjD,CAAA;IACL,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ","sourcesContent":["import { IOperation, OperationResultType } from \"../OperationAbstractions.js\";\r\nimport { TimeSeriesOperation } from \"./TimeSeriesOperation.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { IDocumentStore } from \"../../IDocumentStore.js\";\r\nimport { HttpCache } from \"../../../Http/HttpCache.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { ServerNode } from \"../../../Http/ServerNode.js\";\r\n\r\nexport class TimeSeriesBatchOperation implements IOperation<void> {\r\n    private readonly _documentId: string;\r\n    private readonly _operation: TimeSeriesOperation;\r\n\r\n    public get resultType(): OperationResultType {\r\n        return \"CommandResult\";\r\n    }\r\n\r\n    public constructor(documentId: string, operation: TimeSeriesOperation) {\r\n        if (!documentId) {\r\n            throwError(\"InvalidArgumentException\", \"Document id cannot be null\");\r\n        }\r\n\r\n        if (!operation) {\r\n            throwError(\"InvalidArgumentException\", \"Operation cannot be null\");\r\n        }\r\n\r\n        this._documentId = documentId;\r\n        this._operation = operation;\r\n    }\r\n\r\n    getCommand(store: IDocumentStore, conventions: DocumentConventions, httpCache: HttpCache): RavenCommand<void> {\r\n        return new TimeSeriesBatchCommand(this._documentId, this._operation, conventions);\r\n    }\r\n}\r\n\r\nclass TimeSeriesBatchCommand extends RavenCommand<void> {\r\n    private readonly _documentId: string;\r\n    private readonly _operation: TimeSeriesOperation;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(documentId: string, operation: TimeSeriesOperation, conventions: DocumentConventions) {\r\n        super();\r\n\r\n        this._documentId = documentId;\r\n        this._operation = operation;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/timeseries?docId=\" + this._urlEncode(this._documentId);\r\n\r\n        const payload = this._operation.serialize(this._conventions);\r\n        const body = this._serializer.serialize(payload);\r\n\r\n        return {\r\n            method: \"POST\",\r\n            uri,\r\n            body,\r\n            headers: this._headers().typeAppJson().build()\r\n        }\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n}"]}