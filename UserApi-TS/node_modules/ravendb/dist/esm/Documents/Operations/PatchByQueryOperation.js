import { IndexQuery, writeIndexQuery } from "../Queries/IndexQuery.js";
import { TypeUtil } from "../../Utility/TypeUtil.js";
import { throwError } from "../../Exceptions/index.js";
import { RavenCommand } from "../../Http/RavenCommand.js";
export class PatchByQueryOperation {
    static DUMMY_QUERY = new IndexQuery();
    _queryToUpdate;
    _options;
    constructor(queryToUpdate, options) {
        if (TypeUtil.isString(queryToUpdate)) {
            queryToUpdate = new IndexQuery(queryToUpdate);
        }
        if (!queryToUpdate) {
            throwError("InvalidArgumentException", "QueryToUpdate cannot be null");
        }
        this._queryToUpdate = queryToUpdate;
        this._options = options;
    }
    getCommand(store, conventions, cache) {
        return new PatchByQueryCommand(conventions, this._queryToUpdate, this._options);
    }
    get resultType() {
        return "OperationId";
    }
}
export class PatchByQueryCommand extends RavenCommand {
    _conventions;
    _queryToUpdate;
    _options;
    get isReadRequest() {
        return false;
    }
    constructor(conventions, queryToUpdate, options) {
        super();
        this._conventions = conventions;
        this._queryToUpdate = queryToUpdate;
        this._options = options || {};
    }
    createRequest(node) {
        let path = node.url + "/databases/" + node.database + "/queries?allowStale="
            + !!this._options.allowStale;
        if (!TypeUtil.isNullOrUndefined(this._options.maxOpsPerSecond)) {
            path += "&maxOpsPerSec=" + this._options.maxOpsPerSecond;
        }
        path += "&details=" + !!this._options.retrieveDetails;
        if (!TypeUtil.isNullOrUndefined(this._options.staleTimeout)) {
            path += "&staleTimeout=" + this._options.staleTimeout;
        }
        if (this._options.ignoreMaxStepsForScript) {
            path += "&ignoreMaxStepsForScript=true";
        }
        const body = `{ "Query": ${writeIndexQuery(this._conventions, this._queryToUpdate)} }`;
        return {
            method: "PATCH",
            uri: path,
            headers: this._headers().typeAppJson().build(),
            body
        };
    }
    async setResponseAsync(bodyStream, fromCache) {
        if (!bodyStream) {
            this._throwInvalidResponse();
        }
        return this._parseResponseDefaultAsync(bodyStream);
    }
}
//# sourceMappingURL=PatchByQueryOperation.js.map