import { RequestExecutor } from "../Http/RequestExecutor.js";
import { DocumentStoreBase } from "./DocumentStoreBase.js";
import { IDocumentStore } from "./IDocumentStore.js";
import { MaintenanceOperationExecutor } from "./Operations/MaintenanceOperationExecutor.js";
import { OperationExecutor } from "./Operations/OperationExecutor.js";
import { IDocumentSession } from "./Session/IDocumentSession.js";
import { SessionOptions } from "./Session/SessionOptions.js";
import { IAuthOptions } from "../Auth/AuthOptions.js";
import { BulkInsertOperation } from "./BulkInsertOperation.js";
import { IDatabaseChanges } from "./Changes/IDatabaseChanges.js";
import { DatabaseChanges } from "./Changes/DatabaseChanges.js";
import { DatabaseSmuggler } from "./Smuggler/DatabaseSmuggler.js";
import { DatabaseChangesOptions } from "./Changes/DatabaseChangesOptions.js";
import { IDisposable } from "../Types/Contracts.js";
import { MultiDatabaseHiLoIdGenerator } from "./Identity/MultiDatabaseHiLoIdGenerator.js";
import { BulkInsertOptions } from "./BulkInsert/BulkInsertOptions.js";
export declare class DocumentStore extends DocumentStoreBase {
    private _log;
    private readonly _databaseChanges;
    private _requestExecutors;
    private _multiDbHiLo;
    private _maintenanceOperationExecutor;
    private _operationExecutor;
    private _smuggler;
    private _identifier;
    private _aggressiveCachingUsed;
    constructor(url: string, database: string);
    constructor(urls: string[], database: string);
    constructor(url: string, database: string, authOptions: IAuthOptions);
    constructor(urls: string[], database: string, authOptions: IAuthOptions);
    private _getDatabaseChangesCacheKey;
    get identifier(): string;
    set identifier(identifier: string);
    get hiLoIdGenerator(): MultiDatabaseHiLoIdGenerator;
    /**
     * Disposes the document store
     */
    dispose(): void;
    /**
     * Opens document session.
     */
    openSession(): IDocumentSession;
    /**
     * Opens document session.
     */
    openSession(database: string): IDocumentSession;
    /**
     * Opens document session
     */
    openSession(sessionOpts: SessionOptions): IDocumentSession;
    /**
     * Gets request executor for specific database. Default is initial database.
     */
    getRequestExecutor(database?: string): RequestExecutor;
    requestTimeout(timeoutInMs: number): IDisposable;
    requestTimeout(timeoutInMs: number, database: string): IDisposable;
    /**
     * Initializes this instance.
     */
    initialize(): IDocumentStore;
    /**
     * Validate the configuration for the document store
     */
    protected _assertValidConfiguration(): void;
    /**
     * Setup the context for no aggressive caching
     *
     * This is mainly useful for internal use inside RavenDB, when we are executing
     * queries that have been marked with WaitForNonStaleResults, we temporarily disable
     * aggressive caching.
     */
    /**
     * Setup the context for no aggressive caching
     *
     * This is mainly useful for internal use inside RavenDB, when we are executing
     * queries that have been marked with WaitForNonStaleResults, we temporarily disable
     * aggressive caching.
     */
    changes(): IDatabaseChanges;
    changes(database: string): IDatabaseChanges;
    changes(database: string, nodeTag: string): IDatabaseChanges;
    protected _createDatabaseChanges(node: DatabaseChangesOptions): DatabaseChanges;
    /**
     * Gets maintenance operations executor.
     */
    get maintenance(): MaintenanceOperationExecutor;
    get smuggler(): DatabaseSmuggler;
    /**
     * Gets operations executor.
     */
    get operations(): OperationExecutor;
    bulkInsert(): BulkInsertOperation;
    bulkInsert(database: string): BulkInsertOperation;
    bulkInsert(options: BulkInsertOptions): BulkInsertOperation;
    bulkInsert(database: string, options: BulkInsertOptions): BulkInsertOperation;
}
//# sourceMappingURL=DocumentStore.d.ts.map