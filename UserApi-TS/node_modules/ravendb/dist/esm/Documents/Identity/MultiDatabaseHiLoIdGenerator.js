import { MultiTypeHiLoIdGenerator } from "./MultiTypeHiLoIdGenerator.js";
import { DocumentStoreBase } from "../DocumentStoreBase.js";
import { TypeUtil } from "../../Utility/TypeUtil.js";
export class MultiDatabaseHiLoIdGenerator {
    _store;
    _generators = {};
    constructor(store) {
        this._store = store;
    }
    generateDocumentId(database, entity) {
        return this._getGeneratorForDatabase(DocumentStoreBase.getEffectiveDatabase(this._store, database))
            .generateDocumentId(entity);
    }
    _getGeneratorForDatabase(database) {
        if (!(database in this._generators)) {
            this._generators[database] = new MultiTypeHiLoIdGenerator(this._store, database);
        }
        return this._generators[database];
    }
    async returnUnusedRange() {
        for (const [key, generator] of Object.entries(this._generators)) {
            await generator.returnUnusedRange();
        }
    }
    generateNextIdFor(database, target) {
        if (TypeUtil.isString(target)) {
            return this._generateNextIdFor(database, target);
        }
        if (TypeUtil.isObjectTypeDescriptor(target)) {
            const collectionName = this._store.conventions.getCollectionNameForType(target);
            return this._generateNextIdFor(database, collectionName);
        }
        const collectionName = this._store.conventions.getCollectionNameForEntity(target);
        return this._generateNextIdFor(database, collectionName);
    }
    async _generateNextIdFor(database, collectionName) {
        database = this._store.getEffectiveDatabase(database);
        if (!(database in this._generators)) {
            this._generators[database] = new MultiTypeHiLoIdGenerator(this._store, database);
        }
        return this._generators[database].generateNextIdFor(collectionName);
    }
}
//# sourceMappingURL=MultiDatabaseHiLoIdGenerator.js.map