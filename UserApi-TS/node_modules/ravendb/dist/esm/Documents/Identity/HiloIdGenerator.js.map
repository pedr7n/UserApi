{"version":3,"file":"HiloIdGenerator.js","sourceRoot":"","sources":["../../../../src/Documents/Identity/HiloIdGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import { IDocumentStore } from \"../IDocumentStore.js\";\r\nimport { DateUtil } from \"../../Utility/DateUtil.js\";\r\nimport { HiloReturnCommand } from \"./Commands/HiloReturnCommand.js\";\r\nimport { NextHiloCommand, HiLoResult } from \"./Commands/NextHiloCommand.js\";\r\nimport { HiloRangeValue } from \"./HiloRangeValue.js\";\r\nimport { Lazy } from \"../Lazy.js\";\r\nimport { NextId } from \"./NextId.js\";\r\n\r\nexport class HiloIdGenerator {\r\n    private _store: IDocumentStore;\r\n    private readonly _tag: string;\r\n    protected _prefix?: string = null;\r\n    private _lastBatchSize: number = 0;\r\n    private _lastRangeAt: Date;\r\n    private readonly _dbName: string;\r\n    private readonly _identityPartsSeparator: string;\r\n    private _range: HiloRangeValue;\r\n\r\n\r\n    private _nextRangeTask: Lazy<void>;\r\n\r\n    constructor(tag: string, store: IDocumentStore, dbName: string, identityPartsSeparator: string) {\r\n        this._store = store;\r\n        this._tag = tag;\r\n        this._dbName = dbName;\r\n        this._identityPartsSeparator = identityPartsSeparator;\r\n        this._lastRangeAt = DateUtil.zeroDate();\r\n        this._range = new HiloRangeValue(1, 0, null);\r\n    }\r\n\r\n    protected _getDocumentIdFromId(result: NextId) {\r\n        return this._prefix + result.id + \"-\" + result.serverTag;\r\n    }\r\n\r\n    // noinspection JSUnusedLocalSymbols\r\n    public async generateDocumentId(entity: object): Promise<string> {\r\n        const nextId = await this.getNextId();\r\n        return this._getDocumentIdFromId(nextId);\r\n    }\r\n\r\n\r\n    public async getNextId(): Promise<NextId> {\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n            const current = this._nextRangeTask;\r\n\r\n            // local range is not exhausted yet\r\n            const range = this._range;\r\n\r\n            const id = range.increment();\r\n            if (id <= range.maxId) {\r\n                return {\r\n                    id,\r\n                    serverTag: range.serverTag\r\n                }\r\n            }\r\n\r\n            try {\r\n                // let's try to call the existing task for next range\r\n                await current.getValue();\r\n                if (range !== this._range) {\r\n                    continue;\r\n                }\r\n            } catch {\r\n                // previous task was faulted, we will try to replace it\r\n            }\r\n\r\n            // local range is exhausted , need to get a new range\r\n            const maybeNextTask = new Lazy(() => this._getNextRange());\r\n            let changed = false;\r\n            if (this._nextRangeTask === current) {\r\n                changed = true;\r\n                this._nextRangeTask = maybeNextTask;\r\n            }\r\n\r\n            if (changed) {\r\n                await maybeNextTask.getValue();\r\n                continue;\r\n            }\r\n\r\n            try {\r\n                // failed to replace, let's wait on the previous task\r\n                await this._nextRangeTask.getValue();\r\n            } catch {\r\n                // previous task was faulted, we will try again\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async _getNextRange(): Promise<void> {\r\n        const hiloCmd = new NextHiloCommand(\r\n            this._tag,\r\n            this._lastBatchSize,\r\n            this._lastRangeAt,\r\n            this._identityPartsSeparator,\r\n            this._range.maxId,\r\n            this._store.conventions);\r\n\r\n        await this._store.getRequestExecutor(this._dbName).execute(hiloCmd);\r\n\r\n        const result: HiLoResult = hiloCmd.result;\r\n        this._prefix = result.prefix;\r\n        this._lastBatchSize = result.lastSize;\r\n        this._lastRangeAt = result.lastRangeAt;\r\n\r\n        this._range = new HiloRangeValue(result.low, result.high, result.serverTag);\r\n    }\r\n\r\n    public returnUnusedRange(): Promise<void> {\r\n        const range = this._range;\r\n        const executor = this._store.getRequestExecutor(this._dbName);\r\n\r\n        return executor.execute(new HiloReturnCommand(this._tag, range.current, range.maxId));\r\n    }\r\n\r\n    public get range(): HiloRangeValue {\r\n        return this._range;\r\n    }\r\n\r\n    public set range(value: HiloRangeValue) {\r\n        this._range = value;\r\n    }\r\n\r\n}\r\n"]}