{"version":3,"file":"GenerateEntityIdOnTheClient.js","sourceRoot":"","sources":["../../../../src/Documents/Identity/GenerateEntityIdOnTheClient.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AAErD,MAAM,OAAO,2BAA2B;IAE5B,YAAY,CAAsB;IAClC,WAAW,CAAmC;IAEtD,YAAmB,WAAgC,EAAE,UAA4C;QAC7F,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAEO,oBAAoB,CAAC,UAAwB;QACjD,OAAO,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;IAC7D,CAAC;IAED;;OAEG;IACI,oBAAoB,CAAC,MAAc,EAAE,UAAiC;QACzE,IAAI,CAAC,MAAM,EAAE,CAAC;YACV,UAAU,CAAC,0BAA0B,EAAE,qCAAqC,CAAC,CAAC;QAClF,CAAC;QAED,MAAM,cAAc,GAAG,CAAC,MAAc,EAAE,EAAE;YACtC,IAAI,UAAU,EAAE,CAAC;gBACb,UAAU,CAAC,MAAM,CAAC,CAAC;YACvB,CAAC;QACL,CAAC,CAAC;QAEF,IAAI,CAAC;YACD,MAAM,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;YAC9E,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;YAC5D,IAAI,gBAAgB,EAAE,CAAC;gBACnB,MAAM,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;gBACvC,IAAI,OAAM,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE,CAAC;oBAC7B,cAAc,CAAC,KAAK,CAAC,CAAC;oBACtB,OAAO,IAAI,CAAC;gBAChB,CAAC;YACL,CAAC;YACD,cAAc,CAAC,IAAI,CAAC,CAAC;YACrB,OAAO,KAAK,CAAC;QACjB,CAAC;QAAC,MAAM,CAAC;YACL,UAAU,CAAC,2BAA2B,EAAE,uCAAuC,CAAC,CAAC;QACrF,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,uBAAuB,CAAC,MAAc;QAC/C,IAAI,EAAE,CAAC;QACP,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;QAEzD,4BAA4B;QAC5B,IAAI,CAAC,EAAE,EAAE,CAAC;YACN,EAAE,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC;QAED,IAAI,EAAE,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;YAC3B,UAAU,CACN,2BAA2B,EAC3B,oBAAoB,GAAG,EAAE,GAAG,iDAAiD,CAAC,CAAC;QACvF,CAAC;QAED,OAAO,EAAE,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,6BAA6B,CAAC,MAAc;QACrD,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;QACtD,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAChC,OAAO,EAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACI,cAAc,CAAC,MAAc,EAAE,EAAU,EAAE,eAAwB,KAAK;QAC3E,MAAM,OAAO,GAAiB,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAC5F,MAAM,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAExE,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACpB,OAAO;QACX,CAAC;QAED,IAAI,YAAY,IAAI,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC3C,oCAAoC;YACpC,OAAO;QACX,CAAC;QAED,MAAM,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC;IAClC,CAAC;CACJ","sourcesContent":["import { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { DocumentType } from \"../DocumentAbstractions.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\n\r\nexport class GenerateEntityIdOnTheClient {\r\n\r\n    private _conventions: DocumentConventions;\r\n    private _generateId: (obj: object) => Promise<string>;\r\n\r\n    public constructor(conventions: DocumentConventions, generateId: (obj: object) => Promise<string>) {\r\n        this._conventions = conventions;\r\n        this._generateId = generateId;\r\n    }\r\n\r\n    private _getIdentityProperty(entityType: DocumentType): string {\r\n        return this._conventions.getIdentityProperty(entityType);\r\n    }\r\n\r\n    /**\r\n     * Attempts to get the document key from an instance\r\n     */\r\n    public tryGetIdFromInstance(entity: object, idCallback?: (id: string) => void): boolean {\r\n        if (!entity) {\r\n            throwError(\"InvalidArgumentException\", \"Entity cannot be null or undefined.\");\r\n        }\r\n\r\n        const resultCallback = (result: string) => {\r\n            if (idCallback) {\r\n                idCallback(result);\r\n            }\r\n        };\r\n\r\n        try {\r\n            const docType = TypeUtil.findType(entity, this._conventions.knownEntityTypes);\r\n            const identityProperty = this._getIdentityProperty(docType);\r\n            if (identityProperty) {\r\n                const value = entity[identityProperty];\r\n                if (typeof(value) === \"string\") {\r\n                    resultCallback(value);\r\n                    return true;\r\n                }\r\n            }\r\n            resultCallback(null);\r\n            return false;\r\n        } catch {\r\n            throwError(\"InvalidOperationException\", \"Error trying to get ID from instance.\");\r\n        }\r\n    }\r\n\r\n    public async getOrGenerateDocumentId(entity: object): Promise<string> {\r\n        let id;\r\n        this.tryGetIdFromInstance(entity, (idVal) => id = idVal);\r\n\r\n        // Generate the key up front\r\n        if (!id) {\r\n            id = await this._generateId(entity);\r\n        }\r\n\r\n        if (id && id.startsWith(\"/\")) {\r\n            throwError(\r\n                \"InvalidOperationException\",\r\n                \"Cannot use value '\" + id + \"' as a document id because it begins with a '/'\");\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    public async generateDocumentKeyForStorage(entity: object): Promise<string> {\r\n        const id = await this.getOrGenerateDocumentId(entity);\r\n        this.trySetIdentity(entity, id);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Tries to set the identity property\r\n     */\r\n    public trySetIdentity(entity: object, id: string, isProjection: boolean = false): void {\r\n        const docType: DocumentType = TypeUtil.findType(entity, this._conventions.knownEntityTypes);\r\n        const identityProperty = this._conventions.getIdentityProperty(docType);\r\n\r\n        if (!identityProperty) {\r\n            return;\r\n        }\r\n\r\n        if (isProjection && entity[identityProperty]) {\r\n            // identity property was already set\r\n            return;\r\n        }\r\n\r\n        entity[identityProperty] = id;\r\n    }\r\n}\r\n"]}