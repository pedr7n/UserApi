{"version":3,"file":"NextHiloCommand.js","sourceRoot":"","sources":["../../../../../src/Documents/Identity/Commands/NextHiloCommand.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAC7D,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAc1D,MAAM,OAAO,eAAgB,SAAQ,YAAwB;IAExC,IAAI,CAAS;IACb,cAAc,CAAS;IACvB,YAAY,CAAO;IACnB,uBAAuB,CAAS;IAChC,aAAa,CAAS;IACtB,YAAY,CAAsB;IAEnD,YACI,GAAW,EACX,aAAqB,EACrB,WAAiB,EACjB,sBAA8B,EAC9B,YAAoB,EACpB,WAAgC;QAChC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,GAAG,EAAE,CAAC;YACP,UAAU,CAAC,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC1B,UAAU,CAAC,0BAA0B,EAAE,wCAAwC,CAAC,CAAC;QACrF,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,uBAAuB,GAAG,sBAAsB,CAAC;QACtD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IACpC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,WAAW,GAAW,IAAI,CAAC,YAAY;YACzC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC;YAC3C,CAAC,CAAC,EAAE,CAAC;QAET,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,cAAc,IAAI,CAAC,QAAQ,aAAa,CAAC;QAC9D,GAAG,IAAI,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC;QAC9C,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,GAAG,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChD,CAAC;QAED,GAAG,IAAI,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QACtD,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC/B,GAAG,IAAI,0BAA0B,GAAG,IAAI,CAAC,uBAAuB,CAAC;QACrE,CAAC;QACD,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,GAAG,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC;QAC5C,CAAC;QACD,OAAO,EAAE,GAAG,EAAE,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/E,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CACjC,OAAO,EACP,IAAI,CAAC,YAAY,EACjB;YACI,WAAW,EAAE;gBACT,WAAW,EAAE,MAAM;aACtB;SACJ,CAAC,CAAC;QACP,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { ServerNode } from \"../../../Http/ServerNode.js\";\r\nimport { DateUtil } from \"../../../Utility/DateUtil.js\";\r\nimport { RavenCommand } from \"../../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\n\r\nexport interface HiLoResult {\r\n    prefix: string;\r\n    low: number;\r\n    high: number;\r\n    lastSize: number;\r\n    serverTag: string;\r\n    lastRangeAt: Date;\r\n}\r\n\r\nexport class NextHiloCommand extends RavenCommand<HiLoResult> {\r\n\r\n    private readonly _tag: string;\r\n    private readonly _lastBatchSize: number;\r\n    private readonly _lastRangeAt: Date;\r\n    private readonly _identityPartsSeparator: string;\r\n    private readonly _lastRangeMax: number;\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(\r\n        tag: string,\r\n        lastBatchSize: number,\r\n        lastRangeAt: Date,\r\n        identityPartsSeparator: string,\r\n        lastRangeMax: number,\r\n        conventions: DocumentConventions) {\r\n        super();\r\n\r\n        if (!tag) {\r\n            throwError(\"InvalidArgumentException\", \"tag cannot be null.\");\r\n        }\r\n\r\n        if (!identityPartsSeparator) {\r\n            throwError(\"InvalidArgumentException\", \"identityPartsSeparator cannot be null.\");\r\n        }\r\n\r\n        this._tag = tag;\r\n        this._lastBatchSize = lastBatchSize;\r\n        this._lastRangeAt = lastRangeAt;\r\n        this._identityPartsSeparator = identityPartsSeparator;\r\n        this._lastRangeMax = lastRangeMax;\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const lastRangeAt: string = this._lastRangeAt\r\n            ? DateUtil.utc.stringify(this._lastRangeAt)\r\n            : \"\";\r\n\r\n        let uri = `${node.url}/databases/${node.database}/hilo/next?`;\r\n        uri += \"lastBatchSize=\" + this._lastBatchSize;\r\n        if (this._tag) {\r\n            uri += \"&tag=\" + this._urlEncode(this._tag);\r\n        }\r\n\r\n        uri += \"&lastRangeAt=\" + this._urlEncode(lastRangeAt);\r\n        if (this._identityPartsSeparator) {\r\n            uri += \"&identityPartsSeparator=\" + this._identityPartsSeparator;\r\n        }\r\n        if (this._lastRangeMax) {\r\n            uri += \"&lastMax=\" + this._lastRangeMax;\r\n        }\r\n        return { uri };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n        this.result = this._reviveResultTypes(\r\n            results,\r\n            this._conventions,\r\n            {\r\n                nestedTypes: {\r\n                    lastRangeAt: \"date\"\r\n                }\r\n            });\r\n        return body;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}