{"version":3,"file":"SeedIdentityForCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/SeedIdentityForCommand.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAIvD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AAErD,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAEnE,MAAM,OAAO,sBAAuB,SAAQ,YAAoB;IAE3C,GAAG,CAAS;IACZ,MAAM,CAAS;IACf,OAAO,CAAU;IAElC,YAAmB,EAAU,EAAE,KAAa,EAAE,MAAgB;QAC1D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,EAAE,EAAE,CAAC;YACN,UAAU,CAAC,0BAA0B,EAAE,mBAAmB,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,YAAY,CAAC,sBAAsB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAEpD,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC5C,sBAAsB,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;QAEtF,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,GAAG,IAAI,aAAa,CAAC;QACzB,CAAC;QAED,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG;SACN,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAE9E,MAAM,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;QAC5C,IAAI,QAAQ,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAAE,CAAC;YAC3C,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;QAC3B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,sBAAsB;QACzB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\n\r\nexport class SeedIdentityForCommand extends RavenCommand<number> implements IRaftCommand {\r\n\r\n    private readonly _id: string;\r\n    private readonly _value: number;\r\n    private readonly _forced: boolean;\r\n\r\n    public constructor(id: string, value: number, forced?: boolean) {\r\n        super();\r\n        if (!id) {\r\n            throwError(\"InvalidArgumentException\", \"Id cannot be null\");\r\n        }\r\n\r\n        this._id = id;\r\n        this._value = value;\r\n        this._forced = forced;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        RavenCommand.ensureIsNotNullOrEmpty(this._id, \"id\");\r\n\r\n        let uri = node.url + \"/databases/\" + node.database\r\n            + \"/identity/seed?name=\" + encodeURIComponent(this._id) + \"&value=\" + this._value;\r\n\r\n        if (this._forced) {\r\n            uri += \"&force=true\";\r\n        }\r\n\r\n        return {\r\n            method: \"POST\",\r\n            uri\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const result = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n\r\n        const newSeedValue = result[\"newSeedValue\"];\r\n        if (TypeUtil.isNullOrUndefined(newSeedValue)) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        this.result = newSeedValue;\r\n        return body;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}