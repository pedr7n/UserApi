{"version":3,"file":"AbstractQueryCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/AbstractQueryCommand.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAI1D,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAC;AAG/D,MAAM,OAAgB,oBAA2C,SAAQ,YAAqB;IACzE,aAAa,CAAU;IACvB,iBAAiB,CAAU;IAC3B,YAAY,CAAU;IAEvC,YAAsB,UAAsB,EAAE,QAAiB,EAAE,YAAqB,EAAE,gBAAyB,EAAE,WAAoB;QACnI,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC1C,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAEhC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,2EAA2E;QAC3E,IAAI,CAAC,qBAAqB,GAAG,QAAQ,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC;IAEhF,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;IAIM,aAAa,CAAC,IAAgB;QACjC,MAAM,IAAI,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC;aACnC,MAAM,CAAC,aAAa,CAAC;aACrB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;aACrB,MAAM,CAAC,qBAAqB,CAAC;YAC9B,gEAAgE;YAChE,mEAAmE;YACnE,gBAAgB;aACf,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAEjC,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QACtC,CAAC;QAED,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAClC,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACrC,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;QAExC,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;QACtD,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG;YACH,OAAO;YACP,IAAI;SACP,CAAC;IACN,CAAC;CAGJ","sourcesContent":["import { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { IndexQuery } from \"../Queries/IndexQuery.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { StringBuilder } from \"../../Utility/StringBuilder.js\";\r\n\r\n\r\nexport abstract class AbstractQueryCommand<TResult, TParameters> extends RavenCommand<TResult>{\r\n    private readonly _metadataOnly: boolean;\r\n    private readonly _indexEntriesOnly: boolean;\r\n    private readonly _ignoreLimit: boolean;\r\n\r\n    protected constructor(indexQuery: IndexQuery, canCache: boolean, metadataOnly: boolean, indexEntriesOnly: boolean, ignoreLimit: boolean) {\r\n        super();\r\n\r\n        this._metadataOnly = metadataOnly;\r\n        this._indexEntriesOnly = indexEntriesOnly;\r\n        this._ignoreLimit = ignoreLimit;\r\n\r\n        this._canCache = canCache;\r\n\r\n        // we won't allow aggressive caching of queries with WaitForNonStaleResults\r\n        this._canCacheAggressively = canCache && !indexQuery.waitForNonStaleResults;\r\n\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected abstract getQueryHash(): string;\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const path = new StringBuilder(node.url)\r\n            .append(\"/databases/\")\r\n            .append(node.database)\r\n            .append(\"/queries?queryHash=\")\r\n            // we need to add a query hash because we are using POST queries\r\n            // so we need to unique parameter per query so the query cache will\r\n            // work properly\r\n            .append(this.getQueryHash());\r\n\r\n        if (this._metadataOnly) {\r\n            path.append(\"&metadataOnly=true\");\r\n        }\r\n\r\n        if (this._indexEntriesOnly) {\r\n            path.append(\"&debug=entries\");\r\n        }\r\n\r\n        if (this._ignoreLimit) {\r\n            path.append(\"&ignoreLimit=true\");\r\n        }\r\n\r\n        path.append(\"&addTimeSeriesNames=true\");\r\n\r\n        const uri = path.toString();\r\n        const body = this._getContent();\r\n        const headers = this._headers().typeAppJson().build();\r\n        return {\r\n            method: \"POST\",\r\n            uri,\r\n            headers,\r\n            body\r\n        };\r\n    }\r\n\r\n    protected abstract _getContent(): string;\r\n}\r\n"]}