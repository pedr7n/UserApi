{"version":3,"file":"GetRevisionsCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/GetRevisionsCommand.ts"],"names":[],"mappings":"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","sourcesContent":["import { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { DateUtil } from \"../../Utility/DateUtil.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { GetDocumentsCommand } from \"./GetDocumentsCommand.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { IRavenArrayResult } from \"../../Types/index.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\n\r\nexport class GetRevisionsCommand extends RavenCommand<IRavenArrayResult> {\r\n\r\n    private readonly _id: string;\r\n    private readonly _start: number;\r\n    private readonly _pageSize: number;\r\n    private readonly _metadataOnly: boolean;\r\n    private readonly _before: Date;\r\n    private readonly _changeVector: string;\r\n    private readonly _changeVectors: string[];\r\n    private readonly _conventions: DocumentConventions;\r\n\r\n    public constructor(conventions: DocumentConventions, changeVector: string);\r\n    public constructor(conventions: DocumentConventions, changeVector: string, metadataOnly: boolean);\r\n    public constructor(conventions: DocumentConventions, changeVectors: string[]);\r\n    public constructor(conventions: DocumentConventions, changeVectors: string[], metadataOnly: boolean);\r\n    public constructor(conventions: DocumentConventions, id: string, before: Date);\r\n    public constructor(conventions: DocumentConventions, id: string, start: number,\r\n                       pageSize: number);\r\n    public constructor(conventions: DocumentConventions, id: string, start: number, pageSize: number,\r\n                       metadataOnly: boolean);\r\n    public constructor(conventions: DocumentConventions, changeVectorOrVectorsOrId: string | string[],\r\n                       beforeOrMetadataOrStart?: boolean | Date | number,\r\n                       pageSize?: number, metadataOnly?: boolean) {\r\n        super();\r\n\r\n        if (beforeOrMetadataOrStart instanceof Date) {\r\n            if (!changeVectorOrVectorsOrId) {\r\n                throwError(\"InvalidArgumentException\", \"Id cannot be null.\");\r\n            }\r\n            this._id = changeVectorOrVectorsOrId as string;\r\n            this._before = beforeOrMetadataOrStart;\r\n        } else if (TypeUtil.isArray(changeVectorOrVectorsOrId)) {\r\n            this._changeVectors = changeVectorOrVectorsOrId;\r\n            this._metadataOnly = metadataOnly || false;\r\n        } else if (TypeUtil.isNumber(beforeOrMetadataOrStart)) {\r\n            if (!changeVectorOrVectorsOrId) {\r\n                throwError(\"InvalidArgumentException\", \"Id cannot be null.\");\r\n            }\r\n            this._id = changeVectorOrVectorsOrId;\r\n            this._start = beforeOrMetadataOrStart;\r\n            this._pageSize = pageSize;\r\n            this._metadataOnly = metadataOnly || false;\r\n        } else {\r\n            this._changeVector = changeVectorOrVectorsOrId;\r\n            this._metadataOnly = beforeOrMetadataOrStart || false;\r\n        }\r\n\r\n        this._conventions = conventions;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n    public get before(): Date {\r\n        return this._before;\r\n    }\r\n\r\n    public get changeVector(): string {\r\n        return this._changeVector;\r\n    }\r\n\r\n    public get changeVectors() {\r\n        return this._changeVectors;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/databases/\" + node.database + \"/revisions?\";\r\n\r\n        uri += this.getRequestQueryString();\r\n\r\n        return {\r\n            uri,\r\n            method: \"GET\"\r\n        };\r\n    }\r\n\r\n    public getRequestQueryString(): string {\r\n        let uri = \"\";\r\n        if (this._id) {\r\n            uri += \"&id=\" + encodeURIComponent(this._id);\r\n        } else if (this._changeVector) {\r\n            uri += \"&changeVector=\" + encodeURIComponent(this._changeVector);\r\n        } else if (this._changeVectors) {\r\n            for (const changeVector of this._changeVectors) {\r\n                uri += \"&changeVector=\" + encodeURIComponent(changeVector);\r\n            }\r\n        }\r\n\r\n        if (this._before) {\r\n            uri += \"&before=\" + DateUtil.utc.stringify(this._before);\r\n        }\r\n\r\n        if (!TypeUtil.isNullOrUndefined(this._start)) {\r\n            uri += \"&start=\" + this._start;\r\n        }\r\n\r\n        if (!TypeUtil.isNullOrUndefined(this._pageSize)) {\r\n            uri += \"&pageSize=\" + this._pageSize;\r\n        }\r\n\r\n        if (this._metadataOnly) {\r\n            uri += \"&metadataOnly=true\";\r\n        }\r\n\r\n        return uri;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this.result = null;\r\n            return;\r\n        }\r\n\r\n        let body: string = null;\r\n        this.result =\r\n            await GetDocumentsCommand.parseDocumentsResultResponseAsync(\r\n                bodyStream, this._conventions, b => body = b);\r\n\r\n        return body as string;\r\n    }\r\n}\r\n"]}