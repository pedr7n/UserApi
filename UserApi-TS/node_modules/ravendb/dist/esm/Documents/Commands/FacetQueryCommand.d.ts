import { QueryResult } from "../Queries/QueryResult.js";
import { DocumentConventions } from "../Conventions/DocumentConventions.js";
import { Stream } from "node:stream";
import { QueryCommand } from "./QueryCommand.js";
import { ServerCasing, ServerResponse } from "../../Types/index.js";
export declare class FacetQueryCommand extends QueryCommand {
    setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string>;
    static parseQueryResultResponseAsync(bodyStream: Stream, conventions: DocumentConventions, fromCache: boolean, bodyCallback?: (body: string) => void): Promise<QueryResult>;
    static mapToLocalObject(json: ServerCasing<ServerResponse<QueryResult>>, conventions: DocumentConventions): QueryResult;
}
//# sourceMappingURL=FacetQueryCommand.d.ts.map