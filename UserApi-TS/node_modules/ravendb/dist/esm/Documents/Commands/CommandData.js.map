{"version":3,"file":"CommandData.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/CommandData.ts"],"names":[],"mappings":"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","sourcesContent":["import { throwError } from \"../../Exceptions/index.js\";\r\nimport { BatchOptions } from \"./Batches/BatchOptions.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"../Session/InMemoryDocumentSessionOperations.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\nimport { DocumentInfo } from \"../Session/DocumentInfo.js\";\r\nimport { ForceRevisionStrategy } from \"../Session/ForceRevisionStrategy.js\";\r\nimport { SessionBeforeDeleteEventArgs } from \"../Session/SessionEvents.js\";\r\n\r\nexport type CommandType =\r\n    \"None\"\r\n    | \"PUT\"\r\n    | \"PATCH\"\r\n    | \"DELETE\"\r\n    | \"AttachmentPUT\"\r\n    | \"AttachmentDELETE\"\r\n    | \"AttachmentMOVE\"\r\n    | \"AttachmentCOPY\"\r\n    | \"CompareExchangePUT\"\r\n    | \"CompareExchangeDELETE\"\r\n    | \"Counters\"\r\n    | \"ClientAnyCommand\"\r\n    | \"ClientModifyDocumentCommand\"\r\n    | \"BatchPATCH\"\r\n    | \"ForceRevisionCreation\"\r\n    | \"TimeSeries\"\r\n    | \"TimeSeriesWithIncrements\"\r\n    | \"TimeSeriesBulkInsert\"\r\n    | \"TimeSeriesCopy\"\r\n    | \"JsonPatch\"\r\n    | \"HeartBeat\"\r\n    ;\r\n\r\nexport interface ICommandData {\r\n    id: string;\r\n    name: string;\r\n    changeVector: string;\r\n    type: CommandType;\r\n\r\n    serialize(conventions: DocumentConventions): object;\r\n\r\n    onBeforeSaveChanges?: (session: InMemoryDocumentSessionOperations) => void;\r\n}\r\n\r\nexport class DeleteCommandData implements ICommandData {\r\n\r\n    public readonly id: string;\r\n    public name: string;\r\n    public readonly changeVector: string;\r\n    public readonly originalChangeVector: string;\r\n    public document: any;\r\n\r\n    public get type(): CommandType {\r\n        return \"DELETE\";\r\n    }\r\n\r\n    constructor(id: string, changeVector?: string, originalChangeVector?: string) {\r\n        this.id = id;\r\n        if (!id) {\r\n            throwError(\"InvalidArgumentException\", \"Id cannot be null or undefined.\");\r\n        }\r\n\r\n        this.changeVector = changeVector;\r\n        this.originalChangeVector = originalChangeVector;\r\n    }\r\n\r\n    public serialize(conventions: DocumentConventions): object {\r\n        const result: any = {\r\n            Id: this.id,\r\n            ChangeVector: this.changeVector,\r\n            Type: \"DELETE\",\r\n            Document: this.document\r\n        };\r\n\r\n        if (this.originalChangeVector) {\r\n            result.OriginalChangeVector = this.originalChangeVector;\r\n        }\r\n\r\n        this._serializeExtraFields(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    onBeforeSaveChanges(session: InMemoryDocumentSessionOperations): void {\r\n        session.emit(\"beforeDelete\", new SessionBeforeDeleteEventArgs(session, this.id, null));\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    protected _serializeExtraFields(resultingObject: object) {}\r\n}\r\n\r\nexport class PutCommandDataBase<T extends object> implements ICommandData {\r\n\r\n    public get type(): CommandType {\r\n        return \"PUT\";\r\n    }\r\n\r\n    public id: string;\r\n    public name: string = null;\r\n    public changeVector: string;\r\n    public readonly originalChangeVector: string;\r\n    public forceRevisionCreationStrategy: ForceRevisionStrategy;\r\n\r\n    private readonly _document: T;\r\n\r\n    constructor(id: string, changeVector: string, originalChangeVector: string, document: T, strategy: ForceRevisionStrategy = \"None\") {\r\n\r\n        if (!document) {\r\n            throwError(\"InvalidArgumentException\", \"Document cannot be null or undefined.\");\r\n        }\r\n\r\n        this.id = id;\r\n        this.changeVector = changeVector;\r\n        this.originalChangeVector = originalChangeVector;\r\n        this._document = document;\r\n        this.forceRevisionCreationStrategy = strategy;\r\n    }\r\n\r\n    public serialize(conventions: DocumentConventions): object {\r\n        const result = {\r\n            Id: this.id,\r\n            ChangeVector: this.changeVector,\r\n            OriginalChangeVector: this.originalChangeVector,\r\n            Document: this._document,\r\n            Type: \"PUT\"\r\n        };\r\n\r\n        if (this.forceRevisionCreationStrategy !== \"None\") {\r\n            result[\"ForceRevisionCreationStrategy\"] = this.forceRevisionCreationStrategy;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class PutCommandDataWithJson extends PutCommandDataBase<object> {\r\n\r\n    public constructor(id: string, changeVector: string, originalChangeVector: string, document: object, strategy: ForceRevisionStrategy) {\r\n        super(id, changeVector, originalChangeVector, document, strategy);\r\n    }\r\n}\r\n\r\nexport class SaveChangesData {\r\n    public deferredCommands: ICommandData[];\r\n    public deferredCommandsMap: Map<string, ICommandData>;\r\n    public sessionCommands: ICommandData[] = [];\r\n    public entities: object[] = [];\r\n    public options: BatchOptions;\r\n    public onSuccess: ActionsToRunOnSuccess;\r\n\r\n    public constructor(args: {\r\n        deferredCommands: ICommandData[],\r\n        deferredCommandsMap: Map<string, ICommandData>,\r\n        options: BatchOptions,\r\n        session: InMemoryDocumentSessionOperations\r\n    }) {\r\n        this.deferredCommands = args.deferredCommands;\r\n        this.deferredCommandsMap = args.deferredCommandsMap;\r\n        this.options = args.options;\r\n        this.onSuccess = new ActionsToRunOnSuccess(args.session);\r\n    }\r\n}\r\n\r\nexport class ActionsToRunOnSuccess {\r\n\r\n    private readonly _session: InMemoryDocumentSessionOperations;\r\n    private readonly _documentsByIdToRemove: string[] = [];\r\n    private readonly _documentsByEntityToRemove: object[] = [];\r\n    private readonly _documentInfosToUpdate: [DocumentInfo, object][] = [];\r\n\r\n    private _clearDeletedEntities: boolean;\r\n\r\n    public constructor(session: InMemoryDocumentSessionOperations) {\r\n        this._session = session;\r\n    }\r\n\r\n    public removeDocumentById(id: string) {\r\n        this._documentsByIdToRemove.push(id);\r\n    }\r\n\r\n    public removeDocumentByEntity(entity: object) {\r\n        this._documentsByEntityToRemove.push(entity);\r\n    }\r\n\r\n    public updateEntityDocumentInfo(documentInfo: DocumentInfo, document: object) {\r\n        this._documentInfosToUpdate.push([documentInfo, document]);\r\n    }\r\n\r\n    public clearSessionStateAfterSuccessfulSaveChanges() {\r\n        for (const id of this._documentsByIdToRemove) {\r\n            this._session.documentsById.remove(id);\r\n        }\r\n\r\n        for (const entity of this._documentsByEntityToRemove) {\r\n            this._session.documentsByEntity.remove(entity);\r\n        }\r\n\r\n        for (const [info, document] of this._documentInfosToUpdate) {\r\n            info.newDocument = false;\r\n            info.document = document;\r\n        }\r\n\r\n        if (this._clearDeletedEntities) {\r\n            this._session.deletedEntities.clear();\r\n        }\r\n\r\n        this._session.deferredCommands.length = 0;\r\n        this._session.deferredCommandsMap.clear();\r\n    }\r\n\r\n    public clearDeletedEntities() {\r\n        this._clearDeletedEntities = true;\r\n    }\r\n}\r\n"]}