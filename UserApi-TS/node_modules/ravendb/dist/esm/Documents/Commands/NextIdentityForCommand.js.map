{"version":3,"file":"NextIdentityForCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/NextIdentityForCommand.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAMvD,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAGnE,MAAM,OAAO,sBAAuB,SAAQ,YAAoB;IAE3C,GAAG,CAAS;IACrB,oBAAoB,GAAW,eAAe,CAAC,KAAK,EAAE,CAAC;IAE/D,YAAmB,EAAU;QACzB,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,EAAE,EAAE,CAAC;YACN,UAAU,CAAC,0BAA0B,EAAE,mBAAmB,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAClB,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,YAAY,CAAC,sBAAsB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAEpD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,sBAAsB,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7G,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG;SACN,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,GAAW,IAAI,CAAC;QACxB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/E,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE,CAAC;YAC/B,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,sBAAsB;QAClB,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAED,kBAAkB,CAAC,WAAgC;QAC/C,MAAM,IAAI,GAAG,IAAI,sBAAsB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC;QAEtD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { IBroadcast } from \"../../Http/IBroadcast.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\nimport { DocumentConventions } from \"../Conventions/DocumentConventions.js\";\r\n\r\nexport class NextIdentityForCommand extends RavenCommand<number> implements IRaftCommand, IBroadcast {\r\n\r\n    private readonly _id: string;\r\n    private _raftUniqueRequestId: string = RaftIdGenerator.newId();\r\n\r\n    public constructor(id: string) {\r\n        super();\r\n\r\n        if (!id) {\r\n            throwError(\"InvalidArgumentException\", \"Id cannot be null\");\r\n        }\r\n\r\n        this._id = id;\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        RavenCommand.ensureIsNotNullOrEmpty(this._id, \"id\");\r\n\r\n        const uri = node.url + \"/databases/\" + node.database + \"/identity/next?name=\" + encodeURIComponent(this._id);\r\n        return {\r\n            method: \"POST\",\r\n            uri\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        let body: string = null;\r\n        const results = await this._defaultPipeline(_ => body = _).process(bodyStream);\r\n        if (!results[\"newIdentityValue\"]) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        this.result = results[\"newIdentityValue\"];\r\n        return body;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return this._raftUniqueRequestId;\r\n    }\r\n\r\n    prepareToBroadcast(conventions: DocumentConventions): IBroadcast {\r\n        const copy = new NextIdentityForCommand(this._id);\r\n        copy._raftUniqueRequestId = this._raftUniqueRequestId;\r\n\r\n        return copy;\r\n    }\r\n}\r\n"]}