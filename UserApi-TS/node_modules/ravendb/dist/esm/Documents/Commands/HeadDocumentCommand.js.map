{"version":3,"file":"HeadDocumentCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/HeadDocumentCommand.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAC;AAEvD,OAAO,EAA2B,YAAY,EAAE,MAAM,4BAA4B,CAAC;AACnF,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAEvD,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAC;AAGlE,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAE7C,MAAM,OAAO,mBAAoB,SAAQ,YAAoB;IAExC,GAAG,CAAS;IACZ,aAAa,CAAS;IAEvC,YAAmB,EAAU,EAAE,YAAoB;QAC/C,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,EAAE,EAAE,CAAC;YACN,UAAU,CAAC,0BAA0B,EAAE,oBAAoB,CAAC,CAAC;QACjE,CAAC;QAED,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IACjC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,WAAW,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAElG,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE;aAC1B,WAAW,EAAE,CAAC;QACnB,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5D,CAAC;QAED,OAAO;YACH,MAAM,EAAE,MAAM;YACd,GAAG;YACH,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE;SAC3B,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,eAAe,CACxB,KAAgB,EAChB,QAAsB,EACtB,UAAoB,EACpB,GAAW;QACX,IAAI,QAAQ,CAAC,MAAM,KAAK,WAAW,CAAC,WAAW,EAAE,CAAC;YAC9C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;YACjC,OAAO,WAAW,CAAC;QACvB,CAAC;QAED,IAAI,QAAQ,CAAC,MAAM,KAAK,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,OAAO,WAAW,CAAC;QACvB,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAC9C,OAAO,WAAW,CAAC;IACvB,CAAC;CACJ","sourcesContent":["import { StatusCodes } from \"../../Http/StatusCode.js\";\r\nimport { HttpRequestParameters, HttpResponse } from \"../../Primitives/Http.js\";\r\nimport { ResponseDisposeHandling, RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { HttpCache } from \"../../Http/HttpCache.js\";\r\nimport { getRequiredEtagHeader } from \"../../Utility/HttpUtil.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { Readable } from \"node:stream\";\r\nimport { HEADERS } from \"../../Constants.js\";\r\n\r\nexport class HeadDocumentCommand extends RavenCommand<string> {\r\n\r\n    private readonly _id: string;\r\n    private readonly _changeVector: string;\r\n\r\n    public constructor(id: string, changeVector: string) {\r\n        super();\r\n\r\n        if (!id) {\r\n            throwError(\"InvalidArgumentException\", \"Id cannot be null.\");\r\n        }\r\n\r\n        this._id = id;\r\n        this._changeVector = changeVector;\r\n        this._responseType = \"Empty\";\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/docs?id=\" + encodeURIComponent(this._id);\r\n\r\n        const headers = this._headers()\r\n            .typeAppJson();\r\n        if (this._changeVector) {\r\n            headers.with(HEADERS.IF_NONE_MATCH, this._changeVector);\r\n        }\r\n\r\n        return {\r\n            method: \"HEAD\",\r\n            uri,\r\n            headers: headers.build()\r\n        };\r\n    }\r\n\r\n    public async processResponse(\r\n        cache: HttpCache,\r\n        response: HttpResponse,\r\n        bodyStream: Readable,\r\n        url: string): Promise<ResponseDisposeHandling> {\r\n        if (response.status === StatusCodes.NotModified) {\r\n            this.result = this._changeVector;\r\n            return \"Automatic\";\r\n        }\r\n\r\n        if (response.status === StatusCodes.NotFound) {\r\n            this.result = null;\r\n            return \"Automatic\";\r\n        }\r\n\r\n        this.result = getRequiredEtagHeader(response);\r\n        return \"Automatic\";\r\n    }\r\n}\r\n"]}