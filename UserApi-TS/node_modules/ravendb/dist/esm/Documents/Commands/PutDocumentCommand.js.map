{"version":3,"file":"PutDocumentCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/PutDocumentCommand.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAGvD,OAAO,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAQ3D,MAAM,OAAO,kBAAmB,SAAQ,YAAuB;IAE1C,GAAG,CAAS;IACZ,aAAa,CAAS;IACtB,SAAS,CAAS;IAEnC,YAAmB,EAAU,EAAE,YAAoB,EAAE,QAAgB;QACjE,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,EAAE,EAAE,CAAC;YACN,UAAU,CAAC,0BAA0B,EAAE,iCAAiC,CAAC,CAAC;QAC9E,CAAC;QAED,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,UAAU,CAAC,0BAA0B,EAAE,uCAAuC,CAAC,CAAC;QACpF,CAAC;QAED,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,cAAc,IAAI,CAAC,QAAQ,YAAY,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QAE7F,2CAA2C;QAC3C,wDAAwD;QACxD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,GAAG,GAAG;YACR,GAAG;YACH,MAAM,EAAE,KAAK;YACb,IAAI;YACJ,OAAO,EAAE,cAAc,CAAC,MAAM,EAAE;iBAC3B,WAAW,EAAE;iBACb,KAAK,EAAE;SACf,CAAC;QAEF,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;QAExD,OAAO,GAAG,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ","sourcesContent":["import { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { HeadersBuilder } from \"../../Utility/HttpUtil.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport interface PutResult {\r\n    id: string;\r\n    changeVector: string;\r\n}\r\n\r\nexport class PutDocumentCommand extends RavenCommand<PutResult> {\r\n\r\n    private readonly _id: string;\r\n    private readonly _changeVector: string;\r\n    private readonly _document: object;\r\n\r\n    public constructor(id: string, changeVector: string, document: object) {\r\n        super();\r\n\r\n        if (!id) {\r\n            throwError(\"InvalidArgumentException\", \"Id cannot be null or undefined.\");\r\n        }\r\n\r\n        if (!document) {\r\n            throwError(\"InvalidArgumentException\", \"Document cannot be null or undefined.\");\r\n        }\r\n\r\n        this._id = id;\r\n        this._changeVector = changeVector;\r\n        this._document = document;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = `${node.url}/databases/${node.database}/docs?id=${encodeURIComponent(this._id)}`;\r\n\r\n        // we don't use conventions here on purpose\r\n        // doc that's got here should already have proper casing\r\n        const body = JSON.stringify(this._document);\r\n        const req = {\r\n            uri,\r\n            method: \"PUT\",\r\n            body,\r\n            headers: HeadersBuilder.create()\r\n                .typeAppJson()\r\n                .build()\r\n        };\r\n\r\n        this._addChangeVectorIfNotNull(this._changeVector, req);\r\n\r\n        return req;\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n}\r\n"]}