{"version":3,"file":"ClusterWideBatchCommand.js","sourceRoot":"","sources":["../../../../../src/Documents/Commands/Batches/ClusterWideBatchCommand.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AAItE,OAAO,EAAE,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAExD,MAAM,OAAO,uBAAwB,SAAQ,sBAAsB;IAE9C,4BAA4B,CAAU;IAEvD,IAAI,2BAA2B;QAC3B,OAAO,IAAI,CAAC,4BAA4B,CAAC;IAC7C,CAAC;IAEM,sBAAsB;QACzB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;IAED,YAAmB,WAAgC,EAAE,QAAwB,EAAE,OAAsB,EAAE,4BAAsC;QACzI,KAAK,CAAC,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;QACrD,IAAI,CAAC,4BAA4B,GAAG,4BAA4B,CAAC;IACrE,CAAC;IAES,cAAc;QACpB,IAAI,OAAO,GAAG,KAAK,CAAC,cAAc,EAAE,CAAC;QAErC,IAAI,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,4BAA4B,CAAC,EAAE,CAAC;YAChE,OAAO,EAAE,CAAC;QACd,CAAC;QAED,OAAO;eACA,+BAA+B,GAAG,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAEhG,OAAO,OAAO,CAAC;IACnB,CAAC;CACJ","sourcesContent":["import { IRaftCommand } from \"../../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../../Utility/RaftIdGenerator.js\";\r\nimport { DocumentConventions } from \"../../Conventions/DocumentConventions.js\";\r\nimport { ICommandData } from \"../CommandData.js\";\r\nimport { BatchOptions } from \"./BatchOptions.js\";\r\nimport { SingleNodeBatchCommand } from \"./SingleNodeBatchCommand.js\";\r\nimport { TypeUtil } from \"../../../Utility/TypeUtil.js\";\r\n\r\nexport class ClusterWideBatchCommand extends SingleNodeBatchCommand implements IRaftCommand {\r\n\r\n    private readonly _disableAtomicDocumentWrites: boolean;\r\n\r\n    get disableAtomicDocumentWrites() {\r\n        return this._disableAtomicDocumentWrites;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n\r\n    public constructor(conventions: DocumentConventions, commands: ICommandData[], options?: BatchOptions, disableAtomicDocumentsWrites?: boolean) {\r\n        super(conventions, commands, options, \"ClusterWide\");\r\n        this._disableAtomicDocumentWrites = disableAtomicDocumentsWrites;\r\n    }\r\n\r\n    protected _appendOptions(): string {\r\n        let options = super._appendOptions();\r\n\r\n        if (TypeUtil.isNullOrUndefined(this._disableAtomicDocumentWrites)) {\r\n            return \"\";\r\n        }\r\n\r\n        options\r\n            += \"&disableAtomicDocumentWrites=\" + (this._disableAtomicDocumentWrites ? \"true\" : \"false\");\r\n\r\n        return options;\r\n    }\r\n}\r\n"]}