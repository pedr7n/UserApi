import { CommandType, ICommandData } from "../CommandData.js";
import { PatchRequest } from "../../Operations/PatchRequest.js";
import { DocumentConventions } from "../../Conventions/DocumentConventions.js";
export interface IdAndChangeVector {
    id: string;
    changeVector: string;
}
/**
 * Commands that patches multiple documents using same patch script
 * CAUTION: This command does not update session state after .saveChanges() call
 */
export declare class BatchPatchCommandData implements ICommandData {
    private readonly _seenIds;
    private readonly _ids;
    private readonly _name;
    private readonly _patch;
    private readonly _patchIfMissing;
    constructor(patch: PatchRequest, patchIfMissing: PatchRequest, ...ids: string[]);
    constructor(patch: PatchRequest, patchIfMissing: PatchRequest, ...ids: IdAndChangeVector[]);
    private _add;
    get ids(): IdAndChangeVector[];
    get id(): string;
    get name(): string;
    get patch(): PatchRequest;
    patchIfMissing(): PatchRequest;
    get changeVector(): string;
    get type(): CommandType;
    serialize(conventions: DocumentConventions): object;
}
//# sourceMappingURL=BatchPatchCommandData.d.ts.map