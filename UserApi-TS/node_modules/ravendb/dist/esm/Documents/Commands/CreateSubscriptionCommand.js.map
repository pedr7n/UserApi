{"version":3,"file":"CreateSubscriptionCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/CreateSubscriptionCommand.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAO1D,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AACnE,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAEvD,MAAM,OAAO,yBAA0B,SAAQ,YAAsC;IAChE,QAAQ,CAA8B;IACtC,GAAG,CAAS;IAE7B,YAAmB,OAAoC,EAAE,EAAW;QAChE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,EAAE,CAAC;YACX,UAAU,CAAC,0BAA0B,EAAE,wBAAwB,CAAC,CAAC;QACrE,CAAC;QACD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAClB,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC;QAEtE,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACX,GAAG,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9C,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEvD,OAAO;YACH,GAAG;YACH,MAAM,EAAE,KAAK;YACb,IAAI;SACP,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QAChE,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,sBAAsB;QACzB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { CreateSubscriptionResult } from \"../Subscriptions/CreateSubscriptionResult.js\";\r\nimport { SubscriptionCreationOptions } from \"../Subscriptions/SubscriptionCreationOptions.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\n\r\nexport class CreateSubscriptionCommand extends RavenCommand<CreateSubscriptionResult> implements IRaftCommand {\r\n    private readonly _options: SubscriptionCreationOptions;\r\n    private readonly _id: string;\r\n\r\n    public constructor(options: SubscriptionCreationOptions, id?: string) {\r\n        super();\r\n        if (!options) {\r\n            throwError(\"InvalidArgumentException\", \"Options cannot be null\");\r\n        }\r\n        this._options = options;\r\n        this._id = id;\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/databases/\" + node.database + \"/subscriptions\";\r\n\r\n        if (this._id) {\r\n            uri += \"?id=\" + this._urlEncode(this._id);\r\n        }\r\n\r\n        const body = this._serializer.serialize(this._options);\r\n\r\n        return {\r\n            uri,\r\n            method: \"PUT\",\r\n            body\r\n        };\r\n    }\r\n\r\n    public async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public get isReadRequest() {\r\n        return false;\r\n    }\r\n\r\n    public getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}