{"version":3,"file":"HeadAttachmentCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/HeadAttachmentCommand.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAA2B,MAAM,4BAA4B,CAAC;AAGnF,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAEvD,OAAO,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAC;AAEvD,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAC;AAClE,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAE7C,MAAM,OAAO,qBAAsB,SAAQ,YAAoB;IAE1C,WAAW,CAAS;IACpB,KAAK,CAAS;IACd,aAAa,CAAS;IAEvC,IAAW,aAAa;QACpB,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,YAAmB,UAAkB,EAAE,IAAY,EAAE,YAAoB;QACrE,KAAK,EAAE,CAAC;QAER,IAAI,UAAU,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE,CAAC;YAC5C,UAAU,CAAC,0BAA0B,EAAE,oCAAoC,CAAC,CAAC;QACjF,CAAC;QAED,IAAI,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC;YACtC,UAAU,CAAC,0BAA0B,EAAE,8BAA8B,CAAC,CAAC;QAC3E,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IACjC,CAAC;IAEM,aAAa,CAAC,IAAgB;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG;cACd,aAAa,GAAG,IAAI,CAAC,QAAQ;cAC7B,kBAAkB,GAAG,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC;cACzD,QAAQ,GAAG,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEhD,MAAM,GAAG,GAA0B;YAC/B,MAAM,EAAE,MAAM;YACd,GAAG;SACN,CAAC;QAEF,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC;QACnE,CAAC;QAED,OAAO,GAAG,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,eAAe,CACxB,KAAgB,EAChB,QAAsB,EACtB,UAAoB,EACpB,GAAW;QACX,IAAI,QAAQ,CAAC,MAAM,KAAK,WAAW,CAAC,WAAW,EAAE,CAAC;YAC9C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;YACjC,OAAO,WAAW,CAAC;QACvB,CAAC;QAED,IAAI,QAAQ,CAAC,MAAM,KAAK,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,OAAO,WAAW,CAAC;QACvB,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAC9C,OAAO,WAAW,CAAC;IACvB,CAAC;CACJ","sourcesContent":["import { RavenCommand, ResponseDisposeHandling } from \"../../Http/RavenCommand.js\";\r\nimport { HttpCache } from \"../../Http/HttpCache.js\";\r\nimport { HttpRequestParameters, HttpResponse } from \"../../Primitives/Http.js\";\r\nimport { StringUtil } from \"../../Utility/StringUtil.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { StatusCodes } from \"../../Http/StatusCode.js\";\r\nimport { Readable } from \"node:stream\";\r\nimport { getRequiredEtagHeader } from \"../../Utility/HttpUtil.js\";\r\nimport { HEADERS } from \"../../Constants.js\";\r\n\r\nexport class HeadAttachmentCommand extends RavenCommand<string> {\r\n\r\n    private readonly _documentId: string;\r\n    private readonly _name: string;\r\n    private readonly _changeVector: string;\r\n\r\n    public get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public constructor(documentId: string, name: string, changeVector: string) {\r\n        super();\r\n\r\n        if (StringUtil.isNullOrWhitespace(documentId)) {\r\n            throwError(\"InvalidArgumentException\", \"DocumentId cannot be null or empty\");\r\n        }\r\n\r\n        if (StringUtil.isNullOrWhitespace(name)) {\r\n            throwError(\"InvalidArgumentException\", \"Name cannot be null or empty\");\r\n        }\r\n\r\n        this._documentId = documentId;\r\n        this._name = name;\r\n        this._changeVector = changeVector;\r\n        this._responseType = \"Empty\";\r\n    }\r\n\r\n    public createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url\r\n            + \"/databases/\" + node.database\r\n            + \"/attachments?id=\" + encodeURIComponent(this._documentId)\r\n            + \"&name=\" + encodeURIComponent(this._name);\r\n\r\n        const req: HttpRequestParameters = {\r\n            method: \"HEAD\",\r\n            uri\r\n        };\r\n\r\n        if (this._changeVector) {\r\n            req.headers[HEADERS.IF_NONE_MATCH] = `\"${this._changeVector}\"`;\r\n        }\r\n\r\n        return req;\r\n    }\r\n\r\n    public async processResponse(\r\n        cache: HttpCache,\r\n        response: HttpResponse,\r\n        bodyStream: Readable,\r\n        url: string): Promise<ResponseDisposeHandling> {\r\n        if (response.status === StatusCodes.NotModified) {\r\n            this.result = this._changeVector;\r\n            return \"Automatic\";\r\n        }\r\n\r\n        if (response.status === StatusCodes.NotFound) {\r\n            this.result = null;\r\n            return \"Automatic\";\r\n        }\r\n\r\n        this.result = getRequiredEtagHeader(response);\r\n        return \"Automatic\";\r\n    }\r\n}\r\n"]}