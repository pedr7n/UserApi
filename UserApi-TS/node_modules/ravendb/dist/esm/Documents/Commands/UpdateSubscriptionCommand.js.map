{"version":3,"file":"UpdateSubscriptionCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/UpdateSubscriptionCommand.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAKnE,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAI1D,MAAM,OAAO,yBAA0B,SAAQ,YAAsC;IAChE,QAAQ,CAA4B;IAErD,YAAmB,OAAkC;QACjD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC;QAE/E,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEvD,OAAO;YACH,GAAG;YACH,IAAI;YACJ,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE;YAC9C,MAAM,EAAE,MAAM;SACjB,CAAA;IACL,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,WAAmB;QAC1C,IAAI,CAAC,MAAM,GAAG;YACV,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;SAC3B,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,SAAS,EAAE,CAAC;YACZ,IAAI,CAAC,MAAM,GAAG;gBACV,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;aAC3B,CAAA;YAED,OAAO;QACX,CAAC;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,sBAAsB;QAClB,OAAO,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { RaftIdGenerator } from \"../../Utility/RaftIdGenerator.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\nimport { UpdateSubscriptionResult } from \"../Subscriptions/UpdateSubscriptionResult.js\";\r\nimport { SubscriptionUpdateOptions } from \"../Subscriptions/SubscriptionUpdateOptions.js\";\r\nimport { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { IRaftCommand } from \"../../Http/IRaftCommand.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\n\r\nexport class UpdateSubscriptionCommand extends RavenCommand<UpdateSubscriptionResult> implements IRaftCommand {\r\n    private readonly _options: SubscriptionUpdateOptions;\r\n\r\n    public constructor(options: SubscriptionUpdateOptions) {\r\n        super();\r\n\r\n        this._options = options;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        const uri = node.url + \"/databases/\" + node.database + \"/subscriptions/update\";\r\n\r\n        const body = this._serializer.serialize(this._options);\r\n\r\n        return {\r\n            uri,\r\n            body,\r\n            headers: this._headers().typeAppJson().build(),\r\n            method: \"POST\"\r\n        }\r\n    }\r\n\r\n    async setResponseFromCache(cachedValue: string): Promise<void> {\r\n        this.result = {\r\n            name: this._options.name\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (fromCache) {\r\n            this.result = {\r\n                name: this._options.name\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getRaftUniqueRequestId(): string {\r\n        return RaftIdGenerator.newId();\r\n    }\r\n}\r\n"]}