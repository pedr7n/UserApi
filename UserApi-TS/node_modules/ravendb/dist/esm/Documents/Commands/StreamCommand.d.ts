import { Readable } from "node:stream";
import { RavenCommand, ResponseDisposeHandling } from "../../Http/RavenCommand.js";
import { StreamResultResponse } from "./StreamResultResponse.js";
import { ServerNode } from "../../Http/ServerNode.js";
import { HttpRequestParameters, HttpResponse } from "../../Primitives/Http.js";
import { HttpCache } from "../../Http/HttpCache.js";
export declare class StreamCommand extends RavenCommand<StreamResultResponse> {
    private readonly _url;
    constructor(url: string);
    createRequest(node: ServerNode): HttpRequestParameters;
    processResponse(cache: HttpCache, response: HttpResponse, bodyStream: Readable, url: string): Promise<ResponseDisposeHandling>;
    get isReadRequest(): boolean;
}
//# sourceMappingURL=StreamCommand.d.ts.map