{"version":3,"file":"GetTcpInfoForRemoteTaskCommand.js","sourceRoot":"","sources":["../../../../src/Documents/Commands/GetTcpInfoForRemoteTaskCommand.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAE1D,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAKvD,MAAM,OAAO,8BAA+B,SAAQ,YAA+B;IAC9D,eAAe,CAAS;IACxB,WAAW,CAAS;IACpB,IAAI,CAAS;IACtB,eAAe,CAAU;IACzB,cAAc,CAAa;IAEnC,YAAmB,GAAW,EAAE,cAAsB,EAAE,UAAkB,EAAE,iBAA0B,KAAK;QACvG,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,cAAc,EAAE,CAAC;YAClB,UAAU,CAAC,0BAA0B,EAAE,+BAA+B,CAAC,CAAC;QAC5E,CAAC;QAED,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QAEtC,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,UAAU,CAAC,0BAA0B,EAAE,2BAA2B,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,aAAa,CAAC,IAAgB;QAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,wBAAwB;YACzC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC;YACnD,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC;YACnD,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,GAAG,IAAI,uBAAuB,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAE3B,OAAO;YACH,MAAM,EAAE,KAAK;YACb,GAAG;SACN,CAAA;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,SAAkB;QACzD,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAEM,gBAAgB;QACnB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED,IAAI,aAAa;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ","sourcesContent":["import { RavenCommand } from \"../../Http/RavenCommand.js\";\r\nimport { TcpConnectionInfo } from \"../../ServerWide/Commands/GetTcpInfoCommand.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { ServerNode } from \"../../Http/ServerNode.js\";\r\nimport { HttpRequestParameters } from \"../../Primitives/Http.js\";\r\nimport { Stream } from \"node:stream\";\r\n\r\nexport class GetTcpInfoForRemoteTaskCommand extends RavenCommand<TcpConnectionInfo> {\r\n    private readonly _remoteDatabase: string;\r\n    private readonly _remoteTask: string;\r\n    private readonly _tag: string;\r\n    private _verifyDatabase: boolean;\r\n    private _requestedNode: ServerNode;\r\n\r\n    public constructor(tag: string, remoteDatabase: string, remoteTask: string, verifyDatabase: boolean = false) {\r\n        super();\r\n\r\n        if (!remoteDatabase) {\r\n            throwError(\"InvalidArgumentException\", \"RemoteDatabase cannot be null\");\r\n        }\r\n\r\n        this._remoteDatabase = remoteDatabase;\r\n\r\n        if (!remoteTask) {\r\n            throwError(\"InvalidArgumentException\", \"RemoteTask cannot be null\");\r\n        }\r\n\r\n        this._remoteTask = remoteTask;\r\n        this._tag = tag;\r\n        this._verifyDatabase = verifyDatabase;\r\n        this.timeout = 15_000;\r\n    }\r\n\r\n    createRequest(node: ServerNode): HttpRequestParameters {\r\n        let uri = node.url + \"/info/remote-task/tcp?\" +\r\n            \"database=\" + this._urlEncode(this._remoteDatabase) +\r\n            \"&remote-task=\" + this._urlEncode(this._remoteTask) +\r\n            \"&tag=\" + this._urlEncode(this._tag);\r\n\r\n        if (this._verifyDatabase) {\r\n            uri += \"&verify-database=true\";\r\n        }\r\n\r\n        this._requestedNode = node;\r\n\r\n        return {\r\n            method: \"GET\",\r\n            uri\r\n        }\r\n    }\r\n\r\n    async setResponseAsync(bodyStream: Stream, fromCache: boolean): Promise<string> {\r\n        if (!bodyStream) {\r\n            this._throwInvalidResponse();\r\n        }\r\n\r\n        return this._parseResponseDefaultAsync(bodyStream);\r\n    }\r\n\r\n    public getRequestedNode() {\r\n        return this._requestedNode;\r\n    }\r\n\r\n    get isReadRequest(): boolean {\r\n        return false;\r\n    }\r\n}\r\n"]}