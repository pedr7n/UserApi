{"version":3,"file":"BulkInsertConventions.js","sourceRoot":"","sources":["../../../../src/Documents/Conventions/BulkInsertConventions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAEvD,MAAM,OAAO,qBAAqB;IACb,UAAU,CAAa;IAChC,oBAAoB,CAAS;IAErC,YAAY,SAAqB;QAC7B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAED,IAAW,mBAAmB;QAC1B,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAED,IAAW,mBAAmB,CAAC,SAAiB;QAC5C,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,IAAI,SAAS,IAAI,CAAC,EAAE,CAAC;YACjB,UAAU,CAAC,0BAA0B,EAAE,4BAA4B,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;IAC1C,CAAC;CACJ","sourcesContent":["import { throwError } from \"../../Exceptions/index.js\";\r\n\r\nexport class BulkInsertConventions {\r\n    private readonly _notFrozen: () => void;\r\n    private _timeSeriesBatchSize: number;\r\n\r\n    constructor(notFrozen: () => void) {\r\n        this._timeSeriesBatchSize = 1024;\r\n        this._notFrozen = notFrozen;\r\n    }\r\n\r\n    public get timeSeriesBatchSize() {\r\n        return this._timeSeriesBatchSize;\r\n    }\r\n\r\n    public set timeSeriesBatchSize(batchSize: number) {\r\n        this._notFrozen();\r\n\r\n        if (batchSize <= 0) {\r\n            throwError(\"InvalidArgumentException\", \"BatchSize must be positive\");\r\n        }\r\n\r\n        this._timeSeriesBatchSize = batchSize;\r\n    }\r\n}"]}