{"version":3,"file":"DocumentConventions.js","sourceRoot":"","sources":["../../../../src/Documents/Conventions/DocumentConventions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ITypesAwareObjectMapper, TypesAwareObjectMapper } from \"../../Mapping/ObjectMapper.js\";\r\nimport {\r\n    DocumentType,\r\n} from \"../DocumentAbstractions.js\";\r\nimport {\r\n    ObjectTypeDescriptor,\r\n    ObjectLiteralDescriptor,\r\n    ClassConstructor, EntityConstructor, Field\r\n} from \"../../Types/index.js\";\r\nimport { ClientConfiguration } from \"../Operations/Configuration/ClientConfiguration.js\";\r\nimport { ReadBalanceBehavior } from \"../../Http/ReadBalanceBehavior.js\";\r\nimport { throwError } from \"../../Exceptions/index.js\";\r\nimport { CONSTANTS } from \"../../Constants.js\";\r\nimport { TypeUtil } from \"../../Utility/TypeUtil.js\";\r\nimport { DateUtil, DateUtilOpts } from \"../../Utility/DateUtil.js\";\r\nimport { ObjectUtil, FieldNameConversion } from \"../../Utility/ObjectUtil.js\";\r\nimport { LoadBalanceBehavior } from \"../../Http/LoadBalanceBehavior.js\";\r\nimport { BulkInsertConventions } from \"./BulkInsertConventions.js\";\r\nimport { InMemoryDocumentSessionOperations } from \"../Session/InMemoryDocumentSessionOperations.js\";\r\nimport { ShardingConventions } from \"./ShardingConventions.js\";\r\nimport { plural } from \"../../ext/pluralize/pluralize.js\";\r\nimport { HttpCompressionAlgorithm } from \"../../Http/HttpCompressionAlgorithm.js\";\r\n\r\nexport type IdConvention = (databaseName: string, entity: object) => Promise<string>;\r\nexport type IValueForQueryConverter<T> =\r\n    (fieldName: Field<T>, value: T, forRange: boolean, stringValue: (value: any) => void) => boolean;\r\n\r\nfunction createServerDefaults() {\r\n    const conventions = new DocumentConventions();\r\n    conventions.sendApplicationIdentifier = false;\r\n    conventions.freeze();\r\n    return conventions;\r\n}\r\n\r\nexport class DocumentConventions {\r\n\r\n    private static _defaults: DocumentConventions = new DocumentConventions();\r\n    public static defaultForServerConventions: DocumentConventions;\r\n\r\n    public static get defaultConventions() {\r\n        return this._defaults;\r\n    }\r\n\r\n    private static _cachedDefaultTypeCollectionNames: Map<ObjectTypeDescriptor, string> = new Map();\r\n\r\n    private readonly _listOfQueryValueToObjectConverters:\r\n        { Type: EntityConstructor<any>; Converter: IValueForQueryConverter<any> }[] = [];\r\n\r\n    private _registeredIdConventions:\r\n        Map<ObjectTypeDescriptor, IdConvention> = new Map();\r\n\r\n    private _registeredIdPropertyNames:\r\n        Map<ObjectTypeDescriptor, string> = new Map();\r\n\r\n    private _frozen: boolean;\r\n    private _originalConfiguration: ClientConfiguration;\r\n    private _identityPartsSeparator: string;\r\n    private _disableTopologyUpdates: boolean;\r\n\r\n    private _disableAtomicDocumentWritesInClusterWideTransaction: boolean;\r\n\r\n    private _disableTcpCompression = true; // not yet supported\r\n\r\n    private _shouldIgnoreEntityChanges: (sessionOperations: InMemoryDocumentSessionOperations, entity: object, documentId: string) => boolean;\r\n\r\n    private _transformClassCollectionNameToDocumentIdPrefix: (maybeClassCollectionName: string) => string;\r\n    private _documentIdGenerator: IdConvention;\r\n\r\n    private _loadBalancerPerSessionContextSelector: (databaseName: string) => string;\r\n\r\n    private _findCollectionName: (constructorOrTypeChecker: ObjectTypeDescriptor) => string;\r\n\r\n    private _identityProperty: string;\r\n\r\n    private _findJsTypeName: (ctorOrTypeChecker: ObjectTypeDescriptor) => string;\r\n    private _findJsType: (id: string, doc: object) => ObjectTypeDescriptor;\r\n\r\n    private _useOptimisticConcurrency: boolean;\r\n    private _maxNumberOfRequestsPerSession: number;\r\n\r\n    private _requestTimeout: number | undefined;\r\n    private _firstBroadcastAttemptTimeout: number | undefined;\r\n    private _secondBroadcastAttemptTimeout: number | undefined;\r\n    private _waitForIndexesAfterSaveChangesTimeout: number | undefined;\r\n    private _waitForReplicationAfterSaveChangesTimeout: number | undefined;\r\n    private _waitForNonStaleResultsTimeout: number | undefined;\r\n\r\n    private _loadBalancerContextSeed: number;\r\n    private _loadBalanceBehavior: LoadBalanceBehavior;\r\n    private _readBalanceBehavior: ReadBalanceBehavior;\r\n    private _maxHttpCacheSize: number;\r\n\r\n    private readonly _knownEntityTypes: Map<string, ObjectTypeDescriptor>;\r\n\r\n    private _localToServerFieldNameConverter?: FieldNameConversion;\r\n    private _serverToLocalFieldNameConverter?: FieldNameConversion;\r\n\r\n    private _objectMapper: ITypesAwareObjectMapper;\r\n    private _customFetch: any;\r\n    private _dateUtil: DateUtil;\r\n\r\n    private _useHttpDecompression: boolean | null = null;\r\n    private _httpCompressionAlgorithm: HttpCompressionAlgorithm = \"Gzip\";\r\n\r\n    private _sendApplicationIdentifier: boolean;\r\n\r\n    private readonly _bulkInsert: BulkInsertConventions;\r\n\r\n    public get bulkInsert() {\r\n        return this._bulkInsert;\r\n    }\r\n\r\n    private readonly _sharding: ShardingConventions;\r\n\r\n    public get sharding() {\r\n        return this._sharding;\r\n    }\r\n\r\n    private _returnPlainJsObjects: boolean = false;\r\n\r\n    /**\r\n     * Gets whether all values returned from API will be plain objects (not class instances).\r\n     * This is useful for environments like Next.js that require serializable results.\r\n     */\r\n    public get returnPlainJsObjects(): boolean {\r\n        return this._returnPlainJsObjects;\r\n    }\r\n\r\n    /**\r\n     * Sets whether all values returned from API will be plain objects (not class instances).\r\n     * This is useful for environments like Next.js that require serializable results.\r\n     */\r\n    public set returnPlainJsObjects(value: boolean) {\r\n        this._assertNotFrozen();\r\n        this._returnPlainJsObjects = value;\r\n    }\r\n\r\n    public constructor() {\r\n        this._readBalanceBehavior = \"None\";\r\n        this._identityPartsSeparator = \"/\";\r\n        this._identityProperty = CONSTANTS.Documents.Metadata.ID_PROPERTY;\r\n\r\n        this._findJsType = (id: string, doc: object) => {\r\n            const metadata = doc[CONSTANTS.Documents.Metadata.KEY];\r\n            if (metadata) {\r\n                const jsType = metadata[CONSTANTS.Documents.Metadata.RAVEN_JS_TYPE] as string;\r\n                return this.getJsTypeByDocumentType(jsType);\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        this._findJsTypeName = (ctorOrTypeChecker: ObjectTypeDescriptor) => {\r\n            if (!ctorOrTypeChecker) {\r\n                return null;\r\n            }\r\n\r\n            const name = (ctorOrTypeChecker as ClassConstructor).name;\r\n            if (name === \"Object\") {\r\n                return null;\r\n            }\r\n\r\n            return name;\r\n        };\r\n\r\n        this._transformClassCollectionNameToDocumentIdPrefix =\r\n            collectionName => DocumentConventions.defaultTransformCollectionNameToDocumentIdPrefix(collectionName);\r\n\r\n        this._findCollectionName = type => DocumentConventions.defaultGetCollectionName(type);\r\n\r\n        this._maxNumberOfRequestsPerSession = 30;\r\n        this._bulkInsert = new BulkInsertConventions(() => this._assertNotFrozen());\r\n        this._sharding = new ShardingConventions(this);\r\n        this._maxHttpCacheSize = 128 * 1024 * 1024;\r\n\r\n        this._knownEntityTypes = new Map();\r\n        this._objectMapper = new TypesAwareObjectMapper({\r\n            documentConventions: this\r\n        });\r\n\r\n        this._dateUtilOpts = {};\r\n        this._dateUtil = new DateUtil(this._dateUtilOpts);\r\n\r\n        this._firstBroadcastAttemptTimeout = 5_000;\r\n        this._secondBroadcastAttemptTimeout = 30_000;\r\n\r\n        this._waitForIndexesAfterSaveChangesTimeout = 15_000;\r\n        this._waitForReplicationAfterSaveChangesTimeout = 15_000;\r\n        this._waitForNonStaleResultsTimeout = 15_000;\r\n\r\n        this._sendApplicationIdentifier = true;\r\n    }\r\n\r\n    public get requestTimeout() {\r\n        return this._requestTimeout;\r\n    }\r\n\r\n    public set requestTimeout(requestTimeout: number) {\r\n        this._assertNotFrozen();\r\n        this._requestTimeout = requestTimeout;\r\n    }\r\n\r\n    /**\r\n     * Enables sending a unique application identifier to the RavenDB Server that is used for Client API usage tracking.\r\n     * It allows RavenDB Server to issue performance hint notifications e.g. during robust topology update requests which could indicate Client API misuse impacting the overall performance\r\n     * @return if option is enabled\r\n     */\r\n    public get sendApplicationIdentifier() {\r\n        return this._sendApplicationIdentifier;\r\n    }\r\n\r\n    /**\r\n     * Enables sending a unique application identifier to the RavenDB Server that is used for Client API usage tracking.\r\n     * It allows RavenDB Server to issue performance hint notifications e.g. during robust topology update requests which could indicate Client API misuse impacting the overall performance\r\n     * @param sendApplicationIdentifier if option should be enabled\r\n     */\r\n    public set sendApplicationIdentifier(sendApplicationIdentifier: boolean) {\r\n        this._assertNotFrozen();\r\n        this._sendApplicationIdentifier = sendApplicationIdentifier;\r\n    }\r\n\r\n    /**\r\n     * Get the timeout for the second broadcast attempt.\r\n     * Default: 30 seconds\r\n     *\r\n     * Upon failure of the first attempt the request executor will resend the command to all nodes simultaneously.\r\n     * @return broadcast timeout\r\n     */\r\n    public get secondBroadcastAttemptTimeout() {\r\n        return this._secondBroadcastAttemptTimeout;\r\n    }\r\n\r\n    /**\r\n     * Set the timeout for the second broadcast attempt.\r\n     * Default: 30 seconds\r\n     *\r\n     * Upon failure of the first attempt the request executor will resend the command to all nodes simultaneously.\r\n     *\r\n     * @param secondBroadcastAttemptTimeout broadcast timeout\r\n     */\r\n    public set secondBroadcastAttemptTimeout(secondBroadcastAttemptTimeout: number) {\r\n        this._assertNotFrozen();\r\n        this._secondBroadcastAttemptTimeout = secondBroadcastAttemptTimeout;\r\n    }\r\n\r\n    /**\r\n     * Get the timeout for the first broadcast attempt.\r\n     * Default: 5 seconds\r\n     *\r\n     * First attempt will send a single request to a selected node.\r\n     * @return broadcast timeout\r\n     */\r\n    public get firstBroadcastAttemptTimeout() {\r\n        return this._firstBroadcastAttemptTimeout;\r\n    }\r\n\r\n    /**\r\n     * Set the timeout for the first broadcast attempt.\r\n     * Default: 5 seconds\r\n     *\r\n     * First attempt will send a single request to a selected node.\r\n     *\r\n     * @param firstBroadcastAttemptTimeout broadcast timeout\r\n     */\r\n    public set firstBroadcastAttemptTimeout(firstBroadcastAttemptTimeout: number) {\r\n        this._assertNotFrozen();\r\n        this._firstBroadcastAttemptTimeout = firstBroadcastAttemptTimeout;\r\n    }\r\n\r\n    public get objectMapper(): ITypesAwareObjectMapper {\r\n        return this._objectMapper;\r\n    }\r\n\r\n    public set objectMapper(value: ITypesAwareObjectMapper) {\r\n        this._assertNotFrozen();\r\n        this._objectMapper = value;\r\n    }\r\n\r\n    public get customFetch(): any {\r\n        return this._customFetch;\r\n    }\r\n\r\n    /**\r\n     * Allows to override default fetch method\r\n     *\r\n     * This method is useful to enable RavenDB node.js client\r\n     * on CloudFlare Workers\r\n     *\r\n     * You should pass object bound to worker with type: mtls_certificate\r\n     *\r\n     * @param customFetch\r\n     */\r\n    public set customFetch(customFetch: any) {\r\n        this._assertNotFrozen();\r\n        this._customFetch = customFetch;\r\n    }\r\n\r\n    public get dateUtil(): DateUtil {\r\n        return this._dateUtil;\r\n    }\r\n\r\n    public set dateUtil(value: DateUtil) {\r\n        this._assertNotFrozen();\r\n        this._dateUtil = value;\r\n    }\r\n\r\n    public get readBalanceBehavior(): ReadBalanceBehavior {\r\n        return this._readBalanceBehavior;\r\n    }\r\n\r\n    public set readBalanceBehavior(value: ReadBalanceBehavior) {\r\n        this._assertNotFrozen();\r\n        this._readBalanceBehavior = value;\r\n    }\r\n\r\n    public get loadBalancerContextSeed() {\r\n        return this._loadBalancerContextSeed;\r\n    }\r\n\r\n    public set loadBalancerContextSeed(seed: number) {\r\n        this._assertNotFrozen();\r\n        this._loadBalancerContextSeed = seed;\r\n    }\r\n\r\n    public get isDisableTcpCompression() {\r\n        return this._disableTcpCompression;\r\n    }\r\n\r\n    /**\r\n     * We have to make this check so if admin activated this, but client code did not provide the selector,\r\n     * it is still disabled. Relevant if we have multiple clients / versions at once.\r\n     */\r\n    public get loadBalanceBehavior() {\r\n        return this._loadBalanceBehavior;\r\n    }\r\n\r\n    public set loadBalanceBehavior(loadBalanceBehavior: LoadBalanceBehavior) {\r\n        this._assertNotFrozen();\r\n        this._loadBalanceBehavior = loadBalanceBehavior;\r\n    }\r\n\r\n    /**\r\n     * Gets the function that allow to specialize the topology\r\n     * selection for a particular session. Used in load balancing\r\n     * scenarios\r\n     */\r\n    public get loadBalancerPerSessionContextSelector(): (databaseName: string) => string {\r\n        return this._loadBalancerPerSessionContextSelector;\r\n    }\r\n\r\n    /**\r\n     * Sets the function that allow to specialize the topology\r\n     * selection for a particular session. Used in load balancing\r\n     * scenarios\r\n     * @param selector selector to use\r\n     */\r\n    public set loadBalancerPerSessionContextSelector(selector: (databaseName: string) => string) {\r\n        this._loadBalancerPerSessionContextSelector = selector;\r\n    }\r\n\r\n    /**\r\n     * Optional field name casing converter\r\n     * This one is applied on local object before sending request to server\r\n     */\r\n    public get localToServerFieldNameConverter() {\r\n        return this._localToServerFieldNameConverter;\r\n    }\r\n\r\n    /**\r\n     * Optional field name casing converter\r\n     * This one is applied on local object before sending request to server\r\n     */\r\n    public set localToServerFieldNameConverter(converter: FieldNameConversion) {\r\n        this._assertNotFrozen();\r\n        this._localToServerFieldNameConverter = converter;\r\n    }\r\n\r\n    /**\r\n     * Optional field name casing converter\r\n     * This one is applied on server object before returning result to the user\r\n     */\r\n    public get serverToLocalFieldNameConverter() {\r\n        return this._serverToLocalFieldNameConverter;\r\n    }\r\n\r\n    /**\r\n     * Optional field name casing converter\r\n     * This one is applied on server object before returning result to the user\r\n     */\r\n    public set serverToLocalFieldNameConverter(converter: FieldNameConversion) {\r\n        this._assertNotFrozen();\r\n        this._serverToLocalFieldNameConverter = converter;\r\n    }\r\n\r\n    public set useOptimisticConcurrency(val: boolean) {\r\n        this._assertNotFrozen();\r\n        this._useOptimisticConcurrency = val;\r\n    }\r\n\r\n    public get useOptimisticConcurrency() {\r\n        return this._useOptimisticConcurrency;\r\n    }\r\n\r\n    public deserializeEntityFromJson(documentType: ObjectTypeDescriptor, document: object): object {\r\n        try {\r\n            const typeName = documentType ? documentType.name : null;\r\n            return this.objectMapper.fromObjectLiteral(document, { typeName });\r\n        } catch (err) {\r\n            throwError(\"RavenException\", \"Cannot deserialize entity\", err);\r\n        }\r\n    }\r\n\r\n    public get maxNumberOfRequestsPerSession(): number {\r\n        return this._maxNumberOfRequestsPerSession;\r\n    }\r\n\r\n    public set maxNumberOfRequestsPerSession(value: number) {\r\n        this._maxNumberOfRequestsPerSession = value;\r\n    }\r\n\r\n    public get maxHttpCacheSize(): number {\r\n        return this._maxHttpCacheSize;\r\n    }\r\n\r\n    public set maxHttpCacheSize(value: number) {\r\n        this._assertNotFrozen();\r\n        this._maxHttpCacheSize = value;\r\n    }\r\n\r\n    public get waitForIndexesAfterSaveChangesTimeout() {\r\n        return this._waitForIndexesAfterSaveChangesTimeout;\r\n    }\r\n\r\n    public set waitForIndexesAfterSaveChangesTimeout(value: number) {\r\n        this._assertNotFrozen();\r\n        this._waitForIndexesAfterSaveChangesTimeout = value;\r\n    }\r\n\r\n    public get waitForNonStaleResultsTimeout() {\r\n        return this._waitForNonStaleResultsTimeout;\r\n    }\r\n\r\n    public set waitForNonStaleResultsTimeout(value: number) {\r\n        this._assertNotFrozen();\r\n        this._waitForNonStaleResultsTimeout = value;\r\n    }\r\n\r\n    public get waitForReplicationAfterSaveChangesTimeout() {\r\n        return this._waitForReplicationAfterSaveChangesTimeout;\r\n    }\r\n\r\n    public set waitForReplicationAfterSaveChangesTimeout(value: number) {\r\n        this._assertNotFrozen();\r\n        this._waitForReplicationAfterSaveChangesTimeout = value;\r\n    }\r\n\r\n    /**\r\n     * Can accept compressed HTTP response content and will use decompression methods\r\n     */\r\n    public get useHttpDecompression() {\r\n        if (this._useHttpDecompression === null) {\r\n            return true;\r\n        }\r\n        return this._useHttpDecompression;\r\n    }\r\n\r\n    /**\r\n     * Can accept compressed HTTP response content and will use decompression methods\r\n     */\r\n    public set useHttpDecompression(value: boolean) {\r\n        this._assertNotFrozen();\r\n        this._useHttpDecompression = value;\r\n    }\r\n\r\n    public get httpCompressionAlgorithm() {\r\n        return this._httpCompressionAlgorithm;\r\n    }\r\n\r\n    private _dateUtilOpts: DateUtilOpts;\r\n\r\n    public get storeDatesInUtc() {\r\n        return this._dateUtilOpts.useUtcDates;\r\n    }\r\n\r\n    public set storeDatesInUtc(value) {\r\n        this._assertNotFrozen();\r\n        this._dateUtilOpts.useUtcDates = value;\r\n    }\r\n\r\n    public get storeDatesWithTimezoneInfo() {\r\n        return this._dateUtilOpts.withTimezone;\r\n    }\r\n\r\n    public set storeDatesWithTimezoneInfo(value) {\r\n        this._assertNotFrozen();\r\n        this._dateUtilOpts.withTimezone = true;\r\n    }\r\n\r\n    /**\r\n     * Whether UseOptimisticConcurrency is set to true by default for all opened sessions\r\n     */\r\n    public isUseOptimisticConcurrency(): boolean {\r\n        return this._useOptimisticConcurrency;\r\n    }\r\n\r\n    /**\r\n     * Whether UseOptimisticConcurrency is set to true by default for all opened sessions\r\n     */\r\n    public setUseOptimisticConcurrency(useOptimisticConcurrency: boolean): void {\r\n        this._assertNotFrozen();\r\n        this._useOptimisticConcurrency = useOptimisticConcurrency;\r\n    }\r\n\r\n    public get identityProperty() {\r\n        return this._identityProperty;\r\n    }\r\n\r\n    public set identityProperty(val) {\r\n        this._assertNotFrozen();\r\n        this._identityProperty = val;\r\n    }\r\n\r\n    public get findJsType() {\r\n        return this._findJsType;\r\n    }\r\n\r\n    public set findJsType(value) {\r\n        this._assertNotFrozen();\r\n        this._findJsType = value;\r\n    }\r\n\r\n    public get findJsTypeName() {\r\n        return this._findJsTypeName;\r\n    }\r\n\r\n    public set findJsTypeName(value) {\r\n        this._assertNotFrozen();\r\n        this._findJsTypeName = value;\r\n    }\r\n\r\n    public get findCollectionName() {\r\n        return this._findCollectionName;\r\n    }\r\n\r\n    public set findCollectionName(value) {\r\n        this._assertNotFrozen();\r\n        this._findCollectionName = value;\r\n    }\r\n\r\n    public get documentIdGenerator() {\r\n        return this._documentIdGenerator;\r\n    }\r\n\r\n    public set documentIdGenerator(value) {\r\n        this._assertNotFrozen();\r\n        this._documentIdGenerator = value;\r\n    }\r\n\r\n    public get identityPartsSeparator(): string {\r\n        return this._identityPartsSeparator;\r\n    }\r\n\r\n    public set identityPartsSeparator(value: string) {\r\n        this._assertNotFrozen();\r\n\r\n        if (this.identityPartsSeparator === \"|\") {\r\n            throwError(\"InvalidArgumentException\", \"Cannot set identity parts separator to '|'\");\r\n        }\r\n\r\n        this._identityPartsSeparator = value;\r\n    }\r\n\r\n    public get shouldIgnoreEntityChanges() {\r\n        return this._shouldIgnoreEntityChanges;\r\n    }\r\n\r\n    public set shouldIgnoreEntityChanges(\r\n        shouldIgnoreEntityChanges: (sessionOperations: InMemoryDocumentSessionOperations, entity: object, documentId: string) => boolean) {\r\n        this._assertNotFrozen();\r\n        this._shouldIgnoreEntityChanges = shouldIgnoreEntityChanges;\r\n    }\r\n\r\n    public get disableTopologyUpdates(): boolean {\r\n        return this._disableTopologyUpdates;\r\n    }\r\n\r\n    public set disableTopologyUpdates(value: boolean) {\r\n        this._assertNotFrozen();\r\n        this._disableTopologyUpdates = value;\r\n    }\r\n\r\n    public get transformClassCollectionNameToDocumentIdPrefix() {\r\n        return this._transformClassCollectionNameToDocumentIdPrefix;\r\n    }\r\n\r\n    public set transformClassCollectionNameToDocumentIdPrefix(value) {\r\n        this._assertNotFrozen();\r\n        this._transformClassCollectionNameToDocumentIdPrefix = value;\r\n    }\r\n\r\n    /**\r\n     *  Default method used when finding a collection name for a type\r\n     */\r\n    public static defaultGetCollectionName(ctorOrTypeChecker: ObjectTypeDescriptor): string {\r\n        if (!ctorOrTypeChecker) {\r\n            return null;\r\n        }\r\n\r\n        if (!TypeUtil.isObjectTypeDescriptor(ctorOrTypeChecker)) {\r\n            throwError(\"InvalidArgumentException\", \"Invalid class argument.\");\r\n        }\r\n\r\n        if (!ctorOrTypeChecker.name) {\r\n            throwError(\"InvalidArgumentException\", \"Type name cannot be null or undefined.\");\r\n        }\r\n\r\n        let result = this._cachedDefaultTypeCollectionNames.get(ctorOrTypeChecker);\r\n        if (result) {\r\n            return result;\r\n        }\r\n\r\n        if (typeof (ctorOrTypeChecker) === \"string\") {\r\n            result = plural(ctorOrTypeChecker);\r\n        } else {\r\n            result = plural(ctorOrTypeChecker.name);\r\n        }\r\n\r\n        this._cachedDefaultTypeCollectionNames.set(ctorOrTypeChecker, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the collection name for a given type.\r\n     */\r\n    public getCollectionNameForType(ctorOrTypeChecker: ObjectTypeDescriptor): string {\r\n        const collectionName: string = this._findCollectionName(ctorOrTypeChecker);\r\n        return collectionName || DocumentConventions.defaultGetCollectionName(ctorOrTypeChecker);\r\n    }\r\n\r\n    /**\r\n     * Gets the collection name for a given type.\r\n     */\r\n    public getCollectionNameForEntity(entity: object): string {\r\n        if (!entity) {\r\n            return null;\r\n        }\r\n\r\n        const typeDescriptor = this.getEntityTypeDescriptor(entity);\r\n        if (typeDescriptor) {\r\n            return this.getCollectionNameForType(typeDescriptor);\r\n        }\r\n\r\n        if (this._findCollectionNameForObjectLiteral && entity.constructor === Object) {\r\n            return this._findCollectionNameForObjectLiteral(entity);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _findCollectionNameForObjectLiteral: (entity: object) => string;\r\n\r\n    public get findCollectionNameForObjectLiteral() {\r\n        return this._findCollectionNameForObjectLiteral;\r\n    }\r\n\r\n    public set findCollectionNameForObjectLiteral(value: (entity: object) => string) {\r\n        this._findCollectionNameForObjectLiteral = value;\r\n    }\r\n\r\n    public getTypeDescriptorByEntity<T extends object>(entity: T): ObjectTypeDescriptor<T> {\r\n        return this.getEntityTypeDescriptor(entity);\r\n    }\r\n\r\n    public getEntityTypeDescriptor<T extends object>(entity: T): ObjectTypeDescriptor<T> {\r\n        if (TypeUtil.isClass(entity.constructor)) {\r\n            return entity.constructor as ClassConstructor<T>;\r\n        }\r\n\r\n        for (const entityType of this._knownEntityTypes.values()) {\r\n            if (!TypeUtil.isObjectLiteralTypeDescriptor(entityType)) {\r\n                continue;\r\n            }\r\n\r\n            if ((entityType as ObjectLiteralDescriptor<T>).isType(entity)) {\r\n                return entityType as ObjectLiteralDescriptor<T>;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Generates the document id.\r\n     */\r\n    public generateDocumentId(database: string, entity: object): Promise<string> {\r\n        for (const [typeDescriptor, idConvention] of this._registeredIdConventions) {\r\n            if (TypeUtil.isType(entity, typeDescriptor)) {\r\n                return Promise.resolve(idConvention(database, entity));\r\n            }\r\n        }\r\n\r\n        return this._documentIdGenerator(database, entity);\r\n    }\r\n\r\n    /**\r\n     * Register an id convention for a single type.\r\n     * Note that you can still fall back to the DocumentIdGenerator if you want.\r\n     */\r\n    public registerIdConvention<TEntity>(\r\n        ctorOrTypeChecker: ObjectTypeDescriptor,\r\n        idConvention: IdConvention): DocumentConventions {\r\n        this._assertNotFrozen();\r\n\r\n        this._registeredIdConventions.set(ctorOrTypeChecker, idConvention);\r\n\r\n        return this;\r\n    }\r\n\r\n    public registerEntityIdPropertyName(ctorOrTypeChecker: ObjectTypeDescriptor, idProperty: string) {\r\n        this._registeredIdPropertyNames.set(ctorOrTypeChecker, idProperty);\r\n    }\r\n\r\n    /**\r\n     * Get the java class (if exists) from the document\r\n     */\r\n    public getJsType(id: string, document: object): ObjectTypeDescriptor {\r\n        return this._findJsType(id, document);\r\n    }\r\n\r\n    /**\r\n     * Get the Java class name to be stored in the entity metadata\r\n     */\r\n    public getJsTypeName(entityType: ObjectTypeDescriptor): string {\r\n        return this._findJsTypeName(entityType);\r\n    }\r\n\r\n    /**\r\n     * EXPERT: Disable automatic atomic writes with cluster write transactions. If set to 'true', will only consider explicitly\r\n     * added compare exchange values to validate cluster wide transactions.\r\n     */\r\n    public get disableAtomicDocumentWritesInClusterWideTransaction() {\r\n        return this._disableAtomicDocumentWritesInClusterWideTransaction;\r\n    }\r\n\r\n    /**\r\n     * EXPERT: Disable automatic atomic writes with cluster write transactions. If set to 'true', will only consider explicitly\r\n     * added compare exchange values to validate cluster wide transactions.\r\n     */\r\n    public set disableAtomicDocumentWritesInClusterWideTransaction(disableAtomicDocumentWritesInClusterWideTransaction: boolean) {\r\n        this._assertNotFrozen();\r\n        this._disableAtomicDocumentWritesInClusterWideTransaction = disableAtomicDocumentWritesInClusterWideTransaction;\r\n    }\r\n\r\n    public clone(): DocumentConventions {\r\n        const cloned = new DocumentConventions();\r\n        return Object.assign(cloned, this);\r\n    }\r\n\r\n    /**\r\n     *  Gets the identity property.\r\n     */\r\n    public getIdentityProperty(documentType: DocumentType): string {\r\n        const typeDescriptor = this.getJsTypeByDocumentType(documentType);\r\n        return this._registeredIdPropertyNames.get(typeDescriptor)\r\n            || this._identityProperty;\r\n    }\r\n\r\n    public updateFrom(configuration: ClientConfiguration): void {\r\n        if (!configuration) {\r\n            return;\r\n        }\r\n\r\n        const orig = this._originalConfiguration;\r\n        if (configuration.disabled && !orig) { // nothing to do\r\n            return;\r\n        }\r\n\r\n        if (configuration.disabled && orig) { // need to revert to original values\r\n            this._maxNumberOfRequestsPerSession = orig.maxNumberOfRequestsPerSession ?? this.maxNumberOfRequestsPerSession;\r\n            this._readBalanceBehavior = orig.readBalanceBehavior ?? this._readBalanceBehavior;\r\n            this._identityPartsSeparator = orig.identityPartsSeparator ?? this._identityPartsSeparator;\r\n            this._loadBalanceBehavior = orig.loadBalanceBehavior ?? this._loadBalanceBehavior;\r\n            this._loadBalancerContextSeed = orig.loadBalancerContextSeed ?? this._loadBalancerContextSeed;\r\n\r\n            this._originalConfiguration = null;\r\n            return;\r\n        }\r\n\r\n        if (!this._originalConfiguration) {\r\n            this._originalConfiguration = {\r\n                etag: -1,\r\n                maxNumberOfRequestsPerSession: this._maxNumberOfRequestsPerSession,\r\n                readBalanceBehavior: this._readBalanceBehavior,\r\n                identityPartsSeparator: this._identityPartsSeparator,\r\n                loadBalanceBehavior: this._loadBalanceBehavior,\r\n                loadBalancerContextSeed: this._loadBalancerContextSeed,\r\n                disabled: false\r\n            };\r\n        }\r\n\r\n        this._maxNumberOfRequestsPerSession =\r\n            configuration.maxNumberOfRequestsPerSession\r\n            ?? this._originalConfiguration.maxNumberOfRequestsPerSession\r\n            ?? this._maxNumberOfRequestsPerSession;\r\n\r\n        this._readBalanceBehavior =\r\n            configuration.readBalanceBehavior\r\n            ?? this._originalConfiguration.readBalanceBehavior\r\n            ?? this._readBalanceBehavior;\r\n\r\n        this._loadBalanceBehavior =\r\n            configuration.loadBalanceBehavior\r\n            ?? this._originalConfiguration.loadBalanceBehavior\r\n            ?? this._loadBalanceBehavior;\r\n\r\n        this._loadBalancerContextSeed =\r\n            configuration.loadBalancerContextSeed\r\n            ?? this._originalConfiguration.loadBalancerContextSeed\r\n            ?? this._loadBalancerContextSeed;\r\n\r\n        this._identityPartsSeparator =\r\n            configuration.identityPartsSeparator\r\n            ?? this._originalConfiguration.identityPartsSeparator\r\n            ?? this._identityPartsSeparator;\r\n    }\r\n\r\n    public static defaultTransformCollectionNameToDocumentIdPrefix(collectionName: string): string {\r\n        const upperCaseRegex = /[A-Z]/g;\r\n        const m = collectionName.match(upperCaseRegex);\r\n        const upperCount = m ? m.length : 0;\r\n\r\n        if (upperCount <= 1) {\r\n            return collectionName.toLowerCase();\r\n        }\r\n\r\n        // multiple capital letters, so probably something that we want to preserve caps on.\r\n        return collectionName;\r\n    }\r\n\r\n    public registerQueryValueConverter<T extends object>(type: EntityConstructor<T>,\r\n                                                         converter: IValueForQueryConverter<T>) {\r\n        this._assertNotFrozen();\r\n\r\n        let index: number;\r\n        for (let index = 0; index < this._listOfQueryValueToObjectConverters.length; index++) {\r\n            const entry = this._listOfQueryValueToObjectConverters[index];\r\n            if (type instanceof entry.Type) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        this._listOfQueryValueToObjectConverters.splice(index, 0, {\r\n            Type: type,\r\n            Converter: (fieldName, value, forRange, stringValue) => {\r\n                if (value instanceof type) {\r\n                    return converter(fieldName, value, forRange, stringValue);\r\n                }\r\n                stringValue(null);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    public tryConvertValueToObjectForQuery(fieldName: string, value: any, forRange: boolean, strValue: (value: any) => void) {\r\n        for (const queryValueConverter of this._listOfQueryValueToObjectConverters) {\r\n            if (!(value instanceof queryValueConverter.Type)) {\r\n                continue;\r\n            }\r\n\r\n            return queryValueConverter.Converter(fieldName, value, forRange, strValue);\r\n        }\r\n\r\n        strValue(null);\r\n        return false;\r\n    }\r\n\r\n    public freeze() {\r\n        this._frozen = true;\r\n    }\r\n\r\n    public _assertNotFrozen(): void {\r\n        if (this._frozen) {\r\n            throwError(\"RavenException\",\r\n                \"Conventions has been frozen after documentStore.initialize() and no changes can be applied to them\");\r\n        }\r\n    }\r\n\r\n    public get knownEntityTypesByName() {\r\n        return this._knownEntityTypes;\r\n    }\r\n\r\n    public get knownEntityTypes() {\r\n        return Array.from(this._knownEntityTypes.values());\r\n    }\r\n\r\n    public registerJsType(entityType: ObjectTypeDescriptor): this;\r\n    public registerJsType(entityType: ObjectTypeDescriptor, name: string): this;\r\n    public registerJsType(entityType: ObjectTypeDescriptor, name?: string): this {\r\n        return this.registerEntityType(entityType, name);\r\n    }\r\n\r\n    public registerEntityType(entityType: ObjectTypeDescriptor): this;\r\n    public registerEntityType(entityType: ObjectTypeDescriptor, name: string): this;\r\n    public registerEntityType(entityType: ObjectTypeDescriptor, name?: string): this {\r\n        if (!TypeUtil.isObjectTypeDescriptor(entityType)) {\r\n            throwError(\"InvalidArgumentException\",\r\n                \"Entity type must be a constructor or an object literal descriptor.\");\r\n        }\r\n\r\n        if (name) {\r\n            this._knownEntityTypes.set(name, entityType);\r\n        }\r\n\r\n        this._knownEntityTypes.set(entityType.name, entityType);\r\n        return this;\r\n    }\r\n\r\n    public tryRegisterJsType(docType: DocumentType): this {\r\n        return this.tryRegisterEntityType(docType);\r\n    }\r\n\r\n    public tryRegisterEntityType(docType: DocumentType): this {\r\n        if (TypeUtil.isObjectTypeDescriptor(docType)) {\r\n            this.registerJsType(docType as ObjectTypeDescriptor);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public getJsTypeByDocumentType<T extends object>(documentType: DocumentType<T>): ObjectTypeDescriptor<T>;\r\n    public getJsTypeByDocumentType<T extends object>(typeName: string): ObjectTypeDescriptor<T>;\r\n    public getJsTypeByDocumentType<T extends object>(\r\n        docTypeOrTypeName: string | DocumentType<T>): ObjectTypeDescriptor<T> {\r\n        if (!docTypeOrTypeName) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof(docTypeOrTypeName) === \"string\") {\r\n            return this._knownEntityTypes.get(\r\n                docTypeOrTypeName) as ObjectLiteralDescriptor<T> || null;\r\n        }\r\n\r\n        if (docTypeOrTypeName.name === \"Object\") {\r\n            return null;\r\n        }\r\n\r\n        return docTypeOrTypeName as ObjectTypeDescriptor<T>;\r\n    }\r\n\r\n    public transformObjectKeysToRemoteFieldNameConvention(obj: object) {\r\n        if (!this._localToServerFieldNameConverter) {\r\n            return obj;\r\n        }\r\n\r\n        const options = {\r\n            recursive: true,\r\n            arrayRecursive: true,\r\n            defaultTransform: this._localToServerFieldNameConverter,\r\n            ignorePaths: [\r\n                CONSTANTS.Documents.Metadata.IGNORE_CASE_TRANSFORM_REGEX,\r\n            ]\r\n        };\r\n\r\n        return ObjectUtil.transformObjectKeys(obj, options);\r\n    }\r\n\r\n    public validate() {\r\n        if ((this._localToServerFieldNameConverter && !this._serverToLocalFieldNameConverter)\r\n            || (!this._localToServerFieldNameConverter && this._serverToLocalFieldNameConverter)) {\r\n            throwError(\"ConfigurationException\",\r\n                \"When configuring field name conventions, \"\r\n                + \"one has to configure both localToServer and serverToLocal field name converters.\");\r\n        }\r\n    }\r\n}\r\n\r\nDocumentConventions.defaultForServerConventions = createServerDefaults();\r\nDocumentConventions.defaultConventions.freeze();\r\n"]}